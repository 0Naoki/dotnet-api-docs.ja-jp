<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a136bc8fb48fe619f1be21928afbfcd9094d7463" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30474586" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d99d8-101">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> クラス メンバー (<see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" /> など) による出力に対する MSIL (Microsoft Intermediate Language) 命令のフィールド表現を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d99d8-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-102">メンバー オペコードの詳細については、共通言語基盤 (CLI) ドキュメント、特に「Partition III: CIL Instruction Set」と「Partition II:: Metadata Definition and Semantics」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d99d8-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="d99d8-103">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d99d8-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d99d8-104">次の例では、動的メソッドを使用して、構築<xref:System.Reflection.Emit.ILGenerator>を出力する`OpCodes`に、<xref:System.Reflection.Emit.MethodBuilder>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-105">2 つの値を加算し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-105">Adds two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-106">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-107">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-107">Format</span></span>|<span data-ttu-id="d99d8-108">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-108">Assembly Format</span></span>|<span data-ttu-id="d99d8-109">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-110">58</span><span class="sxs-lookup"><span data-stu-id="d99d8-110">58</span></span>|<span data-ttu-id="d99d8-111">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-111">add</span></span>|<span data-ttu-id="d99d8-112">2 つの数値があり、新しい数値を返すことを追加します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="d99d8-113">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-114">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-115">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-116">`value2` および`value1`スタックからポップされます。`value1`に追加`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-117">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-118">整数演算のオーバーフローが検出されない (適切なオーバーフロー処理では、次を参照してください。 <xref:System.Reflection.Emit.OpCodes.Add_Ovf>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="d99d8-119">整数の加算飽和するのではなく、ラップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="d99d8-120">たとえば、8 ビット整数値を想定して場所`value1`255 に設定されていると`value2`が設定されて、ラップされた結果は 256 ではなく 0 を 1 にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="d99d8-121">浮動小数点オーバーフロー `+inf` (`PositiveInfinity`) または`-inf`(`NegativeInfinity`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="d99d8-122">許容されるオペランドの型と、対応する結果のデータ型は、次の表に一覧表示されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="d99d8-123">特定の型の組み合わせのエントリがないかどうか (たとえば、`int32`と`float`です。`int32`と`int64`) を無効な Microsoft Intermediate Language (MSIL) であり、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="d99d8-124">オペランド</span><span class="sxs-lookup"><span data-stu-id="d99d8-124">operand</span></span>|<span data-ttu-id="d99d8-125">value1 型</span><span class="sxs-lookup"><span data-stu-id="d99d8-125">value1 type</span></span>|<span data-ttu-id="d99d8-126">value2 型</span><span class="sxs-lookup"><span data-stu-id="d99d8-126">value2 type</span></span>|<span data-ttu-id="d99d8-127">結果の型</span><span class="sxs-lookup"><span data-stu-id="d99d8-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="d99d8-128">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="d99d8-129">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="d99d8-130">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="d99d8-131">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="d99d8-132">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="d99d8-133">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="d99d8-134">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="d99d8-135">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="d99d8-136">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="d99d8-137">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="d99d8-138">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="d99d8-139">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="d99d8-140">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="d99d8-141">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="d99d8-142">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`add`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-144">2 つの整数値を加算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-145">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-146">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-146">Format</span></span>|<span data-ttu-id="d99d8-147">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-147">Assembly Format</span></span>|<span data-ttu-id="d99d8-148">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-149">D6</span><span class="sxs-lookup"><span data-stu-id="d99d8-149">D6</span></span>|<span data-ttu-id="d99d8-150">add.ovf</span><span class="sxs-lookup"><span data-stu-id="d99d8-150">add.ovf</span></span>|<span data-ttu-id="d99d8-151">2 つの符号付き整数値、オーバーフロー チェックを追加します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="d99d8-152">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-153">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-154">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-155">`value2` および`value1`スタックからポップされます。`value1`に追加`value2`オーバーフローをチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="d99d8-156">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-157"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-158">符号付き整数で、この操作を実行することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="d99d8-159">浮動小数点の値を使用して<xref:System.Reflection.Emit.OpCodes.Add>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="d99d8-160">許容されるオペランドの型と、対応する結果のデータ型は、次の表に一覧表示されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="d99d8-161">特定の型の組み合わせのエントリがないかどうか (たとえば、`int32`と`float`です。`int32`と`int64`)、Microsoft Intermediate Language (MSIL) の無効な命令であり、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="d99d8-162">オペランド</span><span class="sxs-lookup"><span data-stu-id="d99d8-162">operand</span></span>|<span data-ttu-id="d99d8-163">value1 型</span><span class="sxs-lookup"><span data-stu-id="d99d8-163">value1 type</span></span>|<span data-ttu-id="d99d8-164">value2 型</span><span class="sxs-lookup"><span data-stu-id="d99d8-164">value2 type</span></span>|<span data-ttu-id="d99d8-165">結果の型</span><span class="sxs-lookup"><span data-stu-id="d99d8-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="d99d8-166">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="d99d8-167">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="d99d8-168">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="d99d8-169">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="d99d8-170">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="d99d8-171">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="d99d8-172">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="d99d8-173">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="d99d8-174">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="d99d8-175">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="d99d8-176">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="d99d8-177">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="d99d8-178">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="d99d8-179">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="d99d8-180">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`add.ovf`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-182">2 つの符号なし整数値を加算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-183">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-184">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-184">Format</span></span>|<span data-ttu-id="d99d8-185">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-185">Assembly Format</span></span>|<span data-ttu-id="d99d8-186">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-187">D7</span><span class="sxs-lookup"><span data-stu-id="d99d8-187">D7</span></span>|<span data-ttu-id="d99d8-188">add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-188">add.ovf.un</span></span>|<span data-ttu-id="d99d8-189">2 つの符号なし整数値、オーバーフロー チェックを追加します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="d99d8-190">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-191">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-192">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-193">`value2` および`value1`スタックからポップされます。`value1`に追加`value2`オーバーフローをチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="d99d8-194">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-195"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-196">符号付き整数で、この操作を実行することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="d99d8-197">浮動小数点の値を使用して<xref:System.Reflection.Emit.OpCodes.Add>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="d99d8-198">許容されるオペランドの型と、対応する結果のデータ型は、次の表に一覧表示されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="d99d8-199">特定の型の組み合わせのエントリがないかどうか (たとえば、`int32`と`float`です。`int32`と`int64`)、Microsoft Intermediate Language (MSIL) の無効な命令であり、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="d99d8-200">オペランド</span><span class="sxs-lookup"><span data-stu-id="d99d8-200">operand</span></span>|<span data-ttu-id="d99d8-201">value1 型</span><span class="sxs-lookup"><span data-stu-id="d99d8-201">value1 type</span></span>|<span data-ttu-id="d99d8-202">value2 型</span><span class="sxs-lookup"><span data-stu-id="d99d8-202">value2 type</span></span>|<span data-ttu-id="d99d8-203">結果の型</span><span class="sxs-lookup"><span data-stu-id="d99d8-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="d99d8-204">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="d99d8-205">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="d99d8-206">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="d99d8-207">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="d99d8-208">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="d99d8-209">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="d99d8-210">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="d99d8-211">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="d99d8-212">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="d99d8-213">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="d99d8-214">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="d99d8-215">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="d99d8-216">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="d99d8-217">追加</span><span class="sxs-lookup"><span data-stu-id="d99d8-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="d99d8-218">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`add.ovf.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-220">2 つの値のビットごとの AND を計算し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-221">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-222">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-222">Format</span></span>|<span data-ttu-id="d99d8-223">命令</span><span class="sxs-lookup"><span data-stu-id="d99d8-223">Instruction</span></span>|<span data-ttu-id="d99d8-224">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="d99d8-225">5F</span><span class="sxs-lookup"><span data-stu-id="d99d8-225">5F</span></span>|<span data-ttu-id="d99d8-226">と、呼び出し</span><span class="sxs-lookup"><span data-stu-id="d99d8-226">and</span></span>|<span data-ttu-id="d99d8-227">2 つの整数値のビットごとの AND を決定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="d99d8-228">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-229">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-230">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-231">`value1` および`value2`スタックからポップされます。 2 つの値のビットごとの AND を計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="d99d8-232">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-233">`and`命令がスタックの上位 2 値のビットごとの AND を計算し、結果をスタックに残します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-234">`And` 整数固有操作です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="d99d8-235">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`and`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-237">現在のメソッドの引数リストへのアンマネージ ポインターを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-237">Returns an unmanaged pointer to the argument list of the current method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-238">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-239">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-239">Format</span></span>|<span data-ttu-id="d99d8-240">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-240">Assembly Format</span></span>|<span data-ttu-id="d99d8-241">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="d99d8-242">FE 00</span></span>|<span data-ttu-id="d99d8-243">arglist</span><span class="sxs-lookup"><span data-stu-id="d99d8-243">arglist</span></span>|<span data-ttu-id="d99d8-244">現在のメソッドの引数リスト ハンドルを返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="d99d8-245">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="d99d8-246">`arglist`命令の不透明なハンドルを返します (型のアンマネージ ポインター `native int`) を表す、現在のメソッドの引数リスト。</span><span class="sxs-lookup"><span data-stu-id="d99d8-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="d99d8-247">このハンドルは、現在のメソッドの有効期間中にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="d99d8-248">ただし、現在のメソッドがコントロールのスレッドである限り、ハンドルを他のメソッドを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="d99d8-249">のみを実行することができます、`arglist`を可変個の引数を受け取るメソッド内の命令。</span><span class="sxs-lookup"><span data-stu-id="d99d8-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="d99d8-250">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`arglist`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-252">2 つの値が等しい場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-252">Transfers control to a target instruction if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-253">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-254">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-254">Format</span></span>|<span data-ttu-id="d99d8-255">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-255">Assembly Format</span></span>|<span data-ttu-id="d99d8-256">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-257">3B < `int32` ></span></span>|<span data-ttu-id="d99d8-258">beq `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-258">beq `target`</span></span>|<span data-ttu-id="d99d8-259">オフセットでターゲット命令にブランチ`target`2 つの値が等しい場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="d99d8-260">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-261">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-262">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-263">`value2` および`value1`場合、スタックからポップされます。`value1`がと等しい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-264">`beq`命令が場合に、指定したターゲット命令に制御を転送`value1`と等しい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="d99d8-265">実行すると同じ効果は、`ceq`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-266">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-267">以下は、許容されるオペランドの型がカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="d99d8-268">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-269">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません (このような移動は厳しく制限されると、使用する必要があります、<xref:System.Reflection.Emit.OpCodes.Leave>命令代わりに)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="d99d8-270">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`beq`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-271">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-272">2 つの値が等しい場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-272">Transfers control to a target instruction (short form) if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-273">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-274">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-274">Format</span></span>|<span data-ttu-id="d99d8-275">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-275">Assembly Format</span></span>|<span data-ttu-id="d99d8-276">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-277">2E < `int8` ></span></span>|<span data-ttu-id="d99d8-278">beq.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-278">beq.s `target`</span></span>|<span data-ttu-id="d99d8-279">オフセットでターゲット命令にブランチ`target`の場合、短い形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="d99d8-280">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-281">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-282">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-283">`value2` および`value1`場合、スタックからポップされます。`value1`がと等しい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-284">`beq.s`命令が場合に、指定したターゲット命令に制御を転送`value1`と等しい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="d99d8-285">実行すると同じ効果は、`ceq`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-286">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-287">以下は、許容されるオペランドの型がカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="d99d8-288">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-289">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません (このような移動は厳しく制限されると、使用する必要があります、<xref:System.Reflection.Emit.OpCodes.Leave>命令代わりに)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="d99d8-290">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`beq.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-291">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-292">最初の値が 2 番目の値以上の場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-293">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-294">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-294">Format</span></span>|<span data-ttu-id="d99d8-295">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-295">Assembly Format</span></span>|<span data-ttu-id="d99d8-296">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-297">3C `<int32>`</span></span>|<span data-ttu-id="d99d8-298">bge `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-298">bge `target`</span></span>|<span data-ttu-id="d99d8-299">最初の値が 2 番目の値以上の場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="d99d8-300">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-301">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-302">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-303">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きいまたは等しい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-304">`bge`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きいまたは等しい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="d99d8-305">この効果を実行するため、`clt.un`命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-306">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-307">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-308">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-309">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bge`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-310">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-311">最初の値が 2 番目の値以上の場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-312">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-313">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-313">Format</span></span>|<span data-ttu-id="d99d8-314">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-314">Assembly Format</span></span>|<span data-ttu-id="d99d8-315">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-316">2F `<int8>`</span></span>|<span data-ttu-id="d99d8-317">bge.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-317">bge.s `target`</span></span>|<span data-ttu-id="d99d8-318">最初の値がより大きいか等しい 2 番目の値では、短い形式の場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-319">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-320">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-321">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-322">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きいまたは等しい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-323">`bge.s`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きいまたは等しい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="d99d8-324">この効果を実行するため、`clt.un`命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-325">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-326">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-327">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-328">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bge.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-329">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-330">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-331">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-332">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-332">Format</span></span>|<span data-ttu-id="d99d8-333">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-333">Assembly Format</span></span>|<span data-ttu-id="d99d8-334">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-335">41 `<int32>`</span></span>|<span data-ttu-id="d99d8-336">bge.un `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-336">bge.un `target`</span></span>|<span data-ttu-id="d99d8-337">最初の値が 2 番目の値 (符号なしの値) 以上の場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-338">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-339">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-340">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-341">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きいまたは等しい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-342">`bge.un`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きいまたは等しい`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-343">この効果を実行するため、`clt`命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-344">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-345">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-346">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-347">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bge.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-348">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-349">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-350">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-351">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-351">Format</span></span>|<span data-ttu-id="d99d8-352">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-352">Assembly Format</span></span>|<span data-ttu-id="d99d8-353">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-354">34 < `int8` ></span></span>|<span data-ttu-id="d99d8-355">bge.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-355">bge.un.s `target`</span></span>|<span data-ttu-id="d99d8-356">最初の値がより大きいか等しい 2 番目の値 (符号なしの値)、短い形式の場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="d99d8-357">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-358">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-359">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-360">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きいまたは等しい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-361">`bge.un.s`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きいまたは等しい`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-362">この効果を実行するため、`clt`命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-363">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-364">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-365">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-366">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bge.un.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-367">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-368">最初の値が 2 番目の値を超える場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-368">Transfers control to a target instruction if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-369">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-370">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-370">Format</span></span>|<span data-ttu-id="d99d8-371">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-371">Assembly Format</span></span>|<span data-ttu-id="d99d8-372">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-373">3D < `int32` ></span></span>|<span data-ttu-id="d99d8-374">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-374">bgt `target`</span></span>|<span data-ttu-id="d99d8-375">最初の値が 2 番目の値より大きい場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="d99d8-376">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-377">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-378">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-379">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-380">`bgt`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="d99d8-381">この効果を実行するため、`cgt`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-382">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-383">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-384">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-385">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bgt`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-386">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-387">最初の値が 2 番目の値を超える場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-388">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-389">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-389">Format</span></span>|<span data-ttu-id="d99d8-390">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-390">Assembly Format</span></span>|<span data-ttu-id="d99d8-391">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-392">30 < `int8` ></span></span>|<span data-ttu-id="d99d8-393">bgt.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-393">bgt.s `target`</span></span>|<span data-ttu-id="d99d8-394">最初の値が 2 番目の値では、短い形式よりも大きい場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-395">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-396">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-397">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-398">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-399">`bgt.s`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="d99d8-400">この効果を実行するため、`cgt`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-401">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-402">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-403">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-404">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bgt.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-405">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-406">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-407">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-408">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-408">Format</span></span>|<span data-ttu-id="d99d8-409">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-409">Assembly Format</span></span>|<span data-ttu-id="d99d8-410">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-411">42 < `int32` ></span></span>|<span data-ttu-id="d99d8-412">bgt.un `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-412">bgt.un `target`</span></span>|<span data-ttu-id="d99d8-413">最初の値が 2 番目の値 (符号なしの値) より大きい場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-414">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-415">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-416">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-417">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-418">`bgt.un`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きい`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-419">この効果を実行するため、`cgt.un`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-420">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-421">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-422">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-423">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bgt.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-424">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-425">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値を超える場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-426">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-427">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-427">Format</span></span>|<span data-ttu-id="d99d8-428">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-428">Assembly Format</span></span>|<span data-ttu-id="d99d8-429">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-430">35 < `int8` ></span></span>|<span data-ttu-id="d99d8-431">bgt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-431">bgt.un.s `target`</span></span>|<span data-ttu-id="d99d8-432">最初の値が 2 番目の値 (符号なしの値)、短縮形より大きい場合、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="d99d8-433">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-434">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-435">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-436">`value2` および`value1`場合、スタックからポップされます。`value1`がより大きい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-437">`bgt.un.s`命令が場合に、指定したターゲット命令に制御を転送`value1`がより大きい`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-438">この効果を実行するため、`cgt.un`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-439">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-440">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-441">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-442">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bgt.un.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-443">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-444">最初の値が 2 番目の値以下の場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-445">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-446">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-446">Format</span></span>|<span data-ttu-id="d99d8-447">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-447">Assembly Format</span></span>|<span data-ttu-id="d99d8-448">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-449">3E `<int32>`</span></span>|<span data-ttu-id="d99d8-450">ble `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-450">ble `target`</span></span>|<span data-ttu-id="d99d8-451">最初の値が 2 番目の値に等しいまたはそれよりも小さい場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="d99d8-452">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-453">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-454">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-455">`value2` および`value1`場合、スタックからポップされます。`value1`をと同じかそれよりも少ない`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-456">`ble`命令が場合に、指定したターゲット命令に制御を転送`value1`と同じかそれよりも少ない`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="d99d8-457">この効果を実行するため、`cgt`命令 (`cgt.un`浮動小数点数の) 続けて、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-458">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-459">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-460">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-461">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ble`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-462">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-463">最初の値が 2 番目の値以下の場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-464">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-465">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-465">Format</span></span>|<span data-ttu-id="d99d8-466">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-466">Assembly Format</span></span>|<span data-ttu-id="d99d8-467">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-468">31 `<int8>`</span></span>|<span data-ttu-id="d99d8-469">ble.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-469">ble.s `target`</span></span>|<span data-ttu-id="d99d8-470">最初の値が短い形式として、2 番目の値に等しいまたはそれよりも小さい場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-471">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-472">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-473">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-474">`value2` および`value1`場合、スタックからポップされます。`value1`をと同じかそれよりも少ない`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-475">`ble.s`命令が場合に、指定したターゲット命令に制御を転送`value1`と同じかそれよりも少ない`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="d99d8-476">この効果を実行するため、`cgt`命令 (`cgt.un`浮動小数点数の) 命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-477">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-478">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-479">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-480">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ble.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-481">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-482">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値以下の場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-483">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-484">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-484">Format</span></span>|<span data-ttu-id="d99d8-485">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-485">Assembly Format</span></span>|<span data-ttu-id="d99d8-486">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-487">43 `<int32>`</span></span>|<span data-ttu-id="d99d8-488">ble.un `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-488">ble.un `target`</span></span>|<span data-ttu-id="d99d8-489">最初の値が 2 番目の値 (符号なしの値) に等しいまたはそれよりも小さい場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-490">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-491">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-492">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-493">`value2` および`value1`場合、スタックからポップされます。`value1`をと同じかそれよりも少ない`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-494">`ble.un`命令が場合に、指定したターゲット命令に制御を転送`value1`と同じかそれよりも少ない`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-495">この効果を実行するため、`cgt.un`命令 (`cgt`浮動小数点数の) 続けて、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-496">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-497">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-498">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-499">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ble.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-500">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-501">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値以下の場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-502">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-503">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-503">Format</span></span>|<span data-ttu-id="d99d8-504">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-504">Assembly Format</span></span>|<span data-ttu-id="d99d8-505">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="d99d8-506">36 `<int8>`</span></span>|<span data-ttu-id="d99d8-507">ble.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-507">ble.un.s `target`</span></span>|<span data-ttu-id="d99d8-508">最初の値が以下の 2 番目の値 (符号なしの値)、短い形式の場合は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="d99d8-509">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-510">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-511">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-512">`value2` および`value1`場合、スタックからポップされます。`value1`をと同じかそれよりも少ない`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-513">`ble.un.s`命令が場合に、指定したターゲット命令に制御を転送`value1`と同じかそれよりも少ない`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-514">この効果を実行するため、`cgt.un`命令 (`cgt`浮動小数点数の) 続けて、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-515">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-516">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-517">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-518">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ble.un.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-519">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-520">最初の値が 2 番目の値より小さい場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-520">Transfers control to a target instruction if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-521">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-522">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-522">Format</span></span>|<span data-ttu-id="d99d8-523">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-523">Assembly Format</span></span>|<span data-ttu-id="d99d8-524">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-525">3F < `int32` ></span></span>|<span data-ttu-id="d99d8-526">blt `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-526">blt `target`</span></span>|<span data-ttu-id="d99d8-527">2 番目の値より小さい場合は、最初の値は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="d99d8-528">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-529">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-530">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-531">`value2` および`value1`場合、スタックからポップされます。`value1`はより小さい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-532">`blt`命令が場合に、指定したターゲット命令に制御を転送`value1`と同じかそれよりも少ない`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="d99d8-533">この効果を実行するため、`clt`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-534">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-535">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-536">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-537">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`blt`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-538">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-539">最初の値が 2 番目の値より小さい場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-540">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-541">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-541">Format</span></span>|<span data-ttu-id="d99d8-542">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-542">Assembly Format</span></span>|<span data-ttu-id="d99d8-543">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-544">32 < `int8` ></span></span>|<span data-ttu-id="d99d8-545">blt.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-545">blt.s `target`</span></span>|<span data-ttu-id="d99d8-546">短い形式として、2 番目の値より小さい場合は、最初の値は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-547">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-548">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-549">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-550">`value2` および`value1`場合、スタックからポップされます。`value1`はより小さい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-551">`blt.s`命令が場合に、指定したターゲット命令に制御を転送`value1`はより小さい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="d99d8-552">この効果を実行するため、`clt`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-553">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-554">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-555">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-556">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`blt.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-557">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-558">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値より小さい場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-559">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-560">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-560">Format</span></span>|<span data-ttu-id="d99d8-561">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-561">Assembly Format</span></span>|<span data-ttu-id="d99d8-562">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-563">44 < `int32` ></span></span>|<span data-ttu-id="d99d8-564">blt.un `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-564">blt.un `target`</span></span>|<span data-ttu-id="d99d8-565">2 番目の値 (符号なしの値) より小さい場合は、最初の値は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-566">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-567">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-568">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-569">`value2` および`value1`場合、スタックからポップされます。`value1`はより小さい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-570">`blt.un`命令が場合に、指定したターゲット命令に制御を転送`value1`はより小さい`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-571">この効果を実行するため、`clt.un`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-572">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-573">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-574">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-575">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`blt.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-576">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-577">符号なし整数値または順序なし float 値を比較したとき、最初の値が 2 番目の値より小さい場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-578">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-579">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-579">Format</span></span>|<span data-ttu-id="d99d8-580">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-580">Assembly Format</span></span>|<span data-ttu-id="d99d8-581">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-582">37 < `int8` ></span></span>|<span data-ttu-id="d99d8-583">blt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-583">blt.un.s `target`</span></span>|<span data-ttu-id="d99d8-584">2 番目の値 (符号なしの値)、短縮形より小さい場合は、最初の値は、指定したオフセットでターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="d99d8-585">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-586">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-587">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-588">`value2` および`value1`場合、スタックからポップされます。`value1`はより小さい`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-589">`blt.un`命令が場合に、指定したターゲット命令に制御を転送`value1`はより小さい`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-590">この効果を実行するため、`clt.un`命令を実行して、`brtrue`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-591">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-592">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-593">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-594">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`blt.un.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-595">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-596">2 つの符号なし整数値または順序なし float 値が等しくない場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-597">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-598">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-598">Format</span></span>|<span data-ttu-id="d99d8-599">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-599">Assembly Format</span></span>|<span data-ttu-id="d99d8-600">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-601">40 < `int32` ></span></span>|<span data-ttu-id="d99d8-602">bne.un `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-602">bne.un `target`</span></span>|<span data-ttu-id="d99d8-603">分岐ターゲット命令は 2 つの符号なし整数値の場合は、指定したオフセットでは (符号なしの値) と等しくないです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-604">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-605">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-606">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-607">`value2` および`value1`場合、スタックからポップされます。`value1`は等しくありません`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-608">`bne.un`命令が場合に、指定したターゲット命令に制御を転送`value1`は等しくありません`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-609">この効果を実行するため、`ceq`命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-610">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-611">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-612">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-613">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bne.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-614">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-615">2 つの符号なし整数値または順序なし float 値が等しくない場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-616">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-617">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-617">Format</span></span>|<span data-ttu-id="d99d8-618">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-618">Assembly Format</span></span>|<span data-ttu-id="d99d8-619">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-620">33 < `int8` ></span></span>|<span data-ttu-id="d99d8-621">bne.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-621">bne.un.s `target`</span></span>|<span data-ttu-id="d99d8-622">分岐ターゲットに 2 つの符号なし整数値の場合は、指定したオフセットで命令は、されません (符号なしの値) と等しく、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="d99d8-623">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-624">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-625">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-626">`value2` および`value1`場合、スタックからポップされます。`value1`は等しくありません`value2`、分岐操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="d99d8-627">`bne.un`命令が場合に、指定したターゲット命令に制御を転送`value1`は等しくありません`value2`符号なし整数値または順序なし float 値を使って比較した場合、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="d99d8-628">この効果を実行するため、`ceq`命令を実行して、`brfalse`特定のターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="d99d8-629">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-630">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-631">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-632">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`bne.un.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-633">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-634">値型をオブジェクト参照 (<see langword="O" /> 型) に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-634">Converts a value type to an object reference (type <see langword="O" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-635">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-636">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-636">Format</span></span>|<span data-ttu-id="d99d8-637">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-637">Assembly Format</span></span>|<span data-ttu-id="d99d8-638">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-639">8C < `T` ></span></span>|<span data-ttu-id="d99d8-640">box `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="d99d8-640">box `valTypeToken`</span></span>|<span data-ttu-id="d99d8-641">値の型に変換 (で指定された型の`valTypeToken`) を真のオブジェクト参照にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="d99d8-642">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-643">値の型は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-644">値の型がスタックからポップされます。`box`操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="d99d8-645">結果として得られる「ボックス化された」の値の型にオブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-646">値型は、2 つの独立した表現内で共通言語基盤 (CLI) には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="d99d8-647">値の型が別のオブジェクト、スタックの上に埋め込まれている場合に使用される '生' のフォームです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="d99d8-648">ここで値の型のデータがラップされる (のボックス化された) オブジェクトのため、個別のエンティティとして存在する可能性が 'ボックス化' の形式です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="d99d8-649">`box`命令は、オブジェクト参照に '生' の (ボックス化解除された) 値の型を変換 (型`O`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="d99d8-650">これは、新しいオブジェクトを作成し、新しく割り当てられたオブジェクトに値の型からデータをコピーして行います。</span><span class="sxs-lookup"><span data-stu-id="d99d8-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="d99d8-651">`valTypeToken` スタックに値型の型をメタデータ トークンを示すです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-652"><xref:System.OutOfMemoryException> メモリ不足のため、要求を満たす場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="d99d8-653"><xref:System.TypeLoadException> クラスが見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="d99d8-654">これは、通常、Microsoft Intermediate Language (MSIL) が実行時ではなく、ネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-655">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`box`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-656">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-657">無条件でターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-657">Unconditionally transfers control to a target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-658">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-659">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-659">Format</span></span>|<span data-ttu-id="d99d8-660">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-660">Assembly Format</span></span>|<span data-ttu-id="d99d8-661">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-662">38 < `int32` ></span></span>|<span data-ttu-id="d99d8-663">ブラジル `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-663">br `target`</span></span>|<span data-ttu-id="d99d8-664">指定したオフセットで、ターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="d99d8-665">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="d99d8-666">`br`命令は無条件でターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="d99d8-667">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-668">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-669">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-670">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`br`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-671">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-672">無条件でターゲット命令に制御を転送します (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-672">Unconditionally transfers control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-673">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-674">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-674">Format</span></span>|<span data-ttu-id="d99d8-675">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-675">Assembly Format</span></span>|<span data-ttu-id="d99d8-676">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-677">2B < `int8` ></span></span>|<span data-ttu-id="d99d8-678">br.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-678">br.s `target`</span></span>|<span data-ttu-id="d99d8-679">短い形式として、指定したオフセットで、ターゲット命令に分岐します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-680">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="d99d8-681">`br.s`命令は無条件でターゲット命令に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="d99d8-682">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-683">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-684">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-685">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`br.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-686">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-687">ブレークポイントがトリップしたことをデバッガーに通知するように、共通言語基盤 (CLI) に通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-688">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-689">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-689">Format</span></span>|<span data-ttu-id="d99d8-690">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-690">Assembly Format</span></span>|<span data-ttu-id="d99d8-691">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-692">01</span><span class="sxs-lookup"><span data-stu-id="d99d8-692">01</span></span>|<span data-ttu-id="d99d8-693">break</span><span class="sxs-lookup"><span data-stu-id="d99d8-693">break</span></span>|<span data-ttu-id="d99d8-694">ブレークポイントに達していることをデバッガーに通知します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="d99d8-695">この操作では、評価スタックの動作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="d99d8-696">`break`命令はデバッグをサポートします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="d99d8-697">ブレークポイントがトリップしたことをデバッガーに通知するために、CLI を通知します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="d99d8-698">インタープリターの状態には、その他の影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="d99d8-699">`break`命令にはコードが含まれて、最小命令にはサイズには有効にすると、中断ポイントと修正プログラムの適用を前後のコードを最小限が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="d99d8-700">`break`命令は、デバッガーにトラップ、何もしない、またはセキュリティ例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="d99d8-701">実際の動作では、実装定義されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="d99d8-702">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`break`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-704">
            <paramref name="value" /> が <see langword="false" />、null 参照 (Visual Basic の場合は <see langword="Nothing" />)、または 0 の場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-705">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-706">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-706">Format</span></span>|<span data-ttu-id="d99d8-707">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-707">Assembly Format</span></span>|<span data-ttu-id="d99d8-708">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-709">39 < `int32` ></span></span>|<span data-ttu-id="d99d8-710">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="d99d8-711">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="d99d8-712">brzero `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-712">brzero `target`</span></span>|<span data-ttu-id="d99d8-713">場合は、指定したオフセットでターゲット命令に分岐`false`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="d99d8-714">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-715">`value` 前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="d99d8-716">`value` スタックからポップされます。場合`value`は`false`、分岐`target`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="d99d8-717">`brfalse`命令 (とそのエイリアス`brnull`と`brzero`) 場合は、指定したターゲット命令に制御を移します`value`(型の`int32`、 `int64`、オブジェクト参照`O`、マネージ ポインター `&`、一時的なポインター `*`、 `native int`) ゼロ (`false`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="d99d8-718">場合`value`ゼロ以外 (`true`) 次の命令で実行が続行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="d99d8-719">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-720">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-721">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-722">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`brfalse`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-723">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-724">
            <paramref name="value" /> が <see langword="false" />、null 参照または 0 の場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-725">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-726">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-726">Format</span></span>|<span data-ttu-id="d99d8-727">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-727">Assembly Format</span></span>|<span data-ttu-id="d99d8-728">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-729">2C <`int8` ></span></span>|<span data-ttu-id="d99d8-730">brfalse.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="d99d8-731">brnull.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="d99d8-732">brzero.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-732">brzero.s `target`</span></span>|<span data-ttu-id="d99d8-733">場合は、指定したオフセットでターゲット命令に分岐`false`、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-734">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-735">`value` 前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="d99d8-736">`value` スタックからポップされます。場合`value`は`false`、分岐`target`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="d99d8-737">`brfalse.s`命令 (とそのエイリアス`brnull`と`brzero`) 場合は、指定したターゲット命令に制御を移します`value`(型の`int32`、 `int64`、オブジェクト参照`O`、マネージ ポインター `&`、一時的なポインター `*`、 `native int`) ゼロ (`false`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="d99d8-738">場合`value`ゼロ以外 (`true`) 次の命令で実行が続行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="d99d8-739">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-740">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-741">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-742">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`brfalse.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-743">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-744">
            <paramref name="value" /> が <see langword="true" />、null 以外、または 0 以外の場合は、ターゲット命令に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-745">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-746">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-746">Format</span></span>|<span data-ttu-id="d99d8-747">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-747">Assembly Format</span></span>|<span data-ttu-id="d99d8-748">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-749">3A < `int32` ></span></span>|<span data-ttu-id="d99d8-750">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="d99d8-751">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-751">brinst `target`</span></span>|<span data-ttu-id="d99d8-752">0 以外の場合は、指定したオフセットで、ターゲット命令に分岐 (`true`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="d99d8-753">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-754">`value` 前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="d99d8-755">`value` スタックからポップされます。場合`value`は`true`、分岐`target`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="d99d8-756">`brtrue`命令が場合に、指定したターゲット命令に制御を転送`value`(型`native int`) がゼロ以外 (`true`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="d99d8-757">場合`value`ゼロ (`false`) 次の命令で実行が続行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="d99d8-758">場合`value`オブジェクト参照 (型`O`) し、 `brinst` (のエイリアスを`brtrue`) を表している場合、オブジェクトのインスタンスに制御を転送する (たとえば、見つからなかった場合は、null オブジェクト参照を参照してください<xref:System.Reflection.Emit.OpCodes.Ldnull>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="d99d8-759">ターゲット命令は、現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-760">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-761">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-762">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`brtrue`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-763">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-764">
            <paramref name="value" /> が <see langword="true" />、null 以外、または 0 以外の場合は、ターゲット命令 (短い形式) に制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-765">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-766">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-766">Format</span></span>|<span data-ttu-id="d99d8-767">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-767">Assembly Format</span></span>|<span data-ttu-id="d99d8-768">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-769">2D < `int8` ></span></span>|<span data-ttu-id="d99d8-770">brtrue.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="d99d8-771">brinst.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-771">brinst.s `target`</span></span>|<span data-ttu-id="d99d8-772">0 以外の場合は、指定したオフセットで、ターゲット命令に分岐 (`true`)、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="d99d8-773">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-774">`value` 前の操作によってスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="d99d8-775">`value` スタックからポップされます。場合`value`は`true`、分岐`target`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="d99d8-776">`brtrue.s`命令が場合に、指定したターゲット命令に制御を転送`value`(型`native int`) がゼロ以外 (`true`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="d99d8-777">場合`value`ゼロ (`false`) 次の命令で実行が続行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="d99d8-778">場合`value`オブジェクト参照 (型`O`) し、 `brinst` (のエイリアスを`brtrue`) を表している場合、オブジェクトのインスタンスに制御を転送する (たとえば、見つからなかった場合は、null オブジェクト参照を参照してください<xref:System.Reflection.Emit.OpCodes.Ldnull>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="d99d8-779">ターゲット命令は、現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-780">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="d99d8-781">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-782">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`brtrue.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-783">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-784">渡されたメソッド記述子によって示されているメソッドを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-784">Calls the method indicated by the passed method descriptor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-785">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-786">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-786">Format</span></span>|<span data-ttu-id="d99d8-787">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-787">Assembly Format</span></span>|<span data-ttu-id="d99d8-788">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-789">28 < `T` ></span></span>|<span data-ttu-id="d99d8-790">呼び出し `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="d99d8-790">call `methodDesc`</span></span>|<span data-ttu-id="d99d8-791">により記述されたメソッドを呼び出す`methodDesc`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="d99d8-792">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-793">メソッドの引数`arg1`を通じて`argN`スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-794">メソッドの引数`arg1`を通じて`argN`スタックからポップされます。 これらの引数で、メソッドの呼び出しが行われるとメソッド記述子によって参照されるメソッドに制御が移ります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="d99d8-795">完了したら、戻り値は、呼び出し先のメソッドによって生成され、呼び出し元に送信します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="d99d8-796">戻り値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-797">`call`命令は、命令と共に渡されたメソッド記述子によって指定されているメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="d99d8-798">メソッドの記述子は、メソッド呼び出しと数、種類、および使用する呼び出し規約と同様にそのメソッドに渡されるスタックに配置されている引数の順序を示すメタデータ トークンです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="d99d8-799">`call`命令のすぐ前に、 `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) メソッドの現在の状態が制御を転送する前に解放することを指定する命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="d99d8-800">呼び出しは、元のメソッドより信頼性の高いメソッドに制御を転送、スタック フレームは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="d99d8-801">代わりに、実行が継続として、`tail`が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="d99d8-802">メタデータ トークンには、呼び出しが静的メソッド、インスタンス メソッド、仮想メソッドまたはグローバル関数かどうかを決定するための十分な情報です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="d99d8-803">送信先アドレスはメソッドの記述子から判断これらすべての場合 (とこれに対し、<xref:System.Reflection.Emit.OpCodes.Callvirt>命令は、宛先アドレスもインスタンスの参照のランタイムの型によって異なります。 仮想メソッドを呼び出す前に、プッシュ、 <xref:System.Reflection.Emit.OpCodes.Callvirt>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="d99d8-804">引数は、左から右の順序でスタックに配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="d99d8-805">つまり、最初の引数が計算され、すべての必要な引数は、降順でスタックの一番上まで、スタックし、2 番目の引数、3 番目に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="d99d8-806">これには次の 3 つの重要な特殊なケースがあります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="d99d8-807">呼び出しインスタンス (または仮想) メソッドが任意のユーザーに表示される引数の前にそのインスタンスの参照をプッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="d99d8-808">インスタンス参照では、null 参照をすることはできません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="d99d8-809">メタデータに送られるシグネチャのパラメーター リスト内のエントリを含まない、`this`ポインターです。 代わりに、メソッドに渡すことが必要かどうかを示すために、ビットを使用して、`this`ポインター。</span><span class="sxs-lookup"><span data-stu-id="d99d8-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="d99d8-810">使用して、仮想メソッドの呼び出しは無効である`call`(なく`callvirt`) です。 これは、メソッドが呼び出されているオブジェクトから動的に指定ではなく、メソッドによって指定されたクラスを使用して解決することを示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="d99d8-811">なおデリゲートの`Invoke`いずれかでメソッドを呼び出すことができます、`call`または`callvirt`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-812"><xref:System.Security.SecurityException> システムのセキュリティは、呼び出されたメソッドを呼び出し元アクセスを許可していない場合にスローされる可能性がします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="d99d8-813">セキュリティ チェックは、Microsoft Intermediate Language (MSIL) の手順が実行時ではなくネイティブ コードに変換された場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d99d8-814">値型で System.Object のメソッドを呼び出すときに、使用を検討して、`constrained`プレフィックス、`callvirt`命令の出力ではなく、`call`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="d99d8-815">これにより、潜在的なバージョン管理の問題を回避する値の型がメソッドをオーバーライドするかどうかに応じて異なる IL を生成する必要があるされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="d99d8-816">使用を検討して、`constrained`を使用してメソッドを呼び出すとき、値の型のインターフェイス メソッドので、値型インターフェイス メソッドの実装のプレフィックスを変更することができます、`MethodImpl`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="d99d8-817">これらの問題がで詳しく説明されている、 <xref:System.Reflection.Emit.OpCodes.Constrained> opcode です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="d99d8-818">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`call`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-819">ILGenerator.Emit (オペコード、MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="d99d8-820">ILGenerator.EmitCall (オペコード、MethodInfo、Type[])</span><span class="sxs-lookup"><span data-stu-id="d99d8-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d99d8-821"><xref:System.Reflection.Emit.ILGenerator.EmitCall%2A>のメソッドが用意されて`varargs`呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="d99d8-822">使用して、<xref:System.Reflection.Emit.ILGenerator.Emit%2A>標準呼び出しのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-823">呼び出し規則によって記述されている引数を使用して、評価スタックで (エントリ ポイントへのポインターとして) 指定されているメソッドを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-824">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-825">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-825">Format</span></span>|<span data-ttu-id="d99d8-826">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-826">Assembly Format</span></span>|<span data-ttu-id="d99d8-827">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-828">29 < `T` ></span></span>|<span data-ttu-id="d99d8-829">calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="d99d8-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="d99d8-830">呼び出し規約によって記述されている引数を指すメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="d99d8-831">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-832">メソッドの引数`arg1`を通じて`argN`スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-833">メソッドのエントリのポインターは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-834">メソッドの引数`arg1`を通じて`argN`とメソッドのエントリのポインターは、スタックからポップされます。 以外の場合は、メソッドの呼び出しを実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="d99d8-835">完了したら、戻り値は、呼び出し先のメソッドによって生成され、呼び出し元に送信します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="d99d8-836">戻り値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-837">`calli`命令は、引数を持つメソッドのエントリのポインターを呼び出します`arg1`を通じて`argN`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="d99d8-838">これらの引数の型は、特定の呼び出し規約によって記述されます (`callSiteDesc`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="d99d8-839">`calli`命令ではすぐに付くことがあります、`tail`プレフィックス (<xref:System.Reflection.Emit.OpCodes.Tailcall>) を現在のメソッドの状態が制御を転送する前に解放することを指定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="d99d8-840">呼び出しが転送される場合、元のメソッド、スタック フレームより信頼性の高いメソッドに制御は解放されません。代わりに、実行が継続されますよう、`tail`が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="d99d8-841">メソッドのエントリのポインターは、呼び出し規約 (スタンドアロン シグネチャのメタデータ トークン) で説明されている引数で正規に呼び出すことができる (ターゲット コンピューター) のネイティブ コードに特定のポインターであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="d99d8-842">使用してこのようなポインターを作成することができます、<xref:System.Reflection.Emit.OpCodes.Ldftn>または<xref:System.Reflection.Emit.OpCodes.Ldvirtftn>手順については、ネイティブ コードから渡されたか。</span><span class="sxs-lookup"><span data-stu-id="d99d8-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="d99d8-843">呼び出し規約が動的にチェックされませんが、これを使用するコード、`calli`実際には、先に指定した呼び出し規約が使用していない場合、命令が正常に動作しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="d99d8-844">引数は、左から右の順序でスタックに配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="d99d8-845">つまり、最初の引数が計算され、すべての必要な引数は、降順でスタックの一番上まで、スタックし、2 番目の引数、3 番目に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="d99d8-846">インスタンスまたは仮想メソッドの引数構築コード シーケンスは、任意のユーザーに表示される引数の前に、そのインスタンス参照 (参照を null することはできません) をプッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="d99d8-847"><xref:System.Security.SecurityException> システムのセキュリティは、呼び出されたメソッドを呼び出し元アクセスを許可していない場合にスローされる可能性がします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="d99d8-848">セキュリティ チェックは、Microsoft Intermediate Language (MSIL) の手順が実行時ではなくネイティブ コードに変換された場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-849">次<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A>を実行するメソッドを使用することができます、`calli`スタックに命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="d99d8-850">なお`calli`を介して呼び出す必要がありますを使用するのではなく、メソッドの下、<xref:System.Reflection.Emit.ILGenerator.Emit%2A>スタック上で直接、命令を配置するクラス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="d99d8-851">ILGenerator.EmitCalli (オペコード、CallingConventions、種類は、マネージ呼び出し規約を使用して、呼び出しの Type[]) を入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="d99d8-852">ILGenerator.EmitCalli (オペコード、アンマネージ呼び出し規約を使用して、呼び出しの CallingConvention、型、Type[]) です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-853">オブジェクト上で遅延バインディング メソッドを呼び出し、戻り値を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-854">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-855">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-855">Format</span></span>|<span data-ttu-id="d99d8-856">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-856">Assembly Format</span></span>|<span data-ttu-id="d99d8-857">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-858">6F < `T` ></span></span>|<span data-ttu-id="d99d8-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="d99d8-859">callvirt `method`</span></span>|<span data-ttu-id="d99d8-860">関連付けられている特定のメソッドを呼び出して`obj`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="d99d8-861">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-862">オブジェクト参照`obj`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-863">メソッドの引数`arg1`を通じて`argN`スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-864">メソッドの引数`arg1`を通じて`argN`とオブジェクト参照`obj`スタックからポップされます。 これらの引数で、メソッドの呼び出しが行われると、メソッドに制御が移ります`obj`メソッドのメタデータ トークンによって参照されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="d99d8-865">完了したら、戻り値は、呼び出し先のメソッドによって生成され、呼び出し元に送信します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="d99d8-866">戻り値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-867">`callvirt`命令がオブジェクトで遅延バインディング メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="d99d8-868">つまり、メソッドのランタイムの型に基づいて選択`obj`メソッド ポインターで参照できるコンパイル クラスではなくです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="d99d8-869">`Callvirt` 仮想両方を呼び出すし、インスタンス メソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="d99d8-870">`callvirt`命令ではすぐに付くことがあります、 `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) プレフィックスを制御を転送する前に、現在のスタック フレームを解放することを指定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="d99d8-871">呼び出しが転送される場合、スタック フレームの元のメソッドよりも信頼性の高いメソッドに制御は解放されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="d99d8-872">メソッドのメタデータ トークンは、クラスの名前とシグネチャに呼び出すメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="d99d8-873">関連付けられたクラス`obj`インスタンスがクラスです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="d99d8-874">クラスには、示されたメソッドの名前とシグネチャに一致する非静的メソッドが定義されている場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="d99d8-875">それ以外の場合、このクラスの基底クラスのチェーンのすべてのクラスは順番にチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="d99d8-876">メソッドが見つからない場合は、エラーになります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="d99d8-877">`Callvirt` メソッドを呼び出す前に、オブジェクトと関連付けられている引数を評価スタックからをポップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="d99d8-878">メソッドの戻り値の場合は、メソッドの完了時にスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="d99d8-879">呼び出し側に、`obj`パラメーターが 0 の引数としてアクセス`arg1`として引数 1 というようにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="d99d8-880">引数は、左から右の順序でスタックに配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="d99d8-881">つまり、最初の引数が計算され、すべての必要な引数は、降順でスタックの一番上まで、スタックし、2 番目の引数、3 番目に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="d99d8-882">インスタンス参照`obj`(常に必要な`callvirt`) 任意のユーザーに表示される引数の前にプッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="d99d8-883">(メタデータ トークンに含まれる)、署名含める必要はありません、パラメーター リスト内のエントリをこのポインター。</span><span class="sxs-lookup"><span data-stu-id="d99d8-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="d99d8-884">仮想メソッドできますも呼び出すことを使用して、<xref:System.Reflection.Emit.OpCodes.Call>命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="d99d8-885"><xref:System.MissingMethodException> 関連付けられているクラスで指定された名前およびシグネチャを持つ非静的メソッドが見つかりませんだった場合にスローされる`obj`またはその基本クラスのいずれか。</span><span class="sxs-lookup"><span data-stu-id="d99d8-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="d99d8-886">これは、通常、Microsoft Intermediate Language (MSIL) 命令が実行時ではなく、ネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-887"><xref:System.NullReferenceException> obj が null の場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="d99d8-888"><xref:System.Security.SecurityException> システムのセキュリティは、呼び出されたメソッドを呼び出し元アクセスを許可していない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="d99d8-889">セキュリティ チェックは、CIL が実行時ではなくネイティブ コードに変換されるときに発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d99d8-890">値型で System.Object のメソッドを呼び出すときに、使用を検討して、`constrained`プレフィックス、`callvirt`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="d99d8-891">これにより、潜在的なバージョン管理の問題を回避する値の型がメソッドをオーバーライドするかどうかに応じて異なる IL を生成する必要があるされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="d99d8-892">使用を検討して、`constrained`を使用してメソッドを呼び出すとき、値の型のインターフェイス メソッドので、値型インターフェイス メソッドの実装のプレフィックスを変更することができます、`MethodImpl`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="d99d8-893">これらの問題がで詳しく説明されている、 <xref:System.Reflection.Emit.OpCodes.Constrained> opcode です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="d99d8-894">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`callvirt`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-895">ILGenerator.Emit (オペコード、MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="d99d8-896">ILGenerator.EmitCall (オペコード、MethodInfo、Type[])</span><span class="sxs-lookup"><span data-stu-id="d99d8-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-897">指定したクラスへの参照により渡されたオブジェクトをキャストしようとします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-897">Attempts to cast an object passed by reference to the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-898">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-899">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-899">Format</span></span>|<span data-ttu-id="d99d8-900">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-900">Assembly Format</span></span>|<span data-ttu-id="d99d8-901">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-902">74 < `T` ></span></span>|<span data-ttu-id="d99d8-903">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="d99d8-903">castclass `class`</span></span>|<span data-ttu-id="d99d8-904">型の新しいオブジェクトにキャスト`class`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="d99d8-905">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-906">オブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-907">オブジェクト参照がスタックからポップされます。参照先オブジェクトにキャストは、指定された`class`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="d99d8-908">成功した場合、新しいオブジェクト参照がスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-909">`castclass`命令は、オブジェクト参照をキャストしようとしています (型`O`) を指定したクラスにスタックの一番上。</span><span class="sxs-lookup"><span data-stu-id="d99d8-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="d99d8-910">新しいクラスは、目的のクラスを示すメタデータ トークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="d99d8-911">スタックの一番上のオブジェクトのクラスは (新しいクラスはインターフェイスと仮定した場合)、新しいクラスを実装していませんし、新しいクラスの派生クラスではない場合、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="d99d8-912">オブジェクト参照が null 参照では、`castclass`が成功し、null 参照として新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-913"><xref:System.InvalidCastException> obj はクラスにキャストできない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="d99d8-914"><xref:System.TypeLoadException> クラスが見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="d99d8-915">これは、通常、Microsoft Intermediate Language (MSIL) の命令が実行時ではなくネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-915">This is typically detected when a Microsoft Intermediate Language (MSIL)instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-916">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`castclass`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-917">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-918">2 つの値を比較します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-918">Compares two values.</span>
          </span>
          <span data-ttu-id="d99d8-919">2 つの値が等しい場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-920">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-921">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-921">Format</span></span>|<span data-ttu-id="d99d8-922">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-922">Assembly Format</span></span>|<span data-ttu-id="d99d8-923">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="d99d8-924">FE 01</span></span>|<span data-ttu-id="d99d8-925">ceq</span><span class="sxs-lookup"><span data-stu-id="d99d8-925">ceq</span></span>|<span data-ttu-id="d99d8-926">場合 1 をプッシュ`value1`equals`value2`それ以外、0 をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="d99d8-927">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-928">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-929">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-930">`value2` および`value1`スタックからポップされます。`value1`と比較`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-931">場合`value1`と等しい`value2`1 がスタックにプッシュされます。 それ以外の場合 0 は、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-932">`ceq`命令を比較`value1`と`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="d99d8-933">場合`value1`と等しい`value2`、し、1 (型の`int32`) が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="d99d8-934">それ以外の場合 0 (型の`int32`) が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-935">浮動小数点数の`ceq`数値は順序付けられていない場合に 0 を返します (いずれかまたは両方が NaN)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="d99d8-936">無限値では、それ自体と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="d99d8-937">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ceq`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-939">2 つの値を比較します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-939">Compares two values.</span>
          </span>
          <span data-ttu-id="d99d8-940">最初の値が 2 番目の値を超える場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-941">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-942">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-942">Format</span></span>|<span data-ttu-id="d99d8-943">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-943">Assembly Format</span></span>|<span data-ttu-id="d99d8-944">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="d99d8-945">FE 02</span></span>|<span data-ttu-id="d99d8-946">cgt</span><span class="sxs-lookup"><span data-stu-id="d99d8-946">cgt</span></span>|<span data-ttu-id="d99d8-947">場合 1 をプッシュ`value1`がより大きい`value2`それ以外、0 をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="d99d8-948">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-949">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-950">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-951">`value2` および`value1`スタックからポップされます。`cgt`かどうか`value1`がより大きい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-952">場合`value1`がより大きい`value2`1 がスタックにプッシュされます。 それ以外の場合 0 は、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-953">`cgt`命令を比較`value1`と`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="d99d8-954">場合`value1`がより厳密に大きい`value2`、`int32`値 1 がスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="d99d8-955">それ以外の場合、 `int32` 0 の値が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="d99d8-956">浮動小数点数の`cgt`(1 つまたは両方の引数が NaN) の場合は、数値は順序付けられていない場合は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="d99d8-957">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`cgt`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-959">2 つの符号なしの値または順序なしの値を比較します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-959">Compares two unsigned or unordered values.</span>
          </span>
          <span data-ttu-id="d99d8-960">最初の値が 2 番目の値を超える場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-961">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-962">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-962">Format</span></span>|<span data-ttu-id="d99d8-963">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-963">Assembly Format</span></span>|<span data-ttu-id="d99d8-964">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="d99d8-965">FE 03</span></span>|<span data-ttu-id="d99d8-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-966">cgt.un</span></span>|<span data-ttu-id="d99d8-967">場合 1 をプッシュ`value1`がより大きい`value2`それ以外、0 (符号なしの値) をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-968">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-969">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-970">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-971">`value2` および`value1`スタックからポップされます。`cgt.un`かどうか`value1`がより大きい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-972">場合`value1`がより大きい`value2`1 がスタックにプッシュされます。 それ以外の場合 0 は、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-973">`int32`場合は、次のいずれかが値 1 がスタックにプッシュされる`true`:</span><span class="sxs-lookup"><span data-stu-id="d99d8-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="d99d8-974">浮動小数点数の`value1`に関連する順序付けされていない`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="d99d8-975">整数値の場合は、`value1`がより厳密に大きい`value2`符号なし数値と見なされた場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="d99d8-976">それ以外の場合、 `int32` 0 の値が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-977">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`cgt.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-979">値が有限数ではない場合は、<see cref="T:System.ArithmeticException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-980">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-981">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-981">Format</span></span>|<span data-ttu-id="d99d8-982">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-982">Assembly Format</span></span>|<span data-ttu-id="d99d8-983">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-984">C3</span><span class="sxs-lookup"><span data-stu-id="d99d8-984">C3</span></span>|<span data-ttu-id="d99d8-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="d99d8-985">ckfinite</span></span>|<span data-ttu-id="d99d8-986">スロー<xref:System.ArithmeticException>値が有限数ではない場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="d99d8-987">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-988">`value` スタックにプッシュされます.</span><span class="sxs-lookup"><span data-stu-id="d99d8-988">`value` is pushed onto the stack..</span></span>  
  
2.  <span data-ttu-id="d99d8-989">`value` スタックからポップされ、`ckfinite`命令は、その上で実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="d99d8-990">`value` プッシュ バック スタックに例外がスローされない場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-991">`ckfinite instruction`スロー<xref:System.ArithmeticException>場合`value`(浮動小数点数) は、いずれか、「非数」の値 (NaN) または`+-`無限大の値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="d99d8-992">`Ckfinite` 例外がスローされない場合、スタック上の値のままです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="d99d8-993">実行は指定されていない場合は`value`浮動小数点数値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="d99d8-994"><xref:System.ArithmeticException> 場合にスローされる`value`'normal' 数値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="d99d8-995">なお、特別な例外、またはの派生クラス<xref:System.ArithmeticException>より適切な例外ハンドラーに正しくない値を渡すことがあります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="d99d8-996">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ckfinite`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-998">2 つの値を比較します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-998">Compares two values.</span>
          </span>
          <span data-ttu-id="d99d8-999">最初の値が 2 番目の値より小さい場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1000">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1001">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1001">Format</span></span>|<span data-ttu-id="d99d8-1002">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1002">Assembly Format</span></span>|<span data-ttu-id="d99d8-1003">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="d99d8-1004">FE 04</span></span>|<span data-ttu-id="d99d8-1005">clt</span><span class="sxs-lookup"><span data-stu-id="d99d8-1005">clt</span></span>|<span data-ttu-id="d99d8-1006">場合 1 をプッシュ`value1`はより小さい`value2`それ以外、0 をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="d99d8-1007">シーケンシャルな順序でスタックの遷移動作:`value1`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1007">The stack transitional behavior, in sequential order, is: `value1` is pushed onto the stack.</span></span>  
  
1.  <span data-ttu-id="d99d8-1008">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1008">`value2` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1009">`value2` および`value1`スタックからポップされます。`clt`かどうか`value1`はより小さい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1009">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
3.  <span data-ttu-id="d99d8-1010">場合`value1`はより小さい`value2`1 がスタックにプッシュされます。 それ以外の場合 0 は、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1010">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1011">`clt`命令を比較`value1`と`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1011">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="d99d8-1012">場合`value1`がより厳密に小さい`value2`、`int32`値 1 がスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1012">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="d99d8-1013">それ以外の場合、 `int32` 0 の値が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1013">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="d99d8-1014">浮動小数点数の`clt`(1 つまたは両方の引数が NaN) の場合は、数値は順序付けられていない場合は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1014">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="d99d8-1015">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`clt`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1015">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1016">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1016">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1017">符号なしの値または順序なしの値である <paramref name="value1" /> と <paramref name="value2" /> を比較します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1017">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span>
          </span>
          <span data-ttu-id="d99d8-1018">
            <paramref name="value1" /> が <paramref name="value2" /> より小さい場合は、整数 1 <see langword="(int32" />) が評価スタックにプッシュされます。それ以外の場合は、0 (<see langword="int32" />) が評価スタックにプッシュされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1018">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1019">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1019">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1020">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1020">Format</span></span>|<span data-ttu-id="d99d8-1021">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1021">Assembly Format</span></span>|<span data-ttu-id="d99d8-1022">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1022">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1023">FE 05</span><span class="sxs-lookup"><span data-stu-id="d99d8-1023">FE 05</span></span>|<span data-ttu-id="d99d8-1024">clt.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1024">clt.un</span></span>|<span data-ttu-id="d99d8-1025">場合 1 をプッシュ`value1`はより小さい`value2`それ以外、0 (符号なしの値) をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1025">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="d99d8-1026">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1026">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1027">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1027">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1028">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1028">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-1029">`value2` および`value1`スタックからポップされます。`clt.un`かどうか`value1`はより小さい`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1029">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-1030">場合`value1`はより小さい`value2`1 がスタックにプッシュされます。 それ以外の場合 0 は、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1030">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1031">`clt.un`命令を比較`value1`と`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1031">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="d99d8-1032">`int32` 1 の値が、次のいずれかが当てはまる場合に、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1032">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="d99d8-1033">`value1` より厳密に小さい`value2`(の場合と同様`clt`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1033">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="d99d8-1034">浮動小数点数の`value1`に関連する順序付けされていない`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1034">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="d99d8-1035">整数値の場合は、`value1`がより厳密に小さい`value2`符号なし数値と見なされた場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1035">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="d99d8-1036">それ以外の場合、 `int32` 0 の値が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1036">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1037">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`clt.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1039">仮想メソッド呼び出しをする対象の型を制約します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1039">Constrains the type on which a virtual method call is made.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1040">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft intermediate language (MSIL) アセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1040">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1041">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1041">Format</span></span>|<span data-ttu-id="d99d8-1042">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1042">Assembly Format</span></span>|<span data-ttu-id="d99d8-1043">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1044">FE 16 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-1044">FE 16 < `T` ></span></span>|<span data-ttu-id="d99d8-1045">制約を受けます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1045">constrained.</span></span> `thisType`|<span data-ttu-id="d99d8-1046">型の仮想メソッドの型に制約付き呼び出し`T`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1046">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="d99d8-1047">`constrained`プレフィックスがでのみ許可されて、`callvirt`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1047">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-1048">MSIL スタックをこの時点の状態は、次のようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1048">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="d99d8-1049">マネージ ポインター`ptr`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1049">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="d99d8-1050">型`ptr`マネージ ポインターである必要があります (`&`) に`thisType`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1050">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="d99d8-1051">これは、プレフィックスなしの大文字と小文字を異なることに注意してください`callvirt`命令の参照が必要ですが`thisType`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1051">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="d99d8-1052">メソッドの引数`arg1`を通じて`argN`と同様に、プレフィックスなし、スタックにプッシュ`callvirt`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1052">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-1053">`constrained`プレフィックスは、許可するように設計された`callvirt`独立に作成された一貫した方法かどうかを指示`thisType`が値型または参照型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1053">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="d99d8-1054">ときに、 `callvirt` `method`命令がプレフィックスとして`constrained``thisType`命令の実行は、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1054">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="d99d8-1055">場合`thisType`(値型) ではなく、参照型が`ptr`が逆参照で 'this' へのポインターとして渡され、`callvirt`の`method`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1055">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="d99d8-1056">場合`thisType`値の型と`thisType`を実装する`method`し`ptr`未変更へ 'this' ポインターとして渡される、 `call` `method`の実装のための命令`method`によって`thisType`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1056">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="d99d8-1057">場合`thisType`値の型と`thisType`を実装していません`method`し`ptr`が逆参照、ボックス化、およびを 'this' ポインターとしてやり取りされる、 `callvirt` `method`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1057">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-1058">この場合は最後に発生する可能性がされる場合にのみ`method`で定義されていた<xref:System.Object>、 <xref:System.ValueType>、または<xref:System.Enum>によってオーバーライドされていないと`thisType`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1058">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="d99d8-1059">ここでは、ボックス化できるように、元のオブジェクトのコピーをさせます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1059">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="d99d8-1060">ただし、ためのメソッドのいずれも<xref:System.Object>、 <xref:System.ValueType>、および<xref:System.Enum>状態を変更、オブジェクトのこのファクトを検出できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1060">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="d99d8-1061">`constrained`プレフィックスは、汎用的なコードを作成する IL ジェネレーターをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1061">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="d99d8-1062">通常、`callvirt`命令は値型では無効です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1062">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="d99d8-1063">必須では代わりに IL コンパイラが、'this' の種類によっては、コンパイル時に上記で説明した変換を効率的に実行すること`ptr`と呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1063">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="d99d8-1064">ただし、`ptr`コンパイル時に不明なジェネリック型は、コンパイル時にこの変換を行うことはできません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1064">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="d99d8-1065">`constrained`オペコード IL コンパイラかどうかの方法に依存しない一貫した仮想関数への呼び出しを行うには、`ptr`が値型または参照型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1065">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="d99d8-1066">場合、対象としていますが、`thisType`ジェネリック型の変数は、`constrained`プレフィックスも非ジェネリック型のしくみと、値型と参照型の違いを非表示にする言語で仮想呼び出しの生成の複雑さを軽減できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1066">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="d99d8-1067">使用して、`constrained`プレフィックス値型で、バージョン管理の潜在的な問題を回避できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1067">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="d99d8-1068">場合、`constrained`プレフィックスが使用しない場合、値の型が System.Object のメソッドをオーバーライドするかどうかに応じて異なる IL を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1068">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="d99d8-1069">たとえば、値型の場合`V`Object.ToString() メソッドをオーバーライドし、 `call` `V.ToString()`命令が生成されます。 その場合は、、`box`命令と`callvirt``Object.ToString()`命令が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1069">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="d99d8-1070">バージョン管理の問題が生じる場合は、上書きが後で削除されると、前者の場合、および後者の場合、上書きが後から追加された場合です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1070">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="d99d8-1071">`constrained`プレフィックスこともできます、値の型に対するインターフェイスのメソッドの呼び出しを使用してインターフェイス メソッドを実装する値の型のメソッドを変更できるため、`MethodImpl`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1071">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="d99d8-1072">場合、`constrained`プレフィックスが使用しない場合、コンパイラがコンパイル時にバインドする型のメソッドの選択となる値を求められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1072">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="d99d8-1073">使用して、`constrained`プレフィックスは、コンパイル時ではなく、実行時に、インターフェイス メソッドを実装するメソッドにバインドする MSIL を使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1073">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="d99d8-1074">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`constrained`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1074">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1075">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1075">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1076">評価スタックの一番上の値を <see langword="native int" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1076">Converts the value on top of the evaluation stack to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1077">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1077">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1078">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1078">Format</span></span>|<span data-ttu-id="d99d8-1079">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1079">Assembly Format</span></span>|<span data-ttu-id="d99d8-1080">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1080">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1081">D3</span><span class="sxs-lookup"><span data-stu-id="d99d8-1081">D3</span></span>|<span data-ttu-id="d99d8-1082">conv.i</span><span class="sxs-lookup"><span data-stu-id="d99d8-1082">conv.i</span></span>|<span data-ttu-id="d99d8-1083">変換`native int`プッシュ、`native int`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1083">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1084">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1084">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1085">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1085">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1086">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1086">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1087">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1087">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1088">`conv.i`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1088">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1089">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1089">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1090">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1090">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1091">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1091">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1092">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1092">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1093">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1093">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1094">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1094">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1095">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1095">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1096">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1096">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1097">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1097">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1098">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1098">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1099">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.i`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1099">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1100">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1100">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1101">評価スタックの一番上の値を <see langword="int8" /> に変換し、<see langword="int32" /> への拡張 (埋め込み) を行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1101">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1102">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1102">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1103">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1103">Format</span></span>|<span data-ttu-id="d99d8-1104">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1104">Assembly Format</span></span>|<span data-ttu-id="d99d8-1105">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1105">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1106">67</span><span class="sxs-lookup"><span data-stu-id="d99d8-1106">67</span></span>|<span data-ttu-id="d99d8-1107">conv.i1</span><span class="sxs-lookup"><span data-stu-id="d99d8-1107">conv.i1</span></span>|<span data-ttu-id="d99d8-1108">変換`int8`プッシュ、`int32`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1108">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1109">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1109">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1110">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1110">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1111">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1111">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1112">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1112">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1113">`conv.i1`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1113">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1114">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1114">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1115">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1115">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1116">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1116">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1117">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1117">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1118">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1118">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1119">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1119">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1120">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1120">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1121">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1121">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1122">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1122">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1123">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1123">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1124">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.i1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1124">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1125">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1125">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1126">評価スタックの一番上の値を <see langword="int16" /> に変換し、<see langword="int32" /> への拡張 (埋め込み) を行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1126">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1127">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1127">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1128">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1128">Format</span></span>|<span data-ttu-id="d99d8-1129">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1129">Assembly Format</span></span>|<span data-ttu-id="d99d8-1130">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1130">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1131">68</span><span class="sxs-lookup"><span data-stu-id="d99d8-1131">68</span></span>|<span data-ttu-id="d99d8-1132">conv.i2</span><span class="sxs-lookup"><span data-stu-id="d99d8-1132">conv.i2</span></span>|<span data-ttu-id="d99d8-1133">変換`int16`プッシュ、`int32`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1133">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1134">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1134">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1135">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1135">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1136">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1136">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1137">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1137">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1138">`conv.i2`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1138">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1139">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1139">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1140">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1140">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1141">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1141">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1142">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1142">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1143">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1143">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1144">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1144">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1145">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1145">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1146">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1146">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1147">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1147">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1148">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1148">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1149">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.i2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1149">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1150">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1150">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1151">評価スタックの一番上の値を <see langword="int32" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1151">Converts the value on top of the evaluation stack to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1152">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1152">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1153">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1153">Format</span></span>|<span data-ttu-id="d99d8-1154">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1154">Assembly Format</span></span>|<span data-ttu-id="d99d8-1155">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1155">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1156">69</span><span class="sxs-lookup"><span data-stu-id="d99d8-1156">69</span></span>|<span data-ttu-id="d99d8-1157">conv.i4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1157">conv.i4</span></span>|<span data-ttu-id="d99d8-1158">変換`int32`プッシュ、`int32`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1158">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1159">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1159">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1160">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1160">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1161">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1161">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1162">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1162">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1163">`conv.i4`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1163">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1164">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1164">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1165">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1165">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1166">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1166">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1167">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1167">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1168">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1168">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1169">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1169">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1170">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1170">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1171">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1171">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1172">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1172">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1173">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1173">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1174">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1175">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1175">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1176">評価スタックの一番上の値を <see langword="int64" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1176">Converts the value on top of the evaluation stack to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1177">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1178">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1178">Format</span></span>|<span data-ttu-id="d99d8-1179">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1179">Assembly Format</span></span>|<span data-ttu-id="d99d8-1180">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1181">6A</span><span class="sxs-lookup"><span data-stu-id="d99d8-1181">6A</span></span>|<span data-ttu-id="d99d8-1182">conv.i8</span><span class="sxs-lookup"><span data-stu-id="d99d8-1182">conv.i8</span></span>|<span data-ttu-id="d99d8-1183">変換`int64`プッシュ、`int64`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1183">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1184">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1185">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1185">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1186">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1186">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1187">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1187">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1188">`conv.i8`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1188">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1189">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1189">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1190">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1190">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1191">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1191">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1192">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1192">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1193">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1193">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1194">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1194">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1195">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1195">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1196">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1196">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1197">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1197">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1198">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1198">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1199">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1201">評価スタックの一番上にある符号付きの値を符号付き <see langword="native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1201">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1202">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1203">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1203">Format</span></span>|<span data-ttu-id="d99d8-1204">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1204">Assembly Format</span></span>|<span data-ttu-id="d99d8-1205">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1206">D4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1206">D4</span></span>|<span data-ttu-id="d99d8-1207">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="d99d8-1207">conv.ovf.i</span></span>|<span data-ttu-id="d99d8-1208">変換、 `native int` (スタック上でとして`native int`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1208">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1209">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1210">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1210">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1211">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1211">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1212">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1212">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1213">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1213">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1214">`conv.ovf.i`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1214">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1215">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1215">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1216">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1216">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1217">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1217">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1218"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1218"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1219">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1219">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1220">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1220">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1221">評価スタックの一番上にある符号なしの値を符号付き <see langword="native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1221">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1222">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1222">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1223">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1223">Format</span></span>|<span data-ttu-id="d99d8-1224">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1224">Assembly Format</span></span>|<span data-ttu-id="d99d8-1225">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1225">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1226">8A</span><span class="sxs-lookup"><span data-stu-id="d99d8-1226">8A</span></span>|<span data-ttu-id="d99d8-1227">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1227">conv.ovf.i.un</span></span>|<span data-ttu-id="d99d8-1228">符号なしの値を変換、 `native int` (スタック上でとして`native int`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1228">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1229">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1229">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1230">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1230">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1231">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1231">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1232">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1232">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1233">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1233">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1234">`conv.ovf.i.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1234">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1235">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1235">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1236">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1236">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1237">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1237">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1238"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1238"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1239">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1240">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1240">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1241">評価スタックの一番上にある符号付きの値を符号付き <see langword="int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1241">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1242">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1242">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1243">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1243">Format</span></span>|<span data-ttu-id="d99d8-1244">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1244">Assembly Format</span></span>|<span data-ttu-id="d99d8-1245">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1245">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1246">B3</span><span class="sxs-lookup"><span data-stu-id="d99d8-1246">B3</span></span>|<span data-ttu-id="d99d8-1247">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="d99d8-1247">conv.ovf.i1</span></span>|<span data-ttu-id="d99d8-1248">変換、 `int8` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1248">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1249">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1249">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1250">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1250">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1251">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1251">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1252">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1252">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1253">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1253">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1254">`conv.ovf.i1`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1254">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1255">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1255">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1256">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1256">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1257">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1257">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1258"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1258"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1259">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1260">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1260">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1261">評価スタックの一番上にある符号なしの値を符号付き <see langword="int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1261">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1262">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1263">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1263">Format</span></span>|<span data-ttu-id="d99d8-1264">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1264">Assembly Format</span></span>|<span data-ttu-id="d99d8-1265">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1266">82</span><span class="sxs-lookup"><span data-stu-id="d99d8-1266">82</span></span>|<span data-ttu-id="d99d8-1267">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1267">conv.ovf.i1.un</span></span>|<span data-ttu-id="d99d8-1268">符号なしの値を変換、 `int8` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1268">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1269">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1269">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1270">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1270">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1271">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1271">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1272">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1272">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1273">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1273">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1274">`conv.ovf.i1.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1274">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1275">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1275">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1276">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1276">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1277">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1277">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1278"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1278"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1279">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i1.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1281">評価スタックの一番上にある符号付きの値を符号付き <see langword="int16" /> に変換し、変換した値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1281">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1282">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1283">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1283">Format</span></span>|<span data-ttu-id="d99d8-1284">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1284">Assembly Format</span></span>|<span data-ttu-id="d99d8-1285">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1286">B5</span><span class="sxs-lookup"><span data-stu-id="d99d8-1286">B5</span></span>|<span data-ttu-id="d99d8-1287">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="d99d8-1287">conv.ovf.i2</span></span>|<span data-ttu-id="d99d8-1288">変換、 `int16` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1288">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1289">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1290">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1290">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1291">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1291">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1292">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1292">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1293">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1293">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1294">`conv.ovf.i2`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1294">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1295">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1295">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1296">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1296">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1297">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1297">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1298"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1298"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1299">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1299">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1300">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1300">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1301">評価スタックの一番上にある符号なしの値を符号付き <see langword="int16" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1301">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1302">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1302">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1303">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1303">Format</span></span>|<span data-ttu-id="d99d8-1304">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1304">Assembly Format</span></span>|<span data-ttu-id="d99d8-1305">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1305">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1306">83</span><span class="sxs-lookup"><span data-stu-id="d99d8-1306">83</span></span>|<span data-ttu-id="d99d8-1307">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1307">conv.ovf.i2.un</span></span>|<span data-ttu-id="d99d8-1308">符号なしの値を変換、 `int16` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1308">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1309">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1309">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1310">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1310">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1311">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1311">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1312">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1312">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1313">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1313">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1314">`conv.ovf.i2.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1314">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1315">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1315">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1316">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1316">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1317">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1317">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1318"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1318"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1319">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i2.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1319">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1320">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1320">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1321">評価スタックの一番上にある符号付きの値を符号付き <see langword="int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1321">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1322">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1322">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1323">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1323">Format</span></span>|<span data-ttu-id="d99d8-1324">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1324">Assembly Format</span></span>|<span data-ttu-id="d99d8-1325">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1325">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1326">B7</span><span class="sxs-lookup"><span data-stu-id="d99d8-1326">B7</span></span>|<span data-ttu-id="d99d8-1327">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1327">conv.ovf.i4</span></span>|<span data-ttu-id="d99d8-1328">変換、 `int32` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1328">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1329">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1329">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1330">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1330">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1331">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1331">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1332">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1332">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1333">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1333">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1334">`conv.ovf.i4`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1334">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1335">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1335">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1336">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1336">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1337">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1337">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1338"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1338"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1339">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1339">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1340">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1340">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1341">評価スタックの一番上にある符号なしの値を符号付き <see langword="int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1341">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1342">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1342">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1343">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1343">Format</span></span>|<span data-ttu-id="d99d8-1344">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1344">Assembly Format</span></span>|<span data-ttu-id="d99d8-1345">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1345">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1346">84</span><span class="sxs-lookup"><span data-stu-id="d99d8-1346">84</span></span>|<span data-ttu-id="d99d8-1347">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1347">conv.ovf.i4.un</span></span>|<span data-ttu-id="d99d8-1348">符号なしの値を変換、 `int32` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1348">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1349">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1349">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1350">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1350">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1351">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1351">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1352">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1352">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1353">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1353">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1354">`conv.ovf.i4.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1354">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1355">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1355">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1356">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1356">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1357">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1357">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1358"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1358"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1359">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i4.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1360">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1360">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1361">評価スタックの一番上にある符号付きの値を符号付き <see langword="int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1361">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1362">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1363">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1363">Format</span></span>|<span data-ttu-id="d99d8-1364">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1364">Assembly Format</span></span>|<span data-ttu-id="d99d8-1365">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1366">B9</span><span class="sxs-lookup"><span data-stu-id="d99d8-1366">B9</span></span>|<span data-ttu-id="d99d8-1367">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="d99d8-1367">conv.ovf.i8</span></span>|<span data-ttu-id="d99d8-1368">変換、 `int64` (スタック上でとして`int64`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1368">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1369">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1370">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1370">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1371">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1371">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1372">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1372">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1373">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1373">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1374">`conv.ovf.i8`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1374">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1375">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1375">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1376">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1376">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1377">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1377">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1378"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1378"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1379">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1379">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1380">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1380">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1381">評価スタックの一番上にある符号なしの値を符号付き <see langword="int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1381">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1382">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1382">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1383">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1383">Format</span></span>|<span data-ttu-id="d99d8-1384">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1384">Assembly Format</span></span>|<span data-ttu-id="d99d8-1385">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1385">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1386">85</span><span class="sxs-lookup"><span data-stu-id="d99d8-1386">85</span></span>|<span data-ttu-id="d99d8-1387">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1387">conv.ovf.i8.un</span></span>|<span data-ttu-id="d99d8-1388">符号なしの値を変換、 `int64` (スタック上でとして`int64`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1388">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1389">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1389">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1390">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1390">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1391">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1391">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1392">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1392">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1393">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1393">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1394">`conv.ovf.i8.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1394">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1395">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1395">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1396">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1396">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1397">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1397">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1398"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1398"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1399">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.i8.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1399">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1400">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1400">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1401">評価スタックの一番上にある符号付きの値を <see langword="unsigned native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1401">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1402">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1402">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1403">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1403">Format</span></span>|<span data-ttu-id="d99d8-1404">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1404">Assembly Format</span></span>|<span data-ttu-id="d99d8-1405">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1405">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1406">D5</span><span class="sxs-lookup"><span data-stu-id="d99d8-1406">D5</span></span>|<span data-ttu-id="d99d8-1407">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="d99d8-1407">conv.ovf.u</span></span>|<span data-ttu-id="d99d8-1408">変換、 `unsigned native int` (スタック上でとして`native int`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1408">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1409">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1409">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1410">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1410">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1411">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1411">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1412">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1412">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1413">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1413">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1414">`conv.ovf.u`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1414">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1415">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1415">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1416">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1416">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1417">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1417">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1418"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1418"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1419">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1419">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1420">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1420">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1421">評価スタックの一番上にある符号なしの値を <see langword="unsigned native int" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1421">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1422">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1422">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1423">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1423">Format</span></span>|<span data-ttu-id="d99d8-1424">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1424">Assembly Format</span></span>|<span data-ttu-id="d99d8-1425">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1425">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1426">8B</span><span class="sxs-lookup"><span data-stu-id="d99d8-1426">8B</span></span>|<span data-ttu-id="d99d8-1427">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1427">conv.ovf.u.un</span></span>|<span data-ttu-id="d99d8-1428">値を符号、 `unsigned native int` (スタック上でとして`native int`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1428">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1429">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1429">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1430">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1430">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1431">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1431">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1432">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1432">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1433">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1433">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1434">`conv.ovf.u.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1434">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1435">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1435">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1436">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1436">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1437">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1437">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1438"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1438"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1439">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.uvf.u.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1439">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1440">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1440">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1441">評価スタックの一番上にある符号付きの値を <see langword="unsigned int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1441">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1442">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1442">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1443">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1443">Format</span></span>|<span data-ttu-id="d99d8-1444">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1444">Assembly Format</span></span>|<span data-ttu-id="d99d8-1445">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1445">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1446">B4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1446">B4</span></span>|<span data-ttu-id="d99d8-1447">conv.ovf.u1</span><span class="sxs-lookup"><span data-stu-id="d99d8-1447">conv.ovf.u1</span></span>|<span data-ttu-id="d99d8-1448">変換、 `unsigned int8` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1448">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1449">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1449">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1450">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1450">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1451">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1451">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1452">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1452">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1453">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1453">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1454">`conv.ovf.u1`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1454">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1455">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1455">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1456">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1456">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1457">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1457">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1458"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1458"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1459">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1461">評価スタックの一番上にある符号なしの値を <see langword="unsigned int8" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1461">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1462">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1463">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1463">Format</span></span>|<span data-ttu-id="d99d8-1464">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1464">Assembly Format</span></span>|<span data-ttu-id="d99d8-1465">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1466">86</span><span class="sxs-lookup"><span data-stu-id="d99d8-1466">86</span></span>|<span data-ttu-id="d99d8-1467">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1467">conv.ovf.u1.un</span></span>|<span data-ttu-id="d99d8-1468">符号なしの値を変換、 `unsigned int8` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1468">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1469">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1470">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1470">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1471">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1471">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1472">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1472">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1473">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1473">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1474">`conv.ovf.u1.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1474">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1475">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1475">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1476">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1476">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1477">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1477">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1478"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1478"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1479">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u1.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1479">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1480">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1480">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1481">評価スタックの一番上にある符号付きの値を <see langword="unsigned int16" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1481">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1482">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1482">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1483">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1483">Format</span></span>|<span data-ttu-id="d99d8-1484">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1484">Assembly Format</span></span>|<span data-ttu-id="d99d8-1485">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1485">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1486">B6</span><span class="sxs-lookup"><span data-stu-id="d99d8-1486">B6</span></span>|<span data-ttu-id="d99d8-1487">conv.ovf.u2</span><span class="sxs-lookup"><span data-stu-id="d99d8-1487">conv.ovf.u2</span></span>|<span data-ttu-id="d99d8-1488">変換、 `unsigned int16` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1488">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1489">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1489">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1490">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1490">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1491">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1491">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1492">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1492">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1493">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1493">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1494">`conv.ovf.u2`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1494">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1495">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1495">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1496">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1496">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1497">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1497">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1498"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1498"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1499">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1500">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1500">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1501">評価スタックの一番上にある符号なしの値を <see langword="unsigned int16" /> に変換し、その値を <see langword="int32" /> に拡張し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1501">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1502">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1503">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1503">Format</span></span>|<span data-ttu-id="d99d8-1504">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1504">Assembly Format</span></span>|<span data-ttu-id="d99d8-1505">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1506">87</span><span class="sxs-lookup"><span data-stu-id="d99d8-1506">87</span></span>|<span data-ttu-id="d99d8-1507">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1507">conv.ovf.u2.un</span></span>|<span data-ttu-id="d99d8-1508">符号なしの値を変換、 `unsigned int16` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1508">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1509">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1510">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1510">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1511">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1511">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1512">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1512">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1513">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1513">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1514">`conv.ovf.u2.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1514">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1515">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1515">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1516">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1516">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1517">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1517">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1518"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1518"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1519">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u2.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1519">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1520">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1520">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1521">評価スタックの一番上にある符号付きの値を <see langword="unsigned int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1521">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1522">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1522">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1523">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1523">Format</span></span>|<span data-ttu-id="d99d8-1524">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1524">Assembly Format</span></span>|<span data-ttu-id="d99d8-1525">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1525">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1526">B8</span><span class="sxs-lookup"><span data-stu-id="d99d8-1526">B8</span></span>|<span data-ttu-id="d99d8-1527">conv.ovf.u4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1527">conv.ovf.u4</span></span>|<span data-ttu-id="d99d8-1528">変換、 `unsigned int32` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1528">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1529">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1529">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1530">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1530">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1531">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1531">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1532">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1532">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1533">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1533">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1534">`conv.ovf.u4`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1534">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1535">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1535">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1536">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1536">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1537">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1537">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1538"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1538"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1539">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1539">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1540">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1540">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1541">評価スタックの一番上にある符号なしの値を <see langword="unsigned int32" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1541">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1542">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1542">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1543">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1543">Format</span></span>|<span data-ttu-id="d99d8-1544">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1544">Assembly Format</span></span>|<span data-ttu-id="d99d8-1545">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1545">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1546">88</span><span class="sxs-lookup"><span data-stu-id="d99d8-1546">88</span></span>|<span data-ttu-id="d99d8-1547">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1547">conv.ovf.u4.un</span></span>|<span data-ttu-id="d99d8-1548">符号なしの値を変換、 `unsigned int32` (スタック上でとして`int32`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1548">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1549">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1549">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1550">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1550">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1551">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1551">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1552">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1552">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1553">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1553">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1554">`conv.ovf.u4.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1554">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1555">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1555">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1556">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1556">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1557">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1557">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1558"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1558"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1559">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u4.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1559">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1560">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1560">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1561">評価スタックの一番上にある符号付きの値を <see langword="unsigned int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1561">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1562">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1562">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1563">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1563">Format</span></span>|<span data-ttu-id="d99d8-1564">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1564">Assembly Format</span></span>|<span data-ttu-id="d99d8-1565">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1565">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1566">BA</span><span class="sxs-lookup"><span data-stu-id="d99d8-1566">BA</span></span>|<span data-ttu-id="d99d8-1567">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="d99d8-1567">conv.ovf.u8</span></span>|<span data-ttu-id="d99d8-1568">変換、 `unsigned int64` (スタック上でとして`int64`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1568">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1569">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1569">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1570">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1570">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1571">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1571">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1572">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1572">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1573">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1573">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1574">`conv.ovf.u8`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1574">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1575">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1575">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1576">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1576">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1577">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1577">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1578"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1578"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1579">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1579">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1580">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1580">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1581">評価スタックの一番上にある符号なしの値を <see langword="unsigned int64" /> に変換し、オーバーフローについては <see cref="T:System.OverflowException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1581">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1582">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1582">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1583">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1583">Format</span></span>|<span data-ttu-id="d99d8-1584">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1584">Assembly Format</span></span>|<span data-ttu-id="d99d8-1585">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1585">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1586">89</span><span class="sxs-lookup"><span data-stu-id="d99d8-1586">89</span></span>|<span data-ttu-id="d99d8-1587">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1587">conv.ovf.u8.un</span></span>|<span data-ttu-id="d99d8-1588">符号なしの値を変換、 `unsigned int64` (スタック上でとして`int64`)、オーバーフロー例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1588">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="d99d8-1589">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1589">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1590">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1590">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1591">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1591">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="d99d8-1592">オーバーフローが発生した場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1592">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="d99d8-1593">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1593">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1594">`conv.ovf.u8.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上の場所で指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1594">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1595">値が大きすぎる、または対象の型で表現するのには小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1595">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d99d8-1596">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1596">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="d99d8-1597">4 バイト未満の整数値に拡張されたことに注意してください`int32`を評価スタックに読み込まれるとき (しない限り、`conv.ovf.i`または`conv.ovf.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1597">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-1598"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1598"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-1599">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.ovf.u8.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1599">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1600">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1600">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1601">評価スタックの一番上の符号なし整数値を <see langword="float32" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1601">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1602">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1602">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1603">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1603">Format</span></span>|<span data-ttu-id="d99d8-1604">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1604">Assembly Format</span></span>|<span data-ttu-id="d99d8-1605">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1605">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1606">76</span><span class="sxs-lookup"><span data-stu-id="d99d8-1606">76</span></span>|<span data-ttu-id="d99d8-1607">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1607">conv.r.un</span></span>|<span data-ttu-id="d99d8-1608">変換する符号なし整数、浮動小数点のプッシュ`F`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1608">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1609">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1609">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1610">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1610">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1611">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1611">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1612">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1612">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1613">`conv.r.un`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1613">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1614">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1614">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1615">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1615">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1616">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1616">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1617">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1617">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1618">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1618">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1619">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1619">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1620">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1620">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1621">浮動小数点型を整数に変換するオーバーフローが発生した場合、`result`返されるは指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1621">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="d99d8-1622">`conv.r.un`操作整数スタックでは、署名されていないとして解釈および整数を表す浮動小数点数に置き換えられます: いずれか、`float32`これは、精度の損失のない整数を表すの十分な場合、またはしない場合、`float64`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1622">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="d99d8-1623">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1623">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="d99d8-1624">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.r.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1626">評価スタックの一番上の値を <see langword="float32" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1626">Converts the value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1627">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1628">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1628">Format</span></span>|<span data-ttu-id="d99d8-1629">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1629">Assembly Format</span></span>|<span data-ttu-id="d99d8-1630">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1631">6B</span><span class="sxs-lookup"><span data-stu-id="d99d8-1631">6B</span></span>|<span data-ttu-id="d99d8-1632">conv.r4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1632">conv.r4</span></span>|<span data-ttu-id="d99d8-1633">変換`float32`プッシュ、`F`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1633">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1634">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1635">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1635">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1636">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1636">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1637">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1637">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1638">`conv.r4`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1638">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1639">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1639">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1640">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1640">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1641">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1641">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1642">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1642">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1643">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1643">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1644">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1644">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1645">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1645">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1646">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1646">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1647">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1647">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="d99d8-1648">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.r4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1648">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1649">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1649">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1650">評価スタックの一番上の値を <see langword="float64" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1650">Converts the value on top of the evaluation stack to <see langword="float64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1651">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1651">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1652">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1652">Format</span></span>|<span data-ttu-id="d99d8-1653">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1653">Assembly Format</span></span>|<span data-ttu-id="d99d8-1654">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1654">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1655">6C</span><span class="sxs-lookup"><span data-stu-id="d99d8-1655">6C</span></span>|<span data-ttu-id="d99d8-1656">conv.r8</span><span class="sxs-lookup"><span data-stu-id="d99d8-1656">conv.r8</span></span>|<span data-ttu-id="d99d8-1657">変換`float64`プッシュ、`F`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1657">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1658">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1658">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1659">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1659">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1660">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1660">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1661">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1661">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1662">`conv.r8`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1662">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1663">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1663">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1664">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1664">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1665">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1665">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1666">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1666">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1667">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1667">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1668">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1668">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1669">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1669">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1670">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1670">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1671">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1671">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="d99d8-1672">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.r8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1672">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1673">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1673">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1674">評価スタックの一番上の値を <see langword="unsigned native int" /> に変換し、その値を <see langword="native int" /> に拡張します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1674">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1675">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1675">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1676">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1676">Format</span></span>|<span data-ttu-id="d99d8-1677">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1677">Assembly Format</span></span>|<span data-ttu-id="d99d8-1678">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1678">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1679">E0</span><span class="sxs-lookup"><span data-stu-id="d99d8-1679">E0</span></span>|<span data-ttu-id="d99d8-1680">conv.u</span><span class="sxs-lookup"><span data-stu-id="d99d8-1680">conv.u</span></span>|<span data-ttu-id="d99d8-1681">変換`unsigned native int`プッシュ、`native int`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1681">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1682">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1682">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1683">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1683">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1684">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1684">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1685">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1685">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1686">`conv.u`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1686">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1687">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1687">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1688">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1688">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1689">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1689">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1690">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1690">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1691">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1691">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1692">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1692">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1693">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1693">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1694">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1694">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1695">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1695">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1696">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1696">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1697">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.u`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1699">評価スタックの一番上の値を <see langword="unsigned int8" /> に変換し、その値を <see langword="int32" /> に拡張します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1699">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1700">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1701">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1701">Format</span></span>|<span data-ttu-id="d99d8-1702">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1702">Assembly Format</span></span>|<span data-ttu-id="d99d8-1703">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1704">D2</span><span class="sxs-lookup"><span data-stu-id="d99d8-1704">D2</span></span>|<span data-ttu-id="d99d8-1705">conv.u1</span><span class="sxs-lookup"><span data-stu-id="d99d8-1705">conv.u1</span></span>|<span data-ttu-id="d99d8-1706">変換`int8`プッシュ、`int32`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1706">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1707">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1708">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1708">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1709">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1709">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1710">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1710">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1711">`conv.u1`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1711">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1712">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1712">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1713">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1713">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1714">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1714">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1715">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1715">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1716">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1716">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1717">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1717">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1718">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1718">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1719">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1719">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1720">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1720">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1721">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1721">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1722">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.u1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1723">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1723">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1724">評価スタックの一番上の値を <see langword="unsigned int16" /> に変換し、その値を <see langword="int32" /> に拡張します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1724">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1725">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1726">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1726">Format</span></span>|<span data-ttu-id="d99d8-1727">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1727">Assembly Format</span></span>|<span data-ttu-id="d99d8-1728">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1729">D1</span><span class="sxs-lookup"><span data-stu-id="d99d8-1729">D1</span></span>|<span data-ttu-id="d99d8-1730">conv.u2</span><span class="sxs-lookup"><span data-stu-id="d99d8-1730">conv.u2</span></span>|<span data-ttu-id="d99d8-1731">変換`int16`プッシュ、`int32`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1731">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1732">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1733">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1733">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1734">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1734">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1735">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1735">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1736">`conv.u2`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1736">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1737">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1737">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1738">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1738">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1739">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1739">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1740">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1740">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1741">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1741">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1742">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1742">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1743">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1743">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1744">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1744">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1745">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1745">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1746">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1746">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1747">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.u2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1747">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1748">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1748">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1749">評価スタックの一番上の値を <see langword="unsigned int32" /> に変換し、その値を <see langword="int32" /> に拡張します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1749">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1750">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1750">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1751">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1751">Format</span></span>|<span data-ttu-id="d99d8-1752">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1752">Assembly Format</span></span>|<span data-ttu-id="d99d8-1753">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1753">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1754">6D</span><span class="sxs-lookup"><span data-stu-id="d99d8-1754">6D</span></span>|<span data-ttu-id="d99d8-1755">conv.u4</span><span class="sxs-lookup"><span data-stu-id="d99d8-1755">conv.u4</span></span>|<span data-ttu-id="d99d8-1756">変換`unsigned int32`プッシュ、`int32`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1756">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1757">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1757">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1758">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1758">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1759">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1759">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1760">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1760">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1761">`conv.u4`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1761">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1762">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1762">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1763">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1763">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1764">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1764">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1765">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1765">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1766">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1766">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1767">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1767">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1768">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1768">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1769">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1769">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1770">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1770">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1771">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1771">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1772">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.u4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1772">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1773">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1773">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1774">評価スタックの一番上の値を <see langword="unsigned int64" /> に変換し、その値を <see langword="int64" /> に拡張します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1774">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1775">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1775">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1776">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1776">Format</span></span>|<span data-ttu-id="d99d8-1777">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1777">Assembly Format</span></span>|<span data-ttu-id="d99d8-1778">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1778">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1779">6E</span><span class="sxs-lookup"><span data-stu-id="d99d8-1779">6E</span></span>|<span data-ttu-id="d99d8-1780">conv.u8</span><span class="sxs-lookup"><span data-stu-id="d99d8-1780">conv.u8</span></span>|<span data-ttu-id="d99d8-1781">変換`int64`プッシュ、`int64`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1781">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1782">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1782">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1783">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1783">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1784">`value` ポップされ、スタックとの変換から、操作が試行されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1784">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="d99d8-1785">変換が成功した場合は、結果の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1785">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1786">`conv.u8`オペコードの変換、`value`履歴オペコード、および変換した値をスタックの一番上のままにして指定された型を上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1786">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="d99d8-1787">4 バイト未満の整数値に拡張されます`int32`を評価スタックに読み込まれるとき (しない限り、`conv.i`または`conv.u`を使用する結果がいる場合も`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1787">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="d99d8-1788">浮動小数点値に変換する、`F`型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1788">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="d99d8-1789">浮動小数点数から整数値への変換では、数値 0 方向に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1789">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="d99d8-1790">変換するときに、`float64`を`float32`精度が失われることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1790">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="d99d8-1791">場合`value`が大きすぎますに収まるように、 `float32 (F)`、正の無限大 (場合`value`が正の値) または負の無限大 (場合`value`が負の値) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1791">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="d99d8-1792">変換する際の 1 つの整数型間のオーバーフローが発生する場合は、上位ビットが切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1792">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="d99d8-1793">結果がより小さい場合、`int32`値は符号拡張スロットにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1793">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="d99d8-1794">オーバーフローが発生した場合は、返される値を整数、浮動小数点型の変換指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1794">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="d99d8-1795">このフィールドを使用する場合は、例外はこれまでスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1795">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="d99d8-1796">参照してください<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8>と<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>結果型は、結果の値を正しく表すことができないときに例外をスローする手順については等価です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1796">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="d99d8-1797">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`conv.u8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1797">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1798">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1798">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1799">ソース アドレスから指定した数のバイトを宛先アドレスにコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1799">Copies a specified number bytes from a source address to a destination address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1800">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1800">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1801">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1801">Format</span></span>|<span data-ttu-id="d99d8-1802">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1802">Assembly Format</span></span>|<span data-ttu-id="d99d8-1803">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1803">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1804">FE 17</span><span class="sxs-lookup"><span data-stu-id="d99d8-1804">FE 17</span></span>|<span data-ttu-id="d99d8-1805">cpblk</span><span class="sxs-lookup"><span data-stu-id="d99d8-1805">cpblk</span></span>|<span data-ttu-id="d99d8-1806">データを別の 1 つのメモリ ブロックにコピーします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1806">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="d99d8-1807">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1807">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1808">送信先アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1808">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1809">送信元アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1809">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-1810">コピーするバイト数は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1810">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-1811">バイト、発信元アドレスおよび宛先アドレスの数がスタックからポップされます。指定したバイト数は、宛先アドレスに送信元アドレスからコピーされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1811">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="d99d8-1812">`cpblk`命令数のコピー (型`unsigned int32`) ソース アドレスからのバイトの (型の`*`、 `native int`、または`&`) を移行先のアドレス (型の`*`、 `native int`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1812">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="d99d8-1813">動作`cpblk`元とコピー先の領域が重なっている場合は指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1813">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="d99d8-1814">`cpblk` ソースと宛先のアドレス指定の両方が、マシンの自然なサイズに合わせて配置されると仮定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1814">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="d99d8-1815">`cpblk`命令のすぐ前に、`unaligned.<prefix>`元または転送先にアラインされたがないことを示す命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1815">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="d99d8-1816">操作、`cpblk`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1816">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-1817"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローされる可能性がします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1817"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-1818">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`cpblk`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1820">オブジェクトのアドレス (<see langword="&amp;" />、<see langword="*" />、または <see langword="native int" /> の各型) にある値型をコピー先のオブジェクトのアドレス (<see langword="&amp;" />、<see langword="*" />、または <see langword="native int" /> の各型) にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1820">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1821">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1822">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1822">Format</span></span>|<span data-ttu-id="d99d8-1823">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1823">Assembly Format</span></span>|<span data-ttu-id="d99d8-1824">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1825">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-1825">70 < `T` ></span></span>|<span data-ttu-id="d99d8-1826">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="d99d8-1826">cpobj `classTok`</span></span>|<span data-ttu-id="d99d8-1827">値のコピーをソース オブジェクトから変換先オブジェクトに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1827">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="d99d8-1828">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1829">移行先のオブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1829">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1830">ソース オブジェクトの参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1830">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-1831">2 つのオブジェクト参照がスタックからポップされます。ソース オブジェクトのアドレスの値の型は、対象オブジェクトのアドレスにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1831">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="d99d8-1832">動作`cpobj`元と移行先のオブジェクトの参照がクラス トークンによって表されるクラスのインスタンスへのポインターでない場合に指定されていない`classTok`(、`typeref`または`typedef`)、または`classTok`値の型を表していません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1832">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="d99d8-1833"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローされる可能性がします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1833"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-1834">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`cpobj`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1834">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1835">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1835">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1836">2 つの値の除算を実行し、結果を浮動小数点値 (<see langword="F" /> 型) または商 (<see langword="int32" /> 型) として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1836">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1837">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1837">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1838">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1838">Format</span></span>|<span data-ttu-id="d99d8-1839">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1839">Assembly Format</span></span>|<span data-ttu-id="d99d8-1840">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1840">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1841">5B</span><span class="sxs-lookup"><span data-stu-id="d99d8-1841">5B</span></span>|<span data-ttu-id="d99d8-1842">div</span><span class="sxs-lookup"><span data-stu-id="d99d8-1842">div</span></span>|<span data-ttu-id="d99d8-1843">商または浮動小数点の結果を返す 2 つの値を除算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1843">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="d99d8-1844">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1844">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1845">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1845">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1846">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1846">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-1847">`value2` および`value1`スタックからポップされます。`value1`で割った値`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1847">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-1848">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1848">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1849">`result` = `value1` div value2 は、次の条件を満たします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1849">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="d99d8-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span><span class="sxs-lookup"><span data-stu-id="d99d8-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="d99d8-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="d99d8-1852">`div`命令は、結果を計算し、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1852">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1853">整数の除算はゼロに向かって切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1853">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="d99d8-1854">有限数 0 による除算では、正しく署名された無限値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1854">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="d99d8-1855">0 を 0 または無限無限大 NaN (Not A Number) 値で除算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1855">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="d99d8-1856">任意の数が無限大で割った値ゼロの値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1856">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="d99d8-1857">整数演算でスロー<xref:System.ArithmeticException>場合は、結果を結果の型で表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1857">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="d99d8-1858">これは、場合に発生`value1`最大負の値と`value2`-1 です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1858">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="d99d8-1859">整数演算でスロー<xref:System.DivideByZeroException>場合`value2`ゼロです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1859">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="d99d8-1860">Intel ベース プラットフォームなお、 <xref:System.OverflowException> (minint div-1) を計算するときにスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1860">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="d99d8-1861">浮動小数点演算では、(されるので、nans 値や無限大代わりに)、例外がスローされません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1861">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="d99d8-1862">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`div`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1862">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1863">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1863">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1864">2 つの符号なし整数値を除算し、結果 (<see langword="int32" />) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1864">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1865">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1865">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1866">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1866">Format</span></span>|<span data-ttu-id="d99d8-1867">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1867">Assembly Format</span></span>|<span data-ttu-id="d99d8-1868">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1868">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1869">5C</span><span class="sxs-lookup"><span data-stu-id="d99d8-1869">5C</span></span>|<span data-ttu-id="d99d8-1870">div.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-1870">div.un</span></span>|<span data-ttu-id="d99d8-1871">2 つの値を除算、署名なし、し、商を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1871">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="d99d8-1872">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1872">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1873">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1873">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1874">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1874">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-1875">`value2` および`value1`スタックからポップされます。`value1`で割った値`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1875">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-1876">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1876">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1877">`div.un`命令計算`value1`で割った値`value2`、どちらも、符号なし整数とプッシュとして実行される、`result`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1877">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1878">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`div.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1878">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1879">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1879">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1880">現在評価スタックの一番上にある値をコピーし、そのコピーを評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1880">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1881">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1881">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1882">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1882">Format</span></span>|<span data-ttu-id="d99d8-1883">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1883">Assembly Format</span></span>|<span data-ttu-id="d99d8-1884">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1884">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1885">25</span><span class="sxs-lookup"><span data-stu-id="d99d8-1885">25</span></span>|<span data-ttu-id="d99d8-1886">dup</span><span class="sxs-lookup"><span data-stu-id="d99d8-1886">dup</span></span>|<span data-ttu-id="d99d8-1887">スタックの一番上の値を複製します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1887">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-1888">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1888">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1889">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1889">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1890">`value` 複製用スタックからポップされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1890">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="d99d8-1891">`value` プッシュ バック スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1891">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-1892">重複する値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1892">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1893">`dup`命令がスタックの最上位の要素を複製し、2 つの同一の値のままにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1893">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="d99d8-1894">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`dup`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1895">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1895">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1896">例外の <see langword="filter" /> 句から共通言語基盤 (CLI) 例外ハンドラーに制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1896">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1897">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1897">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1898">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1898">Format</span></span>|<span data-ttu-id="d99d8-1899">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1899">Assembly Format</span></span>|<span data-ttu-id="d99d8-1900">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1900">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1901">FE 11</span><span class="sxs-lookup"><span data-stu-id="d99d8-1901">FE 11</span></span>|<span data-ttu-id="d99d8-1902">endfilter</span><span class="sxs-lookup"><span data-stu-id="d99d8-1902">endfilter</span></span>|<span data-ttu-id="d99d8-1903">SEH 例外処理のフィルター句を終了します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1903">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="d99d8-1904">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1904">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1905">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1905">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1906">`value` スタックからポップされます。`endfilter`が実行されると、例外ハンドラーに制御が移ります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1906">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="d99d8-1907">`Value` (型でなければならない`int32`特定の値セットの 1 つ) がフィルター句から返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1907">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="d99d8-1908">いずれかを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1908">It should be one of:</span></span>  
  
-   <span data-ttu-id="d99d8-1909">`exception_continue_search` (`value` = 0)、例外ハンドラーの検索を続行するには</span><span class="sxs-lookup"><span data-stu-id="d99d8-1909">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="d99d8-1910">`exception_execute_handler` (`value` = 1) を 2 つ目の開始場所 finally ブロックはまで実行ハンドラーは、このフィルター句に関連付けられている例外処理のフェーズが配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1910">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="d99d8-1911">探索時に、ハンドラーが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1911">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="d99d8-1912">その他の整数値を指定されていない結果となります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1912">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="d99d8-1913">フィルターのエントリ ポイント メソッドの例外の表に示すようにするとフィルターのコード ブロックの最初の命令がある必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1913">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="d99d8-1914">`endfilter`命令は、フィルターのコード ブロックの最後の命令である必要があります (したがってのみ存在できますいずれかの`endfilter`の任意の 1 つのフィルター ブロック) します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1914">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="d99d8-1915">実行した後、`endfilter`命令の制御に論理的にフロー CLI の例外処理機構にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1915">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="d99d8-1916">例外処理機構を通じてを除くフィルター ブロックに制御を転送できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1916">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="d99d8-1917">コントロールは、以外を使用すると、フィルター ブロック外へ転送することはできません、`throw`命令または最終的なを実行することによって`endfilter`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1917">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="d99d8-1918">埋め込むことはできません、`try`ブロック内で、`filter`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1918">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="d99d8-1919">内部例外がスローされた場合、`filter`ブロックが傍受と 0 の値 (`exception_continue_search`) が返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1919">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="d99d8-1920">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`endfilter`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1920">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1921">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1921">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1922">例外ブロックの <see langword="fault" /> 句または <see langword="finally" /> 句から共通言語基盤 (CLI) 例外ハンドラーに制御を転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1922">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1923">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1923">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1924">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1924">Format</span></span>|<span data-ttu-id="d99d8-1925">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1925">Assembly Format</span></span>|<span data-ttu-id="d99d8-1926">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1926">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1927">DC</span><span class="sxs-lookup"><span data-stu-id="d99d8-1927">DC</span></span>|<span data-ttu-id="d99d8-1928">endfinally</span><span class="sxs-lookup"><span data-stu-id="d99d8-1928">endfinally</span></span><br /><br /> <span data-ttu-id="d99d8-1929">endfault</span><span class="sxs-lookup"><span data-stu-id="d99d8-1929">endfault</span></span>|<span data-ttu-id="d99d8-1930">終了、`finally`または`fault`例外ブロックの句。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1930">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="d99d8-1931">スタックこの命令の遷移の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1931">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-1932">`Endfinally` および`endfault`の終わり、`finally`または`fault`例外ハンドラーが呼び出されるまでそのスタック アンワインドを継続できるように句。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1932">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="d99d8-1933">`endfinally`または`endfault`命令は、CLI 例外処理機構に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1933">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="d99d8-1934">次の検索され、メカニズム`finally`leave 命令で保護されたブロックが終了した場合、チェーン内の句。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1934">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="d99d8-1935">保護されたブロックは例外で終了しましたが場合、CLI、次を検索`finally`または`fault`、または例外処理の最初のパスの中に、選択した例外ハンドラーを入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1935">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="d99d8-1936">`endfinally`命令が構文的に内に表示されるのみ、`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1936">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="d99d8-1937">異なり、`endfilter`命令でブロックが終了する必要はありません、`endfinally`命令、およびが多くあります`endfinally`必要に応じてブロック内の指示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1937">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="d99d8-1938">これらの同じ制限が適用、`endfault`命令と`fault`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1938">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="d99d8-1939">コントロールに転送できません、 `finally` (または`fault`) を除く例外処理機構を通じてをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1939">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="d99d8-1940">制御を転送できません、 `finally` (または`fault`) の使用によりのブロックを除く、`throw`命令またはを実行する、 `endfinally` (または`endfault`) 命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1940">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="d99d8-1941">具体的には、する落ちることはできません"out"の`finally`(または`fault`) ブロックまたは実行する、<xref:System.Reflection.Emit.OpCodes.Ret>または<xref:System.Reflection.Emit.OpCodes.Leave>内の命令、 `finally` (または`fault`) ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1941">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="d99d8-1942">なお、`endfault`と`endfinally`手順については、別名 - 同一の opcode に対応します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1942">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="d99d8-1943">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、 `endfinally` (`endfault`) オペコード、だけでなく`ILGenerator`メソッド<xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1943">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="d99d8-1944">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1944">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="d99d8-1945">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="d99d8-1945">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1946">特定のアドレスの指定したメモリ ブロックを、指定のサイズと初期値に初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1946">Initializes a specified block of memory at a specific address to a given size and initial value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1947">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1947">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1948">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1948">Format</span></span>|<span data-ttu-id="d99d8-1949">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1949">Assembly Format</span></span>|<span data-ttu-id="d99d8-1950">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1950">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1951">FE 18</span><span class="sxs-lookup"><span data-stu-id="d99d8-1951">FE 18</span></span>|<span data-ttu-id="d99d8-1952">initblk</span><span class="sxs-lookup"><span data-stu-id="d99d8-1952">initblk</span></span>|<span data-ttu-id="d99d8-1953">指定した値にメモリ ブロックのそれぞれの場所を設定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1953">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="d99d8-1954">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1954">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1955">開始アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1955">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1956">初期値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1956">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-1957">初期化するためにバイトの数は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1957">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-1958">バイトの数、初期値、開始アドレスは、スタックからポップされます。 され、それらの値に従って、初期化が行われます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1958">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="d99d8-1959">`initblk`命令数を設定します (`unsigned int32`) 指定したアドレスで始まるバイト (型の`native int`、 `&`、または`*`) の初期化の値に (型の`unsigned int8`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1959">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="d99d8-1960">`initblk` 開始アドレスがマシンの自然なサイズに合わせて配置されると仮定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1960">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="d99d8-1961">操作、`initblk`手順については、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1961">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-1962"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローされる可能性がします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1962"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-1963">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`initblk`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1963">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1964">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1964">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1965">指定したアドレスにある値型の各フィールドを null 参照または適切なプリミティブ型の 0 に初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1965">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1966">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1966">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1967">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1967">Format</span></span>|<span data-ttu-id="d99d8-1968">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1968">Assembly Format</span></span>|<span data-ttu-id="d99d8-1969">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1969">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1970">FE 15 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-1970">FE 15 < `T` ></span></span>|<span data-ttu-id="d99d8-1971">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="d99d8-1971">`initobj` `typeTok`</span></span>|<span data-ttu-id="d99d8-1972">値の型を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1972">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="d99d8-1973">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1973">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1974">初期化するために、値型のアドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1974">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1975">アドレスがスタックからポップされます。指定したアドレスに値の型は型として初期化`typeTok`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1975">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="d99d8-1976">`initobj`命令がプッシュされたアドレスで指定された値型の各フィールドを初期化します (型の`native int`、 `&`、または`*`) の参照を null または適切なプリミティブ型の 0 にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1976">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="d99d8-1977">このメソッドが呼び出された後、インスタンスが呼び出されるコンス トラクター メソッドの準備ができてです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1977">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="d99d8-1978">場合`typeTok`、参照型では、この命令と同じ効果`ldnull`続く`stind.ref`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1978">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="d99d8-1979">異なり<xref:System.Reflection.Emit.OpCodes.Newobj>、`initobj`コンス トラクター メソッドを呼び出しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1979">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="d99d8-1980">`Initobj` 値型の初期化のためのもので、中に`newobj`の割り当てし、オブジェクトの初期化に使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1980">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="d99d8-1981">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`initobj`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-1982">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-1982">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-1983">オブジェクト参照 (<see langword="O" /> 型) が特定のクラスのインスタンスかどうかをテストします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-1983">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-1984">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-1985">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1985">Format</span></span>|<span data-ttu-id="d99d8-1986">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-1986">Assembly Format</span></span>|<span data-ttu-id="d99d8-1987">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-1987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-1988">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-1988">75 < `T` ></span></span>|<span data-ttu-id="d99d8-1989">isinst `class`</span><span class="sxs-lookup"><span data-stu-id="d99d8-1989">isinst `class`</span></span>|<span data-ttu-id="d99d8-1990">オブジェクト参照がのインスタンスであるかどうか`class`null 参照またはそのクラスのインスタンスのいずれかを返すこと、またはインターフェイスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1990">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="d99d8-1991">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-1992">オブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1992">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-1993">オブジェクト参照がスタックからポップされ、テストするかどうかは渡されたクラスのインスタンスを参照してください`class`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1993">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="d99d8-1994">結果 (オブジェクト参照または null 参照) は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1994">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-1995">`Class` メタデータ トークンは、希望のクラスを示すです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1995">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="d99d8-1996">スタックの一番上のオブジェクトのクラスを実装するかどうか`class`(場合`class`インターフェイス) の派生クラスまたは`class`(場合`class`通常のクラス) 型にキャストし、`class`し、結果は、スタックにプッシュ、正確かのよう<xref:System.Reflection.Emit.OpCodes.Castclass>が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1996">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="d99d8-1997">それ以外の場合は null 参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1997">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="d99d8-1998">オブジェクト参照自体が null 参照し、`isinst`同様に null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1998">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-1999"><xref:System.TypeLoadException> クラスが見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-1999"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="d99d8-2000">これは、通常、Microsoft Intermediate Language (MSIL) の手順が実行時ではなくネイティブ コードに変換された場合に検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2000">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-2001">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`isinst`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2002">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2002">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2003">現在のメソッドを終了し、指定したメソッドにジャンプします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2003">Exits current method and jumps to specified method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2004">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2005">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2005">Format</span></span>|<span data-ttu-id="d99d8-2006">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2006">Assembly Format</span></span>|<span data-ttu-id="d99d8-2007">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2008">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2008">27 < `T` ></span></span>|<span data-ttu-id="d99d8-2009">jmp `method`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2009">jmp `method`</span></span>|<span data-ttu-id="d99d8-2010">現在のメソッドを終了し、指定したメソッドにジャンプします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2010">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="d99d8-2011">スタックこの命令の遷移の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2011">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-2012">`jmp` (移動) の命令は、によって指定されたメソッドに制御を転送`method`、これは、メソッドの参照のメタデータ トークン。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2012">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="d99d8-2013">現在の引数は、先のメソッドに転送されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2013">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="d99d8-2014">この命令を実行すると、評価スタックに空にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2014">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="d99d8-2015">呼び出し規約、数、および宛先アドレスで引数の型は、現在のメソッドで一致しなければなりません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2015">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="d99d8-2016">`jmp`命令は、転送の制御を使用することはできません、 `try`、 `filter`、 `catch`、または`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2016">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="d99d8-2017">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`jmp`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2017">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2018">ILGenerator.Emit (オペコード、MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2018">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2019">指定したインデックス値によって参照される引数をスタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2019">Loads an argument (referenced by a specified index value) onto the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2020">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2021">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2021">Format</span></span>|<span data-ttu-id="d99d8-2022">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2022">Assembly Format</span></span>|<span data-ttu-id="d99d8-2023">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2024">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2024">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="d99d8-2025">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2025">ldarg `index`</span></span>|<span data-ttu-id="d99d8-2026">引数を読み込み`index`をスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2026">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2027">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2028">引数値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2028">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2029">`ldarg`命令がインデックスの引数にプッシュ`index`場所引数インデックスは 0 から以降、評価スタックに、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2029">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2030">`ldarg`命令は、受信の引数からコピーする値型またはプリミティブ値をスタックを読み込みを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2030">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="d99d8-2031">引数の値の型は、現在のメソッドのシグネチャで指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2031">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-2032">可変長の引数リストを取得する手順については、`ldarg`命令は、最初の署名の可変部分でなく、その引数を固定にのみ使用できます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Arglist>詳細命令)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2032">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="d99d8-2033">4 バイト長より小さい整数値を保持している引数を型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2033">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-2034">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2034">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-2035">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarg`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2035">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2036">ILGenerator.Emit (オペコード、short)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2036">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2037">インデックス 0 の引数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2037">Loads the argument at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2038">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2038">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2039">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2039">Format</span></span>|<span data-ttu-id="d99d8-2040">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2040">Assembly Format</span></span>|<span data-ttu-id="d99d8-2041">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2041">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2042">02</span><span class="sxs-lookup"><span data-stu-id="d99d8-2042">02</span></span>|<span data-ttu-id="d99d8-2043">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="d99d8-2043">ldarg.0</span></span>|<span data-ttu-id="d99d8-2044">引数 0 をスタックに読み込みます</span><span class="sxs-lookup"><span data-stu-id="d99d8-2044">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="d99d8-2045">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2045">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2046">インデックス 0 の引数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2046">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2047">`ldarg.0`命令はインデックス 0 の引数の値を読み込むための効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2047">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="d99d8-2048">`ldarg.0`命令は引数のインデックスが 0 を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2048">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2049">`ldarg.0`命令は、受信の引数からコピーする値型またはプリミティブ値をスタックを読み込みを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2049">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="d99d8-2050">引数の値の型は、現在のメソッドのシグネチャで指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2050">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-2051">4 バイト長より小さい整数値を保持している引数を型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2051">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-2052">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2052">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-2053">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarg.0`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2053">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2054">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2054">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2055">インデックス 1 の引数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2055">Loads the argument at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2056">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2056">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2057">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2057">Format</span></span>|<span data-ttu-id="d99d8-2058">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2058">Assembly Format</span></span>|<span data-ttu-id="d99d8-2059">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2059">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2060">03</span><span class="sxs-lookup"><span data-stu-id="d99d8-2060">03</span></span>|<span data-ttu-id="d99d8-2061">ldarg.1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2061">ldarg.1</span></span>|<span data-ttu-id="d99d8-2062">引数 1 をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2062">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2063">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2063">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2064">インデックス 1 の引数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2064">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2065">`ldarg.1`命令はインデックス 1 の引数の値を読み込むための効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2065">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="d99d8-2066">`ldarg.1`命令は引数のインデックスが 1 を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2066">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2067">`ldarg.1`命令は、受信の引数からコピーする値型またはプリミティブ値をスタックを読み込みを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2067">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="d99d8-2068">引数の値の型は、現在のメソッドのシグネチャで指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2068">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-2069">4 バイト長より小さい整数値を保持している引数を型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2069">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-2070">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2070">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-2071">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarg.1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2071">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2072">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2072">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2073">インデックス 2 の引数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2073">Loads the argument at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2074">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2074">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2075">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2075">Format</span></span>|<span data-ttu-id="d99d8-2076">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2076">Assembly Format</span></span>|<span data-ttu-id="d99d8-2077">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2077">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2078">04</span><span class="sxs-lookup"><span data-stu-id="d99d8-2078">04</span></span>|<span data-ttu-id="d99d8-2079">ldarg.2</span><span class="sxs-lookup"><span data-stu-id="d99d8-2079">ldarg.2</span></span>|<span data-ttu-id="d99d8-2080">引数 2 をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2080">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2081">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2081">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2082">インデックス 2 の引数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2082">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2083">`ldarg.2`命令はインデックス 2 の引数の値を読み込むための効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2083">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="d99d8-2084">`ldarg.2`命令は引数のインデックスが 2 を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2084">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2085">`ldarg.2`命令は、受信の引数からコピーする値型またはプリミティブ値をスタックを読み込みを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2085">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="d99d8-2086">引数の値の型は、現在のメソッドのシグネチャで指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2086">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-2087">4 バイト長より小さい整数値を保持している引数を型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2087">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-2088">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-2089">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarg.2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2091">インデックス 3 の引数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2091">Loads the argument at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2092">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2093">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2093">Format</span></span>|<span data-ttu-id="d99d8-2094">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2094">Assembly Format</span></span>|<span data-ttu-id="d99d8-2095">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2096">05</span><span class="sxs-lookup"><span data-stu-id="d99d8-2096">05</span></span>|<span data-ttu-id="d99d8-2097">ldarg.3</span><span class="sxs-lookup"><span data-stu-id="d99d8-2097">ldarg.3</span></span>|<span data-ttu-id="d99d8-2098">引数 3 をスタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2098">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2099">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2100">インデックス 3 の引数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2100">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2101">`ldarg.3`命令はインデックス 3 の引数の値を読み込むための効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2101">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="d99d8-2102">`ldarg.3`命令は引数のインデックスが 3 を評価スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2102">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2103">`ldarg.3`命令は、受信の引数からコピーする値型またはプリミティブ値をスタックを読み込みを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2103">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="d99d8-2104">引数の値の型は、現在のメソッドのシグネチャで指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2104">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-2105">4 バイト長より小さい整数値を保持している引数を型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2105">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-2106">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-2107">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarg.3`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2108">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2108">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2109">指定した短い形式のインデックスによって参照される引数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2109">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2110">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2111">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2111">Format</span></span>|<span data-ttu-id="d99d8-2112">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2112">Assembly Format</span></span>|<span data-ttu-id="d99d8-2113">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2114">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2114">0E < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-2115">ldarg.s `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2115">ldarg.s `index`</span></span>|<span data-ttu-id="d99d8-2116">引数を読み込み`index`スタックに短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2116">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-2117">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2118">引数値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2118">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2119">`ldarg.s`命令はインデックスの引数を読み込む 4 ~ 255 の効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2119">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="d99d8-2120">`ldarg.s`命令がインデックスの引数にプッシュ`index`場所引数インデックスは 0 から以降、評価スタックに、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2120">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2121">`ldarg.s`命令は、受信の引数からコピーする値型またはプリミティブ値をスタックを読み込みを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2121">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="d99d8-2122">引数の値の型は、現在のメソッドのシグネチャで指定された引数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2122">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-2123">可変長の引数リストを取得する手順については、`ldarg.s`命令は、最初の署名の可変部分でなく、その引数を固定にのみ使用できます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Arglist>詳細命令)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2123">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="d99d8-2124">4 バイト長より小さい整数値を保持している引数を型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2124">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-2125">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2125">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-2126">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarg.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2127">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2127">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2128">引数アドレスを評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2128">Load an argument address onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2129">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2130">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2130">Format</span></span>|<span data-ttu-id="d99d8-2131">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2131">Assembly Format</span></span>|<span data-ttu-id="d99d8-2132">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2133">FE 0A < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2133">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="d99d8-2134">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2134">ldarga `index`</span></span>|<span data-ttu-id="d99d8-2135">インデックスが引数のアドレスをフェッチ`index`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2135">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="d99d8-2136">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2137">アドレス`addr`によってインデックスの引数の`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2137">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2138">`ldarga`命令アドレスがフェッチされます (型の`*`) インデックスが引数の`index`場所引数のインデックスは 0 以降から、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2138">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="d99d8-2139">アドレス`addr`は、常に対象のコンピューターで自然な境界に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2139">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="d99d8-2140">可変長の引数リストを取得する手順については、`ldarga`命令は、最初の署名の可変部分でなく、その引数を固定にのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2140">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="d99d8-2141">`ldarga` 参照渡しによるパラメーターの引き渡しに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2141">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="d99d8-2142">それ以外の場合の<xref:System.Reflection.Emit.OpCodes.Ldarg>と<xref:System.Reflection.Emit.OpCodes.Starg>使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2142">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="d99d8-2143">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarga`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2143">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2144">ILGenerator.Emit (オペコード、short)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2144">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2145">引数アドレス (短い形式) を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2145">Load an argument address, in short form, onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2146">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2146">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2147">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2147">Format</span></span>|<span data-ttu-id="d99d8-2148">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2148">Assembly Format</span></span>|<span data-ttu-id="d99d8-2149">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2149">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2150">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2150">0F < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-2151">ldarga.s `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2151">ldarga.s `index`</span></span>|<span data-ttu-id="d99d8-2152">インデックスが引数のアドレスをフェッチ`index`、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2152">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-2153">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2153">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2154">アドレス`addr`によってインデックスの引数の`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2154">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2155">`ldarga.s` (短い形式の`ldarga`) 0 ~ 255 の数値の引数を使用し、効率的なエンコーディングがします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2155">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="d99d8-2156">`ldarga.s`命令アドレスがフェッチされます (型の`*`) インデックスが引数の`index`場所引数のインデックスは 0 以降から、します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2156">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="d99d8-2157">アドレス`addr`は、常に対象のコンピューターで自然な境界に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2157">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="d99d8-2158">可変長の引数リストを取得する手順については、`ldarga.s`命令は、最初の署名の可変部分でなく、その引数を固定にのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2158">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="d99d8-2159">`ldarga.s` 参照渡しによるパラメーターの引き渡しに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2159">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="d99d8-2160">それ以外の場合の<xref:System.Reflection.Emit.OpCodes.Ldarg_S>と<xref:System.Reflection.Emit.OpCodes.Starg_S>使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2160">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="d99d8-2161">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldarga.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2162">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2162">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2163">提供された <see langword="int32" /> 型の値を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2163">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2164">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2164">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2165">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2165">Format</span></span>|<span data-ttu-id="d99d8-2166">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2166">Assembly Format</span></span>|<span data-ttu-id="d99d8-2167">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2167">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2168">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2168">20 < `int32` ></span></span>|<span data-ttu-id="d99d8-2169">ldc.i4 `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2169">ldc.i4 `num`</span></span>|<span data-ttu-id="d99d8-2170">値をプッシュ`num`をスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2170">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2171">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2171">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2172">値`num`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2172">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2173">整数-128 ~-1 ~ 8 の 127 と特に短いエンコーディングの短い (とそのためより効率的な) の特殊なエンコードがあることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2173">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="d99d8-2174">すべての短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2174">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="d99d8-2175">8 バイト整数 4、8 バイト浮動小数点数と短い形式に適合しない 4 バイト値の長いエンコーディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2175">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="d99d8-2176">8 バイト整数定数をスタックにプッシュする 3 つの方法します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2176">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="d99d8-2177">使用して、 <xref:System.Reflection.Emit.OpCodes.Ldc_I8> 32 ビット以上で表現する必要がある定数の命令。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2177">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="d99d8-2178">使用して、<xref:System.Reflection.Emit.OpCodes.Ldc_I4>命令を実行して、 <xref:System.Reflection.Emit.OpCodes.Conv_I8> 9 を 32 ビットを必要とする定数をします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="d99d8-2179">続けて、短い形式の命令を使用して、 <xref:System.Reflection.Emit.OpCodes.Conv_I8> 8 個以下のビット単位で表すことができる定数。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2179">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="d99d8-2180">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2181">ILGenerator.Emit (オペコード、int)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2181">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2182">整数値 0 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2182">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2183">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2184">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2184">Format</span></span>|<span data-ttu-id="d99d8-2185">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2185">Assembly Format</span></span>|<span data-ttu-id="d99d8-2186">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2187">16</span><span class="sxs-lookup"><span data-stu-id="d99d8-2187">16</span></span>|<span data-ttu-id="d99d8-2188">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="d99d8-2188">ldc.i4.0</span></span>|<span data-ttu-id="d99d8-2189">0、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2189">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2190">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2191">値 0 は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2191">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2192">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2192">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2193">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2193">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2194">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.0`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2194">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2195">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2195">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2196">整数値 1 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2196">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2197">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2197">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2198">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2198">Format</span></span>|<span data-ttu-id="d99d8-2199">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2199">Assembly Format</span></span>|<span data-ttu-id="d99d8-2200">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2200">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2201">17</span><span class="sxs-lookup"><span data-stu-id="d99d8-2201">17</span></span>|<span data-ttu-id="d99d8-2202">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2202">ldc.i4.1</span></span>|<span data-ttu-id="d99d8-2203">1 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2203">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2204">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2204">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2205">値 1 は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2205">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2206">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2206">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2207">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2207">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2208">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2209">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2209">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2210">整数値 2 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2210">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2211">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2212">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2212">Format</span></span>|<span data-ttu-id="d99d8-2213">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2213">Assembly Format</span></span>|<span data-ttu-id="d99d8-2214">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2215">18</span><span class="sxs-lookup"><span data-stu-id="d99d8-2215">18</span></span>|<span data-ttu-id="d99d8-2216">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="d99d8-2216">ldc.i4.2</span></span>|<span data-ttu-id="d99d8-2217">2 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2217">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2218">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2219">2 という値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2219">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2220">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2220">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2221">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2221">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2222">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2222">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2223">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2223">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2224">整数値 3 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2224">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2225">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2225">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2226">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2226">Format</span></span>|<span data-ttu-id="d99d8-2227">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2227">Assembly Format</span></span>|<span data-ttu-id="d99d8-2228">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2228">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2229">19</span><span class="sxs-lookup"><span data-stu-id="d99d8-2229">19</span></span>|<span data-ttu-id="d99d8-2230">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="d99d8-2230">ldc.i4.3</span></span>|<span data-ttu-id="d99d8-2231">3 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2231">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2232">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2232">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2233">値 3 は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2233">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2234">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2234">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2235">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2235">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2236">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.3`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2237">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2237">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2238">整数値 4 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2238">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2239">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2240">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2240">Format</span></span>|<span data-ttu-id="d99d8-2241">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2241">Assembly Format</span></span>|<span data-ttu-id="d99d8-2242">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2243">1A</span><span class="sxs-lookup"><span data-stu-id="d99d8-2243">1A</span></span>|<span data-ttu-id="d99d8-2244">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2244">ldc.i4.4</span></span>|<span data-ttu-id="d99d8-2245">4 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2245">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2246">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2247">4 という値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2247">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2248">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2248">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2249">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2249">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2250">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2252">整数値 5 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2252">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2253">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2254">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2254">Format</span></span>|<span data-ttu-id="d99d8-2255">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2255">Assembly Format</span></span>|<span data-ttu-id="d99d8-2256">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2257">1B</span><span class="sxs-lookup"><span data-stu-id="d99d8-2257">1B</span></span>|<span data-ttu-id="d99d8-2258">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="d99d8-2258">ldc.i4.5</span></span>|<span data-ttu-id="d99d8-2259">5 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2259">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2260">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2261">値 5 は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2261">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2262">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2262">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2263">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2263">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2264">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.5`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2264">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2265">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2265">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2266">整数値 6 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2266">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2267">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2268">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2268">Format</span></span>|<span data-ttu-id="d99d8-2269">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2269">Assembly Format</span></span>|<span data-ttu-id="d99d8-2270">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2271">1C</span><span class="sxs-lookup"><span data-stu-id="d99d8-2271">1C</span></span>|<span data-ttu-id="d99d8-2272">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="d99d8-2272">ldc.i4.6</span></span>|<span data-ttu-id="d99d8-2273">6 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2273">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2274">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2275">値 6 は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2275">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2276">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2276">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2277">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2277">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2278">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.6`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2278">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2279">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2279">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2280">整数値 7 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2280">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2281">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2281">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2282">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2282">Format</span></span>|<span data-ttu-id="d99d8-2283">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2283">Assembly Format</span></span>|<span data-ttu-id="d99d8-2284">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2284">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2285">1D</span><span class="sxs-lookup"><span data-stu-id="d99d8-2285">1D</span></span>|<span data-ttu-id="d99d8-2286">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="d99d8-2286">ldc.i4.7</span></span>|<span data-ttu-id="d99d8-2287">7 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2287">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2288">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2288">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2289">7 の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2289">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2290">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2290">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2291">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2291">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2292">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.7`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2293">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2293">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2294">整数値 8 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2294">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2295">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2296">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2296">Format</span></span>|<span data-ttu-id="d99d8-2297">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2297">Assembly Format</span></span>|<span data-ttu-id="d99d8-2298">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2299">1E</span><span class="sxs-lookup"><span data-stu-id="d99d8-2299">1E</span></span>|<span data-ttu-id="d99d8-2300">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="d99d8-2300">ldc.i4.8</span></span>|<span data-ttu-id="d99d8-2301">8 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2301">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2302">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2303">8 の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2303">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2304">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2304">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2305">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2305">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2306">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2306">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2307">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2307">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2308">整数値 -1 を <see langword="int32" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2308">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2309">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2310">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2310">Format</span></span>|<span data-ttu-id="d99d8-2311">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2311">Assembly Format</span></span>|<span data-ttu-id="d99d8-2312">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2313">16</span><span class="sxs-lookup"><span data-stu-id="d99d8-2313">15</span></span>|<span data-ttu-id="d99d8-2314">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2314">ldc.i4.m1</span></span>|<span data-ttu-id="d99d8-2315">-1 をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2315">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2316">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2317">値-1 は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2317">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2318">これは、特殊な短いエンコードを整数値 0 のプッシュです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2318">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="d99d8-2319">すべての特殊な短いエンコーディングは、4 バイト整数をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2319">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2320">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.m1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2322">提供された <see langword="int8" /> 値を <see langword="int32" /> として評価スタックにプッシュします (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2322">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2323">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2324">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2324">Format</span></span>|<span data-ttu-id="d99d8-2325">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2325">Assembly Format</span></span>|<span data-ttu-id="d99d8-2326">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2327">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2327">1F < `int8` ></span></span>|<span data-ttu-id="d99d8-2328">ldc.i4.s `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2328">ldc.i4.s `num`</span></span>|<span data-ttu-id="d99d8-2329">プッシュ`num`としてスタック`int32`、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2329">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-2330">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2331">値`num`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2331">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2332">`ldc.i4.s` -128 から 127 の整数を評価スタックにプッシュのエンコードをより効率的です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2332">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2333">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i4.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2333">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2334">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2334">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2335">提供された <see langword="int64" /> 型の値を <see langword="int64" /> として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2336">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2337">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2337">Format</span></span>|<span data-ttu-id="d99d8-2338">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2338">Assembly Format</span></span>|<span data-ttu-id="d99d8-2339">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2340">21 < `int64` ></span></span>|<span data-ttu-id="d99d8-2341">ldc.i8 `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2341">ldc.i8 `num`</span></span>|<span data-ttu-id="d99d8-2342">プッシュ`num`としてスタック`int64`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="d99d8-2343">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2344">値`num`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2345">このエンコーディング、`int64`の値をスタックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2346">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2347">ILGenerator.Emit (オペコード、長い)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2348">提供された <see langword="float32" /> 型の値を <see langword="F" /> (float) 型として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2349">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2350">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2350">Format</span></span>|<span data-ttu-id="d99d8-2351">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2351">Assembly Format</span></span>|<span data-ttu-id="d99d8-2352">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2353">22 < `float32` ></span></span>|<span data-ttu-id="d99d8-2354">ldc.r4 `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2354">ldc.r4 `num`</span></span>|<span data-ttu-id="d99d8-2355">プッシュ`num`としてスタック`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="d99d8-2356">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2357">値`num`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2358">このエンコーディング、`float32`の値をスタックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2359">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.r4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2360">ILGenerator.Emit (オペコード、1 つ)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2361">提供された <see langword="float64" /> 型の値を <see langword="F" /> (float) 型として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2362">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2363">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2363">Format</span></span>|<span data-ttu-id="d99d8-2364">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2364">Assembly Format</span></span>|<span data-ttu-id="d99d8-2365">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2366">23 < `float64` ></span></span>|<span data-ttu-id="d99d8-2367">ldc.r8 `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2367">ldc.r8 `num`</span></span>|<span data-ttu-id="d99d8-2368">プッシュ`num`としてスタック`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="d99d8-2369">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2370">値`num`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2371">このエンコーディング、`float64`の値をスタックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2372">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldc.r8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2373">ILGenerator.Emit (オペコード、double)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2374">指定した配列インデックスの要素を命令で指定された型として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2375">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft intermediate language (MSIL) アセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2376">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2376">Format</span></span>|<span data-ttu-id="d99d8-2377">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2377">Assembly Format</span></span>|<span data-ttu-id="d99d8-2378">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2379">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2379">A3 < `T` ></span></span>|<span data-ttu-id="d99d8-2380">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2380">ldelem `typeTok`</span></span>|<span data-ttu-id="d99d8-2381">位置にある要素を読み込みます`index`型としてのスタックの一番上に`typeTok`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="d99d8-2382">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2383">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2384">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2385">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2385">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2386">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2387">`ldelem`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2388">配列は、オブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2389">戻り値の型が、トークンで指定された`typeTok`命令でします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="d99d8-2390"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2390"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2391"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値の上限よりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2391"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2392">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2393">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2394">指定した配列インデックスの <see langword="native int" /> 型の要素を <see langword="native int" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2395">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2396">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2396">Format</span></span>|<span data-ttu-id="d99d8-2397">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2397">Assembly Format</span></span>|<span data-ttu-id="d99d8-2398">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2399">97</span><span class="sxs-lookup"><span data-stu-id="d99d8-2399">97</span></span>|<span data-ttu-id="d99d8-2400">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="d99d8-2400">ldelem.i</span></span>|<span data-ttu-id="d99d8-2401">型を持つ要素を読み込みます`native int`で`index`としてスタックの一番上、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="d99d8-2402">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2403">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2404">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2405">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2405">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2406">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2407">`ldelem.i`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2408">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2409">戻り値`ldelem.i`は`native int`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-2410">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2411"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2411"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2412"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2412"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2413"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2413"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2414">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.i`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2415">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2416">指定した配列インデックスの <see langword="int8" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2417">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2418">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2418">Format</span></span>|<span data-ttu-id="d99d8-2419">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2419">Assembly Format</span></span>|<span data-ttu-id="d99d8-2420">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2421">90</span><span class="sxs-lookup"><span data-stu-id="d99d8-2421">90</span></span>|<span data-ttu-id="d99d8-2422">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2422">ldelem.i1</span></span>|<span data-ttu-id="d99d8-2423">型を持つ要素を読み込みます`int8`で`index`としてスタックの一番上、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2424">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2425">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2426">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2427">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2427">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2428">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2429">`ldelem.i1`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2430">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2431">戻り値`ldelem.i1`は`int8`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="d99d8-2432">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2433"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2433"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2434"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2434"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2435"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2435"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2436">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.i1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2437">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2438">指定した配列インデックスの <see langword="int16" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2439">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2440">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2440">Format</span></span>|<span data-ttu-id="d99d8-2441">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2441">Assembly Format</span></span>|<span data-ttu-id="d99d8-2442">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2443">92</span><span class="sxs-lookup"><span data-stu-id="d99d8-2443">92</span></span>|<span data-ttu-id="d99d8-2444">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="d99d8-2444">ldelem.i2</span></span>|<span data-ttu-id="d99d8-2445">型を持つ要素を読み込みます`int16`で`index`としてスタックの一番上、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2446">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2447">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2448">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2449">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2449">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2450">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2451">`ldelem.i2`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2452">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2453">戻り値`ldelem.i2`は`int16`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="d99d8-2454">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2455"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2455"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2456"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2456"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2457"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2457"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2458">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.i2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2459">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2460">指定した配列インデックスの <see langword="int32" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2461">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2462">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2462">Format</span></span>|<span data-ttu-id="d99d8-2463">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2463">Assembly Format</span></span>|<span data-ttu-id="d99d8-2464">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2465">94</span><span class="sxs-lookup"><span data-stu-id="d99d8-2465">94</span></span>|<span data-ttu-id="d99d8-2466">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2466">ldelem.i4</span></span>|<span data-ttu-id="d99d8-2467">型を持つ要素を読み込みます`int32`で`index`としてスタックの一番上、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2468">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2469">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2470">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2471">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2471">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2472">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2473">`ldelem.i4`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2474">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2475">戻り値`ldelem.i4`は`int32`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2476">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2477"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2477"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2478"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2478"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2479"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2479"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2480">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2482">指定した配列インデックスの <see langword="int64" /> 型の要素を <see langword="int64" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2483">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2484">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2484">Format</span></span>|<span data-ttu-id="d99d8-2485">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2485">Assembly Format</span></span>|<span data-ttu-id="d99d8-2486">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2487">96</span><span class="sxs-lookup"><span data-stu-id="d99d8-2487">96</span></span>|<span data-ttu-id="d99d8-2488">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="d99d8-2488">ldelem.i8</span></span>|<span data-ttu-id="d99d8-2489">型を持つ要素を読み込みます`int64`で`index`としてスタックの一番上、`int64`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="d99d8-2490">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2491">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2492">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2493">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2493">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2494">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2495">`ldelem.i8`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2496">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2497">戻り値`ldelem.i8`は`int64`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="d99d8-2498">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2499"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2499"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2500"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2500"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2501"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2501"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2502">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2503">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2504">指定した配列インデックスの <see langword="float32" /> 型の要素を <see langword="F" /> (float) 型として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2505">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2506">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2506">Format</span></span>|<span data-ttu-id="d99d8-2507">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2507">Assembly Format</span></span>|<span data-ttu-id="d99d8-2508">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2509">98</span><span class="sxs-lookup"><span data-stu-id="d99d8-2509">98</span></span>|<span data-ttu-id="d99d8-2510">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2510">ldelem.r4</span></span>|<span data-ttu-id="d99d8-2511">型を持つ要素を読み込みます`float32`で`index`型としてのスタックの一番上に`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="d99d8-2512">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2513">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2514">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2515">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2515">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2516">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2517">`ldelem.r4`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2518">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2519">戻り値`ldelem.r4`は`float32`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="d99d8-2520">浮動小数点値が型に変換されます`F`を評価スタックに読み込まれるときにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2521"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2521"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2522"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2522"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2523"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2523"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2524">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.r4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2525">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2526">指定した配列インデックスの <see langword="float64" /> 型の要素を <see langword="F" /> (float) 型として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2527">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2528">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2528">Format</span></span>|<span data-ttu-id="d99d8-2529">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2529">Assembly Format</span></span>|<span data-ttu-id="d99d8-2530">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2531">99</span><span class="sxs-lookup"><span data-stu-id="d99d8-2531">99</span></span>|<span data-ttu-id="d99d8-2532">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="d99d8-2532">ldelem.r8</span></span>|<span data-ttu-id="d99d8-2533">型を持つ要素を読み込みます`float64`で`index`型としてのスタックの一番上に`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="d99d8-2534">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2535">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2536">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2537">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2537">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2538">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2539">`ldelem.r8`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2540">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2541">戻り値`ldelem.r8`は`float64`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="d99d8-2542">浮動小数点値が型に変換されます`F`を評価スタックに読み込まれるときにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2543"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2543"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2544"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2544"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2545"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2545"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2546">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.r8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2547">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2548">指定した配列インデックスのオブジェクト参照を格納している要素を <see langword="O" /> 型 (オブジェクト参照) として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2549">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2550">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2550">Format</span></span>|<span data-ttu-id="d99d8-2551">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2551">Assembly Format</span></span>|<span data-ttu-id="d99d8-2552">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2553">9A</span><span class="sxs-lookup"><span data-stu-id="d99d8-2553">9A</span></span>|<span data-ttu-id="d99d8-2554">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="d99d8-2554">ldelem.ref</span></span>|<span data-ttu-id="d99d8-2555">オブジェクト参照を持つ要素を読み込みます`index`型としてのスタックの一番上に`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="d99d8-2556">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2557">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2558">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2559">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2559">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2560">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2561">`ldelem.ref`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2562">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2563">戻り値`ldelem.ref`は型です。 `O` (オブジェクト参照)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="d99d8-2564"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2564"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2565"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2565"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2566"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2566"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2567">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.ref`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2568">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2569">指定した配列インデックスの <see langword="unsigned int8" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2570">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2571">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2571">Format</span></span>|<span data-ttu-id="d99d8-2572">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2572">Assembly Format</span></span>|<span data-ttu-id="d99d8-2573">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2574">91</span><span class="sxs-lookup"><span data-stu-id="d99d8-2574">91</span></span>|<span data-ttu-id="d99d8-2575">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2575">ldelem.u1</span></span>|<span data-ttu-id="d99d8-2576">型を持つ要素を読み込みます`unsigned int8`で`index`としてスタックの一番上、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2577">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2578">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2579">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2580">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2580">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2581">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2582">`ldelem.u1`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2583">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2584">戻り値`ldelem.u1`は`int8`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="d99d8-2585">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2586"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2586"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2587"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2587"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2588"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2588"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2589">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.u1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2590">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2591">指定した配列インデックスの <see langword="unsigned int16" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2592">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2593">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2593">Format</span></span>|<span data-ttu-id="d99d8-2594">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2594">Assembly Format</span></span>|<span data-ttu-id="d99d8-2595">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2596">93</span><span class="sxs-lookup"><span data-stu-id="d99d8-2596">93</span></span>|<span data-ttu-id="d99d8-2597">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="d99d8-2597">ldelem.u2</span></span>|<span data-ttu-id="d99d8-2598">型を持つ要素を読み込みます`unsigned int16`としてスタックの一番上のインデックスにある、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2599">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2600">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2601">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2602">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2602">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2603">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2604">`ldelem.u2`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2605">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2606">戻り値`ldelem.u2`は`int16`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="d99d8-2607">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2608"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2608"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2609"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2609"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2610"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2610"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2611">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.u2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2612">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2613">指定した配列インデックスの <see langword="unsigned int32" /> 型の要素を <see langword="int32" /> として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2614">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2615">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2615">Format</span></span>|<span data-ttu-id="d99d8-2616">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2616">Assembly Format</span></span>|<span data-ttu-id="d99d8-2617">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2618">95</span><span class="sxs-lookup"><span data-stu-id="d99d8-2618">95</span></span>|<span data-ttu-id="d99d8-2619">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2619">ldelem.u4</span></span>|<span data-ttu-id="d99d8-2620">型を持つ要素を読み込みます`unsigned int32`としてスタックの一番上のインデックスにある、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2621">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2622">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2623">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2624">`index` および`array`スタックからポップされます。 位置に格納されている値`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2624">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2625">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2626">`ldelem.u4`命令は、インデックスを持つ要素の値を読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2627">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2628">戻り値`ldelem.u4`は`int32`します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2629">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2630"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2630"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2631"><xref:System.ArrayTypeMismatchException> 配列が必要な型の要素を保持していない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2631"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2632"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2632"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2633">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelem.u4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2634">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2635">指定した配列インデックスにある配列要素のアドレスを <see langword="&amp;" /> 型 (マネージ ポインター) として評価スタックの一番上に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2636">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2637">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2637">Format</span></span>|<span data-ttu-id="d99d8-2638">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2638">Assembly Format</span></span>|<span data-ttu-id="d99d8-2639">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2640">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2640">8F < `T` ></span></span>|<span data-ttu-id="d99d8-2641">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2641">ldelema `class`</span></span>|<span data-ttu-id="d99d8-2642">ある配列要素のアドレスをロード`index`型として評価スタックの一番上`&`(マネージ ポインター)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="d99d8-2643">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2644">オブジェクト参照`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2645">インデックス値`index`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-2646">`index` および`array`スタックからポップされます。 位置に格納されているアドレス`index`で`array`が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2646">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="d99d8-2647">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2648">`ldelema`オブジェクトの配列内の特定のインデックスにあるオブジェクトのアドレスを取得するために使用 (型の`class`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="d99d8-2649">`ldelema`命令は、インデックスの値のアドレスを読み込みます`index`(型`native int`)、0 から始まる 1 次元の配列`array`し、スタックの一番上に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="d99d8-2650">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-2651">値型でなければなりません`class`命令で渡されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="d99d8-2652">戻り値`ldelema`マネージ ポインター (型`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="d99d8-2653">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2654"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2654"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-2655"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2655"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-2656"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2656"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-2657">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldelema`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2658">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2659">参照が現在評価スタック上にあるオブジェクト内のフィールドの値を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2660">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2661">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2661">Format</span></span>|<span data-ttu-id="d99d8-2662">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2662">Assembly Format</span></span>|<span data-ttu-id="d99d8-2663">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2664">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2664">7B < `T` ></span></span>|<span data-ttu-id="d99d8-2665">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2665">ldfld `field`</span></span>|<span data-ttu-id="d99d8-2666">指定したオブジェクトをスタック内のフィールドの値をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2667">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2668">オブジェクト参照 (またはポインター) は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2669">オブジェクト参照 (またはポインター) が、スタックからポップされます。オブジェクトの指定されたフィールドの値が見つかりました。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="d99d8-2670">フィールドに格納されている値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2671">`ldfld`命令がスタックにオブジェクトにあるフィールドの値にプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="d99d8-2672">オブジェクトはスタック上でのオブジェクト参照としてする必要があります (型`O`)、マネージ ポインター (型`&`)、アンマネージ ポインター (型`native int`)、一時的なポインター (型`*`)、または値型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="d99d8-2673">検証可能なコードでは、アンマネージ ポインターは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="d99d8-2674">オブジェクトのフィールドは、フィールドのメンバーを参照する必要があるメタデータ トークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="d99d8-2675">戻り値の型は、フィールドに関連付けられているものと同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="d99d8-2676">フィールドは、インスタンス フィールド (その場合は、オブジェクトすることはできません、null 参照) または静的フィールドのいずれかである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="d99d8-2677">`ldfld`命令の前に、いずれかまたは両方の<xref:System.Reflection.Emit.OpCodes.Unaligned>と<xref:System.Reflection.Emit.OpCodes.Volatile>プレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-2678"><xref:System.NullReferenceException> オブジェクトが null と、フィールドは静的でない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2678"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="d99d8-2679"><xref:System.MissingFieldException> 指定したフィールドは、メタデータ内で見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2679"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="d99d8-2680">これは、通常、Microsoft Intermediate Language (MSIL) の手順については、実行時ではなく、ネイティブ コードに変換する場合にチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="d99d8-2681">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldfld`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2682">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2683">参照が現在評価スタック上にあるオブジェクト内のフィールドのアドレスを検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2684">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2685">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2685">Format</span></span>|<span data-ttu-id="d99d8-2686">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2686">Assembly Format</span></span>|<span data-ttu-id="d99d8-2687">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2688">7C < `T` ></span></span>|<span data-ttu-id="d99d8-2689">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2689">ldflda `field`</span></span>|<span data-ttu-id="d99d8-2690">アドレス プッシュ`field`をスタックに指定されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2691">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2692">オブジェクト参照 (またはポインター) は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2693">オブジェクト参照 (またはポインター) が、スタックからポップされます。オブジェクト内の指定したフィールドのアドレスが検出されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="d99d8-2694">指定したフィールドのアドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2695">`ldflda`命令がスタックにオブジェクトにあるフィールドのアドレスにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="d99d8-2696">オブジェクトはスタック上でのオブジェクト参照としてする必要があります (型`O`)、マネージ ポインター (型`&`)、アンマネージ ポインター (型`native int`)、一時的なポインター (型`*`)、または値型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="d99d8-2697">検証可能なコードでは、アンマネージ ポインターは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="d99d8-2698">オブジェクトのフィールドは、フィールドのメンバーを参照する必要があるメタデータ トークンによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="d99d8-2699">によって返される値`ldflda`マネージ ポインター (型`&`) オブジェクトを指すアンマネージ ポインターとしてのスタックにプッシュ、しない限り、その場合は、差出人住所もアンマネージ ポインター (型`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="d99d8-2700">`ldflda`命令の前に、いずれかまたは両方の<xref:System.Reflection.Emit.OpCodes.Unaligned>と<xref:System.Reflection.Emit.OpCodes.Volatile>プレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-2701"><xref:System.InvalidOperationException> アクセス元のアプリケーション ドメイン内のオブジェクトがない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2701"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="d99d8-2702">アクセスのアプリケーション ドメイン内ではないフィールドのアドレスを読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="d99d8-2703"><xref:System.NullReferenceException> オブジェクトが null と、フィールドは静的でない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2703"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="d99d8-2704"><xref:System.MissingFieldException> 指定したフィールドは、メタデータ内で見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2704"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="d99d8-2705">これは、通常、Microsoft Intermediate Language (MSIL) の手順については、実行時ではなく、ネイティブ コードに変換する場合にチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="d99d8-2706">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldflda`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2707">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2708">特定のメソッドを実装しているネイディブ コードへのアンマネージ ポインター (<see langword="native int" /> 型) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2709">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2710">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2710">Format</span></span>|<span data-ttu-id="d99d8-2711">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2711">Assembly Format</span></span>|<span data-ttu-id="d99d8-2712">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2713">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="d99d8-2714">ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2714">ldftn `method`</span></span>|<span data-ttu-id="d99d8-2715">によって参照されるメソッドへのポインターをプッシュ`method`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2716">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2717">特定のメソッドへのアンマネージ ポインターは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2718">特定のメソッド (`method`) を使用して呼び出すことができます、<xref:System.Reflection.Emit.OpCodes.Calli>命令マネージ メソッド (またはアンマネージ コードにマネージ コードから遷移をスタブ) を参照する場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="d99d8-2719">値には、CLR 呼び出し規約を使用してネイティブ コードにポイントが返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="d99d8-2720">このメソッドのポインターは、コールバック ルーチンとしてアンマネージ ネイティブ コードに渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="d99d8-2721">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldftn`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2722">ILGenerator.Emit (オペコード、MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2723">
            <see langword="native int" /> 型の値を <see langword="native int" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2724">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2725">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2725">Format</span></span>|<span data-ttu-id="d99d8-2726">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2726">Assembly Format</span></span>|<span data-ttu-id="d99d8-2727">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2728">4D</span><span class="sxs-lookup"><span data-stu-id="d99d8-2728">4D</span></span>|<span data-ttu-id="d99d8-2729">ldind.i</span><span class="sxs-lookup"><span data-stu-id="d99d8-2729">ldind.i</span></span>|<span data-ttu-id="d99d8-2730">読み込み、`native int`アドレスに`addr`としてスタック、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="d99d8-2731">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2732">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2733">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2734">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2735">`ldind.i`いない命令は直接読み込みます、`native int`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-2736">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2737">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2738">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2739">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2740">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2741">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2742">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2743">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2744"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2744"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2745">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.i`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2746">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2747">
            <see langword="int8" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2748">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2749">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2749">Format</span></span>|<span data-ttu-id="d99d8-2750">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2750">Assembly Format</span></span>|<span data-ttu-id="d99d8-2751">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2752">46</span><span class="sxs-lookup"><span data-stu-id="d99d8-2752">46</span></span>|<span data-ttu-id="d99d8-2753">ldind.i1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2753">ldind.i1</span></span>|<span data-ttu-id="d99d8-2754">読み込み、`int8`アドレスに`addr`としてスタック、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2755">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2756">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2757">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2758">取得した値は、スタックにプッシュされます.</span><span class="sxs-lookup"><span data-stu-id="d99d8-2758">The fetched value is pushed onto the stack..</span></span>  
  
 <span data-ttu-id="d99d8-2759">`ldind.i1`いない命令は直接読み込みます、`int8`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2760">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2761">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2762">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2763">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2764">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2765">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2766">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2767">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2768"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2768"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2769">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.i1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2770">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2771">
            <see langword="int16" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2772">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2773">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2773">Format</span></span>|<span data-ttu-id="d99d8-2774">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2774">Assembly Format</span></span>|<span data-ttu-id="d99d8-2775">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2776">48</span><span class="sxs-lookup"><span data-stu-id="d99d8-2776">48</span></span>|<span data-ttu-id="d99d8-2777">ldind.i2</span><span class="sxs-lookup"><span data-stu-id="d99d8-2777">ldind.i2</span></span>|<span data-ttu-id="d99d8-2778">読み込み、`int16`アドレスに`addr`としてスタック、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2779">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2780">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2781">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2782">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2783">`ldind.i2`いない命令は直接読み込みます、`int16`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2784">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2785">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2786">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2787">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2788">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2789">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2790">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2791">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2792"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2792"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2793">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.i2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2794">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2795">
            <see langword="int32" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2796">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2797">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2797">Format</span></span>|<span data-ttu-id="d99d8-2798">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2798">Assembly Format</span></span>|<span data-ttu-id="d99d8-2799">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2800">4A</span><span class="sxs-lookup"><span data-stu-id="d99d8-2800">4A</span></span>|<span data-ttu-id="d99d8-2801">ldind.i4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2801">ldind.i4</span></span>|<span data-ttu-id="d99d8-2802">読み込み、`int32`アドレスに`addr`としてスタック、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2803">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2804">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2805">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2806">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2807">`ldind.i4`いない命令は直接読み込みます、`int32`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2808">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2809">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2810">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2811">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2812">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2813">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2814">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2815">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2816"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2816"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2817">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2818">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2819">
            <see langword="int64" /> 型の値を <see langword="int64" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2820">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2821">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2821">Format</span></span>|<span data-ttu-id="d99d8-2822">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2822">Assembly Format</span></span>|<span data-ttu-id="d99d8-2823">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2824">4C</span><span class="sxs-lookup"><span data-stu-id="d99d8-2824">4C</span></span>|<span data-ttu-id="d99d8-2825">ldind.i8</span><span class="sxs-lookup"><span data-stu-id="d99d8-2825">ldind.i8</span></span>|<span data-ttu-id="d99d8-2826">読み込み、`int64`アドレスに`addr`としてスタック、`int64`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="d99d8-2827">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2828">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2829">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2830">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2831">`ldind.i8`いない命令は直接読み込みます、`int64`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int64`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="d99d8-2832">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2833">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2834">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2835">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2836">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2837">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2838">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2839">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2840"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2840"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2841">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2842">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2843">
            <see langword="float32" /> 型の値を <see langword="F" /> (float) 型として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2844">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2845">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2845">Format</span></span>|<span data-ttu-id="d99d8-2846">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2846">Assembly Format</span></span>|<span data-ttu-id="d99d8-2847">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2848">4E</span><span class="sxs-lookup"><span data-stu-id="d99d8-2848">4E</span></span>|<span data-ttu-id="d99d8-2849">ldind.r4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2849">ldind.r4</span></span>|<span data-ttu-id="d99d8-2850">読み込み、`float32`アドレスに`addr`型としてのスタックに`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="d99d8-2851">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2852">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2853">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2854">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2855">`ldind.r4`いない命令は直接読み込みます、`float32`指定されたアドレスからの値 (型の`native int`、 `&`、または \*) を型としてのスタックに`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="d99d8-2856">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2857">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2858">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2859">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2860">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2861">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2862">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2863">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2864"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2864"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2865">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.r4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2866">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2867">
            <see langword="float64" /> 型の値を <see langword="F" /> (float) 型として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2868">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2869">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2869">Format</span></span>|<span data-ttu-id="d99d8-2870">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2870">Assembly Format</span></span>|<span data-ttu-id="d99d8-2871">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2872">4F</span><span class="sxs-lookup"><span data-stu-id="d99d8-2872">4F</span></span>|<span data-ttu-id="d99d8-2873">ldind.r8</span><span class="sxs-lookup"><span data-stu-id="d99d8-2873">ldind.r8</span></span>|<span data-ttu-id="d99d8-2874">読み込み、`float64`アドレスに`addr`型としてのスタックに`F`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="d99d8-2875">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2876">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2877">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2878">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2879">`ldind.r8`いない命令は直接読み込みます、`float64`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`float64`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="d99d8-2880">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2881">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2882">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2883">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2884">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2885">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2886">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2887">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2888"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2888"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2889">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.r8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2890">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2891">オブジェクト参照を <see langword="O" /> 型 (オブジェクト参照) として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2892">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2893">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2893">Format</span></span>|<span data-ttu-id="d99d8-2894">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2894">Assembly Format</span></span>|<span data-ttu-id="d99d8-2895">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2896">50</span><span class="sxs-lookup"><span data-stu-id="d99d8-2896">50</span></span>|<span data-ttu-id="d99d8-2897">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="d99d8-2897">ldind.ref</span></span>|<span data-ttu-id="d99d8-2898">アドレスでのオブジェクト参照を読み込む`addr`型としてスタック `O`</span><span class="sxs-lookup"><span data-stu-id="d99d8-2898">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="d99d8-2899">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2900">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2901">アドレスがスタックからポップされます。アドレスにあるオブジェクトの参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2902">フェッチされた参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2903">`ldind.ref`命令が指定されたアドレスのオブジェクト参照を直接読み込みます (型の`native int`、 `&`、または \*)、スタックの種類として`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="d99d8-2904">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2905">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2906">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2907">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2908">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2909">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2910">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2911">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2912"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2912"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2913">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.ref`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2915">
            <see langword="unsigned int8" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2916">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2917">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2917">Format</span></span>|<span data-ttu-id="d99d8-2918">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2918">Assembly Format</span></span>|<span data-ttu-id="d99d8-2919">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2920">47</span><span class="sxs-lookup"><span data-stu-id="d99d8-2920">47</span></span>|<span data-ttu-id="d99d8-2921">ldind.u1</span><span class="sxs-lookup"><span data-stu-id="d99d8-2921">ldind.u1</span></span>|<span data-ttu-id="d99d8-2922">読み込み、`unsigned int8`アドレスに`addr`としてスタック、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2923">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2924">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2925">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2926">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2927">`ldind.u1`いない命令は直接読み込みます、`unsigned int8`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2928">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2929">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2930">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2931">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2932">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2933">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2934">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2935">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2936"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2936"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2937">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.u1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2939">
            <see langword="unsigned int16" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2940">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2941">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2941">Format</span></span>|<span data-ttu-id="d99d8-2942">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2942">Assembly Format</span></span>|<span data-ttu-id="d99d8-2943">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2944">49</span><span class="sxs-lookup"><span data-stu-id="d99d8-2944">49</span></span>|<span data-ttu-id="d99d8-2945">ldind.u2</span><span class="sxs-lookup"><span data-stu-id="d99d8-2945">ldind.u2</span></span>|<span data-ttu-id="d99d8-2946">読み込み、`unsigned int16`アドレスに`addr`としてスタック、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2947">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2948">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2949">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2950">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2951">`ldind.u2`いない命令は直接読み込みます、`unsigned int16`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2952">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2953">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2954">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2955">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2956">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2957">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2958">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2959">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2960"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2960"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2961">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.u2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2962">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2963">
            <see langword="unsigned int32" /> 型の値を <see langword="int32" /> として評価スタックに間接的に読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2964">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2965">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2965">Format</span></span>|<span data-ttu-id="d99d8-2966">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2966">Assembly Format</span></span>|<span data-ttu-id="d99d8-2967">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2968">4B</span><span class="sxs-lookup"><span data-stu-id="d99d8-2968">4B</span></span>|<span data-ttu-id="d99d8-2969">ldind.u4</span><span class="sxs-lookup"><span data-stu-id="d99d8-2969">ldind.u4</span></span>|<span data-ttu-id="d99d8-2970">読み込み、`unsigned int32`アドレスに`addr`としてスタック、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-2971">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2972">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2973">アドレスがスタックからポップされます。アドレスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="d99d8-2974">フェッチされた値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2975">`ldind.u4`いない命令は直接読み込みます、`unsigned int32`指定されたアドレスからの値 (型の`native int`、 `&`、または \*)、スタックとして、`int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="d99d8-2976">すべての`ldind`手順については、ショートカット、<xref:System.Reflection.Emit.OpCodes.Ldobj>組み込みの値の対応するクラスを指定する命令です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="d99d8-2977">4 バイト未満の整数値に拡張されたことに注意してください`int32`(いない`native int`) を評価スタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="d99d8-2978">浮動小数点値に変換する`F`を評価スタックに読み込まれるときに入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-2979">形式が正しい Microsoft Intermediate Language (MSIL) により、`ldind`命令は、ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="d99d8-2980">最初に、スタックにプッシュ アドレスは、コンピューター上のオブジェクトの自然なサイズに合わせて配置する必要がありますまたは<xref:System.NullReferenceException>発生することができます (を参照してください、<xref:System.Reflection.Emit.OpCodes.Unaligned>予防策の命令をプレフィックス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="d99d8-2981">アドレスを返す MSIL 命令がすべての結果 (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloca>と<xref:System.Reflection.Emit.OpCodes.Ldarga>) が安全に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="d99d8-2982">1 バイトを超えるデータ型、バイトの順序付けはターゲット CPU に依存します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="d99d8-2983">バイトの順序付けに依存するコードは、すべてのプラットフォームでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="d99d8-2984"><xref:System.NullReferenceException> 無効なアドレスが検出された場合にスローできます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2984"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="d99d8-2985">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldind.u4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-2986">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-2987">インデックス番号が 0 から始まる 1 次元配列の要素数を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-2988">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-2989">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2989">Format</span></span>|<span data-ttu-id="d99d8-2990">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-2990">Assembly Format</span></span>|<span data-ttu-id="d99d8-2991">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-2992">8E</span><span class="sxs-lookup"><span data-stu-id="d99d8-2992">8E</span></span>|<span data-ttu-id="d99d8-2993">ldlen</span><span class="sxs-lookup"><span data-stu-id="d99d8-2993">ldlen</span></span>|<span data-ttu-id="d99d8-2994">長さをプッシュ (型の`natural unsigned int`) スタックで配列のです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-2995">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-2996">配列へのオブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-2997">配列参照がスタックからポップされ、長さが計算されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="d99d8-2998">長さは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-2999">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3000">長さとして返されます、`natural unsigned int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="d99d8-3001"><xref:System.NullReferenceException> 配列の参照が null 参照である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3001"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3002">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldlen`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3003">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3004">特定のインデックスのローカル変数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3004">Loads the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3005">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3006">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3006">Format</span></span>|<span data-ttu-id="d99d8-3007">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3007">Assembly Format</span></span>|<span data-ttu-id="d99d8-3008">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3009">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="d99d8-3010">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3010">ldloc `index`</span></span>|<span data-ttu-id="d99d8-3011">ローカル変数をインデックスに読み込みます`index`をスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3012">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3013">指定したインデックスにあるローカル変数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3014">`ldloc`命令は、ローカル変数は、番号 0 以降の渡されたインデックスを評価スタックにローカル変数の数の内容をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="d99d8-3015">ローカル変数は、メソッドの初期化フラグが true の場合にのみ、メソッドを入力する前に 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="d99d8-3016">65,535 がある (2 ^16-1) 使用できるローカル変数 (0 ~ 65,534)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="d99d8-3017">可能性の高い実装は、特定のメソッドのローカル変数の合計数と共に、ローカルの両方のインデックスを追跡するために、2 バイトの整数を使用して、ので、インデックス 65,535 は有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="d99d8-3018">65535 のインデックスが行われた有効な場合、このようなメソッドでのローカルの数を追跡するために広く整数が必要になります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="d99d8-3019">`ldloc.0`、 `ldloc.1`、 `ldloc.2`、および`ldloc.3`手順については、最初の 4 つのローカル変数にアクセスするため、効率的なエンコーディングを提供します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="d99d8-3020">値の型は、メソッドのヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="d99d8-3021">4 バイト長が型に拡張されますよりも小さいをパーティション I. ローカル変数を参照してください`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-3022">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-3023">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`ldloc`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3024">ILGenerator.Emit (オペコード、LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="d99d8-3025">ILGenerator.Emit (オペコード、short)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3026">インデックス 0 のローカル変数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3026">Loads the local variable at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3027">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3028">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3028">Format</span></span>|<span data-ttu-id="d99d8-3029">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3029">Assembly Format</span></span>|<span data-ttu-id="d99d8-3030">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3031">06</span><span class="sxs-lookup"><span data-stu-id="d99d8-3031">06</span></span>|<span data-ttu-id="d99d8-3032">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="d99d8-3032">ldloc.0</span></span>|<span data-ttu-id="d99d8-3033">インデックス 0 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3034">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3035">インデックス 0 のローカル変数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3036">`ldloc.0` 特に効率的なエンコーディングを<xref:System.Reflection.Emit.OpCodes.Ldloc>インデックス 0 のローカル変数へのアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3036">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="d99d8-3037">値の型は、メソッドのヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="d99d8-3038">4 バイト長よりも小さいをローカル変数は、型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-3039">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-3040">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldloc.0`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3041">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3042">インデックス 1 のローカル変数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3042">Loads the local variable at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3043">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3044">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3044">Format</span></span>|<span data-ttu-id="d99d8-3045">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3045">Assembly Format</span></span>|<span data-ttu-id="d99d8-3046">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3047">07</span><span class="sxs-lookup"><span data-stu-id="d99d8-3047">07</span></span>|<span data-ttu-id="d99d8-3048">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="d99d8-3048">ldloc.1</span></span>|<span data-ttu-id="d99d8-3049">インデックス 1 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3050">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3051">インデックス 1 のローカル変数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3052">`ldloc.1` 特に効率的なエンコーディングを<xref:System.Reflection.Emit.OpCodes.Ldloc>インデックス 1 のローカル変数へのアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3052">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="d99d8-3053">値の型は、メソッドのヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="d99d8-3054">4 バイト長よりも小さいをローカル変数は、型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-3055">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-3056">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldloc.1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3057">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3058">インデックス 2 のローカル変数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3058">Loads the local variable at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3059">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3060">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3060">Format</span></span>|<span data-ttu-id="d99d8-3061">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3061">Assembly Format</span></span>|<span data-ttu-id="d99d8-3062">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3063">08</span><span class="sxs-lookup"><span data-stu-id="d99d8-3063">08</span></span>|<span data-ttu-id="d99d8-3064">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="d99d8-3064">ldloc.2</span></span>|<span data-ttu-id="d99d8-3065">インデックス 2 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3066">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3067">インデックス 2 のローカル変数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3068">`ldloc.2` 特に効率的なエンコーディングを<xref:System.Reflection.Emit.OpCodes.Ldloc>インデックス 2 のローカル変数へのアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3068">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="d99d8-3069">値の型は、メソッドのヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="d99d8-3070">4 バイト長よりも小さいをローカル変数は、型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-3071">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-3072">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldloc.2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3074">インデックス 3 のローカル変数を評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3074">Loads the local variable at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3075">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3076">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3076">Format</span></span>|<span data-ttu-id="d99d8-3077">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3077">Assembly Format</span></span>|<span data-ttu-id="d99d8-3078">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3079">09</span><span class="sxs-lookup"><span data-stu-id="d99d8-3079">09</span></span>|<span data-ttu-id="d99d8-3080">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="d99d8-3080">ldloc.3</span></span>|<span data-ttu-id="d99d8-3081">インデックス 3 のローカル変数を評価スタックに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3082">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3083">インデックス 3 のローカル変数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3084">`ldloc.3` 特に効率的なエンコーディングを<xref:System.Reflection.Emit.OpCodes.Ldloc>インデックス 3 のローカル変数へのアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3084">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="d99d8-3085">値の型は、メソッドのヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="d99d8-3086">4 バイト長よりも小さいをローカル変数は、型に拡張されます`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-3087">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-3088">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldloc.3`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3089">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3090">特定のインデックスのローカル変数を評価スタックに読み込みます (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3091">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3092">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3092">Format</span></span>|<span data-ttu-id="d99d8-3093">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3093">Assembly Format</span></span>|<span data-ttu-id="d99d8-3094">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-3096">ldloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3096">ldloc.s `index`</span></span>|<span data-ttu-id="d99d8-3097">ローカル変数をインデックスに読み込みます`index`スタックに短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-3098">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3099">指定したインデックスにあるローカル変数の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3100">`ldloc.s`命令は、ローカル変数は、番号 0 以降の渡されたインデックスを評価スタックにローカル変数の数の内容をプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="d99d8-3101">ローカル変数は、メソッドの初期化フラグが true の場合、メソッドを入力する前に 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="d99d8-3102">256 がある (2 ^8) ローカルで使用できる変数 (0 ~ 255)、短い形式はより効率的なエンコーディング`ldloc`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="d99d8-3103">値の型は、メソッドのヘッダーで指定されているローカル変数の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="d99d8-3104">4 バイト長が型に拡張されますよりも小さいをパーティション I. ローカル変数を参照してください`int32`をスタックに読み込まれるときです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="d99d8-3105">浮動小数点値は、ネイティブのサイズに拡張されます (型`F`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="d99d8-3106">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`ldloc.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3107">ILGenerator.Emit (オペコード、LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="d99d8-3108">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3109">特定のインデックスのローカル変数のアドレスを評価スタックに読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3110">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3111">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3111">Format</span></span>|<span data-ttu-id="d99d8-3112">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3112">Assembly Format</span></span>|<span data-ttu-id="d99d8-3113">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3114">FE OD < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="d99d8-3115">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3115">ldloca `index`</span></span>|<span data-ttu-id="d99d8-3116">ローカル変数のアドレスをロード`index`を評価スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3117">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3118">指定したインデックス位置のローカル変数に格納されているアドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3119">`ldloca`命令は、ローカル変数は、番号 0 以降のスタックに渡されたインデックス ローカル変数の数のアドレスをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="d99d8-3120">スタックにプッシュされた値が既に正しく整列して使用するように指示と共に<xref:System.Reflection.Emit.OpCodes.Ldind_I>と<xref:System.Reflection.Emit.OpCodes.Stind_I>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="d99d8-3121">結果は、一時的なポインター (型`*`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="d99d8-3122">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldloca`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3123">ILGenerator.Emit (オペコード、short)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3124">特定のインデックスのローカル変数のアドレスを評価スタックに読み込みます (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3125">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3126">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3126">Format</span></span>|<span data-ttu-id="d99d8-3127">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3127">Assembly Format</span></span>|<span data-ttu-id="d99d8-3128">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-3130">ldloca.s `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3130">ldloca.s `index`</span></span>|<span data-ttu-id="d99d8-3131">ローカル変数のアドレスをロード`index`を評価スタックに短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-3132">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3133">指定したインデックス位置のローカル変数に格納されているアドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3134">`ldloca.s`命令は、ローカル変数は、番号 0 以降のスタックに渡されたインデックス ローカル変数の数のアドレスをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="d99d8-3135">スタックにプッシュされた値が既に正しく整列して使用するように指示と共に<xref:System.Reflection.Emit.OpCodes.Ldind_I>と<xref:System.Reflection.Emit.OpCodes.Stind_I>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="d99d8-3136">結果は、一時的なポインター (型`*`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="d99d8-3137">`ldloca.s`命令は 0 ~ 255 のローカル変数で使用するための効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="d99d8-3138">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldloca.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3139">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3140">null 参照 (<see langword="O" /> 型) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3141">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3142">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3142">Format</span></span>|<span data-ttu-id="d99d8-3143">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3143">Assembly Format</span></span>|<span data-ttu-id="d99d8-3144">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3145">14</span><span class="sxs-lookup"><span data-stu-id="d99d8-3145">14</span></span>|<span data-ttu-id="d99d8-3146">ldnull</span><span class="sxs-lookup"><span data-stu-id="d99d8-3146">ldnull</span></span>|<span data-ttu-id="d99d8-3147">null 参照をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="d99d8-3148">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3149">Null オブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3149">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3150">`ldnull` null 参照をプッシュ (型`O`)、スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3150">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="d99d8-3151">これは、データが入力されている前に、または禁止になったときに、場所を初期化するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="d99d8-3152">`ldnull` サイズに依存しない null 参照を提供します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3152">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="d99d8-3153">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldnull`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3154">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3155">アドレスが指す値型オブジェクトを評価スタックの一番上にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3156">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3157">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3157">Format</span></span>|<span data-ttu-id="d99d8-3158">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3158">Assembly Format</span></span>|<span data-ttu-id="d99d8-3159">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3160">71 < `T` ></span></span>|<span data-ttu-id="d99d8-3161">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3161">ldobj `class`</span></span>|<span data-ttu-id="d99d8-3162">値型のインスタンスのコピー`class`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3163">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3164">値型のオブジェクトのアドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3165">アドレスが、スタックからポップされ、その特定のアドレスで、インスタンスが検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="d99d8-3166">そのアドレスに格納されているオブジェクトの値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3167">`ldobj`値の型をパラメーターとして渡す命令を使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="d99d8-3168">`ldobj`命令が指す値をコピー `addrOfValObj` (型の`&`、 `*`、または`native int`)、スタックの一番上にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="d99d8-3169">コピーされたバイト数は、クラスのサイズによって異なります (で指定されたとおり、`class`パラメーター)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="d99d8-3170">`class`パラメーターが値型を表すメタデータ トークン。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="d99d8-3171">操作、`ldobj`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3172"><xref:System.TypeLoadException> クラスが見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3172"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="d99d8-3173">これは、通常、Microsoft Intermediate Language (MSIL) の命令が実行時ではなくネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-3174">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldobj`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3175">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3176">静的フィールドの値を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3176">Pushes the value of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3177">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3178">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3178">Format</span></span>|<span data-ttu-id="d99d8-3179">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3179">Assembly Format</span></span>|<span data-ttu-id="d99d8-3180">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3181">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3181">7E < `T` ></span></span>|<span data-ttu-id="d99d8-3182">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3182">ldsfld `field`</span></span>|<span data-ttu-id="d99d8-3183">値をプッシュ`field`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3184">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3185">特定のフィールドの値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3186">`ldsfld`命令は、静的 (クラスのすべてのインスタンスで共有) の値をプッシュ、スタックのフィールドです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="d99d8-3187">戻り値の型は、渡されたメタデータ トークンに関連付けられた`field`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="d99d8-3188">`ldsfld`命令が持つことができます、<xref:System.Reflection.Emit.OpCodes.Volatile>プレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="d99d8-3189">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldsfld`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3190">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3191">静的フィールドのアドレスを評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3191">Pushes the address of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3192">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3193">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3193">Format</span></span>|<span data-ttu-id="d99d8-3194">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3194">Assembly Format</span></span>|<span data-ttu-id="d99d8-3195">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3196">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3196">7F < `T` ></span></span>|<span data-ttu-id="d99d8-3197">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3197">ldsflda `field`</span></span>|<span data-ttu-id="d99d8-3198">アドレスをプッシュ`field`スタック上</span><span class="sxs-lookup"><span data-stu-id="d99d8-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="d99d8-3199">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3200">特定のフィールドのアドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3201">`ldsflda`命令は、静的 (クラスのすべてのインスタンスで共有) のアドレス、プッシュ、スタックのフィールドです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="d99d8-3202">アドレスは、一時的なポインターとして表すことができます (型`*`) 場合、メタデータ トークン`field`メモリがマネージ型を参照します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="d99d8-3203">それ以外の場合、そのアンマネージ ポインターに対応しています (型`native int`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="d99d8-3204">なお`field`場合があります、静的な割り当ての相対仮想アドレス (そのを含む PE ファイルが現在メモリに読み込まれる場合は、ベース アドレスからのフィールドのオフセット) を持つグローバル メモリは管理されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="d99d8-3205">`ldsflda`命令が持つことができます、<xref:System.Reflection.Emit.OpCodes.Volatile>プレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="d99d8-3206"><xref:System.MissingFieldException> フィールドは、メタデータ内で見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3206"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="d99d8-3207">これは、通常、Microsoft Intermediate Language (MSIL) の手順については、ランタイムではなく、ネイティブ コードに変換する場合にチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-3208">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldsflda`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3209">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3210">メタデータに格納されているリテラル文字列への新しいオブジェクト参照をプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3210">Pushes a new object reference to a string literal stored in the metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3211">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3212">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3212">Format</span></span>|<span data-ttu-id="d99d8-3213">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3213">Assembly Format</span></span>|<span data-ttu-id="d99d8-3214">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3215">72 < `T` ></span></span>|<span data-ttu-id="d99d8-3216">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3216">ldstr `mdToken`</span></span>|<span data-ttu-id="d99d8-3217">メタデータの文字列トークンの文字列オブジェクトをプッシュ`mdToken`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="d99d8-3218">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3219">文字列へのオブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3220">`ldstr`命令がオブジェクト参照にプッシュ (型`O`)、特定の文字列を表すリテラルのメタデータに格納されている新しい文字列オブジェクトにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="d99d8-3221">`ldstr`命令が必要なメモリを割り当ててし、実行時に必要な文字列形式のファイルで使用される形式からは、リテラル文字列を変換するために必要な任意の形式変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-3222">共通言語基盤 (CLI) からの 2 つの結果を保証する`ldstr`を同じ文字のシーケンスを持つ 2 つのメタデータ トークンを参照しているオブジェクトを返す厳密に同じ文字列 (「文字列インターンの使用」と呼ばれるプロセス)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="d99d8-3223">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldstr`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3224">ILGenerator.Emit (オペコード、文字列)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3225">メタデータ トークンをそのランタイム表現に変換し、評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3226">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3227">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3227">Format</span></span>|<span data-ttu-id="d99d8-3228">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3228">Assembly Format</span></span>|<span data-ttu-id="d99d8-3229">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3230">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3230">D0 < `T` ></span></span>|<span data-ttu-id="d99d8-3231">ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3231">ldtoken `token`</span></span>|<span data-ttu-id="d99d8-3232">メタデータ トークンをそのランタイム表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="d99d8-3233">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3234">渡されたトークンを変換、`RuntimeHandle`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3235">`ldtoken`命令プッシュ、`RuntimeHandle`の指定したメタデータ トークン。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="d99d8-3236">A`RuntimeHandle`できます、 `fieldref/fielddef`、 `methodref/methoddef`、または`typeref/typedef`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="d99d8-3237">呼び出しでスタックにプッシュされた値を使用できます`Reflection`システム クラス ライブラリのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="d99d8-3238">ランタイム ハンドルのについては、次のクラスを参照してください: <xref:System.RuntimeFieldHandle>、 <xref:System.RuntimeTypeHandle>、および<xref:System.RuntimeMethodHandle>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="d99d8-3239">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`ldtoken`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3240">ILGenerator.Emit (オペコード、MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="d99d8-3241">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="d99d8-3242">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3243">指定したオブジェクトに関連付けられた特定の仮想メソッドを実装しているネイティブ コードへのアンマネージ ポインター (<see langword="native int" /> 型) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3244">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3245">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3245">Format</span></span>|<span data-ttu-id="d99d8-3246">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3246">Assembly Format</span></span>|<span data-ttu-id="d99d8-3247">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3248">FE 07 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="d99d8-3249">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3249">ldvirtftn `method`</span></span>|<span data-ttu-id="d99d8-3250">オブジェクトの仮想メソッドへのポインターをプッシュ`method`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3251">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3252">オブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3253">メソッドにオブジェクト参照がスタックと、エントリ ポイントのアドレスからポップされます。 (メタデータ トークンによって指定されたとおり`method`) が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="d99d8-3254">ポインター`method`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3255">結果のアンマネージ ポインター、スタックにプッシュして、`ldvirtftn`命令を使用して呼び出すことができます、<xref:System.Reflection.Emit.OpCodes.Calli>命令マネージ メソッド (またはアンマネージ コードにマネージ コードから遷移をスタブ) を参照する場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="d99d8-3256">アンマネージ ポインターは、CLR 呼び出し規約を使用してネイティブ コードを指します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="d99d8-3257">このメソッドのポインターは、コールバック ルーチンとしてアンマネージ ネイティブ コードに渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="d99d8-3258">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ldvirtftn`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3259">ILGenerator.Emit (オペコード、MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3260">コードの保護領域を終了し、制御を特定のターゲット命令に無条件で転送します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3261">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3262">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3262">Format</span></span>|<span data-ttu-id="d99d8-3263">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3263">Assembly Format</span></span>|<span data-ttu-id="d99d8-3264">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3265">DD < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3265">DD < `int32` ></span></span>|<span data-ttu-id="d99d8-3266">ままにして `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3266">leave `target`</span></span>|<span data-ttu-id="d99d8-3267">コードの保護領域を終了します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="d99d8-3268">この命令に指定された履歴の移行の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3269">`leave`命令が現在の命令を次の命令の先頭から 4 バイト符号付きオフセットとして表され、特定のターゲット命令に無条件に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3270">`leave`命令がに似ていますが、 `br` 、命令が、これを使用して、終了、 `try`、 `filter`、または`catch`通常分岐命令のみ使用できますでこのようなブロック内に制御を転送する一方をブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="d99d8-3271">`leave`命令を評価スタックを空にして確実に適切な周囲`finally`ブロックは実行されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="d99d8-3272">使用することはできません、`leave`を終了する命令を`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="d99d8-3273">使用する catch ブロック内から有効な例外ハンドラーのコード生成を容易にする、 `leave` 、関連付けられている任意の命令に制御を転送命令`try`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="d99d8-3274">最初に制御を転送できますのみ命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-3275">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`leave`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3276">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3277">コードの保護領域を終了し、制御をターゲット命令に無条件で転送します (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3278">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3279">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3279">Format</span></span>|<span data-ttu-id="d99d8-3280">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3280">Assembly Format</span></span>|<span data-ttu-id="d99d8-3281">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3282">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3282">DE < `int8` ></span></span>|<span data-ttu-id="d99d8-3283">leave.s `target`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3283">leave.s `target`</span></span>|<span data-ttu-id="d99d8-3284">コード、短い形式の保護領域を終了します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-3285">この命令に指定された履歴の移行の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3286">`leave.s`命令が現在の命令を次の命令の先頭から 1 バイトの符号付きオフセットとして表され、渡されたターゲット命令に無条件に制御を転送します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3287">`leave.s`命令がに似ていますが、 `br` 、命令が、これを使用して、終了、 `try`、 `filter`、または`catch`通常分岐命令のみ使用できますでこのようなブロック内に制御を転送する一方をブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="d99d8-3288">`leave.s`命令を評価スタックを空にして確実に適切な周囲`finally`ブロックは実行されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="d99d8-3289">使用することはできません、`leave.s`を終了する命令を`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="d99d8-3290">使用する catch ブロック内から有効な例外ハンドラーのコード生成を容易にする、 `leave.s` 、関連付けられている任意の命令に制御を転送命令`try`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="d99d8-3291">最初に制御を転送できますのみ命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-3292">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`leave.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3293">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3294">ローカル動的メモリ プールから特定のバイト数を割り当て、最初に割り当てたバイトのアドレス (遷移ポインター、<see langword="*" /> 型) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3295">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3296">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3296">Format</span></span>|<span data-ttu-id="d99d8-3297">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3297">Assembly Format</span></span>|<span data-ttu-id="d99d8-3298">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3299">FE 0F</span><span class="sxs-lookup"><span data-stu-id="d99d8-3299">FE 0F</span></span>|<span data-ttu-id="d99d8-3300">localloc</span><span class="sxs-lookup"><span data-stu-id="d99d8-3300">localloc</span></span>|<span data-ttu-id="d99d8-3301">ローカル ヒープの領域を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="d99d8-3302">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3303">割り当てるバイトの数は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3304">バイト数が、スタックからポップされます。サイズに対応するメモリ容量は、ローカル ヒープから割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="d99d8-3305">割り当てられたメモリの最初のバイトへのポインターは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3306">`localloc`命令を割り当てます`size`(型`natural unsigned int`) ローカルの動的メモリからのバイトのプールし、アドレスを返します (一時的なポインター、型`*`)、最初の割り当てられたバイトです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="d99d8-3307">返されるメモリのブロックは場合にのみ、メソッドの初期化フラグは、0 に初期化`true`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="d99d8-3308">現在のメソッドを実行すると、 <xref:System.Reflection.Emit.OpCodes.Ret>、ローカル メモリ プールは再利用するために使用可能になります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="d99d8-3309">結果として得られるアドレスは、任意のプリミティブ データ型を格納するため存在を使用して、`stind`命令 (など<xref:System.Reflection.Emit.OpCodes.Stind_I4>) を使用して読み込まれると、`ldind`命令 (など<xref:System.Reflection.Emit.OpCodes.Ldind_I4>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="d99d8-3310">`localloc`命令が内で発生することはできません、 `filter`、 `catch`、 `finally`、または`fault`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="d99d8-3311"><xref:System.StackOverflowException> メモリ不足のため、要求の処理がある場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3311"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="d99d8-3312">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`localloc`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3313">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3314">特定の型のインスタンスへの型指定された参照を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3315">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3316">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3316">Format</span></span>|<span data-ttu-id="d99d8-3317">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3317">Assembly Format</span></span>|<span data-ttu-id="d99d8-3318">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3319">C6 < `T` ></span></span>|<span data-ttu-id="d99d8-3320">mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3320">mkrefany `class`</span></span>|<span data-ttu-id="d99d8-3321">型の参照を型指定されたプッシュ`class`をスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3322">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3323">ポインターのデータがスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3324">ポインターがポップされ、型の型指定された参照に変換`class`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="d99d8-3325">型指定された参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3326">`mkrefany`命令には、動的に型指定された参照を渡すことがサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="d99d8-3327">ポインター型でなければなりません`&`、 `*`、または`native int`、し、一部のデータの有効なアドレスを保持します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="d99d8-3328">`Class` ポインターによって参照されるデータの種類を記述するクラスのトークン。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3328">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="d99d8-3329">`Mkrefany` 型指定された参照のポインターと型の非透過の説明を提供する、スタックにプッシュ`class`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3329">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="d99d8-3330">型指定された参照時に許可されている唯一の有効な操作では、パラメーターとして型指定された参照を必要とするメソッドに渡すことです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="d99d8-3331">呼び出し先を使用してできます、<xref:System.Reflection.Emit.OpCodes.Refanytype>と<xref:System.Reflection.Emit.OpCodes.Refanyval>それぞれ型 (クラス) とアドレスを取得する手順。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="d99d8-3332"><xref:System.TypeLoadException> 場合にスローされる`class`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3332"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="d99d8-3333">これは、通常、Microsoft Intermediate Language (MSIL) 命令が実行時ではなくネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-3334">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`mkrefany`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3335">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3336">2 つの値を乗算し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3336">Multiplies two values and pushes the result on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3337">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3338">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3338">Format</span></span>|<span data-ttu-id="d99d8-3339">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3339">Assembly Format</span></span>|<span data-ttu-id="d99d8-3340">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3341">5A</span><span class="sxs-lookup"><span data-stu-id="d99d8-3341">5A</span></span>|<span data-ttu-id="d99d8-3342">mul</span><span class="sxs-lookup"><span data-stu-id="d99d8-3342">mul</span></span>|<span data-ttu-id="d99d8-3343">スタック上の 2 つの値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3344">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3345">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3345">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3346">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3346">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3347">`value2` および`value1`スタックからポップされます。`value1`が乗算`value2`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3347">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="d99d8-3348">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3349">`mul`命令乗算`value1`によって`value2`し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="d99d8-3350">整数演算では、オーバーフローについては、上位ビットが自動的に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="d99d8-3351">参照してください<xref:System.Reflection.Emit.OpCodes.Mul_Ovf>整数固有のオーバーフロー処理で操作を乗算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="d99d8-3352">浮動小数点型の場合は、0 \* 無限大 NaN を = です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="d99d8-3353">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`mul`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3354">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3355">2 つの整数値を乗算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3356">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3357">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3357">Format</span></span>|<span data-ttu-id="d99d8-3358">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3358">Assembly Format</span></span>|<span data-ttu-id="d99d8-3359">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3360">D8</span><span class="sxs-lookup"><span data-stu-id="d99d8-3360">D8</span></span>|<span data-ttu-id="d99d8-3361">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="d99d8-3361">mul.ovf</span></span>|<span data-ttu-id="d99d8-3362">オーバーフロー チェックでスタック上の 2 つの整数値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="d99d8-3363">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3364">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3364">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3365">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3365">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3366">`value2` および`value1`スタックからポップされます。`value1`が乗算`value2`、オーバーフロー チェックを使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3366">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="d99d8-3367">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3368">`mul.ovf`命令は、整数を乗算`value1`整数`value2`し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="d99d8-3369">結果は結果の型に収まらない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-3370"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3370"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-3371">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`mul.ovf`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3372">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3373">2 つの符号なし整数値を乗算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3374">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3375">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3375">Format</span></span>|<span data-ttu-id="d99d8-3376">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3376">Assembly Format</span></span>|<span data-ttu-id="d99d8-3377">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3378">D9</span><span class="sxs-lookup"><span data-stu-id="d99d8-3378">D9</span></span>|<span data-ttu-id="d99d8-3379">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-3379">mul.ovf.un</span></span>|<span data-ttu-id="d99d8-3380">オーバーフロー チェックでスタック上の 2 つの符号なし値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="d99d8-3381">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3382">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3382">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3383">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3383">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3384">`value2` および`value1`スタックからポップされます。`value1`が乗算`value2`、オーバーフロー チェックを使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3384">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="d99d8-3385">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3386">`mul.ovf.un`命令が符号なし整数を乗算`value1`符号なし整数で`value2`し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="d99d8-3387">結果は結果の型に収まらない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-3388"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3388"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-3389">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`mul.ovf.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3390">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3391">値を無効にし、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3391">Negates a value and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3392">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3393">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3393">Format</span></span>|<span data-ttu-id="d99d8-3394">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3394">Assembly Format</span></span>|<span data-ttu-id="d99d8-3395">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3396">65</span><span class="sxs-lookup"><span data-stu-id="d99d8-3396">65</span></span>|<span data-ttu-id="d99d8-3397">負</span><span class="sxs-lookup"><span data-stu-id="d99d8-3397">neg</span></span>|<span data-ttu-id="d99d8-3398">スタック上に現在の値を否定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3399">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3400">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3401">値がスタックからポップされ、符号を反転します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="d99d8-3402">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3403">`neg`命令の値を無効にし、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="d99d8-3404">戻り値の型は、オペランドの型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="d99d8-3405">整数値の否定は、標準的な 2 の補数の否定。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="d99d8-3406">具体的には、否定、最も負の数 (正の対応するものはありません) には、負の数が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="d99d8-3407">このオーバーフローの使用を検出するために、<xref:System.Reflection.Emit.OpCodes.Sub_Ovf>命令代わりに (つまり、0 から減算)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="d99d8-3408">浮動小数点数を否定すると、オーバーフローが発生することはできませんと NaN が否定は NaN を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="d99d8-3409">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`neg`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3410">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3411">特定の型の要素を持つ、インデックス番号が 0 から始まる新しい 1 次元配列へのオブジェクト参照を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3412">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3413">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3413">Format</span></span>|<span data-ttu-id="d99d8-3414">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3414">Assembly Format</span></span>|<span data-ttu-id="d99d8-3415">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3416">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3416">8D < `T` ></span></span>|<span data-ttu-id="d99d8-3417">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3417">newarr `etype`</span></span>|<span data-ttu-id="d99d8-3418">型の要素を持つ新しい配列を作成`etype`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="d99d8-3419">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3420">配列内の要素の数は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3421">要素の数が、スタックからポップされ、配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="d99d8-3422">新しい配列にオブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3423">`newarr`命令がオブジェクト参照にプッシュ (型`O`) に、新しい 0 から始まる 1 次元配列の要素の型は`etype`(型を記述するメタデータ トークン)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="d99d8-3424">として新しい配列の要素の数を指定する必要があります、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="d99d8-3425">有効な配列のインデックス範囲は 0 から 1 を引いた要素の最大数です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="d99d8-3426">配列の要素には、値型を含む、任意の型を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="d99d8-3427">数値の 0 から始まる、1 次元の配列は、適切な値の型を参照するメタデータ トークンを使用して作成されます (<xref:System.Int32>など)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="d99d8-3428">配列の要素は、適切な型の 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="d99d8-3429">始まる 1 次元配列と多次元配列を使用して作成<xref:System.Reflection.Emit.OpCodes.Newobj>なく`newarr`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="d99d8-3430">一般的には、作成されたのメソッドを使用して、 <xref:System.Array> .NET Framework のクラスです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="d99d8-3431"><xref:System.OutOfMemoryException> メモリ不足のため、要求を満たす場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3431"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="d99d8-3432"><xref:System.OverflowException> 場合にスローされる`numElems`が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3432"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="d99d8-3433">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`newarr`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3434">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3435">新しいオブジェクトまたは値型の新しいインスタンスを作成し、オブジェクト参照 (<see langword="O" /> 型) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3436">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3437">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3437">Format</span></span>|<span data-ttu-id="d99d8-3438">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3438">Assembly Format</span></span>|<span data-ttu-id="d99d8-3439">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3440">73 < `T` ></span></span>|<span data-ttu-id="d99d8-3441">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3441">newobj `ctor`</span></span>|<span data-ttu-id="d99d8-3442">初期化されていないオブジェクトまたは値型の割り当てし、コンス トラクター メソッドを呼び出して`ctor`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="d99d8-3443">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3444">引数`arg1`を通じて`argn`順序でスタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="d99d8-3445">引数`argn`を通じて`arg1`スタックからポップされに渡される`ctor`オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="d99d8-3446">新しいオブジェクトへの参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3447">`newobj`命令は、新しいオブジェクトまたは値型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="d99d8-3448">`Ctor` メタデータ トークンは、(、`methodref`または`methoddef`コンス トラクターとしてマークする必要があります) を示す名前とクラスを呼び出すコンス トラクターのシグネチャ。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3448">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="d99d8-3449">`newobj`命令に関連付けられているクラスの新しいインスタンスを割り当てる`ctor`し、新しいインスタンスを適切な型の 0 または適切な null 参照のすべてのフィールドを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="d99d8-3450">コンス トラクターを呼び出して`ctor`と、新しく作成されたインスタンスと共に、指定された引数を使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="d99d8-3451">ここがオブジェクト参照を初期化するコンス トラクターが呼び出された後 (型`O`) が、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3452">コンス トラクターの観点から初期化されていないオブジェクトは引数 0 であり、newobj に渡されるその他の引数が順番に従います。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="d99d8-3453">使用してすべての 0 から始まる 1 次元配列が作成された<xref:System.Reflection.Emit.OpCodes.Newarr>ではなく、`newobj`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="d99d8-3454">これに対し、他のすべての配列 (1 つの次元数よりもまたは 1 次元が、0 以上) を使用してを作成する、`newobj`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="d99d8-3455">値の型は、通常使用して作成されなかった`newobj`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="d99d8-3456">引数またはを使用して、ローカル変数として通常割り当てられる`newarr`(0 から始まる、1 次元配列の)、またはオブジェクトのフィールドとして。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="d99d8-3457">使用して初期化される、いったん割り当てられる<xref:System.Reflection.Emit.OpCodes.Initobj>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="d99d8-3458">ただし、`newobj`とに、ローカルに格納、引数として渡すことができると、スタックに値型の新しいインスタンスを作成する命令を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="d99d8-3459"><xref:System.OutOfMemoryException> メモリ不足のため、要求を満たす場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3459"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="d99d8-3460"><xref:System.MissingMethodException> コンス トラクター メソッドの場合にスローされる`ctor`指定された名前を持つクラスと署名で見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3460"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="d99d8-3461">これは、通常、Microsoft Intermediate Language (MSIL) 命令が実行時ではなく、ネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-3462">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`newobj`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3463">ILGenerator.Emit (オペコード、ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3464">オペコードがパッチされている場合は、領域を補完します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3464">Fills space if opcodes are patched.</span>
          </span>
          <span data-ttu-id="d99d8-3465">循環参照の処理を利用することはできますが、意味のある演算は実行されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3465">No meaningful operation is performed although a processing cycle can be consumed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3466">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3467">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3467">Format</span></span>|<span data-ttu-id="d99d8-3468">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3468">Assembly Format</span></span>|<span data-ttu-id="d99d8-3469">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3470">00</span><span class="sxs-lookup"><span data-stu-id="d99d8-3470">00</span></span>|<span data-ttu-id="d99d8-3471">nop</span><span class="sxs-lookup"><span data-stu-id="d99d8-3471">nop</span></span>|<span data-ttu-id="d99d8-3472">動作せず、操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="d99d8-3473">この命令に対して定義されているスタック過渡期の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3474">`nop`操作は、何も行われません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="d99d8-3475">オペコードがパッチされている場合は、スペースを埋めるためにしています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="d99d8-3476">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`nop`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3477">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3478">スタックの一番上にある整数値のビットごとの補数を計算し、結果を同じ型として評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3479">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3480">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3480">Format</span></span>|<span data-ttu-id="d99d8-3481">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3481">Assembly Format</span></span>|<span data-ttu-id="d99d8-3482">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3483">66</span><span class="sxs-lookup"><span data-stu-id="d99d8-3483">66</span></span>|<span data-ttu-id="d99d8-3484">not</span><span class="sxs-lookup"><span data-stu-id="d99d8-3484">not</span></span>|<span data-ttu-id="d99d8-3485">値のビットごとの補数を計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="d99d8-3486">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3487">`value` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3487">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3488">`value` スタックし、そのビットごとのポップ ビットごとの補数を計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3488">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="d99d8-3489">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3490">`not`命令は整数値のビットごとの補数を計算し、結果をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="d99d8-3491">戻り値の型は、オペランドの型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="d99d8-3492">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`not`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3493">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3494">スタックの一番上にある 2 つの整数値のビットごとの補数を計算し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3495">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3496">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3496">Format</span></span>|<span data-ttu-id="d99d8-3497">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3497">Assembly Format</span></span>|<span data-ttu-id="d99d8-3498">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3499">60</span><span class="sxs-lookup"><span data-stu-id="d99d8-3499">60</span></span>|<span data-ttu-id="d99d8-3500">または</span><span class="sxs-lookup"><span data-stu-id="d99d8-3500">or</span></span>|<span data-ttu-id="d99d8-3501">ビットごとの計算または 2 つの整数値の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="d99d8-3502">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3503">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3503">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3504">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3504">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3505">`value2` および`value1`スタックと、ビットごとの OR からポップされます。 計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3505">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="d99d8-3506">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3507">`or`命令は、結果をスタックにプッシュ、スタックの一番上の 2 つの値のビットごとの OR を計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3508">`Or` 整数固有操作です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3508">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="d99d8-3509">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`or`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3510">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3511">現在評価スタックの一番上にある値を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3511">Removes the value currently on top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3512">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3513">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3513">Format</span></span>|<span data-ttu-id="d99d8-3514">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3514">Assembly Format</span></span>|<span data-ttu-id="d99d8-3515">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3516">26</span><span class="sxs-lookup"><span data-stu-id="d99d8-3516">26</span></span>|<span data-ttu-id="d99d8-3517">pop</span><span class="sxs-lookup"><span data-stu-id="d99d8-3517">pop</span></span>|<span data-ttu-id="d99d8-3518">スタックから上位の値をポップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3519">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3520">上位の値は、スタックからポップされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3521">`pop`命令がスタックから先頭の要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3522">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`pop`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3523">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3524">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3524">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3525">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3525">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3526">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3526">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3527">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3527">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3528">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3528">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3529">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3529">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3530">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3530">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3531">これは予約済みの命令です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3531">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3532">以降の配列アドレス演算で、実行時に型チェックを実行しないこと、および変更可能性が制限されたマネージ ポインターを返すことを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3533">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft intermediate language (MSIL) アセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3534">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3534">Format</span></span>|<span data-ttu-id="d99d8-3535">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3535">Assembly Format</span></span>|<span data-ttu-id="d99d8-3536">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="d99d8-3537">FE 1E</span></span>|<span data-ttu-id="d99d8-3538">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3538">readonly.</span></span>|<span data-ttu-id="d99d8-3539">以降の配列アドレス演算では、実行時型チェックは実行しないと、制限された変更可能性とマネージ ポインターが返されることを指定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="d99d8-3540">このプレフィックスがすぐ前でのみ使用できます、`ldelema`命令および特別なへの呼び出し`Address`メソッドの配列。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="d99d8-3541">後続の操作に対するその効果は、2 つを示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="d99d8-3542">実行時に、型チェックの操作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="d99d8-3543">暗黙的な型チェックは通常、`ldelema`と`stelem`参照で使用する入力配列。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="d99d8-3544">ないため、値クラス、実行時の型チェックのため`readonly`no-op をその場合は。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="d99d8-3545">検証は、マネージ ポインターとして変更可能性が制限にアドレスの操作の結果を扱います。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="d99d8-3546">ポインターは、定義する型が値を変更できるかどうかを制御するために可変性が制限と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="d99d8-3547">ポインターは読み取り専用のパブリック フィールドまたは場所の値を更新するメソッドを公開しない値クラス、(そのため、プレフィックスの名前)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="d99d8-3548">具体的には、プリミティブ型 (たとえば、System.Int32) を表すクラスは、ミューテーターを公開しないと、そのため、読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="d99d8-3549">この方法で制限されたマネージ ポインターは、次の方法でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="d99d8-3550">として、`object`のパラメーター、 `ldfld`、 `ldflda`、 `stfld`、 `call`、または`constrained callvirt`指示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="d99d8-3551">として、`pointer`パラメーターを`ldobj`命令またはのいずれかに、`ldind`指示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="d99d8-3552">として、`source`パラメーターを`cpobj`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3553">他のなどすべての操作が許可されていない、 `stobj`、 `initobj`、または`mkrefany`操作、またはのいずれか、`stind`指示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="d99d8-3554">目的、`readonly`をジェネリック コードの配列から要素をフェッチするときに、型チェックを回避するのには、プレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="d99d8-3555">たとえば、式`arr[i].m()`, 配列の要素型が、`arr`はジェネリック型のメソッドを使用してインターフェイスが存在するが制約されていること`m`、次の MSIL にコンパイルする場合があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="d99d8-3556">なし、`readonly`プレフィックス、`ldelema`命令は大文字と小文字で型チェックを実行する場所です。 0 は、参照型です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="d99d8-3557">効率的なこの種類のチェックはありませんできるだけでなく、意味的に正しいはありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="d99d8-3558">型チェック`ldelema`すぎます強力なは、完全に一致します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="d99d8-3559">配列には、型のサブクラスが保持されている場合です。 0 で、上記のコードには、型チェックが失敗します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="d99d8-3560">配列要素のアドレスをフェッチされると、要素自体ではなくをハンドルするために`arr[i]`両方の動作が値の型と参照型の場合と、そのために渡されることができます、`constrained callvirt`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3561">一般にできなくなる、配列には、参照型の要素が保持されている場合、ランタイム チェックをスキップしても安全です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="d99d8-3562">念のためには、このポインターから配列への変更が行われていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="d99d8-3563">検証規則では、これを確認します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="d99d8-3564">厳密に言うと、値の型の読み取り専用ですが値型の型の安全性の問題はありません、インスタンス メソッドの呼び出しのオブジェクトとして制限されたマネージ ポインターを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="d99d8-3565">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`readonly`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3566">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3567">型指定された参照に埋め込まれている型トークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3567">Retrieves the type token embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3568">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3569">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3569">Format</span></span>|<span data-ttu-id="d99d8-3570">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3570">Assembly Format</span></span>|<span data-ttu-id="d99d8-3571">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3572">FE 1D</span><span class="sxs-lookup"><span data-stu-id="d99d8-3572">FE 1D</span></span>|<span data-ttu-id="d99d8-3573">refanytype</span><span class="sxs-lookup"><span data-stu-id="d99d8-3573">refanytype</span></span>|<span data-ttu-id="d99d8-3574">型指定された参照に格納されている型トークンをプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="d99d8-3575">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3576">値の型参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3577">型指定された参照がスタックからポップされ、その対応する型トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="d99d8-3578">型トークンは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3579">型指定された参照には、型のトークンとオブジェクト インスタンスにアドレスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="d99d8-3580">`refanytype`命令は、型指定された参照に埋め込まれている型トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="d99d8-3581">参照してください、<xref:System.Reflection.Emit.OpCodes.Mkrefany>命令を作成する方法についての参照を入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="d99d8-3582">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`refanytype`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3583">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3584">型指定された参照に埋め込まれているアドレス (<see langword="&amp;" /> 型) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3585">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3586">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3586">Format</span></span>|<span data-ttu-id="d99d8-3587">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3587">Assembly Format</span></span>|<span data-ttu-id="d99d8-3588">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3589">C2 < `T` ></span></span>|<span data-ttu-id="d99d8-3590">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3590">refanyval `type`</span></span>|<span data-ttu-id="d99d8-3591">型指定された参照に格納されているアドレスにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="d99d8-3592">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3593">値の型参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3594">型指定された参照がスタックからポップされし、対応するアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="d99d8-3595">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3596">型指定された参照には、型のトークンとオブジェクト インスタンスにアドレスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="d99d8-3597">`refanyval`命令アドレスを取得しますに埋め込まれている、型指定された参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="d99d8-3598">スタックで提供される型指定された参照に埋め込まれている型がで指定された型と一致する必要があります`type`(いずれかのメタデータ トークン、`typedef`または`typeref`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="d99d8-3599">参照してください、<xref:System.Reflection.Emit.OpCodes.Mkrefany>関連コンテンツの命令。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="d99d8-3600"><xref:System.InvalidCastException> 場合にスローされる`type`型参照に格納されている型と同一には (この場合、`type`にクラスが用意されて、<xref:System.Reflection.Emit.OpCodes.Mkrefany>構築命令が型指定された参照と呼ばれます)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3600"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="d99d8-3601"><xref:System.TypeLoadException> 場合にスローされる`type`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3601"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="d99d8-3602">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`refanyval`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3603">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3604">2 つの値を除算し、剰余を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3604">Divides two values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3605">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3606">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3606">Format</span></span>|<span data-ttu-id="d99d8-3607">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3607">Assembly Format</span></span>|<span data-ttu-id="d99d8-3608">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3609">5D</span><span class="sxs-lookup"><span data-stu-id="d99d8-3609">5D</span></span>|<span data-ttu-id="d99d8-3610">rem</span><span class="sxs-lookup"><span data-stu-id="d99d8-3610">rem</span></span>|<span data-ttu-id="d99d8-3611">除算の剰余プッシュ`value1`によって`value2`をスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="d99d8-3612">ReplaceThisText</span><span class="sxs-lookup"><span data-stu-id="d99d8-3612">ReplaceThisText</span></span>  
  
 <span data-ttu-id="d99d8-3613">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3613">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3614">A`value1`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3614">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3615">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3615">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3616">`value2` および`value1`スタックとの残りの部分からポップされます。 `value1` `div` `value2`計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3616">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="d99d8-3617">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3617">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3618">`result` = `value1` `rem` `value2` 次の条件を満たします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3618">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="d99d8-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`)、および。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="d99d8-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;、記号 (`result`) 記号の = (`value1`) ここで、`div`は 0 方向に切り捨てられます除算命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="d99d8-3621">場合`value2`ゼロまたは`value1`無限大 NaN になります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3621">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="d99d8-3622">場合`value2`無限大の場合は、結果は`value1`(の否定`-infinity`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3622">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="d99d8-3623">整数演算でスロー<xref:System.DivideByZeroException>場合`value2`ゼロです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3623">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="d99d8-3624">Intel ベースのプラットフォームで、なお、<xref:System.OverflowException>を計算するときにスローされる (minint `rem` -1)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3624">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="d99d8-3625">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`rem`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3627">2 つの符号なしの値を除算し、剰余を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3627">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3628">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3629">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3629">Format</span></span>|<span data-ttu-id="d99d8-3630">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3630">Assembly Format</span></span>|<span data-ttu-id="d99d8-3631">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3632">5E</span><span class="sxs-lookup"><span data-stu-id="d99d8-3632">5E</span></span>|<span data-ttu-id="d99d8-3633">rem.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-3633">rem.un</span></span>|<span data-ttu-id="d99d8-3634">符号なしに除算した剰余をプッシュ`value1`符号なしで`value2`をスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3634">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3635">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3636">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3636">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3637">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3637">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3638">`value2` および`value1`スタックとの残りの部分からポップされます。 `value1` `div` `value2`計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3638">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="d99d8-3639">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3639">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3640">`result` = `value1` `rem.un` `value2` 次の条件を満たします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3640">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="d99d8-3641">`result` = `value1` - `value2` x (`value1` `div.un` `value2`)、および。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3641">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="d99d8-3642">0 = `result`  < `value2`ここで、`div.un`は符号なしの除算命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3642">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3643">`rem.un`命令計算`result`し、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3643">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="d99d8-3644">`Rem.un` 符号なし整数としてその引数を処理中に<xref:System.Reflection.Emit.OpCodes.Rem>はこれらを扱い、符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3644">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="d99d8-3645">`Rem.un` 浮動小数点数に指定されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3645">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="d99d8-3646">整数演算でスロー<xref:System.DivideByZeroException>場合`value2`ゼロです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3646">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="d99d8-3647">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`rem.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3647">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3648">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3648">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3649">現在のメソッドから戻り、呼び出し先の評価スタックから呼び出し元の評価スタックに戻り値 (存在する場合) をプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3649">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3650">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3650">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3651">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3651">Format</span></span>|<span data-ttu-id="d99d8-3652">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3652">Assembly Format</span></span>|<span data-ttu-id="d99d8-3653">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3653">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3654">2A</span><span class="sxs-lookup"><span data-stu-id="d99d8-3654">2A</span></span>|<span data-ttu-id="d99d8-3655">ret</span><span class="sxs-lookup"><span data-stu-id="d99d8-3655">ret</span></span>|<span data-ttu-id="d99d8-3656">可能性のある値を返すメソッドから返されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3656">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="d99d8-3657">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3657">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3658">戻り値は、呼び出し先の評価スタックからポップされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3658">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3659">手順 1. で得た戻り値は、呼び出し元の評価スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3659">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="d99d8-3660">戻り値が呼び出し先の評価スタックに存在しない場合は、値なしに (スタック遷移の動作、呼び出し先または呼び出し元のメソッド) が返されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3660">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="d99d8-3661">戻り値の型存在する場合、現在のメソッドの決定、スタックの最上位と、現在のメソッドを呼び出したメソッドのスタックにコピーしたからフェッチする値の型します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3661">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="d99d8-3662">現在のメソッドの評価スタックは、返される値を除く空にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3662">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="d99d8-3663">`ret` Out の制御を転送する命令を使用することはできません、`try`、 `filter`、 `catch`、または`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3663">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="d99d8-3664">内から、`try`または`catch`を使用して、<xref:System.Reflection.Emit.OpCodes.Leave>命令の対象、`ret`命令が外側のすべての例外ブロックの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3664">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="d99d8-3665">`filter`と`finally`ブロックは論理的には一部の例外処理と、コードが埋め込まれているメソッドではなく、正しく生成された Microsoft Intermediate Language (MSIL) 命令がメソッド内からの戻り値を実行しないで、`filter`または`finally`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3665">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="d99d8-3666">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`ret`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3666">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3667">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3667">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3668">現在の例外を再スローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3668">Rethrows the current exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3669">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3669">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3670">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3670">Format</span></span>|<span data-ttu-id="d99d8-3671">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3671">Assembly Format</span></span>|<span data-ttu-id="d99d8-3672">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3672">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3673">FE 1A</span><span class="sxs-lookup"><span data-stu-id="d99d8-3673">FE 1A</span></span>|<span data-ttu-id="d99d8-3674">rethrow</span><span class="sxs-lookup"><span data-stu-id="d99d8-3674">rethrow</span></span>|<span data-ttu-id="d99d8-3675">現在の例外を再スローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3675">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="d99d8-3676">この命令の履歴の移行の動作が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3676">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3677">`rethrow`命令がの本体内でのみ許可されている、`catch`ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3677">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="d99d8-3678">このハンドラーによってキャッチされた例外と同じ例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3678">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="d99d8-3679">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`rethrow`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3679">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3680">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3680">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3681">整数値を指定したビット数だけ、0 を使用して左にシフトし、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3681">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3682">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3682">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3683">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3683">Format</span></span>|<span data-ttu-id="d99d8-3684">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3684">Assembly Format</span></span>|<span data-ttu-id="d99d8-3685">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3685">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3686">62</span><span class="sxs-lookup"><span data-stu-id="d99d8-3686">62</span></span>|<span data-ttu-id="d99d8-3687">shl</span><span class="sxs-lookup"><span data-stu-id="d99d8-3687">shl</span></span>|<span data-ttu-id="d99d8-3688">整数が (0 でシフト) 左にシフトします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3688">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="d99d8-3689">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3689">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3690">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3690">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3691">シフトするビットの量は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3691">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3692">シフトするビットの数と、値がスタックからポップされます。値は指定されたビット数だけ左にシフトします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3692">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="d99d8-3693">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3693">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3694">`shl`命令シフト値 (型`int32`、`int64`または`native int`) 指定されたビット数だけ左します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3694">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="d99d8-3695">ビットの数は、型の値を`int32`または`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3695">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="d99d8-3696">シフトするビット数が (bits) の幅指定された値以上である場合、戻り値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3696">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="d99d8-3697">`Shl` 0 のビットをシフトごとの最下位の位置に挿入します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3697">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="d99d8-3698">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`shl`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3700">整数値を指定したビット数だけ、符号を付けて右にシフトし、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3700">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3701">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3702">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3702">Format</span></span>|<span data-ttu-id="d99d8-3703">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3703">Assembly Format</span></span>|<span data-ttu-id="d99d8-3704">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3705">63</span><span class="sxs-lookup"><span data-stu-id="d99d8-3705">63</span></span>|<span data-ttu-id="d99d8-3706">shr</span><span class="sxs-lookup"><span data-stu-id="d99d8-3706">shr</span></span>|<span data-ttu-id="d99d8-3707">整数を (符号でシフト) 右にシフトします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3707">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="d99d8-3708">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3709">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3709">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3710">シフトするビットの量は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3710">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3711">シフトするビットの数と、値がスタックからポップされます。値は指定されたビット数だけ右にシフトします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3711">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="d99d8-3712">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3712">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3713">`shr.un`命令シフト値 (型`int32`、`int64`または`native int`) 指定されたビット数だけ右。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3713">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="d99d8-3714">ビットの数は、型の値を`int32`または`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3714">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="d99d8-3715">シフトするビット数が (bits) の幅指定された値以上である場合、戻り値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3715">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="d99d8-3716">`Shr` 上位の元の値の符号を保持し、シフトごとのビットを複製、`result`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3716">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="d99d8-3717">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`shr`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3717">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3718">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3718">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3719">符号なし整数値を指定したビット数だけ、0 を使用して右にシフトし、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3719">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3720">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3720">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3721">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3721">Format</span></span>|<span data-ttu-id="d99d8-3722">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3722">Assembly Format</span></span>|<span data-ttu-id="d99d8-3723">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3723">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3724">64</span><span class="sxs-lookup"><span data-stu-id="d99d8-3724">64</span></span>|<span data-ttu-id="d99d8-3725">shr.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-3725">shr.un</span></span>|<span data-ttu-id="d99d8-3726">整数を (0 でシフト) 右にシフトします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3726">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="d99d8-3727">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3727">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3728">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3728">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3729">シフトするビットの量は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3729">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3730">シフトするビットの数と、値がスタックからポップされます。値は指定されたビット数だけ右にシフトします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3730">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="d99d8-3731">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3731">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3732">`shr.un`命令シフト値 (型`int32`、`int64`または`native int`) 指定されたビット数だけ右。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3732">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="d99d8-3733">ビットの数は、型の値を`int32`、`int64`または`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3733">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="d99d8-3734">シフトするビット数が (bits) の幅指定された値以上である場合、戻り値は指定されません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3734">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="d99d8-3735">`Shr.un` 0 のビットをシフトごとの最も高い位置に挿入します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3735">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="d99d8-3736">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`shr.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3736">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3737">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3737">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3738">提供された値型のサイズ (バイト単位) を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3738">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3739">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3739">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3740">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3740">Format</span></span>|<span data-ttu-id="d99d8-3741">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3741">Assembly Format</span></span>|<span data-ttu-id="d99d8-3742">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3742">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3743">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3743">FE 1C < `T` ></span></span>|<span data-ttu-id="d99d8-3744">sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3744">sizeof `valType`</span></span>|<span data-ttu-id="d99d8-3745">(バイト単位) として値型のサイズをプッシュする`unsigned int32`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3745">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="d99d8-3746">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3746">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3747">サイズ (バイト単位)、指定された値の型 (`valType`)、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3747">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3748">`valType` メタデータ トークンにする必要があります (、`typeref`または`typedef`) 値の型、参照型またはジェネリック型パラメーターを指定します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3748">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="d99d8-3749">参照型で返されるサイズはの対応する参照値のサイズは参照値によって参照されるオブジェクトに格納されたデータのサイズではなく (32 ビット システムでは 4 バイト) を入力します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3749">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="d99d8-3750">ジェネリック型パラメーターは、型またはそれを定義するメソッドの本体でのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3750">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="d99d8-3751">その型またはメソッドがインスタンス化されるときに、ジェネリック型パラメーターが値型または参照型によって置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3751">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="d99d8-3752">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`sizeof`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3752">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3753">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3753">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3754">評価スタックの一番上にある値を指定したインデックスの引数スロットに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3754">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3755">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3755">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3756">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3756">Format</span></span>|<span data-ttu-id="d99d8-3757">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3757">Assembly Format</span></span>|<span data-ttu-id="d99d8-3758">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3758">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3759">FE 0B < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3759">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="d99d8-3760">starg `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3760">starg `num`</span></span>|<span data-ttu-id="d99d8-3761">スタックから上位の値をポップし、引数スロットに格納`num`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3761">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="d99d8-3762">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3762">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3763">スタック上に現在の値がポップされ、引数スロットに配置`num`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3763">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="d99d8-3764">`starg`命令がスタックからの値をポップし、引数スロットに配置`num`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3764">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="d99d8-3765">値の型は、現在のメソッドのシグネチャで指定されている引数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3765">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-3766">可変個引数リストを取得する手順については、`starg`命令は、最初の署名の可変部分でなく、その引数を固定にのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3766">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="d99d8-3767">4 バイト長より小さい整数値を保持している引数に格納を実行すると、スタックから引数に移動するときに、値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3767">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="d99d8-3768">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3768">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-3769">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`starg`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3770">ILGenerator.Emit (オペコード、short)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3770">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3771">評価スタックの一番上にある値を指定したインデックスの引数スロットに格納します (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3771">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3772">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3773">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3773">Format</span></span>|<span data-ttu-id="d99d8-3774">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3774">Assembly Format</span></span>|<span data-ttu-id="d99d8-3775">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3776">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3776">10 < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-3777">starg.s `num`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3777">starg.s `num`</span></span>|<span data-ttu-id="d99d8-3778">スタックから上位の値をポップし、引数スロットに格納`num`、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3778">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-3779">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3780">スタック上に現在の値がポップされ、引数スロットに配置`num`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3780">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="d99d8-3781">`starg.s`命令がスタックからの値をポップし、引数スロットに配置`num`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3781">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="d99d8-3782">値の型は、現在のメソッドのシグネチャで指定されている引数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3782">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="d99d8-3783">`starg.s`命令は最初の 256 個の引数で使用するための効率的なエンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3783">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="d99d8-3784">可変個引数リストを取得する手順については、`starg.s`命令は、最初の署名の可変部分でなく、その引数を固定にのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3784">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="d99d8-3785">4 バイト長より小さい整数値を保持している引数に格納を実行すると、スタックから引数に移動するときに、値が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3785">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="d99d8-3786">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3786">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-3787">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`starg.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3787">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3788">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3788">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3789">指定のインデックス位置にある配列要素を評価スタックの、命令で指定された型の値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3789">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3790">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft intermediate language (MSIL) アセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3790">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3791">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3791">Format</span></span>|<span data-ttu-id="d99d8-3792">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3792">Assembly Format</span></span>|<span data-ttu-id="d99d8-3793">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3793">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3794">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3794">A4 < `T` ></span></span>|<span data-ttu-id="d99d8-3795">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3795">stelem `typeTok`</span></span>|<span data-ttu-id="d99d8-3796">指定したインデックスにある配列要素を型の値に置き換えます`typeTok`スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3796">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3797">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3797">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3798">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3798">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3799">インデックス値、 `index`、内の要素へ`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3799">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3800">命令で指定された型の値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3800">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3801">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3801">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3802">`stelem`命令が 1 次元配列で指定された 0 から始まるインデックス位置にある要素の値を置き換えます`array`値を使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3802">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="d99d8-3803">トークンで指定された型は、値が`typeTok`命令でします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3803">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="d99d8-3804">配列は、オブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3804">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3805">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3805">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3806"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3806"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3807"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3807"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3808"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3808"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3809">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3809">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3810">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3810">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3811">指定のインデックス位置にある配列要素を評価スタックの <see langword="native int" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3811">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3812">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3812">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3813">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3813">Format</span></span>|<span data-ttu-id="d99d8-3814">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3814">Assembly Format</span></span>|<span data-ttu-id="d99d8-3815">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3815">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3816">9B</span><span class="sxs-lookup"><span data-stu-id="d99d8-3816">9B</span></span>|<span data-ttu-id="d99d8-3817">stelem.i</span><span class="sxs-lookup"><span data-stu-id="d99d8-3817">stelem.i</span></span>|<span data-ttu-id="d99d8-3818">指定されたインデックス位置にある配列要素が置き換えられます、`native int`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3818">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3819">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3819">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3820">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3820">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3821">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3821">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3822">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3822">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3823">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3823">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3824">`stelem.i`命令、要素の値で置き換え`index`1 次元配列で`array`で、`native int`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3824">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3825">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3825">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3826">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3826">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3827"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3827"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3828"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3828"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3829"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3829"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3830">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.i`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3830">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3831">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3831">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3832">指定のインデックス位置にある配列要素を評価スタックの <see langword="int8" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3832">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3833">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3833">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3834">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3834">Format</span></span>|<span data-ttu-id="d99d8-3835">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3835">Assembly Format</span></span>|<span data-ttu-id="d99d8-3836">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3836">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3837">9C</span><span class="sxs-lookup"><span data-stu-id="d99d8-3837">9C</span></span>|<span data-ttu-id="d99d8-3838">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="d99d8-3838">stelem.i1</span></span>|<span data-ttu-id="d99d8-3839">指定されたインデックス位置にある配列要素が置き換えられます、`int8`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3839">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3840">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3840">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3841">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3841">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3842">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3842">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3843">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3843">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3844">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3844">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3845">`stelem.i1`命令、要素の値で置き換え`index`1 次元配列で`array`で、`int8`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3845">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3846">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3846">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3847">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3847">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3848"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3848"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3849"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3849"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3850"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3850"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3851">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.i1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3851">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3852">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3852">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3853">指定のインデックス位置にある配列要素を評価スタックの <see langword="int16" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3853">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3854">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3855">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3855">Format</span></span>|<span data-ttu-id="d99d8-3856">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3856">Assembly Format</span></span>|<span data-ttu-id="d99d8-3857">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3858">9D</span><span class="sxs-lookup"><span data-stu-id="d99d8-3858">9D</span></span>|<span data-ttu-id="d99d8-3859">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="d99d8-3859">stelem.i2</span></span>|<span data-ttu-id="d99d8-3860">指定されたインデックス位置にある配列要素が置き換えられます、`int16`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3860">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3861">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3862">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3862">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3863">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3863">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3864">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3864">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3865">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3865">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3866">`stelem.i2`命令、要素の値で置き換え`index`1 次元配列で`array`で、`int16`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3866">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3867">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3867">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3868">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3868">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3869"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3869"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3870"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3870"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3871"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3871"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3872">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.i2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3872">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3873">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3873">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3874">指定のインデックス位置にある配列要素を評価スタックの <see langword="int32" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3874">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3875">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3876">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3876">Format</span></span>|<span data-ttu-id="d99d8-3877">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3877">Assembly Format</span></span>|<span data-ttu-id="d99d8-3878">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3879">9E</span><span class="sxs-lookup"><span data-stu-id="d99d8-3879">9E</span></span>|<span data-ttu-id="d99d8-3880">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="d99d8-3880">stelem.i4</span></span>|<span data-ttu-id="d99d8-3881">指定されたインデックス位置にある配列要素が置き換えられます、`int32`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3881">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3882">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3883">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3883">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3884">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3884">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3885">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3885">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3886">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3886">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3887">`stelem.i4`命令、要素の値で置き換え`index`1 次元配列で`array`で、`int32`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3887">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3888">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3888">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3889">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3889">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3890"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3890"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3891"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3891"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3892"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3892"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3893">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3893">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3894">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3894">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3895">指定のインデックス位置にある配列要素を評価スタックの <see langword="int64" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3895">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3896">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3896">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3897">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3897">Format</span></span>|<span data-ttu-id="d99d8-3898">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3898">Assembly Format</span></span>|<span data-ttu-id="d99d8-3899">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3899">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3900">9F</span><span class="sxs-lookup"><span data-stu-id="d99d8-3900">9F</span></span>|<span data-ttu-id="d99d8-3901">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="d99d8-3901">stelem.i8</span></span>|<span data-ttu-id="d99d8-3902">指定されたインデックス位置にある配列要素が置き換えられます、`int64`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3902">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3903">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3903">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3904">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3904">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3905">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3905">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3906">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3906">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3907">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3907">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3908">`stelem.i8`命令、要素の値で置き換え`index`1 次元配列で`array`で、`int64`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3908">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3909">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3909">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3910">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3910">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3911"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3911"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3912"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3912"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3913"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3913"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3914">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3916">指定のインデックス位置にある配列要素を評価スタックの <see langword="float32" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3916">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3917">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3918">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3918">Format</span></span>|<span data-ttu-id="d99d8-3919">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3919">Assembly Format</span></span>|<span data-ttu-id="d99d8-3920">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3921">A0</span><span class="sxs-lookup"><span data-stu-id="d99d8-3921">A0</span></span>|<span data-ttu-id="d99d8-3922">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="d99d8-3922">stelem.r4</span></span>|<span data-ttu-id="d99d8-3923">指定されたインデックス位置にある配列要素が置き換えられます、`float32`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3923">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3924">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3925">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3925">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3926">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3926">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3927">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3927">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3928">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3928">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3929">`stelem.r4`命令、要素の値で置き換え`index`1 次元配列で`array`で、`float32`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3929">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3930">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3930">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3931">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3931">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3932"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3932"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3933"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3933"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3934"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3934"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3935">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.r4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3935">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3936">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3936">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3937">指定のインデックス位置にある配列要素を評価スタックの <see langword="float64" /> 値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3937">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3938">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3938">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3939">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3939">Format</span></span>|<span data-ttu-id="d99d8-3940">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3940">Assembly Format</span></span>|<span data-ttu-id="d99d8-3941">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3941">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3942">A1</span><span class="sxs-lookup"><span data-stu-id="d99d8-3942">A1</span></span>|<span data-ttu-id="d99d8-3943">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="d99d8-3943">stelem.r8</span></span>|<span data-ttu-id="d99d8-3944">指定されたインデックス位置にある配列要素が置き換えられます、`float64`スタックの値にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3944">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3945">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3945">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3946">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3946">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3947">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3947">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3948">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3948">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3949">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3949">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3950">`stelem.r8`命令、要素の値で置き換え`index`1 次元配列で`array`で、`float64`値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3950">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3951">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3951">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3952">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3952">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3953"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3953"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3954"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3954"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3955"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3955"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3956">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.r8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3956">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3957">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3957">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3958">指定のインデックス位置にある配列要素をオブジェクト参照値 (<see langword="O" /> 型) に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3958">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3959">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3959">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3960">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3960">Format</span></span>|<span data-ttu-id="d99d8-3961">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3961">Assembly Format</span></span>|<span data-ttu-id="d99d8-3962">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3962">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3963">A2</span><span class="sxs-lookup"><span data-stu-id="d99d8-3963">A2</span></span>|<span data-ttu-id="d99d8-3964">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="d99d8-3964">stelem.ref</span></span>|<span data-ttu-id="d99d8-3965">指定されたインデックス位置にある配列要素が置き換えられます、`ref`値 (型`O`)、スタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3965">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="d99d8-3966">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3966">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3967">オブジェクト参照、配列に`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3967">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3968">内の要素への有効なインデックス`array`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3968">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3969">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3969">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="d99d8-3970">値、インデックス、および配列参照がスタックからポップされます。値は、指定したインデックスにある配列要素に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3970">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="d99d8-3971">`stelem.ref`命令が 1 次元配列で指定されたインデックス位置にある要素の値を置き換えます`array`で、 `ref` (型`O`) 値、スタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3971">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-3972">配列はオブジェクト型の値によって表されるため、`O`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3972">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="d99d8-3973">インデックスの種類は、`native int`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3973">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="d99d8-3974">なお`stelem.ref`の要素の型に指定された値を暗黙的にキャスト`array`配列の要素に値を割り当てる前にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3974">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="d99d8-3975">検証済みのコードであっても、このキャストが失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3975">This cast can fail, even for verified code.</span></span> <span data-ttu-id="d99d8-3976">したがって、`stelem.ref`命令をスローできます<xref:System.InvalidCastException>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3976">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="d99d8-3977">以外で始まる 1 次元の配列および多次元配列の場合、<xref:System.Array>クラスを提供する<xref:System.Array.SetValue%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3977">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="d99d8-3978"><xref:System.NullReferenceException> 場合にスローされる`array`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3978"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-3979"><xref:System.IndexOutOfRangeException> 場合にスローされる`index`が負の値のバインドよりも大きい`array`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3979"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="d99d8-3980"><xref:System.ArrayTypeMismatchException> 場合にスローされる`array`が必要な型の要素を保持しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3980"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="d99d8-3981">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stelem.ref`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-3982">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-3982">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-3983">オブジェクト参照またはポインターのフィールドに格納された値を新しい値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-3983">Replaces the value stored in the field of an object reference or pointer with a new value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-3984">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-3985">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3985">Format</span></span>|<span data-ttu-id="d99d8-3986">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-3986">Assembly Format</span></span>|<span data-ttu-id="d99d8-3987">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-3987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-3988">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-3988">7D < `T` ></span></span>|<span data-ttu-id="d99d8-3989">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="d99d8-3989">stfld `field`</span></span>|<span data-ttu-id="d99d8-3990">値を置き換えます`field`の新しい値を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3990">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="d99d8-3991">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-3992">オブジェクト参照またはポインターは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3992">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-3993">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3993">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-3994">値とオブジェクトの参照/ポインターがスタックからポップされます。値`field`オブジェクトで指定された値に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3994">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="d99d8-3995">`stfld`命令は、オブジェクトのフィールドの値を置き換えます (型`O`) またはポインター経由で (型`native int`、 `&`、または`*`) に特定の値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3995">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="d99d8-3996">`Field` フィールドのメンバーの参照を表すメタデータ トークンです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3996">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="d99d8-3997">`stfld`命令は、のいずれかまたは両方のプレフィックスを持つことができます<xref:System.Reflection.Emit.OpCodes.Unaligned>と<xref:System.Reflection.Emit.OpCodes.Volatile>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3997">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="d99d8-3998"><xref:System.NullReferenceException> オブジェクト参照またはポインターが null 参照と、フィールドが静的でない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3998"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="d99d8-3999"><xref:System.MissingFieldException> 場合にスローされる`field`はメタデータに存在しません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-3999"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="d99d8-4000">これは、通常、Microsoft Intermediate Language (MSIL) の命令がランタイムではなく、ネイティブ コードに変換されるときにチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4000">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-4001">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stfld`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4002">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4002">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4003">提供されたアドレスに <see langword="native int" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4003">Stores a value of type <see langword="native int" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4004">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4005">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4005">Format</span></span>|<span data-ttu-id="d99d8-4006">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4006">Assembly Format</span></span>|<span data-ttu-id="d99d8-4007">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4008">DF</span><span class="sxs-lookup"><span data-stu-id="d99d8-4008">DF</span></span>|<span data-ttu-id="d99d8-4009">stind.i</span><span class="sxs-lookup"><span data-stu-id="d99d8-4009">stind.i</span></span>|<span data-ttu-id="d99d8-4010">ストア、`native int`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4010">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4011">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4011">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4012">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4012">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4013">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4013">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4014">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4014">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4015">`stind.i`命令ストア、`native int`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4015">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4016">タイプ セーフな演算では、する必要があります、`stind.i`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4016">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4017">操作、`stind.i`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4017">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4018"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4018"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4019">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.i`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4019">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4020">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4020">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4021">提供されたアドレスに <see langword="int8" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4021">Stores a value of type <see langword="int8" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4022">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4022">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4023">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4023">Format</span></span>|<span data-ttu-id="d99d8-4024">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4024">Assembly Format</span></span>|<span data-ttu-id="d99d8-4025">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4025">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4026">52</span><span class="sxs-lookup"><span data-stu-id="d99d8-4026">52</span></span>|<span data-ttu-id="d99d8-4027">stind.i1</span><span class="sxs-lookup"><span data-stu-id="d99d8-4027">stind.i1</span></span>|<span data-ttu-id="d99d8-4028">ストア、`int8`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4028">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4029">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4029">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4030">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4030">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4031">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4031">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4032">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4032">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4033">`stind.i1`命令ストア、`int8`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4033">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4034">タイプ セーフな演算では、する必要があります、`stind.i1`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4034">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4035">操作、`stind.i1`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4035">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4036"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4036"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4037">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.i1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4039">提供されたアドレスに <see langword="int16" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4039">Stores a value of type <see langword="int16" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4040">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4040">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4041">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4041">Format</span></span>|<span data-ttu-id="d99d8-4042">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4042">Assembly Format</span></span>|<span data-ttu-id="d99d8-4043">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4044">53</span><span class="sxs-lookup"><span data-stu-id="d99d8-4044">53</span></span>|<span data-ttu-id="d99d8-4045">stind.i2</span><span class="sxs-lookup"><span data-stu-id="d99d8-4045">stind.i2</span></span>|<span data-ttu-id="d99d8-4046">ストア、`int16`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4046">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4047">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4047">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4048">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4048">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4049">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4049">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4050">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4050">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4051">`stind.i2`命令ストア、`int16`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4051">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4052">タイプ セーフな演算では、する必要があります、`stind.2i`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4052">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4053">操作、`stind.i2`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4053">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4054"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4054"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4055">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.i2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4056">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4056">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4057">提供されたアドレスに <see langword="int32" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4057">Stores a value of type <see langword="int32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4058">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4058">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4059">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4059">Format</span></span>|<span data-ttu-id="d99d8-4060">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4060">Assembly Format</span></span>|<span data-ttu-id="d99d8-4061">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4061">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4062">54</span><span class="sxs-lookup"><span data-stu-id="d99d8-4062">54</span></span>|<span data-ttu-id="d99d8-4063">stind.i4</span><span class="sxs-lookup"><span data-stu-id="d99d8-4063">stind.i4</span></span>|<span data-ttu-id="d99d8-4064">ストア、`int32`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4064">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4065">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4065">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4066">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4066">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4067">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4067">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4068">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4068">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4069">`stind.i4`命令ストア、`int32`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4069">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4070">タイプ セーフな演算では、する必要があります、`stind.i4`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4070">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4071">操作、`stind.i4`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4071">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4072"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4072"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4073">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.i4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4075">提供されたアドレスに <see langword="int64" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4075">Stores a value of type <see langword="int64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4076">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4077">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4077">Format</span></span>|<span data-ttu-id="d99d8-4078">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4078">Assembly Format</span></span>|<span data-ttu-id="d99d8-4079">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4080">55</span><span class="sxs-lookup"><span data-stu-id="d99d8-4080">55</span></span>|<span data-ttu-id="d99d8-4081">stind.i8</span><span class="sxs-lookup"><span data-stu-id="d99d8-4081">stind.i8</span></span>|<span data-ttu-id="d99d8-4082">ストア、`int64`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4082">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4083">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4084">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4084">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4085">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4085">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4086">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4086">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4087">`stind.i8`命令ストア、`int64`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4087">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4088">タイプ セーフな演算では、する必要があります、`stind.i8`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4088">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4089">操作、`stind.i`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4089">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4090"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4090"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4091">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.i8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4091">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4092">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4092">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4093">提供されたアドレスに <see langword="float32" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4093">Stores a value of type <see langword="float32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4094">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4094">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4095">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4095">Format</span></span>|<span data-ttu-id="d99d8-4096">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4096">Assembly Format</span></span>|<span data-ttu-id="d99d8-4097">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4097">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4098">56</span><span class="sxs-lookup"><span data-stu-id="d99d8-4098">56</span></span>|<span data-ttu-id="d99d8-4099">stind.r4</span><span class="sxs-lookup"><span data-stu-id="d99d8-4099">stind.r4</span></span>|<span data-ttu-id="d99d8-4100">ストア、`float32`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4100">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4101">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4101">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4102">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4102">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4103">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4103">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4104">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4104">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4105">`stind.r4`命令ストア、`float32`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4105">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4106">タイプ セーフな演算では、する必要があります、`stind.r4`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4106">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4107">操作、`stind.r4`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4107">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4108"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4108"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4109">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.r4`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4110">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4110">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4111">提供されたアドレスに <see langword="float64" /> 型の値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4111">Stores a value of type <see langword="float64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4112">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4112">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4113">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4113">Format</span></span>|<span data-ttu-id="d99d8-4114">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4114">Assembly Format</span></span>|<span data-ttu-id="d99d8-4115">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4115">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4116">57</span><span class="sxs-lookup"><span data-stu-id="d99d8-4116">57</span></span>|<span data-ttu-id="d99d8-4117">stind.r8</span><span class="sxs-lookup"><span data-stu-id="d99d8-4117">stind.r8</span></span>|<span data-ttu-id="d99d8-4118">ストア、`float64`指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4118">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4119">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4119">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4120">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4120">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4121">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4121">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4122">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4122">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4123">`stind.r8`命令ストア、`float64`指定されたアドレスにある値 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4123">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4124">タイプ セーフな演算では、する必要があります、`stind.r8`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4124">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4125">操作、`stind.r8`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4125">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4126"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4126"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4127">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.r8`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4128">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4128">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4129">提供されたアドレスにオブジェクト参照値を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4129">Stores a object reference value at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4130">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4131">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4131">Format</span></span>|<span data-ttu-id="d99d8-4132">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4132">Assembly Format</span></span>|<span data-ttu-id="d99d8-4133">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4134">51</span><span class="sxs-lookup"><span data-stu-id="d99d8-4134">51</span></span>|<span data-ttu-id="d99d8-4135">stind.ref</span><span class="sxs-lookup"><span data-stu-id="d99d8-4135">stind.ref</span></span>|<span data-ttu-id="d99d8-4136">オブジェクト参照を保存 (型`O`) 指定したアドレスにある値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4136">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="d99d8-4137">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4138">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4138">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4139">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4139">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4140">値と、アドレスがスタックからポップされます。値は、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4140">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4141">`stind.ref`命令は、指定されたアドレスにオブジェクト参照値を格納 (型`native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4141">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="d99d8-4142">タイプ セーフな演算では、する必要があります、`stind.ref`命令ポインターの型と一致する方法で使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4142">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="d99d8-4143">操作、`stind.ref`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4143">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4144"><xref:System.NullReferenceException> 場合にスローされる`addr`命令のサフィックスが含まれる引数の型が自然に配置できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4144"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="d99d8-4145">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stind.ref`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4145">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4146">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4146">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4147">評価スタックの一番上から現在の値をポップし、指定したインデックスのローカル変数リストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4147">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4148">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4148">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4149">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4149">Format</span></span>|<span data-ttu-id="d99d8-4150">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4150">Assembly Format</span></span>|<span data-ttu-id="d99d8-4151">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4151">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4152">FE 0E < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4152">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="d99d8-4153">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-4153">stloc `index`</span></span>|<span data-ttu-id="d99d8-4154">スタックから値をポップし、ローカル変数に格納`index`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4154">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="d99d8-4155">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4155">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4156">値がスタックからポップされ、ローカル変数に格納`index`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4156">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="d99d8-4157">`stloc`命令は、評価スタックの最上位の値をポップし、ローカル変数の数に移さ`index`では、ローカル変数は番号 0 以降。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4157">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="d99d8-4158">値の型は、現在のメソッドのローカル シグネチャで指定されたローカル変数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4158">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="d99d8-4159">4 バイト長より小さい整数値を保持しているローカルに格納すると、スタックから、ローカル変数に移動するときに値が切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4159">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="d99d8-4160">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4160">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-4161">正しい Microsoft Intermediate Language (MSIL) の手順を必要とする`index`ローカル インデックスを有効にします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4161">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="d99d8-4162">`stloc`命令、`index`包括 0 を 65534 の範囲内である必要があります (具体的には、65535 が正しくありません)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4162">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="d99d8-4163">65535 を除くための実用的な: 可能性の高い実装は、2 バイト整数を使用して特定のメソッドのローカル変数の合計数だけでなく、ローカルのインデックスを追跡するためには。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4163">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="d99d8-4164">65535 のインデックスが行われた有効な場合、このようなメソッドでのローカルの数を追跡するために広く整数が必要になります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4164">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="d99d8-4165">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`stloc`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4165">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4166">ILGenerator.Emit (オペコード、LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="d99d8-4167">ILGenerator.Emit (オペコード、short)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4167">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4168">評価スタックの一番上から現在の値をポップし、インデックス 0 のローカル変数リストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4168">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4169">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4169">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4170">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4170">Format</span></span>|<span data-ttu-id="d99d8-4171">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4171">Assembly Format</span></span>|<span data-ttu-id="d99d8-4172">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4172">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4173">0A</span><span class="sxs-lookup"><span data-stu-id="d99d8-4173">0A</span></span>|<span data-ttu-id="d99d8-4174">stloc.0</span><span class="sxs-lookup"><span data-stu-id="d99d8-4174">stloc.0</span></span>|<span data-ttu-id="d99d8-4175">0 のローカル変数には、スタックから値をポップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4175">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="d99d8-4176">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4176">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4177">値がスタックからポップされ、インデックスが 0 でローカル変数に格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4177">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="d99d8-4178">`stloc.0`命令は、評価スタックの最上位の値をポップし、インデックスが 0 であるローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4178">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="d99d8-4179">値の型は、現在のメソッドのローカル シグネチャで指定されたローカル変数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4179">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="d99d8-4180">`stloc.0` 0 のローカル変数の値を格納するため、特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4180">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="d99d8-4181">4 バイト長より小さい整数値を保持しているローカルに格納すると、スタックから、ローカル変数に移動するときに値が切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4181">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="d99d8-4182">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4182">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-4183">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stloc.0`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4183">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4184">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4184">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4185">評価スタックの一番上から現在の値をポップし、インデックス 1 のローカル変数リストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4185">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4186">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4186">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4187">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4187">Format</span></span>|<span data-ttu-id="d99d8-4188">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4188">Assembly Format</span></span>|<span data-ttu-id="d99d8-4189">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4189">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4190">0B</span><span class="sxs-lookup"><span data-stu-id="d99d8-4190">0B</span></span>|<span data-ttu-id="d99d8-4191">stloc.1</span><span class="sxs-lookup"><span data-stu-id="d99d8-4191">stloc.1</span></span>|<span data-ttu-id="d99d8-4192">1 のローカル変数には、スタックから値をポップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4192">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="d99d8-4193">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4193">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4194">値がスタックからポップされ、インデックスが 1 でローカル変数に格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4194">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="d99d8-4195">`stloc.1`命令は、評価スタックの最上位の値をポップし、インデックスが 1 でローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4195">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="d99d8-4196">値の型は、現在のメソッドのローカル シグネチャで指定されたローカル変数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4196">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="d99d8-4197">`stloc.1` 1 のローカル変数の値を格納するため、特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4197">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="d99d8-4198">4 バイト長より小さい整数値を保持しているローカルに格納すると、スタックから、ローカル変数に移動するときに値が切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4198">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="d99d8-4199">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4199">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-4200">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stloc.1`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4202">評価スタックの一番上から現在の値をポップし、インデックス 2 のローカル変数リストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4202">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4203">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4204">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4204">Format</span></span>|<span data-ttu-id="d99d8-4205">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4205">Assembly Format</span></span>|<span data-ttu-id="d99d8-4206">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4207">0C</span><span class="sxs-lookup"><span data-stu-id="d99d8-4207">0C</span></span>|<span data-ttu-id="d99d8-4208">stloc.2</span><span class="sxs-lookup"><span data-stu-id="d99d8-4208">stloc.2</span></span>|<span data-ttu-id="d99d8-4209">2 のローカル変数に、スタックから値をポップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4209">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="d99d8-4210">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4211">値がスタックからポップされ、インデックスが 2 でローカル変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4211">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="d99d8-4212">`stloc.2`命令は、評価スタックの最上位の値をポップし、インデックスが 2 でローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4212">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="d99d8-4213">値の型は、現在のメソッドのローカル シグネチャで指定されたローカル変数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4213">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="d99d8-4214">`stloc.2` 2 のローカル変数の値を格納するため、特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4214">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="d99d8-4215">4 バイト長より小さい整数値を保持しているローカルに格納すると、スタックから、ローカル変数に移動するときに値が切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4215">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="d99d8-4216">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4216">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-4217">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stloc.2`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4217">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4218">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4218">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4219">評価スタックの一番上から現在の値をポップし、インデックス 3 のローカル変数リストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4219">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4220">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4220">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4221">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4221">Format</span></span>|<span data-ttu-id="d99d8-4222">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4222">Assembly Format</span></span>|<span data-ttu-id="d99d8-4223">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4223">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4224">0D</span><span class="sxs-lookup"><span data-stu-id="d99d8-4224">0D</span></span>|<span data-ttu-id="d99d8-4225">stloc.3</span><span class="sxs-lookup"><span data-stu-id="d99d8-4225">stloc.3</span></span>|<span data-ttu-id="d99d8-4226">3 のローカル変数に、スタックから値をポップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4226">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="d99d8-4227">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4227">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4228">値がスタックからポップされ、3 でインデックス付けされたローカル変数に格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4228">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="d99d8-4229">`stloc.3`命令は、評価スタックの最上位の値をポップし、インデックスが 3 でローカル変数に移動します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4229">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="d99d8-4230">値の型は、現在のメソッドのローカル シグネチャで指定されたローカル変数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4230">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="d99d8-4231">`stloc.3` 3 のローカル変数の値を格納するため、特に効率的なエンコードです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4231">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="d99d8-4232">4 バイト長より小さい整数値を保持しているローカルに格納すると、スタックから、ローカル変数に移動するときに値が切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4232">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="d99d8-4233">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4233">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-4234">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stloc.3`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4234">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4235">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4235">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4236">評価スタックの一番上から現在の値をポップし、<paramref name="index" /> のローカル変数リストに格納します (短い形式)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4236">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4237">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4237">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4238">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4238">Format</span></span>|<span data-ttu-id="d99d8-4239">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4239">Assembly Format</span></span>|<span data-ttu-id="d99d8-4240">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4240">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4241">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4241">13 < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-4242">stloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="d99d8-4242">stloc.s `index`</span></span>|<span data-ttu-id="d99d8-4243">スタックから値をポップし、ローカル変数に格納`index`、短縮形です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4243">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="d99d8-4244">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4244">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4245">値がスタックからポップされ、ローカル変数に格納`index`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4245">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="d99d8-4246">`stloc.s`命令は、評価スタックの最上位の値をポップし、ローカル変数の数に移さ`index`では、ローカル変数は番号 0 以降。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4246">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="d99d8-4247">値の型は、現在のメソッドのローカル シグネチャで指定されたローカル変数の型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4247">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="d99d8-4248">`stloc.s`命令は、0 255 までからのローカル変数の効率的なエンコーディングを提供します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4248">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="d99d8-4249">4 バイト長より小さい整数値を保持しているローカルに格納すると、スタックから、ローカル変数に移動するときに値が切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4249">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="d99d8-4250">浮動小数点値は、ネイティブのサイズから丸められます (型`F`) を引数に関連付けられているサイズにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4250">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="d99d8-4251">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`stloc.s`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4252">ILGenerator.Emit (オペコード、LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="d99d8-4253">ILGenerator.Emit (オペコード, byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4253">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4254">評価スタックから提供されたメモリ アドレスに、指定した型の値をコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4254">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4255">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4255">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4256">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4256">Format</span></span>|<span data-ttu-id="d99d8-4257">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4257">Assembly Format</span></span>|<span data-ttu-id="d99d8-4258">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4258">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4259">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4259">81 < `T` ></span></span>|<span data-ttu-id="d99d8-4260">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="d99d8-4260">stobj `class`</span></span>|<span data-ttu-id="d99d8-4261">型の値が格納`class`メモリにスタックからです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4261">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="d99d8-4262">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4262">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4263">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4263">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4264">型の値型のオブジェクト`class`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4264">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4265">オブジェクトとアドレスがスタックからポップされます。値型のオブジェクトは、アドレスに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4265">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="d99d8-4266">`stobj`命令アドレスで指定されたアドレスに値型のオブジェクトをコピーする (型のポインター `native int`、 `*`、または`&`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4266">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="d99d8-4267">コピーされたバイト数で表されるクラスのサイズによって異なります`class`値型を表すメタデータ トークン。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4267">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="d99d8-4268">操作、`stobj`命令は、の直前で変更できます<xref:System.Reflection.Emit.OpCodes.Volatile>または<xref:System.Reflection.Emit.OpCodes.Unaligned>命令をプレフィックスします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4268">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4269"><xref:System.TypeLoadException> クラスが見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4269"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="d99d8-4270">これは、通常、Microsoft Intermediate Language (MSIL) 命令が実行時ではなくネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4270">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="d99d8-4271">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stobj`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4271">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4272">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4272">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4273">静的フィールドの値を評価スタックの値に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4273">Replaces the value of a static field with a value from the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4274">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4275">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4275">Format</span></span>|<span data-ttu-id="d99d8-4276">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4276">Assembly Format</span></span>|<span data-ttu-id="d99d8-4277">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4278">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4278">80 < `T` ></span></span>|<span data-ttu-id="d99d8-4279">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="d99d8-4279">stsfld `field`</span></span>|<span data-ttu-id="d99d8-4280">値を置き換えます`field`指定された値を使用します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4280">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="d99d8-4281">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4282">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4282">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4283">値が、スタックからポップされに格納されている`field`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4283">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="d99d8-4284">`stsfld`命令がスタックから値を持つ静的フィールドの値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4284">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="d99d8-4285">`field` 静的フィールド メンバーを参照する必要があるメタデータ トークンです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4285">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="d99d8-4286">`stsfld`命令をプレフィックスとして付けることがあります<xref:System.Reflection.Emit.OpCodes.Volatile>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4286">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="d99d8-4287"><xref:System.MissingFieldException> フィールドは、メタデータ内で見つからない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4287"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="d99d8-4288">これは、通常、Microsoft Intermediate Language (MSIL) の手順については、実行時ではなく、ネイティブ コードに変換する場合にチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4288">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="d99d8-4289">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`stsfld`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4289">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4290">ILGenerator.Emit (オペコード、FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4290">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4291">ある値から別の値を減算し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4291">Subtracts one value from another and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4292">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4292">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4293">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4293">Format</span></span>|<span data-ttu-id="d99d8-4294">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4294">Assembly Format</span></span>|<span data-ttu-id="d99d8-4295">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4295">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4296">59</span><span class="sxs-lookup"><span data-stu-id="d99d8-4296">59</span></span>|<span data-ttu-id="d99d8-4297">sub</span><span class="sxs-lookup"><span data-stu-id="d99d8-4297">sub</span></span>|<span data-ttu-id="d99d8-4298">新しい数値を返す別の 1 つの値を減算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4298">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="d99d8-4299">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4299">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4300">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4300">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4301">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4301">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4302">`value2` および`value1`スタックからポップされます。`value2`から差し引かれます`value1`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4302">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="d99d8-4303">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4303">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4304">整数演算のオーバーフローが検出されない (適切なオーバーフロー処理では、次を参照してください。 <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4304">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="d99d8-4305">整数の減算飽和するのではなく、ラップします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4305">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="d99d8-4306">例: 8 ビット整数場所`value1`0 に設定されていると`value2`が設定を 1 に「ラップされた」の結果は 255 になります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4306">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="d99d8-4307">浮動小数点オーバーフロー `+inf` (`PositiveInfinity`) または`-inf`(`NegativeInfinity`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4307">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="d99d8-4308">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`sub`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4308">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4309">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4309">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4310">ある整数値を別の整数値から減算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4310">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4311">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4311">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4312">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4312">Format</span></span>|<span data-ttu-id="d99d8-4313">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4313">Assembly Format</span></span>|<span data-ttu-id="d99d8-4314">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4314">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4315">DA</span><span class="sxs-lookup"><span data-stu-id="d99d8-4315">DA</span></span>|<span data-ttu-id="d99d8-4316">sub.ovf</span><span class="sxs-lookup"><span data-stu-id="d99d8-4316">sub.ovf</span></span>|<span data-ttu-id="d99d8-4317">オーバーフロー チェックを別の 1 つの整数値を減算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4317">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="d99d8-4318">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4318">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4319">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4319">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4320">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4320">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4321">`value2` および`value1`スタックからポップされます。`value2`から差し引かれます`value1`オーバーフローをチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4321">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="d99d8-4322">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4322">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4323"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4323"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-4324">符号付き整数では、この操作を実行してください。浮動小数点の値を使用して<xref:System.Reflection.Emit.OpCodes.Sub>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4324">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="d99d8-4325">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`sub.ovf`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4325">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4326">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4326">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4327">ある符号なし整数値を別の符号なし整数値から減算し、オーバーフロー チェックを実行し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4327">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4328">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4328">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4329">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4329">Format</span></span>|<span data-ttu-id="d99d8-4330">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4330">Assembly Format</span></span>|<span data-ttu-id="d99d8-4331">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4331">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4332">DB</span><span class="sxs-lookup"><span data-stu-id="d99d8-4332">DB</span></span>|<span data-ttu-id="d99d8-4333">sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="d99d8-4333">sub.ovf.un</span></span>|<span data-ttu-id="d99d8-4334">オーバーフロー チェックを別の 1 つの符号なし整数値を減算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4334">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="d99d8-4335">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4335">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4336">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4336">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4337">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4337">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4338">`value2` および`value1`スタックからポップされます。`value2`から差し引かれます`value1`オーバーフローをチェックします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4338">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="d99d8-4339">結果は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4339">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4340"><xref:System.OverflowException> 結果は、結果の型では表されない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="d99d8-4341">符号付き整数では、この操作を実行してください。浮動小数点の値を使用して<xref:System.Reflection.Emit.OpCodes.Sub>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4341">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="d99d8-4342">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`sub.ovf.un`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4342">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4343">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4343">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4344">ジャンプ テーブルを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4344">Implements a jump table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4345">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4346">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4346">Format</span></span>|<span data-ttu-id="d99d8-4347">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4347">Assembly Format</span></span>|<span data-ttu-id="d99d8-4348">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="d99d8-4350">switch (`N`, `t1`, `t2`...`tN`)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4350">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="d99d8-4351">いずれかにジャンプ`N`値。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4351">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="d99d8-4352">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4353">値は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4353">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4354">値は、スタックからポップし、実行は、値が、命令のインデックスを指定されたオフセット位置に転送より小さい`N`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4354">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="d99d8-4355">`switch`命令がジャンプ テーブルを実装します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4355">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="d99d8-4356">命令の形式は、`unsigned int32`ターゲットの数を表す`N`、その後に`N`int32 値を指定することは、ターゲットを移動します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4356">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="d99d8-4357">これらのターゲットは、これを次の命令の先頭からのオフセット (正または負の値) として表されます`switch`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4357">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4358">`switch`命令がスタックからの値をポップし、符号なし整数として比較し、`N`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4358">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="d99d8-4359">値の場合より小さい`N`、0 からターゲットの番号と位置のインデックス値をターゲットに実行が転送される (たとえば、0 の値は、最初のターゲットを取得、1 の値と 2 つ目のターゲットを取得する)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4359">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="d99d8-4360">値がより大きいか等しい場合`N`、次の命令 (フォール スルー) で実行が続行します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4360">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="d99d8-4361">最初に制御を転送できますのみ、ターゲット命令に 1 つ以上のプレフィックス コードがある場合は、これらのプレフィックス。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4361">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="d99d8-4362">制御が移りますアウトや`try`、 `catch`、 `filter`、および`finally`この命令でブロックは実行できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4362">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="d99d8-4363">(このような移動は厳しく制限されるはおよび leave 命令を代わりに使用する必要があります。)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4363">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="d99d8-4364">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、 `switch` opcode です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="d99d8-4365">`Label[]`引数は、32 ビットのオフセットを表すラベルの配列。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4365">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="d99d8-4366">ILGenerator.Emit (オペコード、Label[])</span><span class="sxs-lookup"><span data-stu-id="d99d8-4366">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d99d8-4367">次のコード サンプルの使用を示しています、`Switch`の配列を使用してジャンプ テーブルを生成するオペコード<xref:System.Reflection.Emit.Label>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4367">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4368">実際の呼び出し命令が実行される前に、現在のメソッドのスタック フレームが削除されるように、後置のメソッド呼び出し命令を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4368">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4369">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4370">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4370">Format</span></span>|<span data-ttu-id="d99d8-4371">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4371">Assembly Format</span></span>|<span data-ttu-id="d99d8-4372">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4373">FE 14</span><span class="sxs-lookup"><span data-stu-id="d99d8-4373">FE 14</span></span>|<span data-ttu-id="d99d8-4374">末尾。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4374">tail.</span></span>|<span data-ttu-id="d99d8-4375">後続の呼び出しでは、現在のメソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4375">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="d99d8-4376">この命令に対して定義されている履歴の移行の動作はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4376">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="d99d8-4377">`tail`プレフィックス命令の直前にある必要があります、 <xref:System.Reflection.Emit.OpCodes.Call>、 <xref:System.Reflection.Emit.OpCodes.Calli>、または<xref:System.Reflection.Emit.OpCodes.Callvirt>命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4377">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="d99d8-4378">これは、呼び出し命令を実行する前に、現在のメソッドのスタック フレームが削除されることを示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4378">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="d99d8-4379">また、後続の呼び出しから返される値も、現在のメソッドによって返される値と、呼び出しはクロス メソッド ジャンプにしたがって変換することを意味します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4379">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="d99d8-4380">スタックは、次の呼び出しによって転送される引数を除く空にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4380">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="d99d8-4381">呼び出し命令を次の命令は、ret をする必要があります。したがって、唯一の有効なコード シーケンスは`tail. call`(または`calli`または`callvirt`)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4381">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="d99d8-4382">Microsoft Intermediate Language (MSIL) の正しい指示する必要がありますに分岐できません、 `call` 、それ以降に分岐可能性がある、命令が<xref:System.Reflection.Emit.OpCodes.Ret>です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4382">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="d99d8-4383">コントロールが転送されるときに信頼されていないコードから、信頼されるコードを id のセキュリティをコードから、現在のフレームを破棄できません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4383">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="d99d8-4384">.NET Framework セキュリティ チェックの可能性がありますので、`tail`は無視され、標準のまま<xref:System.Reflection.Emit.OpCodes.Call>命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4384">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="d99d8-4385">同様の順序、呼び出しが戻った後に同期の領域を終了できるようにする場合、`tail`同期済みとマークされているメソッドを終了に使用する場合、プレフィックスは無視されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4385">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="d99d8-4386">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`tail`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4386">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4387">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4387">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">
          <span data-ttu-id="d99d8-4388">Opcode オブジェクトのインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4388">An instance of an Opcode object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d99d8-4389">提供されたオペコードが 1 バイト引数をとる場合は、true または false を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4389">Returns true or false if the supplied opcode takes a single byte argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d99d8-4390">
            <see langword="True" /> または <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4390">
              <see langword="True" /> or <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4391">このメソッドは、どの MSIL オペコードが、最適化されたコードの"short"、使用する形式の検索に使用できます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4391">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="d99d8-4392">`TakesSingleByteArgument` 返します`true`場合、<xref:System.Reflection.Emit.OpCode>インスタンスでは、1 バイト引数を受け取り、次の場合。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4392">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="d99d8-4393">オペコード サイズのバイトのアドレスにブランチ命令を実行する (たとえば、<xref:System.Reflection.Emit.OpCodes.Br_S>と<xref:System.Reflection.Emit.OpCodes.Bgt_S>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4393">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="d99d8-4394">オペコード プッシュ、スタックのバイト値 (たとえば、 <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4394">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="d99d8-4395">オペコード参照変数または引数のバイト サイズ「短縮形」を使用して (たとえば、<xref:System.Reflection.Emit.OpCodes.Ldloc_S>と<xref:System.Reflection.Emit.OpCodes.Stloc_S>)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4395">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="d99d8-4396">それ以外の場合は、`false` を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4396">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="d99d8-4397">使用を次の例に示します`TakesSingleByteArgument`に反映して、`OpCodes`クラスとテストを表示するかどうか各`OpCode`フィールドは 1 バイト引数を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4397">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4398">現在評価スタックにある例外オブジェクトをスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4398">Throws the exception object currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4399">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4399">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4400">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4400">Format</span></span>|<span data-ttu-id="d99d8-4401">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4401">Assembly Format</span></span>|<span data-ttu-id="d99d8-4402">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4402">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4403">7A</span><span class="sxs-lookup"><span data-stu-id="d99d8-4403">7A</span></span>|<span data-ttu-id="d99d8-4404">throw</span><span class="sxs-lookup"><span data-stu-id="d99d8-4404">throw</span></span>|<span data-ttu-id="d99d8-4405">例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4405">Throws an exception.</span></span>|  
  
 <span data-ttu-id="d99d8-4406">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4406">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4407">(例外) へのオブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4407">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4408">オブジェクト参照がスタックし、スローされた例外からポップされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4408">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="d99d8-4409">`throw`命令は、例外オブジェクトをスロー (型`O`) 現在のスタックにします。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4409">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4410"><xref:System.NullReferenceException> オブジェクト参照が null 参照である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4410"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-4411">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`throw`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4411">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4412">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4412">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4413">現在評価スタックの一番上にあるアドレスが、直後の <see langword="ldind" />、<see langword="stind" />、<see langword="ldfld" />、<see langword="stfld" />、<see langword="ldobj" />、<see langword="stobj" />、<see langword="initblk" /> または <see langword="cpblk" /> の各命令の通常サイズに合わせて配置されていない可能性があることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4413">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4414">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4414">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4415">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4415">Format</span></span>|<span data-ttu-id="d99d8-4416">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4416">Assembly Format</span></span>|<span data-ttu-id="d99d8-4417">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4417">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4418">FE 12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4418">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="d99d8-4419">アライメントされていません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4419">unaligned.</span></span> `alignment`|<span data-ttu-id="d99d8-4420">後続のポインターの命令が固定である可能性を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4420">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="d99d8-4421">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4421">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4422">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4422">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4423">`Unaligned` 指定するアドレス (アンマネージ ポインター、 `native int`)、スタックに適さないことがあります、直後の自然なサイズに`ldind`、 `stind`、 `ldfld`、 `stfld`、 `ldobj`、 `stobj`、`initblk`、または`cpblk`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4423">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="d99d8-4424">つまり、用、<xref:System.Reflection.Emit.OpCodes.Ldind_I4>命令アドレスのアラインメントは 4 バイト境界にできない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4424">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="d99d8-4425">`initblk`と`cpblk`の既定のアラインメントは依存のアーキテクチャ (32 ビットの Cpu、64 ビット Cpu で 8 バイトでは 4 バイト)。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4425">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="d99d8-4426">32 ビット ワード サイズには、出力を制限しないコード ジェネレーターを使用する必要があります`unaligned`不明の場合、配置はコンパイル時に 8 バイトであります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4426">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="d99d8-4427">配置の値は、1、2、または 4 および生成されたコードでは、アドレスは、バイト、2 バイト、またはクアッド バイトでアライン、それぞれのことを想定してくださいことを意味する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4427">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="d99d8-4428">その一時的なものに注意してくださいポインター (型`*`)、常に配置します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4428">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="d99d8-4429">配置中に、`cpblk`命令は 2 つの数値 (1 つは、ソース) と、変換先のいずれかが必要に論理的に、影響はありません顕著なパフォーマンスの低い数値が指定されている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4429">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="d99d8-4430">`unaligned`と`volatile`プレフィックスは、いずれかの順序で組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4430">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="d99d8-4431">直前に入れなければなりませんが、 `ldind`、 `stind`、 `ldfld`、 `stfld`、 `ldobj`、 `stobj`、 `initblk`、または`cpblk`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4431">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="d99d8-4432">のみ、<xref:System.Reflection.Emit.OpCodes.Volatile>のプレフィックスは許可されて、<xref:System.Reflection.Emit.OpCodes.Ldsfld>と<xref:System.Reflection.Emit.OpCodes.Stsfld>指示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4432">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="d99d8-4433">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードを使用できる、`unaligned`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4434">ILGenerator.Emit (オペコード、ラベル)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4434">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="d99d8-4435">ILGenerator.Emit (オペコード, Byte)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4435">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4436">値型のボックス化変換された形式をボックス化が解除された形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4436">Converts the boxed representation of a value type to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4437">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4438">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4438">Format</span></span>|<span data-ttu-id="d99d8-4439">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4439">Assembly Format</span></span>|<span data-ttu-id="d99d8-4440">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4441">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4441">79 < `T` ></span></span>|<span data-ttu-id="d99d8-4442">ボックス化解除します。 `valType`</span><span class="sxs-lookup"><span data-stu-id="d99d8-4442">unbox `valType`</span></span>|<span data-ttu-id="d99d8-4443">値型のデータを抽出`obj`、その表現をボックス化します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4443">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="d99d8-4444">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4445">オブジェクト参照は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4445">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4446">オブジェクト参照がスタックからポップされ、値のポインター型をボックス化解除します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4446">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="d99d8-4447">値型のポインターは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4447">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4448">値型は、2 つの独立した表現内で共通言語基盤 (CLI) には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4448">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="d99d8-4449">値の型が別のオブジェクトに埋め込まれたときに使用される '生' のフォームです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4449">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="d99d8-4450">ここで値の型のデータがラップされる (のボックス化された) オブジェクトのため、個別のエンティティとして存在する可能性が 'ボックス化' の形式です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4450">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="d99d8-4451">`unbox`命令がオブジェクト参照に変換 (型`O`) では、値型のポインターに値の型の表現をボックス化 (マネージ ポインター型`&`)、そのフォームをボックス化解除します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4451">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="d99d8-4452">指定された値の型 (`valType`) は、ボックス化されたオブジェクト内に含まれる値の型の型を示すメタデータ トークン。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4452">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="d99d8-4453">異なり<xref:System.Reflection.Emit.OpCodes.Box>、オブジェクトで使用する値型のコピーを作成する必要となる`unbox`オブジェクトから値の型をコピーする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4453">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="d99d8-4454">通常、ボックス化されたオブジェクトの内部で存在する値の型のアドレスを計算するだけです。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4454">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="d99d8-4455"><xref:System.InvalidCastException> オブジェクトがないとしてボックス化された場合にスローされる`valType`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4455"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="d99d8-4456"><xref:System.NullReferenceException> オブジェクト参照が null 参照である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4456"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-4457"><xref:System.TypeLoadException> 値を入力する場合にスローされる`valType`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4457"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="d99d8-4458">これは、通常、Microsoft Intermediate Language (MSIL) 命令が実行時ではなく、ネイティブ コードに変換されるときに検出します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4458">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="d99d8-4459">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`unbox`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4460">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4460">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4461">命令で指定された型のボックス化変換された形式を、ボックス化が解除された形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4461">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4462">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft intermediate language (MSIL) アセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4462">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4463">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4463">Format</span></span>|<span data-ttu-id="d99d8-4464">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4464">Assembly Format</span></span>|<span data-ttu-id="d99d8-4465">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4466">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="d99d8-4466">A5 < `T` ></span></span>|<span data-ttu-id="d99d8-4467">unbox.any `typeTok`</span><span class="sxs-lookup"><span data-stu-id="d99d8-4467">unbox.any `typeTok`</span></span>|<span data-ttu-id="d99d8-4468">データの抽出`obj`、その表現をボックス化します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4468">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="d99d8-4469">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4470">オブジェクト参照`obj`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4470">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4471">オブジェクト参照がスタックからポップされ、命令で指定された型をボックス化解除します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4471">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="d99d8-4472">結果として得られるオブジェクトの参照または値の型は、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4472">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4473">値の型のボックス化された形式に適用すると、`unbox.any`命令に含まれる値を抽出する`obj`(型の`O`) と同じであるため、`unbox`続く`ldobj`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4473">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="d99d8-4474">参照型に適用すると、`unbox.any`命令と同じ効果を持つ`castclass``typeTok`です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4474">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="d99d8-4475">場合、オペランド`typeTok`がジェネリック型パラメーターでは、実行時の動作は、そのジェネリック型パラメーターに対して指定されている型によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4475">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="d99d8-4476"><xref:System.InvalidCastException> 場合にスローされる`obj`ボックス化された型ではありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4476"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="d99d8-4477"><xref:System.NullReferenceException> 場合にスローされる`obj`null 参照です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4477"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="d99d8-4478">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`unbox.any`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4478">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4479">ILGenerator.Emit (オペコード、型)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4479">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4480">現在評価スタックの一番上にあるアドレスが揮発性である可能性があるため、この位置の読み取り結果をキャッシュできないこと、またはこの位置への複数の格納を中止できないことを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4480">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4481">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4481">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4482">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4482">Format</span></span>|<span data-ttu-id="d99d8-4483">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4483">Assembly Format</span></span>|<span data-ttu-id="d99d8-4484">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4484">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4485">FE 13</span><span class="sxs-lookup"><span data-stu-id="d99d8-4485">FE 13</span></span>|<span data-ttu-id="d99d8-4486">揮発性です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4486">volatile.</span></span>|<span data-ttu-id="d99d8-4487">後続のポインターの参照が揮発性であることを示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4487">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="d99d8-4488">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4488">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4489">アドレスは、スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4489">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4490">`volatile`。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4490">`volatile`.</span></span> <span data-ttu-id="d99d8-4491">アドレスが揮発性のアドレスを指定します (つまり、参照できる外部で実行の現在のスレッドに) と、結果の読み取り位置をキャッシュすることはできませんまたはその場所に複数の店舗を抑制することはできません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4491">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="d99d8-4492">あるアクセス`volatile`単一のアクセスを示すだけに影響を同じ場所にその他のアクセスを個別にマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4492">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="d99d8-4493">揮発性の場所へのアクセスをアトミックに実行する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4493">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="d99d8-4494"><xref:System.Reflection.Emit.OpCodes.Unaligned>と`volatile`プレフィックスは、いずれかの順序で組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4494">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="d99d8-4495">直前に入れなければなりませんが、 `ldind`、 `stind`、 `ldfld`、 `stfld`、 `ldobj`、 `stobj`、 `initblk`、または`cpblk`命令します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4495">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="d99d8-4496">のみ、`volatile`のプレフィックスは許可されて、<xref:System.Reflection.Emit.OpCodes.Ldsfld>と<xref:System.Reflection.Emit.OpCodes.Stsfld>指示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4496">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="d99d8-4497">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`volatile`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4497">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4498">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4498">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d99d8-4499">評価スタックの一番上にある 2 つの値のビットごとの XOR を計算し、結果を評価スタックにプッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d99d8-4499">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d99d8-4500">次の表に、命令の 16 進数および簡単なリファレンス概要と共に、Microsoft Intermediate Language (MSIL) のアセンブリの形式を示します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4500">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="d99d8-4501">形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4501">Format</span></span>|<span data-ttu-id="d99d8-4502">アセンブリの形式</span><span class="sxs-lookup"><span data-stu-id="d99d8-4502">Assembly Format</span></span>|<span data-ttu-id="d99d8-4503">説明</span><span class="sxs-lookup"><span data-stu-id="d99d8-4503">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="d99d8-4504">61</span><span class="sxs-lookup"><span data-stu-id="d99d8-4504">61</span></span>|<span data-ttu-id="d99d8-4505">xor</span><span class="sxs-lookup"><span data-stu-id="d99d8-4505">xor</span></span>|<span data-ttu-id="d99d8-4506">2 つの整数値のビットごとの XOR を計算し、整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4506">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="d99d8-4507">履歴の移行動作では、順番には。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4507">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="d99d8-4508">`value1` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4508">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="d99d8-4509">`value2` スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4509">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="d99d8-4510">`value2` および`value1`スタックと、ビット単位からポップされます。 XOR を計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4510">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="d99d8-4511">ビットごとの XOR`value2`と`value1`スタックにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4511">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4512">`xor`命令は、最上位の 2 つのビットごとの XOR、スタックに値をスタックに、結果を残しますを計算します。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4512">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="d99d8-4513">`Xor` 整数固有操作です。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4513">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="d99d8-4514">次<xref:System.Reflection.Emit.ILGenerator.Emit%2A>メソッドのオーバー ロードが使用できる、`xor`オペコード。</span><span class="sxs-lookup"><span data-stu-id="d99d8-4514">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="d99d8-4515">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="d99d8-4515">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>