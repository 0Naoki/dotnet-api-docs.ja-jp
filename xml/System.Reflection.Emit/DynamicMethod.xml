<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71e905a95bc7051f218f8ee2fb82ff422b40b7d3" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68437197" /></Metadata><TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e4399-101">コンパイル、実行、および破棄できる動的メソッドを定義し、表します。</span><span class="sxs-lookup"><span data-stu-id="e4399-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span></span> <span data-ttu-id="e4399-102">破棄されたメソッドは、ガベージ コレクションの対象となります。</span><span class="sxs-lookup"><span data-stu-id="e4399-102">Discarded methods are available for garbage collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-103"><xref:System.Reflection.Emit.DynamicMethod>クラスを使用して、メソッドを格納する動的アセンブリおよび動的な型を生成せずに、実行時にメソッドを生成して実行できます。</span><span class="sxs-lookup"><span data-stu-id="e4399-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="e4399-104">ジャストインタイム (JIT) コンパイラによって作成された実行可能コードは、 <xref:System.Reflection.Emit.DynamicMethod>オブジェクトが再利用されるときに解放されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="e4399-105">動的メソッドは、少量のコードを生成して実行するための最も効率的な方法です。</span><span class="sxs-lookup"><span data-stu-id="e4399-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="e4399-106">動的メソッドは匿名でホストすることも、モジュールまたは型に論理的に関連付けることもできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="e4399-107">動的メソッドが匿名でホストされている場合は、システム指定のアセンブリに配置されるため、他のコードから分離されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="e4399-108">既定では、パブリックでないデータにはアクセスできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="e4399-109">匿名でホストさ<xref:System.Security.Permissions.ReflectionPermission>れる動的メソッドは、 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグで JIT コンパイラの参照範囲チェックを省略できるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="e4399-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-110">パブリックでないメンバーが動的メソッドによってアクセスされるアセンブリの信頼レベルは、動的メソッドを出力した呼び出し履歴の信頼レベルと同じであるか、そのサブセットである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="e4399-111">匿名でホストされる動的メソッドの詳細に[ついては、「チュートリアル:部分信頼シナリオ](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)でのコードの出力。</span><span class="sxs-lookup"><span data-stu-id="e4399-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="e4399-112">指定したモジュールに動的メソッドが関連付けられている場合、動的メソッドはそのモジュールに対して実質的にグローバルになります。</span><span class="sxs-lookup"><span data-stu-id="e4399-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="e4399-113">モジュール内のすべての型、および型の`internal`すべて`Friend`の (Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="e4399-114">モジュールを作成したかどうかに関係なく、動的メソッドを任意のモジュールに関連付けることが<xref:System.Security.Permissions.ReflectionPermission>できます<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> 。これは、コードを含む呼び出し履歴がフラグに対する要求を満たすことができるようにするためです。</span><span class="sxs-lookup"><span data-stu-id="e4399-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="e4399-115"><xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグが grant に含まれている場合、動的メソッドは、JIT コンパイラの参照範囲チェックをスキップし、モジュールまたは任意のアセンブリ内の他のモジュールで宣言されているすべての型のプライベートデータにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e4399-116">動的メソッドが関連付けられているモジュールを指定する場合、そのモジュールは、匿名ホストに使用されるシステム指定のアセンブリに含まれていない必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="e4399-117">指定した型に動的メソッドが関連付けられている場合、アクセスレベルに関係なく、型のすべてのメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="e4399-118">また、JIT 参照範囲チェックをスキップすることもできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="e4399-119">これにより、動的メソッドは、同じモジュールまたは任意のアセンブリ内の他のモジュールで宣言されている他の型のプライベートデータにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="e4399-120">動的メソッドは任意の型に関連付けることができますが、と<xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess>の<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>両方のフラグを使用してコードを許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="e4399-121">次の表は、匿名でホストされる動的メソッドにアクセスできる型およびメンバーを示しています。これは、 <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>フラグが付与されているかどうかによって異なりますが、JIT 参照範囲チェックの有無は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="e4399-122"><xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> を使用しない場合</span><span class="sxs-lookup"><span data-stu-id="e4399-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="e4399-123"><xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> を使用する場合</span><span class="sxs-lookup"><span data-stu-id="e4399-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="e4399-124">JIT 参照範囲チェックをスキップせず</span><span class="sxs-lookup"><span data-stu-id="e4399-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="e4399-125">任意のアセンブリのパブリック型のパブリックメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="e4399-126">任意のアセンブリのパブリック型のパブリックメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="e4399-127">制限付きで JIT 参照範囲チェックをスキップする</span><span class="sxs-lookup"><span data-stu-id="e4399-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="e4399-128">任意のアセンブリのパブリック型のパブリックメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="e4399-129">すべての型のすべてのメンバー。信頼レベルが動的メソッドを出力したアセンブリの信頼レベル以下であるアセンブリ内のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="e4399-130">より前<xref:System.Security.Permissions.ReflectionPermission>では、 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグを使用して必要なコードを出力していました。 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="e4399-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-131">このアクセス許可は、既定では、FullTrust および LocalIntranet という名前のアクセス許可セットに含まれていますが、インターネットアクセス許可セットには含まれていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="e4399-132">このため、以前のバージョンの[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]では、ライブラリに<xref:System.Security.SecurityCriticalAttribute> <xref:System.Security.PermissionSet.Assert%2A>属性があり、の<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>を実行する場合にのみ、インターネットアクセス許可でライブラリを使用できます。</span><span class="sxs-lookup"><span data-stu-id="e4399-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="e4399-133">このようなライブラリでは、コーディング エラーがあるとセキュリティ ホールが発生するおそれがあるため、セキュリティを慎重にレビューする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="e4399-134">コードの生成は本質的に特権を必要とする操作ではないため、[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] はセキュリティ確認要求を発行せずに部分信頼シナリオでコードを出力できます。</span><span class="sxs-lookup"><span data-stu-id="e4399-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="e4399-135">これは、生成されたコードには、コードを出力したアセンブリと同等以下のアクセス許可しかないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="e4399-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="e4399-136">これにより、コードを出力するライブラリは透過的セキュリティになるため、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit> を要求する必要がなくなります。そのため、安全なライブラリを簡単に作成できるようになります。</span><span class="sxs-lookup"><span data-stu-id="e4399-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="e4399-137">この機能を使用するに[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]は、アプリケーションで以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="e4399-138">次の表は、モジュールに関連付けられている動的メソッドにアクセスできる型およびメンバー、またはモジュール内の型を示しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="e4399-139">モジュールに関連付けられています</span><span class="sxs-lookup"><span data-stu-id="e4399-139">Associated with module</span></span>|<span data-ttu-id="e4399-140">関連付けられている型</span><span class="sxs-lookup"><span data-stu-id="e4399-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="e4399-141">JIT 参照範囲チェックをスキップせず</span><span class="sxs-lookup"><span data-stu-id="e4399-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="e4399-142">モジュール内のパブリック型、内部型、およびプライベート型のパブリックメンバーと内部メンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="e4399-143">任意のアセンブリのパブリック型のパブリックメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="e4399-144">関連付けられた型のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-144">All members of the associated type.</span></span> <span data-ttu-id="e4399-145">モジュール内の他のすべての型のパブリックメンバーと内部メンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="e4399-146">任意のアセンブリのパブリック型のパブリックメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="e4399-147">JIT 参照範囲チェックのスキップ</span><span class="sxs-lookup"><span data-stu-id="e4399-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="e4399-148">任意のアセンブリのすべての型のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="e4399-149">任意のアセンブリのすべての型のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e4399-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="e4399-150">モジュールに関連付けられている動的メソッドには、そのモジュールのアクセス許可があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="e4399-151">型に関連付けられている動的メソッドには、その型を含むモジュールのアクセス許可があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="e4399-152">動的メソッドとそのパラメーターに名前を付ける必要はありませんが、デバッグに役立つ名前を指定できます。</span><span class="sxs-lookup"><span data-stu-id="e4399-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="e4399-153">カスタム属性は、動的メソッドまたはそのパラメーターではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="e4399-154">動的メソッドはメソッド`static` (`Shared` Visual Basic 内のメソッド) ですが、で導入された[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]デリゲートバインディングの緩やかな規則では、動的メソッドをオブジェクトにバインドできます。これにより、次の場合にインスタンスメソッドのように動作するようになります。そのデリゲートインスタンスを使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="e4399-155">これを示す例として、 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>メソッドのオーバーロードがあります。</span><span class="sxs-lookup"><span data-stu-id="e4399-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-156">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]では、動的メソッドは、シンボル情報、つまりローカル変数名と行番号マッピングをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="e4399-157">この制限は、将来のバージョンでは削除される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="e4399-158">開発時に<xref:System.Reflection.Emit.AssemblyBuilder>を使用して、生成された Microsoft 中間言語 (MSIL) のデバッグを簡略化した後、最終的な配置<xref:System.Reflection.Emit.ILGenerator>中に動的メソッドに切り替えることができます。これは、呼び出しが両方の場合に同じであるためです。</span><span class="sxs-lookup"><span data-stu-id="e4399-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="e4399-159">検証</span><span class="sxs-lookup"><span data-stu-id="e4399-159">Verification</span></span>  
 <span data-ttu-id="e4399-160">次の一覧は、動的メソッドに検証不可能なコードを含めることができる条件をまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="e4399-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="e4399-161">(たとえば、 <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A>プロパティがに`false`設定されている場合、動的メソッドは検証できません)。</span><span class="sxs-lookup"><span data-stu-id="e4399-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="e4399-162">セキュリティクリティカルなアセンブリに関連付けられている動的メソッドは、セキュリティクリティカルでもあるため、検証をスキップできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="e4399-163">たとえば、デスクトップアプリケーションとして実行されるセキュリティ属性を持たないアセンブリは、ランタイムによってセキュリティクリティカルとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="e4399-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="e4399-164">動的メソッドをアセンブリに関連付ける場合、動的メソッドには検証不可能なコードを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="e4399-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="e4399-165">検証不可能なコードを含む動的メソッドが、レベル1の透過性を持つアセンブリに関連付けられている場合、ジャストインタイム (JIT) コンパイラによってセキュリティ要求が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="e4399-166">動的メソッドが完全に信頼されたコードによって実行される場合にのみ、要求は成功します。</span><span class="sxs-lookup"><span data-stu-id="e4399-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="e4399-167">「[透過的セキュリティコード、レベル1」を](~/docs/framework/misc/security-transparent-code-level-1.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="e4399-168">検証不可能なコードを含む動的メソッドが、レベル2の透過性 (mscorlib.dll など) を持つアセンブリに関連付けられている場合、セキュリティ要求を行うのではなく、(JIT コンパイラによって挿入された) 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e4399-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="e4399-169">「[透過的セキュリティコード、レベル2」を](~/docs/framework/misc/security-transparent-code-level-2.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="e4399-170">検証不可能なコードを含む匿名でホストされる動的メソッドは、常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="e4399-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="e4399-171">完全に信頼されたコードによって作成および実行された場合でも、検証をスキップすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="e4399-172">検証不可能なコードに対してスローされる例外は、動的メソッドの呼び出し方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="e4399-173">メソッドから返されたデリゲートを使用して動的メソッドを呼び出すと、がスローされます。<xref:System.Security.VerificationException> <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A></span><span class="sxs-lookup"><span data-stu-id="e4399-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="e4399-174">メソッドを使用<xref:System.Security.VerificationException>して動的メソッドを呼び出すと、が内部でスローされます。<xref:System.Reflection.TargetInvocationException> <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A></span><span class="sxs-lookup"><span data-stu-id="e4399-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-175">次のコード例では、2つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="e4399-176">この例では、最初のパラメーターをコンソールに出力する単純な関数本体を出力します。この例では、メソッドの戻り値として2番目のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="e4399-177">この例では、デリゲートを作成してメソッドを完了し、異なるパラメーターを使用してデリゲートを呼び出し、 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>最後にメソッドを使用して動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e4399-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-178">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-178">How to: Define and Execute Dynamic Methods</span></span></related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-179">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-179">Security Issues in Reflection Emit</span></span></related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="e4399-180">チュートリアル: 部分信頼シナリオにおけるコード出力</span><span class="sxs-lookup"><span data-stu-id="e4399-180">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4399-181">動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-181">Creates a dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-182">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-182">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-183">これは、長さ 0 の文字列にできますが、 <see langword="null" />にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-183">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-184">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-184">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-185">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-185">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <summary><span data-ttu-id="e4399-186">メソッド名、戻り値の型、およびパラメーターの型を指定して、匿名でホストされる動的メソッドを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e4399-186">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-187">このコンストラクターによって作成される動的メソッドは、既存の型またはモジュールではなく、匿名アセンブリに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="e4399-187">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="e4399-188">匿名アセンブリは、動的メソッドのサンドボックス環境を提供するためだけに存在します。つまり、他のコードから分離します。</span><span class="sxs-lookup"><span data-stu-id="e4399-188">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="e4399-189">この環境では、部分信頼コードによって動的メソッドの生成と実行を安全に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="e4399-189">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="e4399-190">このコンストラクターは、動的メソッドの MSIL (Microsoft 中間言語) に対して just-in-time (JIT) 参照範囲チェックが適用されることを指定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-190">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="e4399-191">つまり、動的メソッドのコードは、パブリッククラスのパブリックメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-191">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="e4399-192">メソッドが`private`、 `protected`、または (`Friend` Visual Basic) である型または`internal`メンバーにアクセスしようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e4399-192">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="e4399-193">JIT 参照範囲チェックをスキップする機能が制限されている動的メソッドを<xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29>作成するには、コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-193">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="e4399-194">匿名でホストされる動的メソッドを構築する場合は、出力アセンブリの呼び出し履歴が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e4399-194">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="e4399-195">メソッドが呼び出されると、実際の呼び出し元のアクセス許可ではなく、出力アセンブリのアクセス許可が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-195">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="e4399-196">したがって、動的メソッドは、より高い信頼レベルを持つアセンブリに渡されて実行される場合でも、それを生成したアセンブリより高いレベルの特権では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-196">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="e4399-197">このコンストラクターは、メソッド属性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、、および呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>を指定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-197">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-198">このコンストラクターは、 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以降で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e4399-198">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-199"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-199">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-200"><paramref name="name" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-200"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-201"><paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-201"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-202">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-202">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-203">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-203">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="e4399-204">チュートリアル: 部分信頼シナリオにおけるコード出力</span><span class="sxs-lookup"><span data-stu-id="e4399-204">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-205">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-205">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-206">これは、長さ 0 の文字列にできますが、 <see langword="null" />にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-206">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-207">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-207">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-208">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-208">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="restrictedSkipVisibility"><span data-ttu-id="e4399-209">動的メソッドの MSIL によりアクセスされる型およびメンバーに対する JIT 参照範囲チェックをスキップする場合は <see langword="true" /> (ただし、それらの型およびメンバーが含まれるアセンブリの信頼レベルは、動的メソッドを出力する呼び出しスタックの信頼レベル以下でなければならないという制限あり)。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-209"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e4399-210">メソッド名、戻り値の型、パラメーターの型を指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、匿名ホスト対象の動的メソッドを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e4399-210">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-211">このコンストラクターによって作成される動的メソッドは、既存の型またはモジュールではなく、匿名アセンブリに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="e4399-211">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="e4399-212">匿名アセンブリは、動的メソッドのサンドボックス環境を提供するためだけに存在します。つまり、他のコードから分離します。</span><span class="sxs-lookup"><span data-stu-id="e4399-212">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="e4399-213">この環境では、部分信頼コードによって動的メソッドの生成と実行を安全に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="e4399-213">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="e4399-214">匿名`private`でホストされる動的メソッドには、、 `protected`、または (`Friend` Visual Basic) である`internal`型またはメンバーへの自動アクセスはありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-214">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="e4399-215">これは、既存の型またはモジュールに関連付けられている動的メソッドとは異なります。これは、関連付けられているスコープ内の隠しメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-215">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="e4399-216">動的`true`メソッド`restrictedSkipVisibility` `private`が、 、また`internal`はの型またはメンバーにアクセスする必要がある場合は、にを指定します。 `protected`</span><span class="sxs-lookup"><span data-stu-id="e4399-216">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="e4399-217">これにより、動的メソッドでは、これらのメンバーへのアクセスが制限されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-217">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="e4399-218">つまり、次の条件が満たされている場合にのみ、メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-218">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="e4399-219">ターゲットメンバーは、動的メソッドを出力する呼び出し履歴と同じかそれより下位の信頼レベルを持つアセンブリに属しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-219">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="e4399-220">動的メソッドを出力するコールスタックは、 <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグを使用して付与されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-220">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-221">完全信頼でコードを実行する場合は、常に true になります。</span><span class="sxs-lookup"><span data-stu-id="e4399-221">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="e4399-222">部分的に信頼されているコードの場合は、ホストが明示的にアクセス許可を付与している場合にのみ true になります。</span><span class="sxs-lookup"><span data-stu-id="e4399-222">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="e4399-223">アクセス許可が付与されていない場合、 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>が呼び出されたとき、または動的メソッドが呼び出されたときにセキュリティ例外がスローされます。このコンストラクターが呼び出されたときにはスローされません。</span><span class="sxs-lookup"><span data-stu-id="e4399-223">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="e4399-224">動的メソッドを出力するために特別なアクセス許可は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-224">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="e4399-225">たとえば、をに`restrictedSkipVisibility` `true`設定して作成された動的メソッドは、呼び出し履歴に制限されたメンバーアクセスが許可されている場合、呼び出し履歴上の任意のアセンブリのプライベートメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-225">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="e4399-226">動的メソッドが呼び出し履歴に部分的に信頼されたコードで作成される場合、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]アセンブリ内の型のプライベートメンバーにアクセスすることはできません。このようなアセンブリは完全に信頼されているためです。</span><span class="sxs-lookup"><span data-stu-id="e4399-226">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="e4399-227">が`restrictedSkipVisibility` の`false`場合は、JIT 参照範囲チェックが適用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-227">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="e4399-228">動的メソッドのコードはパブリッククラスのパブリックメソッドにアクセスでき、例外は`private`、 `protected`、、また`internal`はの型またはメンバーにアクセスしようとした場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e4399-228">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="e4399-229">匿名でホストされる動的メソッドを構築する場合は、出力アセンブリの呼び出し履歴が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e4399-229">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="e4399-230">メソッドが呼び出されると、実際の呼び出し元のアクセス許可ではなく、出力コールスタックのアクセス許可が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-230">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="e4399-231">したがって、動的メソッドは、より高い信頼レベルを持つアセンブリに渡されて実行される場合でも、それを生成したアセンブリより高いレベルの特権では実行できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-231">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="e4399-232">このコンストラクターは、メソッド属性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、、および呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>を指定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-232">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-233">このコンストラクターは、 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以降で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e4399-233">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-234"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-234">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-235"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-235"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-236"><paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-236"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-237">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-237">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-238">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-238">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="e4399-239">チュートリアル: 部分信頼シナリオにおけるコード出力</span><span class="sxs-lookup"><span data-stu-id="e4399-239">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-240">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-240">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-241">これは、長さ 0 の文字列にできますが、 <see langword="null" />にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-241">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-242">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-242">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-243">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-243">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="e4399-244">動的メソッドを論理的に関連付けるモジュールを表す <see cref="T:System.Reflection.Module" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-244">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <summary><span data-ttu-id="e4399-245">メソッド名、戻り値の型、パラメーターの型、およびモジュールを指定して、モジュールに対してグローバルな動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-245">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-246">このコンストラクターは、メソッド<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>属性<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>と呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>を指定し、just-in-time (JIT) 参照範囲チェックをスキップしません。</span><span class="sxs-lookup"><span data-stu-id="e4399-246">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="e4399-247">このコンストラクターを使用して作成された動的メソッド`internal`は`Friend` 、モジュール`m`に含まれるすべての型のパブリックおよび (Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-247">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-248">旧バージョンとの互換性を維持<xref:System.Security.Permissions.SecurityPermission>するため<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>に、このコンストラクターは、次の条件が両方とも当てはまる場合はフラグを要求します<xref:System.Security.Permissions.ReflectionPermission> 。は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>呼び出し元のモジュール以外のモジュール、はフラグを使用したの要求です。 `m`が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="e4399-248">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="e4399-249">の<xref:System.Security.Permissions.SecurityPermission>要求が成功した場合、操作は許可されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-249">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-250">以降では[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーはフラグを<xref:System.Security.Permissions.ReflectionPermission>使用する<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>必要がなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e4399-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-251">(「[リフレクション出力のセキュリティの問題」を](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)参照してください)。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-251">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-252">次のコード例では、2つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-252">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="e4399-253">この例では、最初のパラメーターをコンソールに出力する単純な関数本体を出力します。この例では、メソッドの戻り値として2番目のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-253">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="e4399-254">この例では、デリゲートを作成してメソッドを完了し、異なるパラメーターを使用してデリゲートを呼び出し、 <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>最後にメソッドを使用して動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e4399-254">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-255"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-255">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="e4399-256">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-256">-or-</span></span> 
 <span data-ttu-id="e4399-257"><paramref name="m" /> が、動的メソッドを匿名でホストするモジュールです。</span><span class="sxs-lookup"><span data-stu-id="e4399-257"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-258"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-258"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e4399-259">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-259">-or-</span></span> 
 <span data-ttu-id="e4399-260"><paramref name="m" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-260"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-261"><paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-261"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e4399-262">動的メソッドを、呼び出し元モジュール以外のモジュールに関連付ける場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-262">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="e4399-263"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-263">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-264">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-264">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-265">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-265">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-266">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-266">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-267">これは、長さ 0 の文字列にできますが、 <see langword="null" />にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-267">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-268">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-268">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-269">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="e4399-269">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="e4399-270">動的メソッドを論理的に関連付ける <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-270">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="e4399-271">動的メソッドはこの型のすべてのメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-271">The dynamic method has access to all members of the type.</span></span></param>
        <summary><span data-ttu-id="e4399-272">メソッド名、戻り値の型、パラメーターの型、および動的メソッドを論理的に関連付ける型を指定して、動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-272">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-273">このコンストラクターを使用して作成された動的メソッドは、型`owner`のすべてのメンバー、 `internal`および`Friend`を含む`owner`モジュール内の他のすべての型のパブリックおよび (Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-273">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="e4399-274">このコンストラクターは、メソッド<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>属性<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>と呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>を指定し、just-in-time (JIT) 参照範囲チェックをスキップしません。</span><span class="sxs-lookup"><span data-stu-id="e4399-274">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-275">旧バージョンとの互換性を維持<xref:System.Security.Permissions.SecurityPermission>するため<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>に、このコンストラクターは、次の条件`owner`が両方とも当てはまる場合はフラグを必要と<xref:System.Security.Permissions.ReflectionPermission>します。は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 、呼び出し元のモジュール以外のモジュールにあり、フラグが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="e4399-275">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="e4399-276">の<xref:System.Security.Permissions.SecurityPermission>要求が成功した場合、操作は許可されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-276">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-277">以降では[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーはフラグを<xref:System.Security.Permissions.ReflectionPermission>使用する<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>必要がなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e4399-277">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-278">(「[リフレクション出力のセキュリティの問題」を](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)参照してください)。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-278">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-279">次のコード例では<xref:System.Reflection.Emit.DynamicMethod> 、型に論理的に関連付けられているを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-279">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="e4399-280">この関連付けにより、その型のプライベートメンバーにアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="e4399-280">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="e4399-281">このコード例では、プライベート`Example`フィールドを持つという名前のクラス`DerivedFromExample`を定義しています。このクラスは、最初の<xref:System.Int32>クラスから派生すると`Example`いう名前のクラスで、を返し、型`UseLikeStatic` <xref:System.Int32>のパラメーターを持つという名前のデリゲート型を指定します。、およびはを返し`UseLikeInstance` <xref:System.Int32> 、型<xref:System.Int32>のパラメーターを1つ持つという名前のデリゲート型。</span><span class="sxs-lookup"><span data-stu-id="e4399-281">The code example defines a class named `Example` with a private field, a class named `DerivedFromExample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="e4399-282">このコード例では、 <xref:System.Reflection.Emit.DynamicMethod>のインスタンスのプライベートフィールドを変更し、 `Example`前の値を返すを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-282">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-283">一般に、クラスの内部フィールドを変更することは、オブジェクト指向のコーディング手法として適切ではありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-283">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="e4399-284">このコード例では、の`Example`インスタンスを作成し、2つのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-284">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="e4399-285">1つ目の型`UseLikeStatic`はで、動的メソッドと同じパラメーターを持ちます。</span><span class="sxs-lookup"><span data-stu-id="e4399-285">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="e4399-286">2番目のは`UseLikeInstance`型で、最初のパラメーター (型`Example`) が不足しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-286">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="e4399-287">このデリゲートは、 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>メソッドオーバーロードを使用して作成されます。このメソッドオーバーロードの2番目のパラメーターは、の`Example`インスタンスです。この場合、新しく作成されたデリゲートにバインドされたインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-287">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="e4399-288">そのデリゲートが呼び出されるたびに、動的メソッドはの`Example`バインドされたインスタンスに対して動作します。</span><span class="sxs-lookup"><span data-stu-id="e4399-288">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-289">これは、 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]で導入されたデリゲートバインディングの緩やかな規則の例であり、 <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>メソッドの新しいオーバーロードと共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-289">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4399-290">詳細については、<xref:System.Delegate> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-290">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="e4399-291">デリゲートが呼び出され、 `UseLikeInstance`デリゲートにバインドされ`Example`ているのインスタンスが渡されます。 `UseLikeStatic`</span><span class="sxs-lookup"><span data-stu-id="e4399-291">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="e4399-292">次に、 `Example`デリゲートが呼び出され、両方のデリゲートがの同じインスタンスで動作するよう`UseLikeInstance`になります。</span><span class="sxs-lookup"><span data-stu-id="e4399-292">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="e4399-293">内部フィールドの値の変更は、各呼び出しの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-293">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="e4399-294">最後に、 `UseLikeInstance`デリゲートがの`DerivedFromExample`インスタンスにバインドされ、デリゲート呼び出しが繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-294">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromExample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-295"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-295">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="e4399-296">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-296">-or-</span></span> 
 <span data-ttu-id="e4399-297"><paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、ジェネリック型またはジェネリック メソッドの型パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="e4399-297"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-298"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-298"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e4399-299">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-299">-or-</span></span> 
 <span data-ttu-id="e4399-300"><paramref name="owner" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-300"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-301"><paramref name="returnType" /> が <see langword="null" /> であるか、<see cref="P:System.Type.IsByRef" /> で <see langword="true" /> が返される型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-301"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e4399-302">動的メソッドを、呼び出し元モジュール以外のモジュール内の型に関連付ける場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-302">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="e4399-303"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-304">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-304">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-305">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-305">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-306">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-306">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-307">これは、長さ 0 の文字列にできますが、 <see langword="null" />にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-307">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-308">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-308">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-309">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-309">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="e4399-310">動的メソッドを論理的に関連付けるモジュールを表す <see cref="T:System.Reflection.Module" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-310">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="e4399-311">動的メソッドの MSIL によってアクセスされる型およびメンバーに対して JIT の参照範囲チェックをスキップする場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-311"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="e4399-312">メソッド名、戻り値の型、パラメーターの型、モジュールを指定し、さらに動的メソッドの MSIL (Microsoft Intermediate Language) によってアクセスされる型およびメンバーに対して JIT (Just-In-Time) の参照範囲チェックをスキップする必要があるかどうかを指定して、モジュールに対してグローバルな動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-312">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-313">このコンストラクター <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>は、メソッド<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>属性、、および呼び出し<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>規約を指定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-313">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e4399-314">このコンストラクターで作成される動的メソッドは、含まれ`internal`て`Friend`いるモジュール`m`内のすべての型のパブリックおよび (Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-314">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="e4399-315">JIT コンパイラの参照範囲チェックをスキップすると、動的メソッドは、他のすべての型のプライベートメンバーとプロテクトメンバーにもアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-315">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="e4399-316">これは、たとえば、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="e4399-316">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-317">旧バージョンとの互換性を維持<xref:System.Security.Permissions.SecurityPermission>するため<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>に、このコンストラクターは、次の条件が両方とも当てはまる場合はフラグを要求します<xref:System.Security.Permissions.ReflectionPermission> 。は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>呼び出し元のモジュール以外のモジュール、はフラグを使用したの要求です。 `m`が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="e4399-317">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="e4399-318">の<xref:System.Security.Permissions.SecurityPermission>要求が成功した場合、操作は許可されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-318">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-319">以降では[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーはフラグを<xref:System.Security.Permissions.ReflectionPermission>使用する<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>必要がなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e4399-319">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-320">(「[リフレクション出力のセキュリティの問題」を](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)参照してください)。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-320">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-321"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-321">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="e4399-322">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-322">-or-</span></span> 
 <span data-ttu-id="e4399-323"><paramref name="m" /> が、動的メソッドを匿名でホストするモジュールです。</span><span class="sxs-lookup"><span data-stu-id="e4399-323"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-324"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-324"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e4399-325">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-325">-or-</span></span> 
 <span data-ttu-id="e4399-326"><paramref name="m" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-326"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-327"><paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-327"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e4399-328">動的メソッドを、呼び出し元モジュール以外のモジュールに関連付ける場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-328">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="e4399-329"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-329">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-330">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-330">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-331">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-331">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-332">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-332">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-333">これは、長さ 0 の文字列にできますが、 <see langword="null" />にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-333">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-334">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-334">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-335">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="e4399-335">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="e4399-336">動的メソッドを論理的に関連付ける <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-336">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="e4399-337">動的メソッドはこの型のすべてのメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-337">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="e4399-338">動的メソッドの MSIL によってアクセスされる型およびメンバーに対して JIT の参照範囲チェックをスキップする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-338"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e4399-339">メソッド名、戻り値の型、パラメーターの型、動的メソッドを論理的に関連付ける型を指定し、さらに動的メソッドの MSIL (Microsoft Intermediate Language) によってアクセスされる型およびメンバーに対して JIT (Just-In-Time) の参照範囲チェックをスキップする必要があるかどうかを指定して、動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-339">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-340">このコンストラクターを使用して作成された動的メソッドは、型`owner`のすべてのメンバー、 `internal`および`Friend`を含む`owner`モジュール内の他のすべての型のパブリックおよび (Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-340">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="e4399-341">JIT コンパイラの参照範囲チェックをスキップすると、動的メソッドは、他のすべての型のプライベートメンバーとプロテクトメンバーにもアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-341">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="e4399-342">これは、たとえば、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="e4399-342">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="e4399-343">このコンストラクター <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>は、メソッド<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>属性、、および呼び出し<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>規約を指定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-343">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-344">旧バージョンとの互換性を維持<xref:System.Security.Permissions.SecurityPermission>するため<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>に、このコンストラクターは、次の条件`owner`が両方とも当てはまる場合はフラグを必要と<xref:System.Security.Permissions.ReflectionPermission>します。は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 、呼び出し元のモジュール以外のモジュールにあり、フラグが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="e4399-344">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="e4399-345">の<xref:System.Security.Permissions.SecurityPermission>要求が成功した場合、操作は許可されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-345">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-346">以降では[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーはフラグを<xref:System.Security.Permissions.ReflectionPermission>使用する<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>必要がなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e4399-346">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-347">(「[リフレクション出力のセキュリティの問題」を](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)参照してください)。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-347">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-348"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-348">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="e4399-349">または</span><span class="sxs-lookup"><span data-stu-id="e4399-349">-or-</span></span> 
 <span data-ttu-id="e4399-350"><paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、ジェネリック型またはジェネリック メソッドの型パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="e4399-350"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-351"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-351"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e4399-352">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-352">-or-</span></span> 
 <span data-ttu-id="e4399-353"><paramref name="owner" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-353"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-354"><paramref name="returnType" /> が <see langword="null" /> であるか、<see cref="P:System.Type.IsByRef" /> で <see langword="true" /> が返される型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-354"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e4399-355">動的メソッドを、呼び出し元モジュール以外のモジュール内の型に関連付ける場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-355">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="e4399-356"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-356">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-357">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-357">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-358">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-358">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-359">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-359">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-360">これは、長さ 0 の文字列にすることはできますが、<see langword="null" /> にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-360">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="e4399-361">動的メソッドの属性を指定する <see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e4399-361">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="e4399-362">許可される組み合わせは、<see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> の組み合わせだけです。</span><span class="sxs-lookup"><span data-stu-id="e4399-362">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="e4399-363">動的メソッドの呼び出し規約。</span><span class="sxs-lookup"><span data-stu-id="e4399-363">The calling convention for the dynamic method.</span></span> <span data-ttu-id="e4399-364"><see cref="F:System.Reflection.CallingConventions.Standard" />にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-364">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-365">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="e4399-365">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-366">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-366">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="e4399-367">動的メソッドを論理的に関連付けるモジュールを表す <see cref="T:System.Reflection.Module" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-367">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="e4399-368">動的メソッドの MSIL によってアクセスされる型およびメンバーに対して JIT の参照範囲チェックをスキップする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-368"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e4399-369">メソッド名、属性、呼び出し規約、戻り値の型、パラメーターの型、モジュールを指定し、さらに動的メソッドの MSIL (Microsoft Intermediate Language) によってアクセスされる型およびメンバーに対して JIT (Just-In-Time) の参照範囲チェックをスキップする必要があるかどうかを指定して、モジュールに対してグローバルな動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-369">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-370">このコンストラクターを使用して作成された動的メソッド`internal`は`Friend` 、モジュール`m`に含まれるすべてのパブリック型と内部型のパブリックおよび (Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-370">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="e4399-371">JIT コンパイラの参照範囲チェックを省略すると、動的メソッドは、モジュールおよび他のすべてのアセンブリの他のすべての型のプライベートメンバーとプロテクトメンバーにもアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="e4399-371">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="e4399-372">これは、たとえば、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="e4399-372">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-373">旧バージョンとの互換性を維持<xref:System.Security.Permissions.SecurityPermission>するため<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>に、このコンストラクターは、次の条件が両方とも当てはまる場合はフラグを要求します<xref:System.Security.Permissions.ReflectionPermission> 。は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>呼び出し元のモジュール以外のモジュール、はフラグを使用したの要求です。 `m`が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="e4399-373">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="e4399-374">の<xref:System.Security.Permissions.SecurityPermission>要求が成功した場合、操作は許可されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-374">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-375">以降では[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーはフラグを<xref:System.Security.Permissions.ReflectionPermission>使用する<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>必要がなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e4399-375">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-376">(「[リフレクション出力のセキュリティの問題」を](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)参照してください)。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-376">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-377"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-377">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="e4399-378">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-378">-or-</span></span> 
 <span data-ttu-id="e4399-379"><paramref name="m" /> が、動的メソッドを匿名でホストするモジュールです。</span><span class="sxs-lookup"><span data-stu-id="e4399-379"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-380"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-380"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e4399-381">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-381">-or-</span></span> 
 <span data-ttu-id="e4399-382"><paramref name="m" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-382"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-383"><paramref name="attributes" /> が <see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外のフラグの組み合わせです。</span><span class="sxs-lookup"><span data-stu-id="e4399-383"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
<span data-ttu-id="e4399-384">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-384">-or-</span></span> 
 <span data-ttu-id="e4399-385"><paramref name="callingConvention" /> が <see cref="F:System.Reflection.CallingConventions.Standard" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-385"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
<span data-ttu-id="e4399-386">または</span><span class="sxs-lookup"><span data-stu-id="e4399-386">-or-</span></span> 
 <span data-ttu-id="e4399-387"><paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-387"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e4399-388">動的メソッドを、呼び出し元モジュール以外のモジュールに関連付ける場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-388">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="e4399-389"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-390">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-390">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-391">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-391">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e4399-392">動的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-392">The name of the dynamic method.</span></span> <span data-ttu-id="e4399-393">これは、長さ 0 の文字列にすることはできますが、<see langword="null" /> にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-393">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="e4399-394">動的メソッドの属性を指定する <see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e4399-394">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="e4399-395">許可される組み合わせは、<see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> の組み合わせだけです。</span><span class="sxs-lookup"><span data-stu-id="e4399-395">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="e4399-396">動的メソッドの呼び出し規約。</span><span class="sxs-lookup"><span data-stu-id="e4399-396">The calling convention for the dynamic method.</span></span> <span data-ttu-id="e4399-397"><see cref="F:System.Reflection.CallingConventions.Standard" />にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-397">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="e4399-398">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="e4399-398">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="e4399-399">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="e4399-399">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="e4399-400">動的メソッドを論理的に関連付ける <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-400">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="e4399-401">動的メソッドはこの型のすべてのメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-401">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="e4399-402">動的メソッドの MSIL によってアクセスされる型およびメンバーに対して JIT の参照範囲チェックをスキップする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-402"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e4399-403">メソッド名、属性、呼び出し規約、戻り値の型、パラメーターの型、動的メソッドを論理的に関連付ける型を指定し、さらに動的メソッドの MSIL (Microsoft Intermediate Language) によってアクセスされる型およびメンバーに対して JIT (Just-In-Time) の参照範囲チェックをスキップする必要があるかどうかを指定して、動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-403">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-404">動的メソッドは、型`owner`を含むモジュールに対してグローバルです。</span><span class="sxs-lookup"><span data-stu-id="e4399-404">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="e4399-405">この型`owner`のすべてのメンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-405">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="e4399-406">このコンストラクターを使用して作成された動的メソッドは、型`owner`のすべてのメンバーに`internal`アクセスできます。また、を含む`owner`モジュールに格納されているすべての型のパブリックおよび (`Friend` Visual Basic) メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-406">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="e4399-407">JIT コンパイラの参照範囲チェックをスキップすると、動的メソッドは、他のすべての型のプライベートメンバーとプロテクトメンバーにもアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="e4399-407">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="e4399-408">これは、たとえば、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="e4399-408">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-409">旧バージョンとの互換性を維持<xref:System.Security.Permissions.SecurityPermission>するため<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>に、このコンストラクターは、次の条件`owner`が両方とも当てはまる場合はフラグを必要と<xref:System.Security.Permissions.ReflectionPermission>します。は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 、呼び出し元のモジュール以外のモジュールにあり、フラグが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="e4399-409">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="e4399-410">の<xref:System.Security.Permissions.SecurityPermission>要求が成功した場合、操作は許可されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-410">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-411">以降では[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーはフラグを<xref:System.Security.Permissions.ReflectionPermission>使用する<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>必要がなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e4399-411">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e4399-412">(「[リフレクション出力のセキュリティの問題」を](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)参照してください)。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-412">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-413"><paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-413">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="e4399-414">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-414">-or-</span></span> 
 <span data-ttu-id="e4399-415"><paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、ジェネリック型またはジェネリック メソッドの型パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="e4399-415"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-416"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-416"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e4399-417">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-417">-or-</span></span> 
 <span data-ttu-id="e4399-418"><paramref name="owner" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-418"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-419"><paramref name="attributes" /> が <see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外のフラグの組み合わせです。</span><span class="sxs-lookup"><span data-stu-id="e4399-419"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
<span data-ttu-id="e4399-420">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-420">-or-</span></span> 
 <span data-ttu-id="e4399-421"><paramref name="callingConvention" /> が <see cref="F:System.Reflection.CallingConventions.Standard" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-421"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
<span data-ttu-id="e4399-422">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-422">-or-</span></span> 
 <span data-ttu-id="e4399-423"><paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span><span class="sxs-lookup"><span data-stu-id="e4399-423"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e4399-424">動的メソッドを、呼び出し元モジュール以外のモジュール内の型に関連付ける場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-424">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="e4399-425"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-425">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-426">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-426">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-427">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-427">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-428">動的メソッドの作成時に指定した属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-428">Gets the attributes specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="e4399-429">メソッドの属性を表す <see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e4399-429">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-430">現時点では、動的メソッドのメソッド属性は常<xref:System.Reflection.MethodAttributes.Public>に<xref:System.Reflection.MethodAttributes.Static>とです。</span><span class="sxs-lookup"><span data-stu-id="e4399-430">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-431">次のコード例では、動的メソッドのメソッド属性を表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-431">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="e4399-432">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-432">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-433">動的メソッドの作成時に指定した呼び出し規約を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-433">Gets the calling convention specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="e4399-434">メソッドの呼び出し規約を示す <see cref="T:System.Reflection.CallingConventions" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="e4399-434">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-435">現時点では、動的メソッドの呼び出し規約は常<xref:System.Reflection.CallingConventions.Standard>にです。</span><span class="sxs-lookup"><span data-stu-id="e4399-435">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-436">次のコード例では、動的メソッドの呼び出し規約を表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-436">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="e4399-437">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-437">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4399-438">動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-438">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="e4399-439">シグネチャが動的メソッドのシグネチャと一致するデリゲート型。</span><span class="sxs-lookup"><span data-stu-id="e4399-439">A delegate type whose signature matches that of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="e4399-440">動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-440">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
        <returns><span data-ttu-id="e4399-441">動的メソッドの実行に使用できる指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="e4399-441">A delegate of the specified type, which can be used to execute the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-442"><xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッドまたはメソッドを呼び出すと、動的メソッド<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>が完了します。</span><span class="sxs-lookup"><span data-stu-id="e4399-442">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="e4399-443">パラメーター定義の変更や Microsoft 中間言語 (MSIL) の出力など、動的メソッドをさらに変更しようとしても無視されます。例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e4399-443">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="e4399-444">独自の MSIL ジェネレーターがあるときに動的メソッドのメソッド本体を作成するには、 <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A>メソッドを呼び出して<xref:System.Reflection.Emit.DynamicILInfo>オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-444">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="e4399-445">独自の MSIL ジェネレーターがない場合は、メソッドを呼び出し<xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A>て、メソッド本体<xref:System.Reflection.Emit.ILGenerator>を生成するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-445">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-446">次のコード例では、2つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-446">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="e4399-447">この例では、最初のパラメーターをコンソールに出力する単純な関数本体を出力します。この例では、メソッドの戻り値として2番目のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-447">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="e4399-448">この例では、デリゲートを作成してメソッドを完了し、異なるパラメーターを使用してデリゲートを呼び出し、 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>最後にメソッドを使用して動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e4399-448">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4399-449">動的メソッドにメソッド本体がありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-449">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-450"><paramref name="delegateType" /> のパラメーターの数に誤りがあるか、パラメーターの型に誤りがあります。</span><span class="sxs-lookup"><span data-stu-id="e4399-450"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-451">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-451">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="e4399-452">1 つ目のパラメーターがない、シグネチャが動的メソッドのシグネチャと一致するデリゲート型。</span><span class="sxs-lookup"><span data-stu-id="e4399-452">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span></span></param>
        <param name="target"><span data-ttu-id="e4399-453">デリゲートのバインド先となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e4399-453">An object the delegate is bound to.</span></span> <span data-ttu-id="e4399-454">動的メソッドの 1 つ目のパラメーターと同じ型であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="e4399-454">Must be of the same type as the first parameter of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="e4399-455">デリゲート型とデリゲートのバインド先となるオブジェクトを指定して、動的メソッドを完了し、メソッドの実行に使用できるデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-455">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span></span></summary>
        <returns><span data-ttu-id="e4399-456">指定した対象オブジェクトで動的メソッドの実行に使用できる、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="e4399-456">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-457">このメソッドオーバーロードは、特定のオブジェクトにバインドされたデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-457">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="e4399-458">このようなデリゲートは、最初の引数に対して閉じられると言います。</span><span class="sxs-lookup"><span data-stu-id="e4399-458">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="e4399-459">メソッドは静的ですが、インスタンスメソッドであるかのように動作します。インスタンスが`target`です。</span><span class="sxs-lookup"><span data-stu-id="e4399-459">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="e4399-460">このメソッドのオーバーロード`target`は、動的メソッドの最初のパラメーターと同じ型であるか、その型 (派生クラスなど) に割り当て可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-460">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="e4399-461">の`delegateType`シグネチャには、最初のメソッドを除く動的メソッドのすべてのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="e4399-461">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="e4399-462">たとえば、動的メソッド<xref:System.String>にパラメーター <xref:System.Int32>、、 <xref:System.Byte>および`delegateType`が含まれている場合、には<xref:System.Int32>パラメーター <xref:System.Byte>とが含まれます。`target`の型<xref:System.String>はです。</span><span class="sxs-lookup"><span data-stu-id="e4399-462">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="e4399-463"><xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッドまたはメソッドを呼び出すと、動的メソッド<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>が完了します。</span><span class="sxs-lookup"><span data-stu-id="e4399-463">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="e4399-464">パラメーター定義の変更や Microsoft 中間言語 (MSIL) の出力など、動的メソッドをさらに変更しようとしても無視されます。例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e4399-464">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="e4399-465">独自の MSIL ジェネレーターがあるときに動的メソッドのメソッド本体を作成するには、 <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A>メソッドを呼び出して<xref:System.Reflection.Emit.DynamicILInfo>オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-465">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="e4399-466">独自の MSIL ジェネレーターがない場合は、メソッドを呼び出し<xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A>て、メソッド本体<xref:System.Reflection.Emit.ILGenerator>を生成するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-466">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-467">次のコード例では、を<xref:System.Reflection.Emit.DynamicMethod>型のインスタンスにバインドするデリゲートを作成します。これにより、メソッドが呼び出されるたびに同じインスタンスに対して動作するようになります。</span><span class="sxs-lookup"><span data-stu-id="e4399-467">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="e4399-468">このコード例では、プライベート`Example`フィールドを持つという名前のクラス`DerivedFromExample`を定義しています。このクラスは、最初の<xref:System.Int32>クラスから派生すると`Example`いう名前のクラスで、を返し、型`UseLikeStatic` <xref:System.Int32>のパラメーターを持つという名前のデリゲート型を指定します。、およびはを返し`UseLikeInstance` <xref:System.Int32> 、型<xref:System.Int32>のパラメーターを1つ持つという名前のデリゲート型。</span><span class="sxs-lookup"><span data-stu-id="e4399-468">The code example defines a class named `Example` with a private field, a class named `DerivedFromExample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="e4399-469">このコード例では、 <xref:System.Reflection.Emit.DynamicMethod>のインスタンスのプライベートフィールドを変更し、 `Example`前の値を返すを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-469">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-470">一般に、クラスの内部フィールドを変更することは、オブジェクト指向のコーディング手法として適切ではありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-470">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="e4399-471">このコード例では、の`Example`インスタンスを作成し、2つのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-471">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="e4399-472">1つ目の型`UseLikeStatic`はで、動的メソッドと同じパラメーターを持ちます。</span><span class="sxs-lookup"><span data-stu-id="e4399-472">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="e4399-473">2番目のは`UseLikeInstance`型で、最初のパラメーター (型`Example`) が不足しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-473">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="e4399-474">このデリゲートは、 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>メソッドオーバーロードを使用して作成されます。このメソッドオーバーロードの2番目のパラメーターは、の`Example`インスタンスです。この場合、新しく作成されたデリゲートにバインドされたインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-474">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="e4399-475">そのデリゲートが呼び出されるたびに、動的メソッドはの`Example`バインドされたインスタンスに対して動作します。</span><span class="sxs-lookup"><span data-stu-id="e4399-475">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-476">これは、 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]で導入されたデリゲートバインディングの緩やかな規則の例であり、 <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>メソッドの新しいオーバーロードと共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-476">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e4399-477">詳細については、<xref:System.Delegate> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-477">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="e4399-478">デリゲートが呼び出され、 `UseLikeInstance`デリゲートにバインドされ`Example`ているのインスタンスが渡されます。 `UseLikeStatic`</span><span class="sxs-lookup"><span data-stu-id="e4399-478">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="e4399-479">次に、 `Example`デリゲートが呼び出され、両方のデリゲートがの同じインスタンスで動作するよう`UseLikeInstance`になります。</span><span class="sxs-lookup"><span data-stu-id="e4399-479">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="e4399-480">内部フィールドの値の変更は、各呼び出しの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-480">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="e4399-481">最後に、 `UseLikeInstance`デリゲートがの`DerivedFromExample`インスタンスにバインドされ、デリゲート呼び出しが繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-481">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromExample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4399-482">動的メソッドにメソッド本体がありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-482">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-483"><paramref name="target" /> が動的メソッドの 1 つ目のパラメーターと同じ型でないため、この型に割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="e4399-483"><paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span></span>  
  
<span data-ttu-id="e4399-484">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-484">-or-</span></span> 
 <span data-ttu-id="e4399-485"><paramref name="delegateType" /> のパラメーターの数に誤りがあるか、パラメーターの型に誤りがあります。</span><span class="sxs-lookup"><span data-stu-id="e4399-485"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-486">動的メソッドに対して常に <see langword="null" /> である、メソッドを宣言する型を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-486">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="e4399-487">常に <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-487">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-488">このプロパティは、 `null`動的メソッドに対して常にを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-488">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="e4399-489">動的メソッドが型に論理的に関連付けられている場合でも、型によって宣言されません。</span><span class="sxs-lookup"><span data-stu-id="e4399-489">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-490">次のコード例では、動的メソッドの宣言型を表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-490">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="e4399-491">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-491">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="parameterName" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="e4399-492">パラメーター リストのパラメーターの位置。</span><span class="sxs-lookup"><span data-stu-id="e4399-492">The position of the parameter in the parameter list.</span></span> <span data-ttu-id="e4399-493">パラメーターのインデックスは 1 から始まります。最初のパラメーターが 1 です。</span><span class="sxs-lookup"><span data-stu-id="e4399-493">Parameters are indexed beginning with the number 1 for the first parameter.</span></span></param>
        <param name="attributes"><span data-ttu-id="e4399-494">パラメーターの属性を指定する <see cref="T:System.Reflection.ParameterAttributes" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e4399-494">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span></span></param>
        <param name="parameterName"><span data-ttu-id="e4399-495">パラメーターの名前。</span><span class="sxs-lookup"><span data-stu-id="e4399-495">The name of the parameter.</span></span> <span data-ttu-id="e4399-496">名前は長さ 0 の文字列でもかまいません。</span><span class="sxs-lookup"><span data-stu-id="e4399-496">The name can be a zero-length string.</span></span></param>
        <summary><span data-ttu-id="e4399-497">動的メソッドのパラメーターを定義します。</span><span class="sxs-lookup"><span data-stu-id="e4399-497">Defines a parameter of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="e4399-498">常に <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-498">Always returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-499">が`position` 0 の場合、 <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>メソッドは戻り値を参照します。</span><span class="sxs-lookup"><span data-stu-id="e4399-499">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="e4399-500">パラメーター情報を設定しても、戻り値には影響しません。</span><span class="sxs-lookup"><span data-stu-id="e4399-500">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="e4399-501">動的メソッドが既に完了している場合、メソッド<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>また<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>はメソッド<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>を呼び出すと、メソッドは無効になります。</span><span class="sxs-lookup"><span data-stu-id="e4399-501">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="e4399-502">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-502">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-503">次のコード例は、動的メソッドのパラメーター情報を定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-503">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="e4399-504">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-504">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e4399-505">メソッドにパラメーターが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-505">The method has no parameters.</span></span>  
  
<span data-ttu-id="e4399-506">または</span><span class="sxs-lookup"><span data-stu-id="e4399-506">-or-</span></span> 
 <span data-ttu-id="e4399-507"><paramref name="position" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="e4399-507"><paramref name="position" /> is less than 0.</span></span>  
  
<span data-ttu-id="e4399-508">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-508">-or-</span></span> 
 <span data-ttu-id="e4399-509"><paramref name="position" /> がメソッドのパラメーター数を超える値です。</span><span class="sxs-lookup"><span data-stu-id="e4399-509"><paramref name="position" /> is greater than the number of the method's parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4399-510">メソッドの基本実装を返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-510">Returns the base implementation for the method.</span></span></summary>
        <returns><span data-ttu-id="e4399-511">メソッドの基本実装。</span><span class="sxs-lookup"><span data-stu-id="e4399-511">The base implementation of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-512">このメソッドは、常に`DynamicMethod`現在のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-512">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4399-513">メソッドに適用されたカスタム属性を返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-513">Returns the custom attributes applied to the method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="e4399-514">カスタム属性を見つけるためにメソッドの継承チェーンを検索する場合は <see langword="true" />。現在のメソッドだけをチェックする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-514"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="e4399-515">メソッドに対して定義されているすべてのカスタム属性を返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-515">Returns all the custom attributes defined for the method.</span></span></summary>
        <returns><span data-ttu-id="e4399-516">メソッドのすべてのカスタム属性を表すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="e4399-516">An array of objects representing all the custom attributes of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-517">動的メソッドの場合、 `true`に`inherit`対してを指定しても効果はありません。これは、メソッドが型で宣言されていないためです。</span><span class="sxs-lookup"><span data-stu-id="e4399-517">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-518">動的メソッドでは、カスタム属性は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-518">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="e4399-519">返される唯一の属性<xref:System.Runtime.CompilerServices.MethodImplAttribute>はです。メソッド<xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A>を使用して、メソッドの実装フラグをより簡単に取得できます。</span><span class="sxs-lookup"><span data-stu-id="e4399-519">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="e4399-520">返されるカスタム属性の型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-520">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span></span></param>
        <param name="inherit"><span data-ttu-id="e4399-521">カスタム属性を見つけるためにメソッドの継承チェーンを検索する場合は <see langword="true" />。現在のメソッドだけをチェックする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-521"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="e4399-522">メソッドに適用されている指定した型のカスタム属性を返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-522">Returns the custom attributes of the specified type that have been applied to the method.</span></span></summary>
        <returns><span data-ttu-id="e4399-523"><paramref name="attributeType" /> 型のメソッドまたは <paramref name="attributeType" /> 型から派生したメソッドの属性を表すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="e4399-523">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-524">動的メソッドの場合、 `true`に`inherit`対してを指定しても効果はありません。これは、メソッドが型で宣言されていないためです。</span><span class="sxs-lookup"><span data-stu-id="e4399-524">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-525">動的メソッドでは、カスタム属性は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-525">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="e4399-526">返される唯一の属性<xref:System.Runtime.CompilerServices.MethodImplAttribute>はです。メソッド<xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A>を使用して、メソッドの実装フラグをより簡単に取得できます。</span><span class="sxs-lookup"><span data-stu-id="e4399-526">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4399-527"><paramref name="attributeType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="e4399-527"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4399-528">メタデータ トークン、スコープ、および MSIL (Microsoft Intermediate Language) ストリームからメソッド本体を生成する際に使用できる <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-528">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span></span></summary>
        <returns><span data-ttu-id="e4399-529">メタデータ トークン、スコープ、および MSIL ストリームからメソッド本体を生成する際に使用できる <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e4399-529">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-530">クラス<xref:System.Reflection.Emit.DynamicILInfo>は、アンマネージコード生成をサポートするために用意されています。</span><span class="sxs-lookup"><span data-stu-id="e4399-530">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e4399-531">アンマネージコードを実行する場合は。</span><span class="sxs-lookup"><span data-stu-id="e4399-531">to execute unmanaged code.</span></span> <span data-ttu-id="e4399-532"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e4399-532">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4399-533">動的メソッドの本体を出力する際に使用できる MSIL ジェネレーターを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-533">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4399-534">既定の MSIL (Microsoft Intermediate Language) ストリーム サイズである 64 バイトを使用して、このメソッドに対応する MSIL ジェネレーターを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-534">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span></span></summary>
        <returns><span data-ttu-id="e4399-535">メソッドの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e4399-535">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-536">動的メソッドが完了した後、メソッド<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>または<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドを呼び出すことにより、さらに MSIL を追加しようとしても無視されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-536">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="e4399-537">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-537">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-538">動的メソッドでは、一部の完全信頼のシナリオでも、検証不可能なコードに制限があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-538">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="e4399-539"><xref:System.Reflection.Emit.DynamicMethod> については、「解説」の「検証」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-539">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-540">次のコード例では、2つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="e4399-540">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="e4399-541">この例では、最初のパラメーターをコンソールに出力する単純な関数本体を出力します。この例では、メソッドの戻り値として2番目のパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-541">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="e4399-542">この例では、デリゲートを作成してメソッドを完了し、異なるパラメーターを使用してデリゲートを呼び出し、 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>最後にメソッドを使用して動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e4399-542">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-543">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-543">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize"><span data-ttu-id="e4399-544">MSIL ストリームのサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="e4399-544">The size of the MSIL stream, in bytes.</span></span></param>
        <summary><span data-ttu-id="e4399-545">指定された MSIL (Microsoft Intermediate Language) ストリーム サイズのメソッドに MSIL ジェネレーターを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-545">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span></span></summary>
        <returns><span data-ttu-id="e4399-546">MSIL ストリームの指定したサイズを使用するメソッドの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e4399-546">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-547">動的メソッドが完了した後、メソッド<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>または<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドを呼び出すことにより、さらに MSIL を追加しようとしても無視されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-547">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="e4399-548">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-548">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-549">動的メソッドでは、一部の完全信頼のシナリオでも、検証不可能なコードに制限があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-549">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="e4399-550"><xref:System.Reflection.Emit.DynamicMethod> については、「解説」の「検証」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-550">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-551">次のコード例は、このメソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-551">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="e4399-552">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-552">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="e4399-553">方法: 動的メソッドを定義および実行する</span><span class="sxs-lookup"><span data-stu-id="e4399-553">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4399-554">メソッドの実装フラグを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-554">Returns the implementation flags for the method.</span></span></summary>
        <returns><span data-ttu-id="e4399-555">メソッドの実装フラグを表す <see cref="T:System.Reflection.MethodImplAttributes" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e4399-555">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-556">現時点では、動的メソッドのメソッド実装属性<xref:System.Reflection.MethodImplAttributes.IL>は<xref:System.Reflection.MethodImplAttributes.NoInlining>常にとです。</span><span class="sxs-lookup"><span data-stu-id="e4399-556">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4399-557">動的メソッドのパラメーターを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-557">Returns the parameters of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="e4399-558">動的メソッドのパラメーターを表す <see cref="T:System.Reflection.ParameterInfo" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="e4399-558">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-559">この<xref:System.Reflection.ParameterInfo>メソッドによって返されるオブジェクトは、情報だけを対象としています。</span><span class="sxs-lookup"><span data-stu-id="e4399-559">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="e4399-560">パラメーターの<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>特性を設定または変更するには、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-560">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-561">次のコード例では、動的メソッドのパラメーターを表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-561">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="e4399-562">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-562">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-563">メソッドのローカル変数を 0 で初期化するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-563">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span></span></summary>
        <value><span data-ttu-id="e4399-564">メソッドのローカル変数を 0 で初期化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-564"><see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e4399-565">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="e4399-565">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-566">このプロパティがに`true`設定されている場合、生成された Microsoft 中間言語 (MSIL) には、ローカル変数の初期化が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e4399-566">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="e4399-567">に`false`設定されている場合、ローカル変数は初期化されず、生成されたコードは検証できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-567">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-568">次のコード例では<xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> 、動的メソッドのプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-568">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="e4399-569">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-569">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="parameters" Type="System.Object[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e4399-570">動的メソッドは静的であるため、このパラメーターは動的メソッドでは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-570">This parameter is ignored for dynamic methods, because they are static.</span></span> <span data-ttu-id="e4399-571"><see langword="null" />を指定します。</span><span class="sxs-lookup"><span data-stu-id="e4399-571">Specify <see langword="null" />.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="e4399-572"><see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="e4399-572">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span></span></param>
        <param name="binder"><span data-ttu-id="e4399-573">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.Binder" /> オブジェクトの取得を有効にする <see cref="T:System.Reflection.MemberInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e4399-573">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="e4399-574"><paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-574">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="e4399-575">詳細については、「<see cref="T:System.Reflection.Binder" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-575">For more details, see <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="parameters"><span data-ttu-id="e4399-576">引数リスト。</span><span class="sxs-lookup"><span data-stu-id="e4399-576">An argument list.</span></span> <span data-ttu-id="e4399-577">これは、呼び出すメソッドのパラメーターと同じ数、順序、および型の引数の配列です。</span><span class="sxs-lookup"><span data-stu-id="e4399-577">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span></span> <span data-ttu-id="e4399-578">パラメーターがない場合は、このパラメーターを <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-578">If there are no parameters this parameter should be <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="e4399-579">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="e4399-579">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="e4399-580"><see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-580">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="e4399-581">たとえば、この情報では、1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に正しく変換する必要があります。これは、カルチャによって 1000 の表記が異なるためです。</span><span class="sxs-lookup"><span data-stu-id="e4399-581">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span></span></param>
        <summary><span data-ttu-id="e4399-582">指定したカルチャ情報で指定したバインダーの制約に基づいて、指定したパラメーターを使用して動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e4399-582">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span></span></summary>
        <returns><span data-ttu-id="e4399-583">呼び出されたメソッドの戻り値を格納する <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-583">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-584">リストされている例外に加えて、呼び出し元のコードは、動的メソッドによってスローされた例外をキャッチできるように準備する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-584">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="e4399-585">メソッドによって<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>作成されたデリゲートを使用して動的メソッドを実行する方が、 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドを使用して実行するよりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="e4399-585">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="e4399-586"><xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドまたはメソッドを呼び出すと、動的メソッド<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>が完了します。</span><span class="sxs-lookup"><span data-stu-id="e4399-586">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="e4399-587">パラメーター定義の変更や Microsoft 中間言語 (MSIL) の出力など、動的メソッドをさらに変更しようとしても無視されます。例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="e4399-587">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="e4399-588">すべての動的メソッドは静的である`obj`ため、パラメーターは常に無視されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-588">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="e4399-589">動的メソッドをインスタンスメソッドと同様に扱うには、オブジェクトインスタンスを<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>受け取るオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="e4399-589">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="e4399-590">動的メソッドにパラメーターがない場合、の`parameters` `null`値はになります。</span><span class="sxs-lookup"><span data-stu-id="e4399-590">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="e4399-591">それ以外の場合、parameters 配列内の要素の数、型、および順序は、動的メソッドのパラメーターの数、型、および順序と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-591">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-592">このメソッドオーバーロードは、 <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> <xref:System.Reflection.MethodBase>クラスから継承されたメソッドオーバーロードによって呼び出されるため、前の解説は両方のオーバーロードに適用されます。</span><span class="sxs-lookup"><span data-stu-id="e4399-592">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="e4399-593">このメソッドはアクセス許可を直接要求しませんが、動的メソッドを呼び出すと、メソッドに応じてセキュリティ要求が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-593">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="e4399-594">たとえば、 `restrictedSkipVisibility`パラメーターをに`false`設定して作成された、匿名でホストされる動的メソッドに対する要求は行われません。</span><span class="sxs-lookup"><span data-stu-id="e4399-594">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="e4399-595">`restrictedSkipVisibility`一方、をに`true`設定してメソッドを作成し、そのメソッドがターゲットアセンブリの隠しメンバーにアクセスできるようにする場合、メソッドは、 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>ターゲットアセンブリ<xref:System.Security.Permissions.ReflectionPermission>のアクセス許可とフラグを使用して要求を行います。</span><span class="sxs-lookup"><span data-stu-id="e4399-595">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-596">より前[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]では、このメソッド<xref:System.Security.Permissions.ReflectionPermission>は<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess>フラグを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e4399-596">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-597">次のコード例では、米国英語のカルチャを使用して、完全にバインドされた動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e4399-597">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="e4399-598">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-598">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e4399-599"><see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼び出し規約はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-599">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="e4399-600"><paramref name="parameters" /> 内の要素数が、動的メソッドのパラメーターの数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="e4399-600">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4399-601"><paramref name="parameters" /> の 1 つ以上の要素の型が、動的メソッドの対応するパラメーターの型と一致しません。</span><span class="sxs-lookup"><span data-stu-id="e4399-601">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="e4399-602">動的メソッドが、モジュールに関連付けられ、匿名でホストされず、<paramref name="skipVisibility" /> が <see langword="false" /> に設定されて作成されました。ただし、<see langword="public" /> または <see langword="internal" /> (Visual Basic では <see langword="Friend" />) 以外のメンバーにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="e4399-602">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span></span>  
  
<span data-ttu-id="e4399-603">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-603">-or-</span></span> 
<span data-ttu-id="e4399-604">動的メソッドが、匿名でホストされ、<paramref name="skipVisibility" /> が <see langword="false" /> に設定されて作成されました。ただし、<see langword="public" /> 以外のメンバーにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="e4399-604">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span></span>  
  
<span data-ttu-id="e4399-605">- または -</span><span class="sxs-lookup"><span data-stu-id="e4399-605">-or-</span></span> 
<span data-ttu-id="e4399-606">この動的メソッドには、検査できないコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e4399-606">The dynamic method contains unverifiable code.</span></span> <span data-ttu-id="e4399-607"><see cref="T:System.Reflection.Emit.DynamicMethod" /> については、「解説」の「検証」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-607">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="e4399-608">検索対象のカスタム属性の型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-608">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span></span></param>
        <param name="inherit"><span data-ttu-id="e4399-609">カスタム属性を見つけるためにメソッドの継承チェーンを検索する場合は <see langword="true" />。現在のメソッドだけをチェックする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-609"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="e4399-610">指定したカスタム属性の型が定義されているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-610">Indicates whether the specified custom attribute type is defined.</span></span></summary>
        <returns><span data-ttu-id="e4399-611">指定されたカスタム属性の型が定義されている場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-611"><see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-612">動的メソッドの場合、 `true`に`inherit`を指定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-612">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="e4399-613">動的メソッドに継承チェーンがありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-613">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e4399-614">動的メソッドでは、カスタム属性は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-614">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-615">現在の動的メソッドがセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであり、重要な操作を実行できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-615">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="e4399-616">現在の動的メソッドがセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の動的メソッドが透過的な場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-616"><see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-617">、 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A> 、<xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>および<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>の各プロパティは、共通言語ランタイム (CLR) によって決定される動的メソッドの透明度レベルを報告します。</span><span class="sxs-lookup"><span data-stu-id="e4399-617">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="e4399-618">これらのプロパティの組み合わせを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-618">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="e4399-619">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="e4399-619">Security level</span></span>|<span data-ttu-id="e4399-620">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="e4399-620">IsSecurityCritical</span></span>|<span data-ttu-id="e4399-621">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="e4399-621">IsSecuritySafeCritical</span></span>|<span data-ttu-id="e4399-622">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="e4399-622">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="e4399-623">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-623">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="e4399-624">安全クリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-624">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="e4399-625">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-625">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="e4399-626">これらのプロパティを使用する方が、アセンブリとその型のセキュリティの注釈を調べたり、現在の信頼レベルを確認したり、ランタイムの規則を複製したりするより、はるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="e4399-626">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="e4399-627">動的メソッドの透過性は、関連付けられているモジュールによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-627">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="e4399-628">動的メソッドがモジュールではなく型に関連付けられている場合、その透過性は、型を含むモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="e4399-628">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="e4399-629">動的メソッドにはセキュリティの注釈がないため、関連付けられているモジュールの既定の透明度が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e4399-629">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="e4399-630">匿名でホストされる動的メソッドは、それらを格納するシステム提供のモジュールが透過的であるため、常に透過的です。</span><span class="sxs-lookup"><span data-stu-id="e4399-630">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="e4399-631">信頼されたアセンブリ (グローバルアセンブリキャッシュにインストールされる厳密な名前付きアセンブリ) に関連付けられている動的メソッドの透過性を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-631">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="e4399-632">アセンブリの注釈</span><span class="sxs-lookup"><span data-stu-id="e4399-632">Assembly annotation</span></span>|<span data-ttu-id="e4399-633">レベル1の透過性</span><span class="sxs-lookup"><span data-stu-id="e4399-633">Level 1 transparency</span></span>|<span data-ttu-id="e4399-634">レベル2の透過性</span><span class="sxs-lookup"><span data-stu-id="e4399-634">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="e4399-635">完全に透明</span><span class="sxs-lookup"><span data-stu-id="e4399-635">Fully transparent</span></span>|<span data-ttu-id="e4399-636">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-636">Transparent</span></span>|<span data-ttu-id="e4399-637">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-637">Transparent</span></span>|  
    |<span data-ttu-id="e4399-638">完全にクリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-638">Fully critical</span></span>|<span data-ttu-id="e4399-639">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-639">Critical</span></span>|<span data-ttu-id="e4399-640">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-640">Critical</span></span>|  
    |<span data-ttu-id="e4399-641">透明度の混合</span><span class="sxs-lookup"><span data-stu-id="e4399-641">Mixed transparency</span></span>|<span data-ttu-id="e4399-642">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-642">Transparent</span></span>|<span data-ttu-id="e4399-643">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-643">Transparent</span></span>|  
    |<span data-ttu-id="e4399-644">セキュリティに依存しない</span><span class="sxs-lookup"><span data-stu-id="e4399-644">Security-agnostic</span></span>|<span data-ttu-id="e4399-645">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-645">Safe-critical</span></span>|<span data-ttu-id="e4399-646">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-646">Critical</span></span>|  
  
     <span data-ttu-id="e4399-647">たとえば、動的メソッドを mscorlib.dll にある型に関連付けていて、レベル2の混合透明度が指定されている場合、動的メソッドは透過的であり、クリティカルコードを実行できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-647">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="e4399-648">透過性レベルの詳細については、「[透過的セキュリティコード](~/docs/framework/misc/security-transparent-code-level-1.md)」、「レベル1」、および「[透過的セキュリティコード (レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-648">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e4399-649">動的メソッドと、セキュリティに依存しない信頼レベル1のアセンブリ (system.object など) のモジュールとの関連付けは、信頼の昇格を許可しません。</span><span class="sxs-lookup"><span data-stu-id="e4399-649">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="e4399-650">動的メソッドを呼び出すコードの許可セットに、システム .dll の許可セット (つまり、完全信頼) が含まれていない場合は、 <xref:System.Security.SecurityException>動的メソッドが呼び出されると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e4399-650">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="e4399-651">部分的に信頼されたアセンブリに関連付けられている動的メソッドの透過性は、アセンブリの読み込み方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-651">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="e4399-652">アセンブリが部分信頼 (たとえば、サンドボックス化されたアプリケーションドメインに含まれる) で読み込まれた場合、ランタイムはアセンブリのセキュリティ注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="e4399-652">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="e4399-653">アセンブリと、動的メソッドを含むすべての型およびメンバーは、透過的として扱われます。</span><span class="sxs-lookup"><span data-stu-id="e4399-653">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="e4399-654">ランタイムは、部分信頼アセンブリが完全信頼で読み込まれている場合にのみ、セキュリティ注釈に注意します (たとえば、デスクトップアプリケーションの既定のアプリケーションドメインに)。</span><span class="sxs-lookup"><span data-stu-id="e4399-654">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="e4399-655">この場合、ランタイムは、アセンブリの注釈に従って、メソッドの既定の透過性を動的メソッドに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e4399-655">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="e4399-656">リフレクション出力と透明度の詳細については、「[リフレクション出力のセキュリティの問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-656">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="e4399-657">透明度の詳細については、「[セキュリティの変更](~/docs/framework/security/security-changes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-657">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4399-658">動的メソッドにメソッドの本体がありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-658">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-659">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-659">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="e4399-660">リフレクションに関するセキュリティ上の考慮事項</span><span class="sxs-lookup"><span data-stu-id="e4399-660">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="e4399-661">.NET Framework バージョン 4 におけるセキュリティの変更点</span><span class="sxs-lookup"><span data-stu-id="e4399-661">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="e4399-662">透過的セキュリティコード、レベル1</span><span class="sxs-lookup"><span data-stu-id="e4399-662">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="e4399-663">透過的セキュリティ コード、レベル 2</span><span class="sxs-lookup"><span data-stu-id="e4399-663">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-664">現在の動的メソッドが現在の信頼レベルでセキュリティ セーフ クリティカルであり、重要な操作を実行でき、透過的なコードからアクセスできるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-664">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="e4399-665">現在の動的メソッドが現在の信頼レベルでセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の動的メソッドがセキュリティ クリティカルまたは透過的な場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-665"><see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-666">、 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A> 、<xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>および<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>の各プロパティは、共通言語ランタイム (CLR) によって決定される動的メソッドの透明度レベルを報告します。</span><span class="sxs-lookup"><span data-stu-id="e4399-666">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="e4399-667">これらのプロパティの組み合わせを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-667">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="e4399-668">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="e4399-668">Security level</span></span>|<span data-ttu-id="e4399-669">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="e4399-669">IsSecurityCritical</span></span>|<span data-ttu-id="e4399-670">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="e4399-670">IsSecuritySafeCritical</span></span>|<span data-ttu-id="e4399-671">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="e4399-671">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="e4399-672">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-672">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="e4399-673">安全クリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-673">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="e4399-674">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-674">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="e4399-675">これらのプロパティを使用する方が、アセンブリとその型のセキュリティの注釈を調べたり、現在の信頼レベルを確認したり、ランタイムの規則を複製したりするより、はるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="e4399-675">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="e4399-676">動的メソッドの透過性は、関連付けられているモジュールによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-676">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="e4399-677">動的メソッドがモジュールではなく型に関連付けられている場合、その透過性は、型を含むモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="e4399-677">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="e4399-678">動的メソッドにはセキュリティの注釈がないため、関連付けられているモジュールの既定の透明度が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e4399-678">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="e4399-679">匿名でホストされる動的メソッドは、それらを格納するシステム提供のモジュールが透過的であるため、常に透過的です。</span><span class="sxs-lookup"><span data-stu-id="e4399-679">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="e4399-680">信頼されたアセンブリ (グローバルアセンブリキャッシュにインストールされる厳密な名前付きアセンブリ) に関連付けられている動的メソッドの透過性を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-680">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="e4399-681">アセンブリの注釈</span><span class="sxs-lookup"><span data-stu-id="e4399-681">Assembly annotation</span></span>|<span data-ttu-id="e4399-682">レベル1の透過性</span><span class="sxs-lookup"><span data-stu-id="e4399-682">Level 1 transparency</span></span>|<span data-ttu-id="e4399-683">レベル2の透過性</span><span class="sxs-lookup"><span data-stu-id="e4399-683">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="e4399-684">完全に透明</span><span class="sxs-lookup"><span data-stu-id="e4399-684">Fully transparent</span></span>|<span data-ttu-id="e4399-685">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-685">Transparent</span></span>|<span data-ttu-id="e4399-686">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-686">Transparent</span></span>|  
    |<span data-ttu-id="e4399-687">完全にクリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-687">Fully critical</span></span>|<span data-ttu-id="e4399-688">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-688">Critical</span></span>|<span data-ttu-id="e4399-689">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-689">Critical</span></span>|  
    |<span data-ttu-id="e4399-690">透明度の混合</span><span class="sxs-lookup"><span data-stu-id="e4399-690">Mixed transparency</span></span>|<span data-ttu-id="e4399-691">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-691">Transparent</span></span>|<span data-ttu-id="e4399-692">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-692">Transparent</span></span>|  
    |<span data-ttu-id="e4399-693">セキュリティに依存しない</span><span class="sxs-lookup"><span data-stu-id="e4399-693">Security-agnostic</span></span>|<span data-ttu-id="e4399-694">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-694">Safe-critical</span></span>|<span data-ttu-id="e4399-695">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-695">Critical</span></span>|  
  
     <span data-ttu-id="e4399-696">たとえば、動的メソッドを mscorlib.dll にある型に関連付けていて、レベル2の混合透明度が指定されている場合、動的メソッドは透過的であり、クリティカルコードを実行できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-696">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="e4399-697">透過性レベルの詳細については、「[透過的セキュリティコード](~/docs/framework/misc/security-transparent-code-level-1.md)」、「レベル1」、および「[透過的セキュリティコード (レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-697">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e4399-698">動的メソッドと、セキュリティに依存しない信頼レベル1のアセンブリ (system.object など) のモジュールとの関連付けは、信頼の昇格を許可しません。</span><span class="sxs-lookup"><span data-stu-id="e4399-698">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="e4399-699">動的メソッドを呼び出すコードの許可セットに、システム .dll の許可セット (つまり、完全信頼) が含まれていない場合は、 <xref:System.Security.SecurityException>動的メソッドが呼び出されると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e4399-699">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="e4399-700">部分的に信頼されたアセンブリに関連付けられている動的メソッドの透過性は、アセンブリの読み込み方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-700">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="e4399-701">アセンブリが部分信頼 (たとえば、サンドボックス化されたアプリケーションドメインに含まれる) で読み込まれた場合、ランタイムはアセンブリのセキュリティ注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="e4399-701">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="e4399-702">アセンブリと、動的メソッドを含むすべての型およびメンバーは、透過的として扱われます。</span><span class="sxs-lookup"><span data-stu-id="e4399-702">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="e4399-703">ランタイムは、部分信頼アセンブリが完全信頼で読み込まれている場合にのみ、セキュリティ注釈に注意します (たとえば、デスクトップアプリケーションの既定のアプリケーションドメインに)。</span><span class="sxs-lookup"><span data-stu-id="e4399-703">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="e4399-704">この場合、ランタイムは、アセンブリの注釈に従って、メソッドの既定の透過性を動的メソッドに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e4399-704">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="e4399-705">リフレクション出力と透明度の詳細については、「[リフレクション出力のセキュリティの問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-705">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="e4399-706">透明度の詳細については、「[セキュリティの変更](~/docs/framework/security/security-changes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-706">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4399-707">動的メソッドにメソッドの本体がありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-707">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-708">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-708">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="e4399-709">リフレクションに関するセキュリティ上の考慮事項</span><span class="sxs-lookup"><span data-stu-id="e4399-709">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="e4399-710">.NET Framework バージョン 4 におけるセキュリティの変更点</span><span class="sxs-lookup"><span data-stu-id="e4399-710">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="e4399-711">透過的セキュリティコード、レベル1</span><span class="sxs-lookup"><span data-stu-id="e4399-711">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="e4399-712">透過的セキュリティ コード、レベル 2</span><span class="sxs-lookup"><span data-stu-id="e4399-712">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-713">現在の動的メソッドが現在の信頼レベルで透過的であり、重要な操作を実行できないかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-713">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="e4399-714">現在の動的メソッドが現在の信頼レベルで透過的セキュリティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-714"><see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-715">、 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A> 、<xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>および<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>の各プロパティは、共通言語ランタイム (CLR) によって決定される動的メソッドの透明度レベルを報告します。</span><span class="sxs-lookup"><span data-stu-id="e4399-715">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="e4399-716">これらのプロパティの組み合わせを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-716">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="e4399-717">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="e4399-717">Security level</span></span>|<span data-ttu-id="e4399-718">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="e4399-718">IsSecurityCritical</span></span>|<span data-ttu-id="e4399-719">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="e4399-719">IsSecuritySafeCritical</span></span>|<span data-ttu-id="e4399-720">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="e4399-720">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="e4399-721">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-721">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="e4399-722">安全クリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-722">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="e4399-723">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-723">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="e4399-724">これらのプロパティを使用する方が、アセンブリとその型のセキュリティの注釈を調べたり、現在の信頼レベルを確認したり、ランタイムの規則を複製したりするより、はるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="e4399-724">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="e4399-725">動的メソッドの透過性は、関連付けられているモジュールによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-725">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="e4399-726">動的メソッドがモジュールではなく型に関連付けられている場合、その透過性は、型を含むモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="e4399-726">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="e4399-727">動的メソッドにはセキュリティの注釈がないため、関連付けられているモジュールの既定の透明度が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e4399-727">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="e4399-728">匿名でホストされる動的メソッドは、それらを格納するシステム提供のモジュールが透過的であるため、常に透過的です。</span><span class="sxs-lookup"><span data-stu-id="e4399-728">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="e4399-729">信頼されたアセンブリ (グローバルアセンブリキャッシュにインストールされる厳密な名前付きアセンブリ) に関連付けられている動的メソッドの透過性を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-729">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="e4399-730">アセンブリの注釈</span><span class="sxs-lookup"><span data-stu-id="e4399-730">Assembly annotation</span></span>|<span data-ttu-id="e4399-731">レベル1の透過性</span><span class="sxs-lookup"><span data-stu-id="e4399-731">Level 1 transparency</span></span>|<span data-ttu-id="e4399-732">レベル2の透過性</span><span class="sxs-lookup"><span data-stu-id="e4399-732">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="e4399-733">完全に透明</span><span class="sxs-lookup"><span data-stu-id="e4399-733">Fully transparent</span></span>|<span data-ttu-id="e4399-734">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-734">Transparent</span></span>|<span data-ttu-id="e4399-735">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-735">Transparent</span></span>|  
    |<span data-ttu-id="e4399-736">完全にクリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-736">Fully critical</span></span>|<span data-ttu-id="e4399-737">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-737">Critical</span></span>|<span data-ttu-id="e4399-738">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-738">Critical</span></span>|  
    |<span data-ttu-id="e4399-739">透明度の混合</span><span class="sxs-lookup"><span data-stu-id="e4399-739">Mixed transparency</span></span>|<span data-ttu-id="e4399-740">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-740">Transparent</span></span>|<span data-ttu-id="e4399-741">透明</span><span class="sxs-lookup"><span data-stu-id="e4399-741">Transparent</span></span>|  
    |<span data-ttu-id="e4399-742">セキュリティに依存しない</span><span class="sxs-lookup"><span data-stu-id="e4399-742">Security-agnostic</span></span>|<span data-ttu-id="e4399-743">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="e4399-743">Safe-critical</span></span>|<span data-ttu-id="e4399-744">重大</span><span class="sxs-lookup"><span data-stu-id="e4399-744">Critical</span></span>|  
  
     <span data-ttu-id="e4399-745">たとえば、動的メソッドを mscorlib.dll にある型に関連付けていて、レベル2の混合透明度が指定されている場合、動的メソッドは透過的であり、クリティカルコードを実行できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-745">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="e4399-746">透過性レベルの詳細については、「[透過的セキュリティコード](~/docs/framework/misc/security-transparent-code-level-1.md)」、「レベル1」、および「[透過的セキュリティコード (レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-746">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e4399-747">動的メソッドと、セキュリティに依存しない信頼レベル1のアセンブリ (system.object など) のモジュールとの関連付けは、信頼の昇格を許可しません。</span><span class="sxs-lookup"><span data-stu-id="e4399-747">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="e4399-748">動的メソッドを呼び出すコードの許可セットに、システム .dll の許可セット (つまり、完全信頼) が含まれていない場合は、 <xref:System.Security.SecurityException>動的メソッドが呼び出されると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e4399-748">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="e4399-749">部分的に信頼されたアセンブリに関連付けられている動的メソッドの透過性は、アセンブリの読み込み方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="e4399-749">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="e4399-750">アセンブリが部分信頼 (たとえば、サンドボックス化されたアプリケーションドメインに含まれる) で読み込まれた場合、ランタイムはアセンブリのセキュリティ注釈を無視します。</span><span class="sxs-lookup"><span data-stu-id="e4399-750">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="e4399-751">アセンブリと、動的メソッドを含むすべての型およびメンバーは、透過的として扱われます。</span><span class="sxs-lookup"><span data-stu-id="e4399-751">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="e4399-752">ランタイムは、部分信頼アセンブリが完全信頼で読み込まれている場合にのみ、セキュリティ注釈に注意します (たとえば、デスクトップアプリケーションの既定のアプリケーションドメインに)。</span><span class="sxs-lookup"><span data-stu-id="e4399-752">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="e4399-753">この場合、ランタイムは、アセンブリの注釈に従って、メソッドの既定の透過性を動的メソッドに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e4399-753">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="e4399-754">リフレクション出力と透明度の詳細については、「[リフレクション出力のセキュリティの問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-754">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="e4399-755">透明度の詳細については、「[セキュリティの変更](~/docs/framework/security/security-changes.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e4399-755">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4399-756">動的メソッドにメソッドの本体がありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-756">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="e4399-757">リフレクション出力のセキュリティ関連事項</span><span class="sxs-lookup"><span data-stu-id="e4399-757">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="e4399-758">リフレクションに関するセキュリティ上の考慮事項</span><span class="sxs-lookup"><span data-stu-id="e4399-758">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="e4399-759">.NET Framework バージョン 4 におけるセキュリティの変更点</span><span class="sxs-lookup"><span data-stu-id="e4399-759">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="e4399-760">透過的セキュリティコード、レベル1</span><span class="sxs-lookup"><span data-stu-id="e4399-760">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="e4399-761">透過的セキュリティ コード、レベル 2</span><span class="sxs-lookup"><span data-stu-id="e4399-761">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-762">動的メソッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-762">Not supported for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="e4399-763">動的メソッドではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e4399-763">Not supported for dynamic methods.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4399-764">動的メソッドでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="e4399-764">Not allowed for dynamic methods.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-765">動的メソッドを論理的に関連付けるモジュールを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-765">Gets the module with which the dynamic method is logically associated.</span></span></summary>
        <value><span data-ttu-id="e4399-766">現在の動的メソッドを関連付ける <see cref="T:System.Reflection.Module" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-766">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-767">動的メソッドの作成時にモジュールが指定された場合、このプロパティはそのモジュールを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-767">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="e4399-768">動的メソッドの作成時に所有者として型が指定された場合、このプロパティはその型を含むモジュールを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-768">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-769">次のコード例では<xref:System.Reflection.Emit.DynamicMethod.Module%2A> 、動的メソッドのプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-769">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="e4399-770">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-770">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-771">動的メソッドの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-771">Gets the name of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="e4399-772">メソッドの簡易名。</span><span class="sxs-lookup"><span data-stu-id="e4399-772">The simple name of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e4399-773">動的メソッドに名前を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e4399-773">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-774">次のコード例では、動的メソッドの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-774">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="e4399-775">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-775">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-776">メソッドを取得するためにリフレクションで使用したクラスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-776">Gets the class that was used in reflection to obtain the method.</span></span></summary>
        <value><span data-ttu-id="e4399-777">常に <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-777">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-778">このプロパティは、 `null`動的メソッドに対して常にを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-778">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-779">次のコード例では、動的メソッドのリフレクションされた型を表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-779">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="e4399-780">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-780">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-781">動的メソッドの返されるパラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-781">Gets the return parameter of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="e4399-782">常に <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-782">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-783">このプロパティは、 `null`動的メソッドに対して常にを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-783">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-784">動的メソッドの戻り値の型を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-784">Gets the type of return value for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="e4399-785">現在のメソッドの戻り値の型を表す <see cref="T:System.Type" />。メソッドに戻り値の型がない場合は <see cref="T:System.Void" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-785">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-786">動的`null`メソッドの作成時に戻り値の型にが指定された場合<xref:System.Void?displayProperty=nameWithType>、このプロパティはを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-786">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-787">次のコード例では、動的メソッドの戻り値の型を表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-787">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="e4399-788">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-788">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4399-789">動的メソッドの戻り値の型のカスタム属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="e4399-789">Gets the custom attributes of the return type for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="e4399-790">動的メソッドの戻り値の型のカスタム属性を表す <see cref="T:System.Reflection.ICustomAttributeProvider" />。</span><span class="sxs-lookup"><span data-stu-id="e4399-790">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-791">動的メソッドの戻り値の型ではカスタム属性がサポートされていないため、 <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A>メソッドによって返されるカスタム属性の配列は常に空になります。</span><span class="sxs-lookup"><span data-stu-id="e4399-791">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-792">次のコード例は、動的メソッドの戻り値の型のカスタム属性を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e4399-792">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="e4399-793">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-793">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4399-794">文字列として表されたメソッドのシグネチャを返します。</span><span class="sxs-lookup"><span data-stu-id="e4399-794">Returns the signature of the method, represented as a string.</span></span></summary>
        <returns><span data-ttu-id="e4399-795">メソッドのシグネチャを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="e4399-795">A string representing the method signature.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4399-796">シグネチャには、型とメソッド名 (存在する場合) のみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e4399-796">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="e4399-797">パラメーター名は含まれません。</span><span class="sxs-lookup"><span data-stu-id="e4399-797">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e4399-798">次のコード例では<xref:System.Reflection.Emit.DynamicMethod.ToString%2A> 、動的メソッドのメソッドを表示します。</span><span class="sxs-lookup"><span data-stu-id="e4399-798">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="e4399-799">このコード例は、 <xref:System.Reflection.Emit.DynamicMethod>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="e4399-799">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>