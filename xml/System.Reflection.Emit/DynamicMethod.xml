<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1610512194ed6e094da5a075e6751e64b7c72298" />
    <Meta Name="ms.sourcegitcommit" Value="01f28caab7b3f23878dd07b402a8dd48b9478c8c" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="39140876" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8b033-101">コンパイル、実行、および破棄することのできる動的メソッドを定義し、またそれを表現します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b033-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="8b033-102">破棄されたメソッドは、ガベージ コレクションのために利用可能です。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b033-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-103">使用することができます、<xref:System.Reflection.Emit.DynamicMethod>クラスを生成し、メソッドを格納するには、動的アセンブリと動的な型を生成することがなく、実行時にメソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="8b033-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="8b033-104">イン タイム (JIT) コンパイラによって作成された実行可能コードが再利用されるときに、<xref:System.Reflection.Emit.DynamicMethod>オブジェクトを解放します。</span><span class="sxs-lookup"><span data-stu-id="8b033-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="8b033-105">動的メソッドは、生成し、少量のコードを実行するには、最も効率的な方法です。</span><span class="sxs-lookup"><span data-stu-id="8b033-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="8b033-106">動的メソッドは匿名でホストされることができます、またはモジュールまたは型に論理的に関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="8b033-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="8b033-107">動的メソッドが匿名でホストされている場合は、システム指定のアセンブリにあるし、はそのため、他のコードから分離します。</span><span class="sxs-lookup"><span data-stu-id="8b033-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="8b033-108">既定がない非パブリック データにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="8b033-109">匿名でホストされる動的メソッドが許可されている場合、JIT コンパイラの可視性のチェックをスキップする機能が制限があることができます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-110">動的メソッドが非パブリック メンバーがアクセスするアセンブリの信頼レベルと同じか、または動的メソッドを出力する呼び出しスタックの信頼レベルのサブセットである必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="8b033-111">匿名でホストされる動的メソッドの詳細については、次を参照してください。[チュートリアル: 部分信頼シナリオでのコードの生成](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="8b033-112">動的メソッドが、指定したモジュールを使用して関連付けられている場合は、動的メソッドがそのモジュールを効果的にグローバルにします。</span><span class="sxs-lookup"><span data-stu-id="8b033-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="8b033-113">モジュール内のすべての型とそのすべてにアクセスできる`internal`(`Friend` Visual basic) の型のメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="8b033-114">動的なを関連付けることができます、モジュールを作成するかどうかに関係なく、任意のモジュールを使用してメソッドを提供の需要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>フラグは、コードを含む呼び出し履歴で満たすことができます。</span><span class="sxs-lookup"><span data-stu-id="8b033-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="8b033-115">場合、 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> grant にフラグが含まれる、動的メソッドが JIT コンパイラの参照範囲チェックをスキップして、モジュール内、または任意のアセンブリ内の他の任意のモジュールで宣言されているすべての型のプライベート データにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8b033-116">動的メソッドが関連付けられているモジュールを指定すると、そのモジュールを匿名のホストに使用するシステム指定のアセンブリではできません。</span><span class="sxs-lookup"><span data-stu-id="8b033-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="8b033-117">動的メソッドが指定した型を含む関連付けられている場合は、アクセス レベルに関係なく、型のすべてのメンバーへのアクセスがあります。</span><span class="sxs-lookup"><span data-stu-id="8b033-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="8b033-118">さらに、JIT 参照範囲チェックをスキップできます。</span><span class="sxs-lookup"><span data-stu-id="8b033-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="8b033-119">これにより、同じモジュールで、または任意のアセンブリ内の他の任意のモジュールで宣言されている他の型のプライベート データに動的メソッドのアクセスです。</span><span class="sxs-lookup"><span data-stu-id="8b033-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="8b033-120">動的メソッドを任意の型に関連付けることができますが、コードを付与する必要があります<xref:System.Security.Permissions.ReflectionPermission>と共に、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>と<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="8b033-121">次の表に、どの型とメンバーが匿名でホストされる動的メソッドをかどうかに応じて、JIT 参照範囲チェックなしでアクセスできる<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>フラグが付与されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="8b033-122"><xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> を使用しない場合</span><span class="sxs-lookup"><span data-stu-id="8b033-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="8b033-123"><xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> を使用する場合</span><span class="sxs-lookup"><span data-stu-id="8b033-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="8b033-124">JIT 参照範囲チェックをスキップしないで</span><span class="sxs-lookup"><span data-stu-id="8b033-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="8b033-125">任意のアセンブリ内のパブリック型のパブリック メンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="8b033-126">任意のアセンブリ内のパブリック型のパブリック メンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="8b033-127">スキップ JIT 参照範囲チェックを制限があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="8b033-128">任意のアセンブリ内のパブリック型のパブリック メンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="8b033-129">信頼レベルが同じか、または動的メソッドを出力するアセンブリの信頼レベルよりも小さいのアセンブリでのみ、すべての種類のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="8b033-130">前のバージョン、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、必要なコードを出力<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-131">このアクセス許可が FullTrust と LocalIntranet 名前付き権限セットでは、既定で含まれていますが、インターネット アクセス許可ではなく設定。</span><span class="sxs-lookup"><span data-stu-id="8b033-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="8b033-132">そのため、以前のバージョンので、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]がある場合にのみ、インターネット アクセス許可でライブラリを使用できます、<xref:System.Security.SecurityCriticalAttribute>属性し、もを実行、<xref:System.Security.PermissionSet.Assert%2A>の<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="8b033-133">このようなライブラリでは、コーディング エラーがあるとセキュリティ ホールが発生するおそれがあるため、セキュリティを慎重にレビューする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="8b033-134">コードの生成は本質的に特権を必要とする操作ではないため、[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] はセキュリティ確認要求を発行せずに部分信頼シナリオでコードを出力できます。</span><span class="sxs-lookup"><span data-stu-id="8b033-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="8b033-135">これは、生成されたコードには、コードを出力したアセンブリと同等以下のアクセス許可しかないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8b033-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="8b033-136">これにより、コードを出力するライブラリは透過的セキュリティになるため、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit> を要求する必要がなくなります。そのため、安全なライブラリを簡単に作成できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8b033-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="8b033-137">この機能を使用するアプリケーションをターゲットする必要があります、[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]またはそれ以降。</span><span class="sxs-lookup"><span data-stu-id="8b033-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="8b033-138">次の表に、どの型とメンバーは、モジュールまたはモジュール内の型に関連付けられている動的メソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="8b033-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="8b033-139">モジュールに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="8b033-139">Associated with module</span></span>|<span data-ttu-id="8b033-140">型に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="8b033-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="8b033-141">JIT 参照範囲チェックをスキップしないで</span><span class="sxs-lookup"><span data-stu-id="8b033-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="8b033-142">モジュール内のパブリック、内部、およびプライベートの型のパブリックおよび内部のメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="8b033-143">任意のアセンブリ内のパブリック型のパブリック メンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="8b033-144">関連付けられている型のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-144">All members of the associated type.</span></span> <span data-ttu-id="8b033-145">モジュール内の他のすべての型のパブリックおよび内部のメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="8b033-146">任意のアセンブリ内のパブリック型のパブリック メンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="8b033-147">JIT 参照範囲チェックをスキップしています</span><span class="sxs-lookup"><span data-stu-id="8b033-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="8b033-148">任意のアセンブリ内のすべての種類のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="8b033-149">任意のアセンブリ内のすべての種類のすべてのメンバー。</span><span class="sxs-lookup"><span data-stu-id="8b033-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="8b033-150">モジュールに関連付けられている動的メソッドは、そのモジュールのアクセス許可を持っています。</span><span class="sxs-lookup"><span data-stu-id="8b033-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="8b033-151">型に関連付けられている動的メソッドは、その型を含むモジュールのアクセス許可を持っています。</span><span class="sxs-lookup"><span data-stu-id="8b033-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="8b033-152">動的メソッドとそのパラメーターは、名前を指定するはありませんが、デバッグに役立つように名前を指定できます。</span><span class="sxs-lookup"><span data-stu-id="8b033-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="8b033-153">カスタム属性は、動的メソッドまたはそのパラメーターではサポートされません。</span><span class="sxs-lookup"><span data-stu-id="8b033-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="8b033-154">動的メソッドは`static`メソッド (`Shared` Visual Basic でのメソッド) で導入されたデリゲート バインディング規則を緩和、[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]インスタンス メソッドのように動作できるように、オブジェクトにバインドされる動的メソッドを許可する場合そのデリゲート インスタンスを使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="8b033-155">これを示す例が提供、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8b033-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-156">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、いるシンボル情報、ローカル変数名と行番号のマップの動的メソッドはサポートされません。</span><span class="sxs-lookup"><span data-stu-id="8b033-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="8b033-157">この制限は、将来のバージョンで削除される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="8b033-158">使用することができます<xref:System.Reflection.Emit.AssemblyBuilder>開発時に生成された Microsoft intermediate language (MSIL) のデバッグを簡略化し、そのために、最後のデプロイ時に動的メソッドにし、切り替えるには<xref:System.Reflection.Emit.ILGenerator>呼び出しは、どちらの場合も同じです。</span><span class="sxs-lookup"><span data-stu-id="8b033-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="8b033-159">検証</span><span class="sxs-lookup"><span data-stu-id="8b033-159">Verification</span></span>  
 <span data-ttu-id="8b033-160">動的メソッドを検証できないコードを含めることができます、条件を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="8b033-161">(たとえば、動的メソッドが検証可能な場合その<xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A>プロパティに設定されて`false`)。</span><span class="sxs-lookup"><span data-stu-id="8b033-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="8b033-162">セキュリティ クリティカルなアセンブリに関連付けられている動的メソッドは、セキュリティ クリティカルでも、検証をスキップできます。</span><span class="sxs-lookup"><span data-stu-id="8b033-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="8b033-163">たとえば、デスクトップ アプリケーションとして実行されるセキュリティ属性のないアセンブリは、ランタイムがセキュリティ クリティカルとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="8b033-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="8b033-164">動的メソッドをアセンブリに関連付ける場合、動的メソッドは、検証できないコードを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="8b033-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="8b033-165">検証できないコードを含む動的メソッドがレベル 1 の透過性のあるアセンブリに関連付けられている場合は、ジャストイン タイム (JIT) コンパイラは、セキュリティの要求を挿入します。</span><span class="sxs-lookup"><span data-stu-id="8b033-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="8b033-166">要求は、動的メソッドが完全に信頼されたコードによって実行される場合にのみ成功します。</span><span class="sxs-lookup"><span data-stu-id="8b033-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="8b033-167">参照してください[透過的セキュリティ コード、レベル 1](~/docs/framework/misc/security-transparent-code-level-1.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="8b033-168">検証できないコードを含む動的メソッドが (mscorlib.dll) などのレベル 2 の透過性のあるアセンブリに関連付けられている場合は、セキュリティの要求ではなく、(、JIT コンパイラによって挿入された) 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8b033-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="8b033-169">参照してください[透過的セキュリティ コード、レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="8b033-170">常に検証できないコードを含む匿名でホストされる動的メソッドは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8b033-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="8b033-171">検証は、作成され、完全に信頼されたコードによって実行される場合でもそのことはありません省略できます。</span><span class="sxs-lookup"><span data-stu-id="8b033-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="8b033-172">検証不可能なコードに対してスローされる例外は、動的メソッドが呼び出される方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b033-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="8b033-173">返されたデリゲートを使用して動的メソッドを呼び出すかどうか、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッド、<xref:System.Security.VerificationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b033-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="8b033-174">使用して、動的メソッドを呼び出す場合、<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド、<xref:System.Reflection.TargetInvocationException>内部でスローされる<xref:System.Security.VerificationException>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-175">次のコード例では、2 つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="8b033-176">例では、最初のパラメーターをコンソールに出力する単純な関数の本体を出力して、例では、2 番目のパラメーターを使用して、メソッドの戻り値として。</span><span class="sxs-lookup"><span data-stu-id="8b033-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="8b033-177">例では、デリゲートを作成して、メソッドが完了すると、別のパラメーターを持つデリゲートを呼び出すおよび動的メソッドを使用して、最後に呼び出す、<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-178">動的メソッドを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-178">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-179">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-179">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-180">これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-181">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-182">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-183">メソッド名、戻り値の型、パラメーターの型を指定して、匿名でホストされる動的メソッドを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-184">このコンス トラクターによって作成される動的メソッドは、既存の型またはモジュールではなく、匿名のアセンブリに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="8b033-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="8b033-185">匿名のアセンブリには、他のコードからそれらを分離する、つまり、動的メソッドのサンド ボックス環境を提供することのみが存在します。</span><span class="sxs-lookup"><span data-stu-id="8b033-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="8b033-186">この環境では、安全に出力され、部分的に信頼されたコードによって実行される動的メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b033-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="8b033-187">このコンス トラクターは、ジャストイン タイム (JIT) 参照範囲チェック Microsoft intermediate language (MSIL) にも適用されます動的メソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="8b033-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="8b033-188">動的メソッドのコードは、パブリック クラスのパブリック メソッドにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="8b033-189">メソッドでは、型またはメンバーにアクセスしようとすると、例外がスローされた`private`、 `protected`、または`internal`(`Friend` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="8b033-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="8b033-190">JIT 参照範囲チェックをスキップする機能が制限されている動的メソッドを作成するには、使用、<xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8b033-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="8b033-191">匿名でホストされる動的メソッドが作成されるときに出力アセンブリの呼び出し履歴が含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b033-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="8b033-192">メソッドが呼び出されたときに、出力アセンブリのアクセス許可は、実際の呼び出し元のアクセス許可の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="8b033-193">したがって、動的メソッドに渡されるより高い信頼レベルを持つアセンブリによって実行される場合でも、それを出力するアセンブリの場合よりも高いレベルの特権で実行できません。</span><span class="sxs-lookup"><span data-stu-id="8b033-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="8b033-194">このコンス トラクター メソッドの属性を指定する<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>と<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、および呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-195">このコンス トラクターで導入された、[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]またはそれ以降。</span><span class="sxs-lookup"><span data-stu-id="8b033-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-196">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-197">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-197">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-198">
            <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-198">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-199">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-199">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-200">これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-201">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-202">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="8b033-203">動的メソッドの MSIL によりアクセスされる型およびメンバーに対する JIT 参照範囲チェックをスキップする場合は <see langword="true" /> (ただし、それらの型およびメンバーが含まれるアセンブリの信頼レベルは、動的メソッドを出力する呼び出しスタックの信頼レベル以下でなければならないという制限あり)。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-203">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-204">メソッド名、戻り値の型、パラメーターの型を指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、匿名ホスト対象の動的メソッドを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-205">このコンス トラクターによって作成される動的メソッドは、既存の型またはモジュールではなく、匿名のアセンブリに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="8b033-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="8b033-206">匿名のアセンブリには、他のコードからそれらを分離する、つまり、動的メソッドのサンド ボックス環境を提供することのみが存在します。</span><span class="sxs-lookup"><span data-stu-id="8b033-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="8b033-207">この環境では、安全に出力され、部分的に信頼されたコードによって実行される動的メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b033-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="8b033-208">匿名でホストされる動的メソッドの型またはメンバーであるに自動的にアクセスがありません`private`、 `protected`、または`internal`(`Friend` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="8b033-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="8b033-209">これは、動的のメソッドを既存の型またはモジュールに関連付けられている、関連付けられているスコープ内の非表示のメンバーにアクセスすると異なります。</span><span class="sxs-lookup"><span data-stu-id="8b033-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="8b033-210">指定`true`の`restrictedSkipVisibility`型またはメンバーにアクセスするかどうか、動的メソッドは`private`、 `protected`、または`internal`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="8b033-211">これによりこれらのメンバーに制限されている動的メソッドのアクセスです。</span><span class="sxs-lookup"><span data-stu-id="8b033-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="8b033-212">つまり、メンバーは、次の条件が満たされた場合にのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="8b033-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="8b033-213">ターゲットのメンバーは、動的メソッドを出力する呼び出しスタック以下の信頼のレベルを持つアセンブリに属しています。</span><span class="sxs-lookup"><span data-stu-id="8b033-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="8b033-214">動的メソッドを出力する呼び出しスタックの許可<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-215">これは完全な信頼でコードが実行されたときに常に当てはまります。</span><span class="sxs-lookup"><span data-stu-id="8b033-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="8b033-216">部分的に信頼されたコードの場合は、ホスト、アクセス許可を明示的に付与する場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="8b033-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8b033-217">セキュリティ例外がときにスローされる、アクセス許可が付与されていない場合<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>と呼ばれる、または動的メソッドが呼び出されたときにいないときにこのコンス トラクターが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="8b033-218">動的メソッドの出力には、特殊なアクセス許可は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="8b033-219">作成される動的メソッドなど、`restrictedSkipVisibility`設定`true`呼び出し履歴に制限付きメンバー アクセスが許可されている場合、呼び出し履歴上の任意のアセンブリのプライベート メンバーにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="8b033-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="8b033-220">内の型のプライベート メンバーにアクセスできませんに部分的に信頼されたコードのコール スタックで動的メソッドを作成すると場合、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]アセンブリ、そのようなアセンブリが完全に信頼されているためです。</span><span class="sxs-lookup"><span data-stu-id="8b033-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="8b033-221">場合`restrictedSkipVisibility`は`false`、JIT 参照範囲チェックが適用されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="8b033-222">動的メソッドのコードは、パブリック クラスのパブリック メソッドにアクセスでき、型またはメンバーのアクセスを試行する場合、例外がスローされた`private`、 `protected`、または`internal`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="8b033-223">匿名でホストされる動的メソッドが作成されるときに出力アセンブリの呼び出し履歴が含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b033-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="8b033-224">メソッドが呼び出されたときに、出力のコール スタックのアクセス許可は、実際の呼び出し元のアクセス許可の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="8b033-225">したがって、動的メソッドに渡されるより高い信頼レベルを持つアセンブリによって実行される場合でも、それを出力するアセンブリの場合よりも高いレベルの特権で実行できません。</span><span class="sxs-lookup"><span data-stu-id="8b033-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="8b033-226">このコンス トラクター メソッドの属性を指定する<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>と<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、および呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-227">このコンス トラクターで導入された、[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]またはそれ以降。</span><span class="sxs-lookup"><span data-stu-id="8b033-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-228">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-229">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-229">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-230">
            <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-230">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-231">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-231">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-232">これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-233">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-234">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="8b033-235">動的メソッドが論理的に関連付けられるモジュールを表す <see cref="T:System.Reflection.Module" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-236">モジュールに対してグローバルに適用される動的メソッドを作成し、メソッド名、戻り値の型、パラメーターの型、およびモジュールを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-237">このコンス トラクター メソッドの属性を指定する<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>と<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>、し、ジャストイン タイム (JIT) 参照範囲チェックをスキップしません。</span><span class="sxs-lookup"><span data-stu-id="8b033-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="8b033-238">このコンス トラクターで作成される動的メソッドがパブリックにアクセスし、 `internal` (`Friend` Visual Basic で) モジュールに含まれるすべての型のメンバー`m`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-239">旧バージョンと互換性のため、このコンス トラクターを要求<xref:System.Security.Permissions.SecurityPermission>で、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>フラグを設定する場合は、次の条件は、どちらも true:`m`モジュールは、呼び出し元のモジュールとの要求以外<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグ失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8b033-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="8b033-240">場合の需要<xref:System.Security.Permissions.SecurityPermission>成功すると、操作を許可します。</span><span class="sxs-lookup"><span data-stu-id="8b033-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-241">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーが不要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-242">(を参照してください[出力のセキュリティ関連事項リフレクション](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md))。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-243">次のコード例では、2 つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="8b033-244">例では、最初のパラメーターをコンソールに出力する単純な関数の本体を出力して、例では、2 番目のパラメーターを使用して、メソッドの戻り値として。</span><span class="sxs-lookup"><span data-stu-id="8b033-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="8b033-245">例では、デリゲートを作成して、メソッドが完了すると、別のパラメーターを持つデリゲートを呼び出すおよび動的メソッドを使用して、最後に呼び出す、<xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-246">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="8b033-247">または、<paramref name="m" /> は、動的メソッドに対して匿名のホストを提供するモジュールです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-247">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-248">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-248">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8b033-249">または、<paramref name="m" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-249">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-250">
            <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-250">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8b033-251">動的メソッドを呼び出し元のモジュール以外のモジュールに関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-251">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="8b033-252">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-252">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-253">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-253">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-254">これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-254">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-255">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-255">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-256">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-256">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="8b033-257">動的メソッドが論理的に関連付けられる <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-257">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="8b033-258">動的メソッドには、型のすべてのメンバーへのアクセス権があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-258">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-259">メソッド名、戻り値の型、パラメーターの型、および動的メソッドが論理的に関連付けられる型を指定して、動的メソッドを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-259">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-260">このコンス トラクターで作成される動的メソッドには、型のすべてのメンバーへのアクセス`owner`、および公開して`internal`(`Friend` Visual basic) を含むモジュール内の他のすべての型のメンバー`owner`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-260">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="8b033-261">このコンス トラクター メソッドの属性を指定する<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>と<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、呼び出し規約<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>、し、ジャストイン タイム (JIT) 参照範囲チェックをスキップしません。</span><span class="sxs-lookup"><span data-stu-id="8b033-261">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-262">旧バージョンと互換性のため、このコンス トラクターを要求<xref:System.Security.Permissions.SecurityPermission>で、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>フラグを設定する場合は、次の条件は、どちらも true:`owner`呼び出し元のモジュールとの要求以外のモジュールでは、<xref:System.Security.Permissions.ReflectionPermission>で、 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8b033-262">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="8b033-263">場合の需要<xref:System.Security.Permissions.SecurityPermission>成功すると、操作を許可します。</span><span class="sxs-lookup"><span data-stu-id="8b033-263">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-264">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーが不要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-264">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-265">(を参照してください[出力のセキュリティ関連事項リフレクション](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md))。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-265">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-266">次のコード例を作成、<xref:System.Reflection.Emit.DynamicMethod>型に論理的に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="8b033-266">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="8b033-267">この関連付けにより、その型のプライベート メンバーにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-267">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="8b033-268">コード例は、という名前のクラスを定義します`Example`、クラスの名前、プライベート フィールドを持つ`DerivedFromxample`最初のクラスから派生したという名前のデリゲート型`UseLikeStatic`を返す<xref:System.Int32>型のパラメーターを持ち、`Example`と<xref:System.Int32>。、という名前のデリゲート型と`UseLikeInstance`を返す<xref:System.Int32>型の 1 つのパラメーターと<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-268">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="8b033-269">コード例を作成し、<xref:System.Reflection.Emit.DynamicMethod>のインスタンスのプライベート フィールドが変更された`Example`前の値を返します。</span><span class="sxs-lookup"><span data-stu-id="8b033-269">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-270">一般に、クラスの内部フィールドを変更するは適切なオブジェクト指向のコーディングの推奨手順です。</span><span class="sxs-lookup"><span data-stu-id="8b033-270">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="8b033-271">コード例は、のインスタンスを作成します。`Example`し、2 つのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-271">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="8b033-272">型の 1 つは、 `UseLikeStatic`、動的メソッドと同じパラメーターを持ちます。</span><span class="sxs-lookup"><span data-stu-id="8b033-272">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="8b033-273">型の 2 つ目は、 `UseLikeInstance`、最初のパラメーターを持たない (型の`Example`)。</span><span class="sxs-lookup"><span data-stu-id="8b033-273">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="8b033-274">使用してこのデリゲートを作成、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>メソッドのオーバー ロードは、2 つ目メソッド オーバー ロードのパラメーターのインスタンスである`Example`、ここでは、新しく作成されたデリゲートにバインドされている、先ほど作成したインスタンス。</span><span class="sxs-lookup"><span data-stu-id="8b033-274">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="8b033-275">動的メソッドはのバインドされたインスタンスに対してそのデリゲートが呼び出されるたびに`Example`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-275">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-276">これで導入されたデリゲート バインディングの緩和された規則の例、[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]の新しいオーバー ロードと共に、<xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-276">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8b033-277">詳細については、<xref:System.Delegate> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b033-277">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="8b033-278">`UseLikeStatic`デリゲートが呼び出されるのインスタンスに渡します`Example`にバインドされている、`UseLikeInstance`を委任します。</span><span class="sxs-lookup"><span data-stu-id="8b033-278">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="8b033-279">次に、`UseLikeInstance`デリゲートが呼び出される、両方のデリゲートがの同じインスタンスで機能するよう`Example`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-279">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="8b033-280">内部フィールドの値の変更は、各呼び出しの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-280">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="8b033-281">最後に、`UseLikeInstance`のインスタンスにデリゲートをバインド`DerivedFromxample`デリゲートの呼び出しが繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-281">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-282">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-282">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="8b033-283">または、<paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、またはジェネリック型またはメソッドの型パラメーターです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-283">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-284">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8b033-285">または、<paramref name="owner" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-285">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-286">
            <paramref name="returnType" /> が <see langword="null" /> であるか、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す対象となる型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-286">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8b033-287">動的メソッドを呼び出し元のモジュール以外のモジュール内の型に関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-287">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="8b033-288">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-288">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-289">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-289">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-290">これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-290">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-291">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-291">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-292">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-292">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="8b033-293">動的メソッドが論理的に関連付けられるモジュールを表す <see cref="T:System.Reflection.Module" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-293">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="8b033-294">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT参照範囲チェックをスキップする場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-294">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-295">メソッド名、戻り値の型、パラメーターの型、モジュールを指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、モジュールに対してグローバルな動的メソッドを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-295">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-296">このコンス トラクター メソッドの属性を指定する<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>と<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、呼び出し規約と<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-296">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8b033-297">このコンス トラクターで作成される動的メソッドがパブリックにアクセスし、 `internal` (`Friend` Visual Basic で) メンバーが含まれているモジュールのすべての型の`m`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-297">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="8b033-298">コンパイラの参照範囲チェックを JIT をスキップできるよう、動的メソッドは他のすべての種類もの private と protected のメンバーにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-298">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="8b033-299">これは、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8b033-299">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-300">旧バージョンと互換性のため、このコンス トラクターを要求<xref:System.Security.Permissions.SecurityPermission>で、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>フラグを設定する場合は、次の条件は、どちらも true:`m`モジュールは、呼び出し元のモジュールとの要求以外<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグ失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8b033-300">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="8b033-301">場合の需要<xref:System.Security.Permissions.SecurityPermission>成功すると、操作を許可します。</span><span class="sxs-lookup"><span data-stu-id="8b033-301">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-302">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーが不要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-302">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-303">(を参照してください[出力のセキュリティ関連事項リフレクション](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md))。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-303">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-304">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-304">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="8b033-305">または、<paramref name="m" /> は、動的メソッドに対して匿名のホストを提供するモジュールです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-305">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-306">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-306">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8b033-307">または、<paramref name="m" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-307">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-308">
            <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-308">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8b033-309">動的メソッドを呼び出し元のモジュール以外のモジュールに関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-309">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="8b033-310">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-310">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-311">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-311">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-312">これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-312">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-313">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-313">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-314">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-314">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="8b033-315">動的メソッドが論理的に関連付けられる <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-315">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="8b033-316">動的メソッドには、型のすべてのメンバーへのアクセス権があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-316">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="8b033-317">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT参照範囲チェックをスキップする場合は <see langword="true" /> 。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-317">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-318">メソッド名、戻り値の型、パラメーターの型、動的メソッドが論理的に関連付けられている型を指定し、さらに動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーに対する Just-In-Time (JIT) 参照範囲チェックをスキップするかどうかを指定して、動的メソッドを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-318">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-319">このコンス トラクターで作成される動的メソッドには、型のすべてのメンバーへのアクセス`owner`、および公開して`internal`(`Friend` Visual basic) を含むモジュール内の他のすべての型のメンバー`owner`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-319">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="8b033-320">コンパイラの参照範囲チェックを JIT をスキップできるよう、動的メソッドは他のすべての種類もの private と protected のメンバーにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-320">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="8b033-321">これは、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8b033-321">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="8b033-322">このコンス トラクター メソッドの属性を指定する<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>と<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>、呼び出し規約と<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-322">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-323">旧バージョンと互換性のため、このコンス トラクターを要求<xref:System.Security.Permissions.SecurityPermission>で、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>フラグを設定する場合は、次の条件は、どちらも true:`owner`呼び出し元のモジュールとの要求以外のモジュールでは、<xref:System.Security.Permissions.ReflectionPermission>で、 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8b033-323">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="8b033-324">場合の需要<xref:System.Security.Permissions.SecurityPermission>成功すると、操作を許可します。</span><span class="sxs-lookup"><span data-stu-id="8b033-324">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-325">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーが不要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-325">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-326">(を参照してください[出力のセキュリティ関連事項リフレクション](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md))。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-326">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-327">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-327">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="8b033-328">または、<paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、またはジェネリック型またはメソッドの型パラメーターです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-328">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-329">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-329">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8b033-330">または、<paramref name="owner" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-330">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-331">
            <paramref name="returnType" /> が <see langword="null" /> であるか、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す対象となる型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-331">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8b033-332">動的メソッドを呼び出し元のモジュール以外のモジュール内の型に関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-332">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="8b033-333">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-334">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-334">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-335">これは、長さ 0 の文字列にできますが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-335">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="8b033-336">動的メソッドの属性を指定する、<see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-336">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-337">使用できる組み合わせは <see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> だけです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-337">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="8b033-338">動的メソッドの呼び出し規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-338">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-339">
            <see cref="F:System.Reflection.CallingConventions.Standard" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-339">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-340">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-340">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-341">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-341">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="8b033-342">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT参照範囲チェックをスキップする場合は <see langword="true" /> 。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-342">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-343">メソッド名、属性、呼び出し規約、戻り値の型、パラメーターの型、モジュールを指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、動的メソッドを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-343">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-344">このコンス トラクターで作成される動的メソッドがパブリックにアクセスし、 `internal` (`Friend` Visual Basic で) モジュールに含まれるすべてのパブリックおよび内部型のメンバー`m`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-344">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="8b033-345">コンパイラの参照範囲チェックを JIT をスキップできるように他のすべての種類とその他のすべてのアセンブリも、モジュールでのプライベート、プロテクト メンバーにアクセスする動的メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-345">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="8b033-346">これは、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8b033-346">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-347">旧バージョンと互換性のため、このコンス トラクターを要求<xref:System.Security.Permissions.SecurityPermission>で、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>フラグを設定する場合は、次の条件は、どちらも true:`m`モジュールは、呼び出し元のモジュールとの要求以外<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグ失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8b033-347">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="8b033-348">場合の需要<xref:System.Security.Permissions.SecurityPermission>成功すると、操作を許可します。</span><span class="sxs-lookup"><span data-stu-id="8b033-348">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-349">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーが不要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-349">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-350">(を参照してください[出力のセキュリティ関連事項リフレクション](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md))。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-350">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-351">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-351">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="8b033-352">または、<paramref name="m" /> は、動的メソッドに対して匿名のホストを提供するモジュールです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-352">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-353">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-353">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8b033-354">または、<paramref name="m" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-354">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-355">
            <paramref name="attributes" /> は、<see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外のフラグの組み合わせです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-355">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="8b033-356">または、<paramref name="callingConvention" /> が <see cref="F:System.Reflection.CallingConventions.Standard" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-356">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="8b033-357">または、<paramref name="returnType" /> は <see cref="P:System.Type.IsByRef" /> で <see langword="true" /> が返される型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-357">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8b033-358">動的メソッドを呼び出し元のモジュール以外のモジュールに関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-358">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="8b033-359">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-359">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md">
          <span data-ttu-id="8b033-360">方法: 動的メソッドを定義および実行する</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-360">How to: Define and Execute Dynamic Methods</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md">
          <span data-ttu-id="8b033-361">リフレクション出力のセキュリティ関連事項</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-361">Security Issues in Reflection Emit</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8b033-362">動的メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-362">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-363">これは、長さ 0 の文字列にできますが、<see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-363">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="8b033-364">動的メソッドの属性を指定する、<see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-364">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-365">使用できる組み合わせは <see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> だけです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-365">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="8b033-366">動的メソッドの呼び出し規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-366">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="8b033-367">
            <see cref="F:System.Reflection.CallingConventions.Standard" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-367">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8b033-368">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-368">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="8b033-369">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-369">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="8b033-370">動的メソッドが論理的に関連付けられる <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-370">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="8b033-371">動的メソッドには、型のすべてのメンバーへのアクセス権があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-371">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="8b033-372">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT参照範囲チェックをスキップする場合は <see langword="true" /> 。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-372">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-373">メソッド名、属性、呼び出し規則、戻り値の型、パラメーターの型、動的メソッドが論理的に関連付けられている型を指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、動的メソッドを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-373">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-374">動的メソッドが型を含むモジュールに対してグローバル`owner`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-374">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="8b033-375">型のすべてのメンバーにアクセスできる`owner`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-375">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="8b033-376">このコンス トラクターで作成される動的メソッドには、型のすべてのメンバーへのアクセス`owner`、および公開して`internal`(`Friend` Visual basic) を含むモジュールに含まれるすべての型のメンバー`owner`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-376">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="8b033-377">コンパイラの参照範囲チェックを JIT をスキップできるよう、動的メソッドは他のすべての種類もの private と protected のメンバーにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="8b033-377">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="8b033-378">これは、オブジェクトをシリアル化するコードを記述する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8b033-378">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-379">旧バージョンと互換性のため、このコンス トラクターを要求<xref:System.Security.Permissions.SecurityPermission>で、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>フラグを設定する場合は、次の条件は、どちらも true:`owner`呼び出し元のモジュールとの要求以外のモジュールでは、<xref:System.Security.Permissions.ReflectionPermission>で、 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8b033-379">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="8b033-380">場合の需要<xref:System.Security.Permissions.SecurityPermission>成功すると、操作を許可します。</span><span class="sxs-lookup"><span data-stu-id="8b033-380">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-381">以降では、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメンバーが不要<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-381">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="8b033-382">(を参照してください[出力のセキュリティ関連事項リフレクション](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md))。この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-382">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-383">
            <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-383">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="8b033-384">または、<paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、またはジェネリック型またはメソッドの型パラメーターです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-384">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-385">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-385">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8b033-386">または、<paramref name="owner" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-386">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-387">
            <paramref name="attributes" /> は、<see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外のフラグの組み合わせです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-387">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="8b033-388">または、<paramref name="callingConvention" /> が <see cref="F:System.Reflection.CallingConventions.Standard" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-388">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="8b033-389">または、<paramref name="returnType" /> は <see cref="P:System.Type.IsByRef" /> で <see langword="true" /> が返される型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-389">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="8b033-390">動的メソッドを呼び出し元のモジュール以外のモジュール内の型に関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-390">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="8b033-391">
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-391">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-392">動的メソッドの作成時に指定された属性を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-392">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-393">メソッドの属性を表す <see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-393">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-394">動的メソッドのメソッドの属性は常に現在のところ、<xref:System.Reflection.MethodAttributes.Public>と<xref:System.Reflection.MethodAttributes.Static>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-394">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-395">次のコード例では、動的メソッドのメソッドの属性が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-395">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="8b033-396">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-396">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-397">動的メソッドの作成時に指定された呼び出し規則を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-397">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-398">メソッドの呼び出し規則を示す <see cref="T:System.Reflection.CallingConventions" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-398">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-399">動的メソッドの呼び出し規約は常に現在のところ、<xref:System.Reflection.CallingConventions.Standard>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-399">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-400">次のコード例では、動的メソッドの呼び出し規約が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-400">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="8b033-401">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-401">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-402">動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-402">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8b033-403">動的メソッドのシグネチャと一致するシグネチャを持つデリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-403">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-404">動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-404">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-405">動的メソッドを実行するために使用できる、指定した型のデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-405">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-406">呼び出す、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッドまたは<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドは、動的メソッドを完了します。</span><span class="sxs-lookup"><span data-stu-id="8b033-406">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="8b033-407">さらにパラメーターの定義の変更など、動的メソッドを変更しようとしています。 または以上の Microsoft 中間言語 (MSIL) の出力は無視されます。例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="8b033-407">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="8b033-408">MSIL ジェネレーターがある場合は、動的メソッドのメソッド本体を作成するには、呼び出し、<xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A>メソッドを取得する、<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8b033-408">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="8b033-409">MSIL ジェネレーターがいない場合は、呼び出し、<xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A>メソッドを取得する、<xref:System.Reflection.Emit.ILGenerator>メソッド本体を生成するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8b033-409">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-410">次のコード例では、2 つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-410">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="8b033-411">例では、最初のパラメーターをコンソールに出力する単純な関数の本体を出力して、例では、2 番目のパラメーターを使用して、メソッドの戻り値として。</span><span class="sxs-lookup"><span data-stu-id="8b033-411">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="8b033-412">例では、デリゲートを作成して、メソッドが完了すると、別のパラメーターを持つデリゲートを呼び出すおよび動的メソッドを使用して、最後に呼び出す、<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-412">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b033-413">動的メソッドにメソッド本体がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-413">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-414">
            <paramref name="delegateType" /> に含まれるパラメーターの数か型が正しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-414">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8b033-415">動的メソッドのシグネチャと一致するシグネチャを持つデリゲート型 (最初のパラメーターは除く)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-415">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8b033-416">デリゲートをバインドするオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-416">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="8b033-417">動的メソッドの最初のパラメーターと同じ型でなければなりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-417">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-418">動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。作成する際は、デリゲートの型と、デリゲートをバインドするオブジェクトを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-418">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-419">指定したターゲット オブジェクトで動的メソッドを実行するために使用できる、指定した型のデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-419">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-420">このメソッドのオーバー ロードは、特定のオブジェクトにバインドされたデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-420">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="8b033-421">このようなデリゲートは、最初の引数を閉じると表現されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-421">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="8b033-422">インスタンス メソッドの場合と同様、メソッドは静的ですが、機能しますインスタンスが`target`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-422">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="8b033-423">このメソッドのオーバー ロードが必要です`target`、動的メソッドの最初のパラメーターと同じ型か、またはその型 (たとえば、派生クラス) に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8b033-423">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="8b033-424">シグネチャ`delegateType`に動的メソッドの先頭を除くのすべてのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="8b033-424">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="8b033-425">たとえば、動的メソッドにパラメーター <xref:System.String>、 <xref:System.Int32>、および<xref:System.Byte>、し`delegateType`パラメーターを持つ<xref:System.Int32>と<xref:System.Byte>;`target`の種類は<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-425">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="8b033-426">呼び出す、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッドまたは<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドは、動的メソッドを完了します。</span><span class="sxs-lookup"><span data-stu-id="8b033-426">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="8b033-427">さらにパラメーターの定義の変更など、動的メソッドを変更しようとしています。 または以上の Microsoft 中間言語 (MSIL) の出力は無視されます。例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="8b033-427">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="8b033-428">MSIL ジェネレーターがある場合は、動的メソッドのメソッド本体を作成するには、呼び出し、<xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A>メソッドを取得する、<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8b033-428">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="8b033-429">MSIL ジェネレーターがいない場合は、呼び出し、<xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A>メソッドを取得する、<xref:System.Reflection.Emit.ILGenerator>メソッド本体を生成するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8b033-429">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-430">次のコード例は、バインドするデリゲートを作成、<xref:System.Reflection.Emit.DynamicMethod>型のインスタンス、メソッドでは、毎回を同じインスタンス上に機能するため、これが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-430">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="8b033-431">コード例は、という名前のクラスを定義します`Example`、クラスの名前、プライベート フィールドを持つ`DerivedFromxample`最初のクラスから派生したという名前のデリゲート型`UseLikeStatic`を返す<xref:System.Int32>型のパラメーターを持ち、`Example`と<xref:System.Int32>。、という名前のデリゲート型と`UseLikeInstance`を返す<xref:System.Int32>型の 1 つのパラメーターと<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-431">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="8b033-432">コード例を作成し、<xref:System.Reflection.Emit.DynamicMethod>のインスタンスのプライベート フィールドが変更された`Example`前の値を返します。</span><span class="sxs-lookup"><span data-stu-id="8b033-432">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-433">一般に、クラスの内部フィールドを変更するは適切なオブジェクト指向のコーディングの推奨手順です。</span><span class="sxs-lookup"><span data-stu-id="8b033-433">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="8b033-434">コード例は、のインスタンスを作成します。`Example`し、2 つのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-434">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="8b033-435">型の 1 つは、 `UseLikeStatic`、動的メソッドと同じパラメーターを持ちます。</span><span class="sxs-lookup"><span data-stu-id="8b033-435">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="8b033-436">型の 2 つ目は、 `UseLikeInstance`、最初のパラメーターを持たない (型の`Example`)。</span><span class="sxs-lookup"><span data-stu-id="8b033-436">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="8b033-437">使用してこのデリゲートを作成、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>メソッドのオーバー ロードは、2 つ目メソッド オーバー ロードのパラメーターのインスタンスである`Example`、ここでは、新しく作成されたデリゲートにバインドされている、先ほど作成したインスタンス。</span><span class="sxs-lookup"><span data-stu-id="8b033-437">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="8b033-438">動的メソッドはのバインドされたインスタンスに対してそのデリゲートが呼び出されるたびに`Example`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-438">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-439">これで導入されたデリゲート バインディングの緩和された規則の例、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]の新しいオーバー ロードと共に、<xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-439">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8b033-440">詳細については、<xref:System.Delegate> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b033-440">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="8b033-441">`UseLikeStatic`デリゲートが呼び出されるのインスタンスに渡します`Example`にバインドされている、`UseLikeInstance`を委任します。</span><span class="sxs-lookup"><span data-stu-id="8b033-441">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="8b033-442">次に、`UseLikeInstance`デリゲートが呼び出される、両方のデリゲートがの同じインスタンスで機能するよう`Example`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-442">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="8b033-443">内部フィールドの値の変更は、各呼び出しの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-443">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="8b033-444">最後に、`UseLikeInstance`のインスタンスにデリゲートをバインド`DerivedFromxample`デリゲートの呼び出しが繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-444">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b033-445">動的メソッドにメソッド本体がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-445">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-446">
            <paramref name="target" /> が動的メソッドの最初のパラメーターと同じ型ではありません。また、その型に代入可能でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-446">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="8b033-447">または、<paramref name="delegateType" /> に含まれるパラメーターの数か型が正しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-447">-or-  <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-448">メソッドを宣言する型を取得します。動的メソッドの場合は常に <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-448">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-449">常に <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-449">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-450">このプロパティは常に返します`null`動的メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-450">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="8b033-451">動的メソッドが型に論理的に関連付けられている場合でも、型によって宣言されていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-451">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-452">次のコード例では、動的メソッドの宣言型が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-452">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="8b033-453">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-453">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="8b033-454">パラメーター リストのパラメーターの位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-454">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="8b033-455">最初のパラメーターに対応する 1 から順番にインデックス番号がパラメーターに付けられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-455">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="8b033-456">パラメーターの属性を指定する、<see cref="T:System.Reflection.ParameterAttributes" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-456">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="8b033-457">パラメーターの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-457">The name of the parameter.</span>
          </span>
          <span data-ttu-id="8b033-458">長さ 0 の文字列も名前として可能です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-458">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-459">動的メソッドのパラメーターを定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-459">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-460">常に <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-460">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-461">場合`position`0 の場合は、<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>メソッドは参照戻り値。</span><span class="sxs-lookup"><span data-stu-id="8b033-461">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="8b033-462">パラメーター情報を設定しても、戻り値への影響はありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-462">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="8b033-463">かどうか、動的メソッドが既に完了したら、呼び出すことによって、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>または<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド、<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>メソッドが影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="8b033-463">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="8b033-464">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-464">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-465">次のコード例では、動的メソッドのパラメーター情報を定義する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-465">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="8b033-466">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-466">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8b033-467">メソッドにパラメーターが指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-467">The method has no parameters.</span>
          </span>
          <span data-ttu-id="8b033-468">または、<paramref name="position" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-468">-or-  <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="8b033-469">または、<paramref name="position" /> は、メソッドのパラメーターの数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-469">-or-  <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b033-470">メソッドの基本実装を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-470">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-471">メソッドの基本実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-471">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-472">このメソッドは常に、現在を返して`DynamicMethod`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8b033-472">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-473">メソッドに適用されるカスタム属性を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-473">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="8b033-474">カスタム属性を見つけるためにメソッドの継承チェーンを検索する場合は <see langword="true" />。現在のメソッドだけをチェックする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-474">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-475">メソッドの定義済みのカスタム属性をすべて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-475">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-476">メソッドのすべてのカスタム属性を表す、オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-476">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-477">動的メソッドは、指定の`true`の`inherit`メソッドが型で宣言されていないため、影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="8b033-477">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-478">カスタム属性は、動的メソッドで現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-478">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="8b033-479">唯一の属性が返される<xref:System.Runtime.CompilerServices.MethodImplAttribute>; を取得できますメソッド実装フラグを使用してより簡単に、<xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-479">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="8b033-480">返されるカスタム属性の型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-480">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="8b033-481">カスタム属性を見つけるためにメソッドの継承チェーンを検索する場合は <see langword="true" />。現在のメソッドだけをチェックする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-481">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-482">メソッドに適用されている、指定した型のカスタム属性を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-482">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-483">
            <paramref name="attributeType" /> 型のメソッドまたは <paramref name="attributeType" /> 型から派生したメソッドの属性を表すオブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-483">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-484">動的メソッドは、指定の`true`の`inherit`メソッドが型で宣言されていないため、影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="8b033-484">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-485">カスタム属性は、動的メソッドで現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-485">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="8b033-486">唯一の属性が返される<xref:System.Runtime.CompilerServices.MethodImplAttribute>; を取得できますメソッド実装フラグを使用してより簡単に、<xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-486">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b033-487">
            <paramref name="attributeType" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-487">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b033-488">メタデータ トークン、スコープ、および MSIL (Microsoft Intermediate Language) ストリームからメソッド本体を生成する際に使用できる <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-488">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-489">メタデータ トークン、スコープ、および MSIL ストリームからメソッド本体を生成する際に使用できる <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-489">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-490"><xref:System.Reflection.Emit.DynamicILInfo>クラスがアンマネージ コードの生成をサポートするために提供されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-490">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8b033-491">アンマネージ コードを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-491">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="8b033-492">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-492">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-493">動的メソッドの本体を出力するために使用できる MSIL ジェネレーターを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-493">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b033-494">メソッドの Microsoft Intermediate Language (MSIL) ジェネレーターを返します。これは 64 バイトの既定の MSIL ストリーム サイズを持ちます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-494">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-495">メソッドの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-495">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-496">動的メソッドが完了した後、呼び出すことによって、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>または<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド、さらにしようとする追加の MSIL は無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-496">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="8b033-497">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-497">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-498">検証不可能なコードをいくつかの完全な信頼のシナリオであっても、動的メソッドの制約があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-498">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="8b033-499"><xref:System.Reflection.Emit.DynamicMethod> については、「解説」の「検証」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b033-499">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-500">次のコード例では、2 つのパラメーターを受け取る動的メソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b033-500">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="8b033-501">例では、最初のパラメーターをコンソールに出力する単純な関数の本体を出力して、例では、2 番目のパラメーターを使用して、メソッドの戻り値として。</span><span class="sxs-lookup"><span data-stu-id="8b033-501">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="8b033-502">例では、デリゲートを作成して、メソッドが完了すると、別のパラメーターを持つデリゲートを呼び出すおよび動的メソッドを使用して、最後に呼び出す、<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-502">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="8b033-503">バイト単位の MSIL ストリームのサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-503">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-504">指定した Microsoft Intermediate Language (MSIL) ストリーム サイズの、メソッドの MSIL ジェネレーターを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-504">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-505">指定された MSIL ストリーム サイズの、メソッドの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-505">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-506">動的メソッドが完了した後、呼び出すことによって、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>または<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド、さらにしようとする追加の MSIL は無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-506">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="8b033-507">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-507">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-508">検証不可能なコードをいくつかの完全な信頼のシナリオであっても、動的メソッドの制約があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-508">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="8b033-509"><xref:System.Reflection.Emit.DynamicMethod> については、「解説」の「検証」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b033-509">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-510">次のコード例では、このメソッドのオーバー ロードを示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-510">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="8b033-511">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-511">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b033-512">このメソッドの実装フラグを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-512">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-513">メソッドの実装フラグを表す <see cref="T:System.Reflection.MethodImplAttributes" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-513">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-514">動的メソッドのメソッドの実装の属性は常に現在のところ、<xref:System.Reflection.MethodImplAttributes.IL>と<xref:System.Reflection.MethodImplAttributes.NoInlining>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-514">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b033-515">動的メソッドのパラメーターを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-515">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-516">動的メソッドのパラメーターを表す <see cref="T:System.Reflection.ParameterInfo" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-516">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-517"><xref:System.Reflection.ParameterInfo>このメソッドによって返されるオブジェクトは参照するだけです。</span><span class="sxs-lookup"><span data-stu-id="8b033-517">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="8b033-518">使用して、<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>メソッドを設定またはパラメーターの特性を変更します。</span><span class="sxs-lookup"><span data-stu-id="8b033-518">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-519">次のコード例では、動的メソッドのパラメーターが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-519">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="8b033-520">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-520">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-521">メソッドのローカル変数をゼロに初期化するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-521">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-522">メソッドのローカル変数をゼロに初期化する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-522">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b033-523">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-523">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-524">このプロパティ設定されている場合`true`、生成された Microsoft intermediate language (MSIL) には、ローカル変数の初期化が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8b033-524">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="8b033-525">設定されている場合`false`、ローカル変数が初期化されていないと、生成されたコードは、検証できません。</span><span class="sxs-lookup"><span data-stu-id="8b033-525">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-526">次のコード例が表示されます、<xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A>動的メソッドのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="8b033-526">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="8b033-527">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-527">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="8b033-528">それらは静的であるため、動的メソッドではこのパラメーターは無視されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-528">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="8b033-529">
            <see langword="null" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-529">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="8b033-530">
            <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-530">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8b033-531">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.Binder" /> オブジェクトの取得を有効にする <see cref="T:System.Reflection.MemberInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-531">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="8b033-532">
            <c>binder</c> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-532">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="8b033-533">詳細については、「<see cref="T:System.Reflection.Binder" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-533">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8b033-534">引数リスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-534">An argument list.</span>
          </span>
          <span data-ttu-id="8b033-535">これは、呼び出されるメソッドのパラメーターと同じ数、順序、型の引数の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-535">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="8b033-536">パラメーターがない場合は、このパラメーターを <see langword="null" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-536">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="8b033-537">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-537">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="8b033-538">
            <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-538">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="8b033-539">たとえば、この情報では、1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に正しく変換する必要があります。これは、カルチャによって 1000 の表記が異なるためです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-539">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-540">指定されたカルチャ情報を使用し、指定したバインダーの制約の下で、指定したパラメーターを使用して動的メソッドを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-540">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-541">呼び出されたメソッドの戻り値を格納する <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-541">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-542">上記の例外に加えて、動的メソッドでスローされた例外をキャッチする呼び出し元のコードを準備する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b033-542">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="8b033-543">によって作成されたデリゲートを使用して動的メソッドの実行、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッドは効率的でを実行するよりも、<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-543">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="8b033-544">呼び出す、<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>メソッドまたは<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>メソッドは、動的メソッドを完了します。</span><span class="sxs-lookup"><span data-stu-id="8b033-544">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="8b033-545">さらにパラメーターの定義の変更など、動的メソッドを変更しようとしています。 または以上の Microsoft 中間言語 (MSIL) の出力は無視されます。例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="8b033-545">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="8b033-546">すべての動的メソッドは、静的なため、`obj`パラメーターは常に無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-546">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="8b033-547">動的メソッドは、インスタンス メソッドの場合と同様に扱うを使用して、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>をオブジェクトのインスタンスを受け取るオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="8b033-547">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="8b033-548">動的メソッドは、パラメーターの値を持たない場合`parameters`べき`null`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-548">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="8b033-549">それ以外の場合、パラメーター配列内の要素の数、種類、および動的メソッドのパラメーターの順序と同じことが必要です。</span><span class="sxs-lookup"><span data-stu-id="8b033-549">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-550">このメソッドのオーバー ロードを呼び出して、<xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29>から継承されたメソッドのオーバー ロード、<xref:System.Reflection.MethodBase>クラス、ので、上記の「解説が両方のオーバー ロードに適用されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-550">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="8b033-551">このメソッドを必要としないアクセス許可を直接が、方法によって、セキュリティ要求発生動的メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b033-551">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="8b033-552">たとえば、要求は行われません匿名でホストされる動的メソッドで作成された、`restrictedSkipVisibility`パラメーターに設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="8b033-552">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="8b033-553">その一方で、メソッドを作成する場合に`restrictedSkipVisibility`に設定`true`、メソッドがプラス対象アセンブリのアクセス許可の要求では、ターゲット アセンブリの非表示のメンバーにアクセスできる、ように<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-553">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-554">前のバージョン、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドが必要な<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess>フラグ。</span><span class="sxs-lookup"><span data-stu-id="8b033-554">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-555">次のコード例では、英語 (米国) カルチャを使用して、正確なバインディングの動的メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8b033-555">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="8b033-556">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-556">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8b033-557">
            <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼び出し規約はサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-557">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="8b033-558">
            <paramref name="parameters" /> 内の要素数が、動的メソッドのパラメーターの数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-558">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8b033-559">
            <paramref name="parameters" /> の 1 つ以上の要素の型が、動的メソッドの対応するパラメーターの型と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-559">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="8b033-560">動的メソッドが、モジュールに関連付けられ、匿名でホストされず、<paramref name="skipVisibility" /> が <see langword="false" /> に設定されて作成されました。ただし、<see langword="public" /> または <see langword="internal" /> (Visual Basic では <see langword="Friend" />) 以外のメンバーにアクセスします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-560">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="8b033-561">または、動的メソッドは匿名でホストされ、<paramref name="skipVisibility" /> を <see langword="false" /> に設定して構築されましたが、<see langword="public" /> ではないメンバーにアクセスします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-561">-or-  The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="8b033-562">または、動的メソッドには、検証できないコードが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-562">-or-  The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="8b033-563">
            <see cref="T:System.Reflection.Emit.DynamicMethod" /> については、「解説」の「検証」セクションを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-563">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="8b033-564">検索対象のカスタム属性の型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-564">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="8b033-565">カスタム属性を見つけるためにメソッドの継承チェーンを検索する場合は <see langword="true" />。現在のメソッドだけをチェックする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-565">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b033-566">指定されたカスタム属性の型が定義されているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-566">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-567">指定されたカスタム属性の型が定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-567">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-568">動的メソッドは、指定の`true`の`inherit`も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="8b033-568">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="8b033-569">動的メソッドには、継承チェーンはあるありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-569">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b033-570">カスタム属性は、動的メソッドで現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-570">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-571">現在の動的メソッドがセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであり、重要な操作を実行できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-571">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-572">現在の動的メソッドがセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の動的メソッドが透過的な場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-572">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-573"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>、 <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>、および<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>プロパティは、共通言語ランタイム (CLR) によって決定される動的メソッドの透明度を報告します。</span><span class="sxs-lookup"><span data-stu-id="8b033-573">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="8b033-574">これらのプロパティの組み合わせは、次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-574">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="8b033-575">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="8b033-575">Security level</span></span>|<span data-ttu-id="8b033-576">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="8b033-576">IsSecurityCritical</span></span>|<span data-ttu-id="8b033-577">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="8b033-577">IsSecuritySafeCritical</span></span>|<span data-ttu-id="8b033-578">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="8b033-578">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="8b033-579">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-579">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="8b033-580">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="8b033-580">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="8b033-581">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-581">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="8b033-582">これらのプロパティを使用する方が、アセンブリとその型のセキュリティの注釈を調べたり、現在の信頼レベルを確認したり、ランタイムの規則を複製したりするより、はるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="8b033-582">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="8b033-583">動的メソッドの透明度は、関連付けられているモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="8b033-583">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="8b033-584">動的メソッドがモジュールではなく型に関連付けられている場合、透過性は、型を含むモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="8b033-584">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="8b033-585">動的メソッドは、関連付けられているモジュールの既定の透明度が割り当てられているためセキュリティの注釈がありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-585">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="8b033-586">それらを含む、システム指定のモジュールが透過的であるために、匿名でホストされる動的メソッドは透過的な場合は、常にします。</span><span class="sxs-lookup"><span data-stu-id="8b033-586">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="8b033-587">次の表は、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) に関連付けられている動的メソッドの透明度を説明します。</span><span class="sxs-lookup"><span data-stu-id="8b033-587">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="8b033-588">アセンブリの注釈</span><span class="sxs-lookup"><span data-stu-id="8b033-588">Assembly annotation</span></span>|<span data-ttu-id="8b033-589">レベル 1 の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-589">Level 1 transparency</span></span>|<span data-ttu-id="8b033-590">レベル 2 の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-590">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="8b033-591">完全に透明</span><span class="sxs-lookup"><span data-stu-id="8b033-591">Fully transparent</span></span>|<span data-ttu-id="8b033-592">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-592">Transparent</span></span>|<span data-ttu-id="8b033-593">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-593">Transparent</span></span>|  
    |<span data-ttu-id="8b033-594">完全に重要です</span><span class="sxs-lookup"><span data-stu-id="8b033-594">Fully critical</span></span>|<span data-ttu-id="8b033-595">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-595">Critical</span></span>|<span data-ttu-id="8b033-596">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-596">Critical</span></span>|  
    |<span data-ttu-id="8b033-597">混合の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-597">Mixed transparency</span></span>|<span data-ttu-id="8b033-598">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-598">Transparent</span></span>|<span data-ttu-id="8b033-599">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-599">Transparent</span></span>|  
    |<span data-ttu-id="8b033-600">セキュリティに依存しません。</span><span class="sxs-lookup"><span data-stu-id="8b033-600">Security-agnostic</span></span>|<span data-ttu-id="8b033-601">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="8b033-601">Safe-critical</span></span>|<span data-ttu-id="8b033-602">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-602">Critical</span></span>|  
  
     <span data-ttu-id="8b033-603">など、混合 2 の透過性レベル、mscorlib.dll に型を含む動的メソッドを関連付ける動的メソッドは透過的され、重要なコードを実行できません。</span><span class="sxs-lookup"><span data-stu-id="8b033-603">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="8b033-604">透明度レベルについては、次を参照してください。[透過的セキュリティ コード、レベル 1](~/docs/framework/misc/security-transparent-code-level-1.md)と[透過的セキュリティ コード、レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-604">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8b033-605">動的メソッドには、System.dll などのセキュリティに依存しない、信頼レベル 1 アセンブリ内のモジュールを関連付けるには、信頼の昇格を許可されていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-605">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="8b033-606">動的メソッドを呼び出すコードの許可セットに (つまり、完全な信頼)、System.dll の許可セットが含まれていない場合<xref:System.Security.SecurityException>動的メソッドが呼び出された場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b033-606">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="8b033-607">部分的に信頼されたアセンブリに関連付けられている動的メソッドの透明度は、アセンブリが読み込まれる方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b033-607">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="8b033-608">アセンブリが (たとえば、サンド ボックス アプリケーション ドメイン) に部分信頼で読み込まれている場合は、ランタイムは、アセンブリのセキュリティの注釈は無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-608">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="8b033-609">アセンブリと、その型および動的メソッドを含むメンバーをすべて透過的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-609">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="8b033-610">ランタイムは、部分的に信頼されたアセンブリが (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に完全な信頼で読み込まれた場合にのみ、セキュリティの注釈に注意を支払います。</span><span class="sxs-lookup"><span data-stu-id="8b033-610">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="8b033-611">その場合は、ランタイムでは、動的メソッドにアセンブリの注釈に従ってメソッドの既定の透明度が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8b033-611">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="8b033-612">リフレクションの詳細については出力と透明度を参照してください[リフレクション出力のセキュリティ問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-612">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="8b033-613">透過性の詳細については、次を参照してください。[セキュリティ変更](~/docs/framework/security/security-changes.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-613">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b033-614">動的メソッドにメソッド本体がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-614">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-615">現在の動的メソッドが現在の信頼レベルでセキュリティ セーフ クリティカルであるかどうか、つまり、重要な操作を実行でき、透過的なコードからアクセスできるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-615">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-616">現在の動的メソッドが現在の信頼レベルでセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の動的メソッドがセキュリティ クリティカルまたは透過的な場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-616">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-617"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>、 <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>、および<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>プロパティは、共通言語ランタイム (CLR) によって決定される動的メソッドの透明度を報告します。</span><span class="sxs-lookup"><span data-stu-id="8b033-617">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="8b033-618">これらのプロパティの組み合わせは、次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-618">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="8b033-619">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="8b033-619">Security level</span></span>|<span data-ttu-id="8b033-620">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="8b033-620">IsSecurityCritical</span></span>|<span data-ttu-id="8b033-621">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="8b033-621">IsSecuritySafeCritical</span></span>|<span data-ttu-id="8b033-622">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="8b033-622">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="8b033-623">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-623">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="8b033-624">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="8b033-624">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="8b033-625">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-625">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="8b033-626">これらのプロパティを使用する方が、アセンブリとその型のセキュリティの注釈を調べたり、現在の信頼レベルを確認したり、ランタイムの規則を複製したりするより、はるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="8b033-626">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="8b033-627">動的メソッドの透明度は、関連付けられているモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="8b033-627">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="8b033-628">動的メソッドがモジュールではなく型に関連付けられている場合、透過性は、型を含むモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="8b033-628">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="8b033-629">動的メソッドは、関連付けられているモジュールの既定の透明度が割り当てられているためセキュリティの注釈がありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-629">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="8b033-630">それらを含む、システム指定のモジュールが透過的であるために、匿名でホストされる動的メソッドは透過的な場合は、常にします。</span><span class="sxs-lookup"><span data-stu-id="8b033-630">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="8b033-631">次の表は、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) に関連付けられている動的メソッドの透明度を説明します。</span><span class="sxs-lookup"><span data-stu-id="8b033-631">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="8b033-632">アセンブリの注釈</span><span class="sxs-lookup"><span data-stu-id="8b033-632">Assembly annotation</span></span>|<span data-ttu-id="8b033-633">レベル 1 の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-633">Level 1 transparency</span></span>|<span data-ttu-id="8b033-634">レベル 2 の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-634">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="8b033-635">完全に透明</span><span class="sxs-lookup"><span data-stu-id="8b033-635">Fully transparent</span></span>|<span data-ttu-id="8b033-636">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-636">Transparent</span></span>|<span data-ttu-id="8b033-637">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-637">Transparent</span></span>|  
    |<span data-ttu-id="8b033-638">完全に重要です</span><span class="sxs-lookup"><span data-stu-id="8b033-638">Fully critical</span></span>|<span data-ttu-id="8b033-639">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-639">Critical</span></span>|<span data-ttu-id="8b033-640">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-640">Critical</span></span>|  
    |<span data-ttu-id="8b033-641">混合の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-641">Mixed transparency</span></span>|<span data-ttu-id="8b033-642">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-642">Transparent</span></span>|<span data-ttu-id="8b033-643">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-643">Transparent</span></span>|  
    |<span data-ttu-id="8b033-644">セキュリティに依存しません。</span><span class="sxs-lookup"><span data-stu-id="8b033-644">Security-agnostic</span></span>|<span data-ttu-id="8b033-645">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="8b033-645">Safe-critical</span></span>|<span data-ttu-id="8b033-646">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-646">Critical</span></span>|  
  
     <span data-ttu-id="8b033-647">など、混合 2 の透過性レベル、mscorlib.dll に型を含む動的メソッドを関連付ける動的メソッドは透過的され、重要なコードを実行できません。</span><span class="sxs-lookup"><span data-stu-id="8b033-647">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="8b033-648">透明度レベルについては、次を参照してください。[透過的セキュリティ コード、レベル 1](~/docs/framework/misc/security-transparent-code-level-1.md)と[透過的セキュリティ コード、レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-648">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8b033-649">動的メソッドには、System.dll などのセキュリティに依存しない、信頼レベル 1 アセンブリ内のモジュールを関連付けるには、信頼の昇格を許可されていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-649">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="8b033-650">動的メソッドを呼び出すコードの許可セットに (つまり、完全な信頼)、System.dll の許可セットが含まれていない場合<xref:System.Security.SecurityException>動的メソッドが呼び出された場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b033-650">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="8b033-651">部分的に信頼されたアセンブリに関連付けられている動的メソッドの透明度は、アセンブリが読み込まれる方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b033-651">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="8b033-652">アセンブリが (たとえば、サンド ボックス アプリケーション ドメイン) に部分信頼で読み込まれている場合は、ランタイムは、アセンブリのセキュリティの注釈は無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-652">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="8b033-653">アセンブリと、その型および動的メソッドを含むメンバーをすべて透過的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-653">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="8b033-654">ランタイムは、部分的に信頼されたアセンブリが (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に完全な信頼で読み込まれた場合にのみ、セキュリティの注釈に注意を支払います。</span><span class="sxs-lookup"><span data-stu-id="8b033-654">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="8b033-655">その場合は、ランタイムでは、動的メソッドにアセンブリの注釈に従ってメソッドの既定の透明度が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8b033-655">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="8b033-656">リフレクションの詳細については出力と透明度を参照してください[リフレクション出力のセキュリティ問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-656">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="8b033-657">透過性の詳細については、次を参照してください。[セキュリティ変更](~/docs/framework/security/security-changes.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-657">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b033-658">動的メソッドにメソッド本体がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-658">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-659">現在の動的メソッドが現在の信頼レベルで透過的であり、重要な操作を実行できないかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-659">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-660">現在の動的メソッドが現在の信頼レベルで透過的セキュリティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-660">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-661"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>、 <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>、および<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>プロパティは、共通言語ランタイム (CLR) によって決定される動的メソッドの透明度を報告します。</span><span class="sxs-lookup"><span data-stu-id="8b033-661">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="8b033-662">これらのプロパティの組み合わせは、次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-662">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="8b033-663">セキュリティ レベル</span><span class="sxs-lookup"><span data-stu-id="8b033-663">Security level</span></span>|<span data-ttu-id="8b033-664">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="8b033-664">IsSecurityCritical</span></span>|<span data-ttu-id="8b033-665">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="8b033-665">IsSecuritySafeCritical</span></span>|<span data-ttu-id="8b033-666">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="8b033-666">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="8b033-667">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-667">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="8b033-668">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="8b033-668">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="8b033-669">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-669">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="8b033-670">これらのプロパティを使用する方が、アセンブリとその型のセキュリティの注釈を調べたり、現在の信頼レベルを確認したり、ランタイムの規則を複製したりするより、はるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="8b033-670">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="8b033-671">動的メソッドの透明度は、関連付けられているモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="8b033-671">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="8b033-672">動的メソッドがモジュールではなく型に関連付けられている場合、透過性は、型を含むモジュールに依存します。</span><span class="sxs-lookup"><span data-stu-id="8b033-672">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="8b033-673">動的メソッドは、関連付けられているモジュールの既定の透明度が割り当てられているためセキュリティの注釈がありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-673">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="8b033-674">それらを含む、システム指定のモジュールが透過的であるために、匿名でホストされる動的メソッドは透過的な場合は、常にします。</span><span class="sxs-lookup"><span data-stu-id="8b033-674">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="8b033-675">次の表は、信頼されたアセンブリ (つまり、厳密な名前付きアセンブリをグローバル アセンブリ キャッシュにインストールされている) に関連付けられている動的メソッドの透明度を説明します。</span><span class="sxs-lookup"><span data-stu-id="8b033-675">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="8b033-676">アセンブリの注釈</span><span class="sxs-lookup"><span data-stu-id="8b033-676">Assembly annotation</span></span>|<span data-ttu-id="8b033-677">レベル 1 の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-677">Level 1 transparency</span></span>|<span data-ttu-id="8b033-678">レベル 2 の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-678">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="8b033-679">完全に透明</span><span class="sxs-lookup"><span data-stu-id="8b033-679">Fully transparent</span></span>|<span data-ttu-id="8b033-680">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-680">Transparent</span></span>|<span data-ttu-id="8b033-681">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-681">Transparent</span></span>|  
    |<span data-ttu-id="8b033-682">完全に重要です</span><span class="sxs-lookup"><span data-stu-id="8b033-682">Fully critical</span></span>|<span data-ttu-id="8b033-683">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-683">Critical</span></span>|<span data-ttu-id="8b033-684">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-684">Critical</span></span>|  
    |<span data-ttu-id="8b033-685">混合の透過性</span><span class="sxs-lookup"><span data-stu-id="8b033-685">Mixed transparency</span></span>|<span data-ttu-id="8b033-686">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-686">Transparent</span></span>|<span data-ttu-id="8b033-687">透明</span><span class="sxs-lookup"><span data-stu-id="8b033-687">Transparent</span></span>|  
    |<span data-ttu-id="8b033-688">セキュリティに依存しません。</span><span class="sxs-lookup"><span data-stu-id="8b033-688">Security-agnostic</span></span>|<span data-ttu-id="8b033-689">セーフ クリティカル</span><span class="sxs-lookup"><span data-stu-id="8b033-689">Safe-critical</span></span>|<span data-ttu-id="8b033-690">重大</span><span class="sxs-lookup"><span data-stu-id="8b033-690">Critical</span></span>|  
  
     <span data-ttu-id="8b033-691">など、混合 2 の透過性レベル、mscorlib.dll に型を含む動的メソッドを関連付ける動的メソッドは透過的され、重要なコードを実行できません。</span><span class="sxs-lookup"><span data-stu-id="8b033-691">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="8b033-692">透明度レベルについては、次を参照してください。[透過的セキュリティ コード、レベル 1](~/docs/framework/misc/security-transparent-code-level-1.md)と[透過的セキュリティ コード、レベル 2](~/docs/framework/misc/security-transparent-code-level-2.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-692">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8b033-693">動的メソッドには、System.dll などのセキュリティに依存しない、信頼レベル 1 アセンブリ内のモジュールを関連付けるには、信頼の昇格を許可されていません。</span><span class="sxs-lookup"><span data-stu-id="8b033-693">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="8b033-694">動的メソッドを呼び出すコードの許可セットに (つまり、完全な信頼)、System.dll の許可セットが含まれていない場合<xref:System.Security.SecurityException>動的メソッドが呼び出された場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b033-694">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="8b033-695">部分的に信頼されたアセンブリに関連付けられている動的メソッドの透明度は、アセンブリが読み込まれる方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b033-695">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="8b033-696">アセンブリが (たとえば、サンド ボックス アプリケーション ドメイン) に部分信頼で読み込まれている場合は、ランタイムは、アセンブリのセキュリティの注釈は無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-696">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="8b033-697">アセンブリと、その型および動的メソッドを含むメンバーをすべて透過的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-697">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="8b033-698">ランタイムは、部分的に信頼されたアセンブリが (たとえば、デスクトップ アプリケーションの既定のアプリケーション ドメイン) に完全な信頼で読み込まれた場合にのみ、セキュリティの注釈に注意を支払います。</span><span class="sxs-lookup"><span data-stu-id="8b033-698">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="8b033-699">その場合は、ランタイムでは、動的メソッドにアセンブリの注釈に従ってメソッドの既定の透明度が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8b033-699">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="8b033-700">リフレクションの詳細については出力と透明度を参照してください[リフレクション出力のセキュリティ問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-700">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="8b033-701">透過性の詳細については、次を参照してください。[セキュリティ変更](~/docs/framework/security/security-changes.md)します。</span><span class="sxs-lookup"><span data-stu-id="8b033-701">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b033-702">動的メソッドにメソッド本体がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-702">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-703">動的メソッドはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-703">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-704">動的メソッドはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-704">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8b033-705">動的メソッドは許可されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-705">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-706">動的メソッドが論理的に関連付けられるモジュールを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-706">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-707">現在の動的メソッドを関連付ける <see cref="T:System.Reflection.Module" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-707">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-708">モジュールは、動的メソッドの作成時に指定されている場合、このプロパティは、そのモジュールを返します。</span><span class="sxs-lookup"><span data-stu-id="8b033-708">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="8b033-709">型は、動的メソッドの作成時に所有者として指定されている場合、このプロパティは、その型を含むモジュールを返します。</span><span class="sxs-lookup"><span data-stu-id="8b033-709">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-710">次のコード例が表示されます、<xref:System.Reflection.Emit.DynamicMethod.Module%2A>動的メソッドのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="8b033-710">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="8b033-711">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-711">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-712">動的メソッドの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-712">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-713">メソッドの単純な名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-713">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8b033-714">動的メソッドの名前にする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8b033-714">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-715">次のコード例では、動的メソッドの名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-715">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="8b033-716">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-716">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-717">メソッドを取得するためにリフレクションで使用されたクラスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-717">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-718">常に <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-718">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-719">このプロパティは常に返します`null`動的メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-719">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-720">次のコード例では、動的メソッドのリフレクションされた型が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-720">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="8b033-721">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-721">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-722">動的メソッドの戻りパラメーターを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-722">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-723">常に <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-723">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-724">このプロパティは常に返します`null`動的メソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-724">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-725">動的メソッドの戻り値の型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-725">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-726">現在のメソッドの戻り値の型を表す <see cref="T:System.Type" />。メソッドに戻り値の型がない場合は <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-726">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-727">場合`null`動的メソッドが作成された、このプロパティの取得時に、戻り値の型指定された<xref:System.Void?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="8b033-727">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-728">次のコード例では、動的メソッドの戻り値の型が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b033-728">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="8b033-729">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-729">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b033-730">動的メソッドの戻り値の型のカスタム属性を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-730">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b033-731">動的メソッドの戻り値の型のカスタム属性を表す <see cref="T:System.Reflection.ICustomAttributeProvider" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-731">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-732">によってカスタム属性の配列が返されるように、カスタム属性は、動的メソッドの戻り値の型でサポートされていません、<xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A>メソッドは常に空です。</span><span class="sxs-lookup"><span data-stu-id="8b033-732">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-733">次のコード例では、動的メソッドの戻り値の型のカスタム属性を表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8b033-733">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="8b033-734">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-734">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b033-735">文字列として表される、メソッドの署名を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-735">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b033-736">メソッドの署名を表す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b033-736">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b033-737">署名には、存在する場合の種類と、メソッド名のみが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8b033-737">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="8b033-738">パラメーター名は含まれません。</span><span class="sxs-lookup"><span data-stu-id="8b033-738">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b033-739">次のコード例が表示されます、<xref:System.Reflection.Emit.DynamicMethod.ToString%2A>動的メソッドのメソッド。</span><span class="sxs-lookup"><span data-stu-id="8b033-739">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="8b033-740">このコード例が示されている例の一部、<xref:System.Reflection.Emit.DynamicMethod>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b033-740">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>