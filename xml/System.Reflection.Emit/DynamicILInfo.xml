<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a18b2d10ad452eac41e6ad1431875ec22d12b2c1" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48644547" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicILInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicILInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo" />
  <TypeSignature Language="F#" Value="type DynamicILInfo = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ceea9-101">トークンを作成するメソッドや、コード、例外処理、およびローカル変数のシグネチャの BLOB を挿入するメソッドなど、動的メソッドの MSIL (Microsoft Intermediate Language) とメタデータを生成する代替の方法をサポートします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ceea9-101">Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-102"><xref:System.Reflection.Emit.DynamicILInfo>クラスにより、使用する代わりに、独自の MSIL ジェネレーターを記述する開発者<xref:System.Reflection.Emit.ILGenerator>します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-102">The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 <span data-ttu-id="ceea9-103">他の型のインスタンスを作成するメソッド、および具合を呼び出して、MSIL を生成することは、これらのエンティティに対してトークンを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="ceea9-103">To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</span></span> <span data-ttu-id="ceea9-104"><xref:System.Reflection.Emit.DynamicILInfo>クラスのいくつかのオーバー ロードには、<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>メソッドは、現在のスコープで有効なトークンを返す<xref:System.Reflection.Emit.DynamicILInfo>します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-104">The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>.</span></span> <span data-ttu-id="ceea9-105">オーバー ロードを呼び出す必要がある場合など、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドを取得できます、<xref:System.RuntimeMethodHandle>のオーバー ロードに渡すと、 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> MSIL に埋め込むには、トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-105">For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.</span></span>  
  
 <span data-ttu-id="ceea9-106">作成した後<xref:System.Byte>使用することができます、ローカル変数シグネチャ、例外、およびコード本体の配列を<xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>、 <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>、および<xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>に挿入するメソッド、<xref:System.Reflection.Emit.DynamicMethod>に関連付けられている、 <xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-106">Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="ceea9-107">独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」および「Partition III: CIL Instruction Set」に関する知識が必要です。</span><span class="sxs-lookup"><span data-stu-id="ceea9-107">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ceea9-108">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-108">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ceea9-109">使用しない<xref:System.Reflection.Emit.DynamicILInfo>デリゲート コンス トラクターを直接呼び出すことによって他の動的メソッドにデリゲートを作成するコードを生成します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-109">Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</span></span> <span data-ttu-id="ceea9-110">代わりに、使用、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>デリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-110">Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate.</span></span> <span data-ttu-id="ceea9-111">デリゲート コンス トラクターで作成されるデリゲートには、ターゲットの動的メソッドへの参照はありません。</span><span class="sxs-lookup"><span data-stu-id="ceea9-111">A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</span></span> <span data-ttu-id="ceea9-112">動的メソッドは、デリゲートをまだ使用中にガベージ コレクションによってクリア可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ceea9-112">The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicMethod As DynamicMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::DynamicMethod ^ DynamicMethod { System::Reflection::Emit::DynamicMethod ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicMethod : System.Reflection.Emit.DynamicMethod" Usage="System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ceea9-113">本体が現在のインスタンスによって生成される動的メソッドを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-113">Gets the dynamic method whose body is generated by the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ceea9-114">現在の <see cref="T:System.Reflection.Emit.DynamicMethod" /> オブジェクトによってコードが生成される動的メソッドを表す <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-115">A<xref:System.Reflection.Emit.DynamicILInfo>オブジェクトは常に動的メソッドを関連付けします。</span><span class="sxs-lookup"><span data-stu-id="ceea9-115">A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method.</span></span> <span data-ttu-id="ceea9-116">目的、 <xref:System.Reflection.Emit.DynamicILInfo> for 開発者向けでは、MSIL を生成を使用せずに、動的メソッドに MSIL ストリーム、例外処理、およびローカル変数シグネチャを挿入する別の方法を提供するクラスは、<xref:System.Reflection.Emit.ILGenerator>クラス。</span><span class="sxs-lookup"><span data-stu-id="ceea9-116">The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceea9-117">関連付けられた動的メソッドの MSIL ストリーム内の文字列、フィールド、メソッド、型、またはシグネチャを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-117">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (signature As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : byte[] -&gt; int" Usage="dynamicILInfo.GetTokenFor signature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature">
          <span data-ttu-id="ceea9-118">シグネチャを格納している配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-118">An array that contains the signature.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-119">関連付けられた動的メソッドのシグネチャを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-119">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-120">関連付けられた動的メソッドのメタデータおよび MSIL ストリームに埋め込むことができるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-120">A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-121">シグネチャ blob については、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-121">For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="ceea9-122">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As DynamicMethod) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::Reflection::Emit::DynamicMethod ^ method);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : System.Reflection.Emit.DynamicMethod -&gt; int" Usage="dynamicILInfo.GetTokenFor method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="ceea9-123">呼び出す動的メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-123">The dynamic method to call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-124">関連付けられたメソッドから呼び出される動的メソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-124">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-125">関連付けられた動的メソッドの MSIL ストリーム内に MSIL 命令のターゲットとして埋め込むことができるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-125">A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-126">このメソッドのオーバー ロードによって返されるトークンでは、現在に関連付けられている動的メソッドから動的メソッドを呼び出すことができます<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-126">The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ceea9-127">再帰的に関連付けられた動的メソッドを呼び出すには、値を渡す、<xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="ceea9-127">To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeFieldHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor field" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field">
          <span data-ttu-id="ceea9-128">アクセスされるフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-128">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-129">関連付けられた動的メソッドからアクセスされるフィールドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-129">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-130">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、フィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-130">A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-131">現在関連付けられている動的メソッドでは、アクセスされる任意のフィールドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-131">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ceea9-132">使用して、<xref:System.Type.GetField%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Reflection.FieldInfo>にアクセスするフィールドを使用し、<xref:System.Reflection.FieldInfo.FieldHandle%2A>を取得するプロパティ、 <xref:System.RuntimeFieldHandle>。</span><span class="sxs-lookup"><span data-stu-id="ceea9-132">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeMethodHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="ceea9-133">アクセスされるメソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-133">The method to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-134">関連付けられた動的メソッドからアクセスされるメソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-134">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-135">現在の <see cref="F:System.Reflection.Emit.OpCodes.Call" /> オブジェクトのスコープで、<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> や <see cref="T:System.Reflection.Emit.DynamicILInfo" /> などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-135">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-136">現在関連付けられている動的メソッドでアクセスされる任意のメソッドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-136">You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ceea9-137">使用して、<xref:System.Type.GetMethod%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Reflection.MethodInfo>にアクセスして、しを使用するメソッドの<xref:System.Reflection.MethodBase.MethodHandle%2A>を取得するプロパティ、<xref:System.RuntimeMethodHandle>します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-137">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ceea9-138">ジェネリック型に属するメソッドを使用して、<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>メソッド オーバー ロードし、指定、<xref:System.RuntimeTypeHandle>ジェネリック型。</span><span class="sxs-lookup"><span data-stu-id="ceea9-138">For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (type As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeTypeHandle type);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="ceea9-139">使用される型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-139">The type to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-140">関連付けられた動的メソッドで使用される型を表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-140">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-141">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、型を必要とする MSIL 命令のオペランドとして使用できるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-141">A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-142">このメソッドのオーバー ロードによって返されるトークンを使用すると、ローカル変数の型を定義し、現在に関連付けられている動的メソッドの型のインスタンスを作成する MSIL の出力<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-142">The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="ceea9-143">取得する、<xref:System.RuntimeTypeHandle>型を表すを使用して、<xref:System.Type.TypeHandle%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="ceea9-143">To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (literal As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::String ^ literal);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : string -&gt; int" Usage="dynamicILInfo.GetTokenFor literal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal">
          <span data-ttu-id="ceea9-144">使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-144">The string to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-145">関連付けられた動的メソッドで使用されるリテラル文字列を表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-145">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-146">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、文字列を必要とする MSIL 命令のオペランドとして使用できるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-146">A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeFieldHandle * RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor (field, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="field">
          <span data-ttu-id="ceea9-147">アクセスされるフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-147">The field to be accessed.</span>
          </span>
        </param>
        <param name="contextType">
          <span data-ttu-id="ceea9-148">フィールドが属するジェネリック型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-148">The generic type the field belongs to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-149">関連付けられた動的メソッドからアクセスされるフィールドのうち、指定されたジェネリック型に存在するフィールドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-149">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-150">現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、フィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-150">A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-151">現在関連付けられている動的メソッドでは、アクセスされる任意のフィールドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-151">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ceea9-152">使用して、<xref:System.Type.GetField%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Reflection.FieldInfo>アクセス、および使用しフィールドを<xref:System.Reflection.FieldInfo.FieldHandle%2A>を取得するプロパティ、 <xref:System.RuntimeFieldHandle>。</span><span class="sxs-lookup"><span data-stu-id="ceea9-152">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeMethodHandle * RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor (method, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="ceea9-153">メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-153">The method.</span>
          </span>
        </param>
        <param name="contextType">
          <span data-ttu-id="ceea9-154">メソッドが属するジェネリック型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-154">The generic type the method belongs to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-155">ジェネリック型のメソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-155">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ceea9-156">現在の <see cref="F:System.Reflection.Emit.OpCodes.Call" /> オブジェクトのスコープで、<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> や <see cref="T:System.Reflection.Emit.DynamicILInfo" /> などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-156">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-157">現在関連付けられている動的メソッドで呼び出されるメソッドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ceea9-157">You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="ceea9-158">使用して、<xref:System.Type.GetMethod%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Reflection.MethodInfo>メソッドを呼び出すには、し、使用する、<xref:System.Reflection.MethodBase.MethodHandle%2A>を取得するプロパティ、 <xref:System.RuntimeMethodHandle>。</span><span class="sxs-lookup"><span data-stu-id="ceea9-158">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceea9-159">関連付けられた動的メソッドのコード本体を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-159">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCode (code As Byte(), maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(cli::array &lt;System::Byte&gt; ^ code, int maxStackSize);" />
      <MemberSignature Language="F#" Value="member this.SetCode : byte[] * int -&gt; unit" Usage="dynamicILInfo.SetCode (code, maxStackSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">
          <span data-ttu-id="ceea9-160">MSIL ストリームを格納している配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-160">An array that contains the MSIL stream.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="ceea9-161">メソッド実行時のオペランド スタックのアイテムの最大数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-161">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-162">関連付けられた動的メソッドのコード本体を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-162">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-163">MSIL ストリームでは、有効性チェックは実行されません。</span><span class="sxs-lookup"><span data-stu-id="ceea9-163">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="ceea9-164">このメソッドを 2 回目の呼び出し、2 つ目の最初の MSIL ストリームが置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="ceea9-164">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="ceea9-165">独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」および「Partition III: CIL Instruction Set」に関する知識が必要です。</span><span class="sxs-lookup"><span data-stu-id="ceea9-165">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ceea9-166">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(System::Byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="F#" Value="member this.SetCode : nativeptr&lt;byte&gt; * int * int -&gt; unit" Usage="dynamicILInfo.SetCode (code, codeSize, maxStackSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">
          <span data-ttu-id="ceea9-167">MSIL ストリームを格納するバイト配列へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-167">A pointer to a byte array containing the MSIL stream.</span>
          </span>
        </param>
        <param name="codeSize">
          <span data-ttu-id="ceea9-168">MSIL ストリームのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-168">The number of bytes in the MSIL stream.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="ceea9-169">メソッド実行時のオペランド スタックのアイテムの最大数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-169">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-170">関連付けられた動的メソッドのコード本体を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-170">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-171">MSIL ストリームでは、有効性チェックは実行されません。</span><span class="sxs-lookup"><span data-stu-id="ceea9-171">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="ceea9-172">このメソッドを 2 回目の呼び出し、2 つ目の最初の MSIL ストリームが置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="ceea9-172">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="ceea9-173">独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) のドキュメント、特に"Partition II:: Metadata Definition and Semantics"知識が必要ですし、"パーティション III: CIL 命令セットです"。</span><span class="sxs-lookup"><span data-stu-id="ceea9-173">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</span></span> <span data-ttu-id="ceea9-174">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-174">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceea9-175">
            <paramref name="code" /> が <see langword="null" /> で、<paramref name="codeSize" /> が 0 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-175">
              <paramref name="code" /> is <see langword="null" /> and <paramref name="codeSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ceea9-176">
            <paramref name="codeSize" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-176">
              <paramref name="codeSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ceea9-177">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-177">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ceea9-178">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-178">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceea9-179">関連付けられた動的メソッドの例外のメタデータを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-179">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExceptions (exceptions As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(cli::array &lt;System::Byte&gt; ^ exceptions);" />
      <MemberSignature Language="F#" Value="member this.SetExceptions : byte[] -&gt; unit" Usage="dynamicILInfo.SetExceptions exceptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions">
          <span data-ttu-id="ceea9-180">例外のメタデータを格納している配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-180">An array that contains the exception metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-181">関連付けられた動的メソッドの例外のメタデータを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-181">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-182">メソッドの例外のメタデータは、すべてのサイズと場所を定義します。 `try`、 `catch`、 `finally`、フィルター、および fault ブロックします。</span><span class="sxs-lookup"><span data-stu-id="ceea9-182">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="ceea9-183">このメタデータのレイアウトには、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-183">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="ceea9-184">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(System::Byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="F#" Value="member this.SetExceptions : nativeptr&lt;byte&gt; * int -&gt; unit" Usage="dynamicILInfo.SetExceptions (exceptions, exceptionsSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions">
          <span data-ttu-id="ceea9-185">例外のメタデータを格納するバイト配列へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-185">A pointer to a byte array containing the exception metadata.</span>
          </span>
        </param>
        <param name="exceptionsSize">
          <span data-ttu-id="ceea9-186">例外のメタデータのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-186">The number of bytes of exception metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-187">関連付けられた動的メソッドの例外のメタデータを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-187">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-188">メソッドの例外のメタデータは、すべてのサイズと場所を定義します。 `try`、 `catch`、 `finally`、フィルター、および fault ブロックします。</span><span class="sxs-lookup"><span data-stu-id="ceea9-188">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="ceea9-189">このメタデータのレイアウトには、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」および「Partition III: CIL Instruction Set」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-189">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ceea9-190">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-190">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceea9-191">
            <paramref name="exceptions" /> が <see langword="null" /> で、<paramref name="exceptionSize" /> が 0 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-191">
              <paramref name="exceptions" /> is <see langword="null" /> and <paramref name="exceptionSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ceea9-192">
            <paramref name="exceptionSize" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-192">
              <paramref name="exceptionSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ceea9-193">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-193">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ceea9-194">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-194">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ceea9-195">関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-195">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalSignature (localSignature As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(cli::array &lt;System::Byte&gt; ^ localSignature);" />
      <MemberSignature Language="F#" Value="member this.SetLocalSignature : byte[] -&gt; unit" Usage="dynamicILInfo.SetLocalSignature localSignature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature">
          <span data-ttu-id="ceea9-196">関連付けられた <see cref="T:System.Reflection.Emit.DynamicMethod" /> のローカル変数のレイアウトを格納している配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-196">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-197">関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-197">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-198">ローカル変数シグネチャでは、メソッドのローカル変数のレイアウトについて説明します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-198">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="ceea9-199">ローカル変数シグネチャの構築を簡単に使用、 `static` (`Shared` Visual Basic で)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Reflection.Emit.SignatureHelper>ローカル署名します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-199">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="ceea9-200">ローカル変数シグネチャについては、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-200">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="ceea9-201">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-201">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(System::Byte* localSignature, int signatureSize);" />
      <MemberSignature Language="F#" Value="member this.SetLocalSignature : nativeptr&lt;byte&gt; * int -&gt; unit" Usage="dynamicILInfo.SetLocalSignature (localSignature, signatureSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature">
          <span data-ttu-id="ceea9-202">関連付けられた <see cref="T:System.Reflection.Emit.DynamicMethod" /> のローカル変数のレイアウトを格納している配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-202">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </param>
        <param name="signatureSize">
          <span data-ttu-id="ceea9-203">シグネチャのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-203">The number of bytes in the signature.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ceea9-204">関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-204">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ceea9-205">ローカル変数シグネチャでは、メソッドのローカル変数のレイアウトについて説明します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-205">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="ceea9-206">ローカル変数シグネチャの構築を簡単に使用、 `static` (`Shared` Visual Basic で)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Reflection.Emit.SignatureHelper>ローカル署名します。</span><span class="sxs-lookup"><span data-stu-id="ceea9-206">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="ceea9-207">ローカル変数シグネチャについては、共通言語基盤 (CLI) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-207">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="ceea9-208">ドキュメントはオンラインで入手できます。MSDN の「[ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212)」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「[Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ceea9-208">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ceea9-209">
            <paramref name="localSignature" /> が <see langword="null" /> で、<paramref name="signatureSize" /> が 0 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-209">
              <paramref name="localSignature" /> is <see langword="null" /> and <paramref name="signatureSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ceea9-210">
            <paramref name="signatureSize" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-210">
              <paramref name="signatureSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ceea9-211">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-211">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ceea9-212">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ceea9-212">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>