<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EnumBuilder.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac526937c284a17b2cf04e4df8c5f7d41e5f2f65d5b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26937c284a17b2cf04e4df8c5f7d41e5f2f65d5b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Describes and represents an enumeration type.</source>
          <target state="translated">列挙型を記述および表現します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> because <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instead of the enumeration type.</source>
          <target state="translated">.NET Framework バージョン 1.0 および 1.1 では、これを使用して列挙体を定義する必要が<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph>ため<ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>が要素の型は列挙型の出力<ph id="ph3">&lt;xref:System.Int32&gt;</ph>列挙型の代わりにします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements have the correct type.</source>
          <target state="translated">.NET framework version 2.0 では、<ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>正しい型である要素を持つ列挙型を出力します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <ph id="ph1">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード例を使用して、動的アセンブリ内で列挙型の構築を示しています<ph id="ph1">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>The example defines an enumeration named <ph id="ph1">`Elevation`</ph>, with an underlying type of <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, and creates two elements: <ph id="ph3">`Low`</ph>, with a value of 0, and <ph id="ph4">`High`</ph>, with a value of 1.</source>
          <target state="translated">という名前の列挙が定義されています<ph id="ph1">`Elevation`</ph>、基になる型の<ph id="ph2">&lt;xref:System.Int32&gt;</ph>、し、2 つの要素を作成: <ph id="ph3">`Low`</ph>、0 の値を持つと<ph id="ph4">`High`</ph>、値は 1 です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>After the type has been created, the assembly is saved with the name <ph id="ph1">`TempAssembly.dll`</ph>.</source>
          <target state="translated">型が作成された後、アセンブリは、名前で保存<ph id="ph1">`TempAssembly.dll`</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the contents of this assembly.</source>
          <target state="translated">使用することができます、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>このアセンブリの内容を確認します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</source>
          <target state="translated">.NET Framework version 2.0 では、前にこのコード例では、正しい列挙型は生成されません。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>Retrieves the dynamic assembly that contains this enum definition.</source>
          <target state="translated">この列挙型の定義を含む動的アセンブリを取得します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>The dynamic assembly that contains this enum definition.</source>
          <target state="translated">この列挙型の定義を含む動的アセンブリ。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Assembly`</ph> property to reference the parent assembly of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード サンプルの使用を示します、<ph id="ph1">`Assembly`</ph>プロパティ、現在の親アセンブリの参照を<ph id="ph2">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>Returns the full path of this enum qualified by the display name of the parent assembly.</source>
          <target state="translated">親アセンブリの表示名で修飾されたこの列挙型の完全なパスを返します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>The full path of this enum qualified by the display name of the parent assembly.</source>
          <target state="translated">親アセンブリの表示名で修飾されたこの列挙型の完全なパス。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>The format of the returned string is:</source>
          <target state="translated">返される文字列の形式です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source><ph id="ph1">\&lt;</ph>FullTypeName&gt;, <ph id="ph2">\&lt;</ph>AssemblyDisplayName&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>FullTypeName&gt;, <ph id="ph2">\&lt;</ph>AssemblyDisplayName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a description of the format of the display name of an assembly.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph>アセンブリの表示名の形式の詳細についてはします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>Version Information</source>
          <target state="translated">バージョン情報</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.</source>
          <target state="translated">.NET framework version 1.1 およびそれ以前では、このプロパティの戻り値はでしたカルチャまたは公開キーには含まれません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`AssemblyQualifiedName`</ph> property to reference the qualified parent assembly name of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード サンプルの使用を示します、 <ph id="ph1">`AssemblyQualifiedName`</ph> 、現在の修飾した親アセンブリの名前を参照するプロパティ<ph id="ph2">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.BaseType">
          <source>Returns the parent <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of this type which is always <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated">この型の親 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> (常に<ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>) を返します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.BaseType">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.BaseType">
          <source>The parent <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of this type.</source>
          <target state="translated">この型の親 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for this enum.</source>
          <target state="translated">この列挙型 (Enum) の <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for this enum.</source>
          <target state="translated">この列挙型 (Enum) の <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>This type has been previously created.</source>
          <target state="translated">この型は以前に作成されています。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>The enclosing type has not been created.</source>
          <target state="translated">囲む型が作成されていません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> object that represents this enumeration.</source>
          <target state="translated">この列挙体を表す <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
          <source>An object that represents this enumeration.</source>
          <target state="translated">この列挙体を表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
          <source>Returns the type that declared this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> を宣言した型を返します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
          <source>The type that declared this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> を宣言した型。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The name of the static field.</source>
          <target state="translated">静的フィールドの名前。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The constant value of the literal.</source>
          <target state="translated">リテラルの定数値。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>Defines the named static field in an enumeration type with the specified constant value.</source>
          <target state="translated">指定の定数値を持つ列挙型の、名前付きの静的フィールドを定義します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The defined field.</source>
          <target state="translated">定義済みのフィールド。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The defined field will have the field attributes <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Public&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.Static&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldAttributes.Literal&gt;</ph> set.</source>
          <target state="translated">定義済みのフィールドは、フィールドの属性が<ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Public&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.Static&gt;</ph>、および<ph id="ph3">&lt;xref:System.Reflection.FieldAttributes.Literal&gt;</ph>を設定します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> because <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instead of the enumeration type.</source>
          <target state="translated">.NET Framework バージョン 1.0 および 1.1 では、これを使用して列挙体を定義する必要が<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph>ため<ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>が要素の型は列挙型の出力<ph id="ph3">&lt;xref:System.Int32&gt;</ph>列挙型の代わりにします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements have the correct type.</source>
          <target state="translated">.NET framework version 2.0 では、<ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>正しい型である要素を持つ列挙型を出力します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <ph id="ph1">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード例を使用して、動的アセンブリ内で列挙型の構築を示しています<ph id="ph1">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The example defines an enumeration named <ph id="ph1">`Elevation`</ph>, with an underlying type of <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, and creates two elements: <ph id="ph3">`Low`</ph>, with a value of 0, and <ph id="ph4">`High`</ph>, with a value of 1.</source>
          <target state="translated">という名前の列挙が定義されています<ph id="ph1">`Elevation`</ph>、基になる型の<ph id="ph2">&lt;xref:System.Int32&gt;</ph>、し、2 つの要素を作成: <ph id="ph3">`Low`</ph>、0 の値を持つと<ph id="ph4">`High`</ph>、値は 1 です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>After the type has been created, the assembly is saved with the name <ph id="ph1">`TempAssembly.dll`</ph>.</source>
          <target state="translated">型が作成された後、アセンブリは、名前で保存<ph id="ph1">`TempAssembly.dll`</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the contents of this assembly.</source>
          <target state="translated">使用することができます、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>このアセンブリの内容を確認します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</source>
          <target state="translated">.NET Framework version 2.0 では、前にこのコード例では、正しい列挙型は生成されません。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>Returns the full path of this enum.</source>
          <target state="translated">この列挙型の完全なパスを返します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>The full path of this enum.</source>
          <target state="translated">この列挙型の完全なパス。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</source>
          <target state="translated">返される形式では、「enclosingTypeFullName + nestedTypeName」を入れ子にされた型と"typeName"の種類の入れ子になっていません。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> など、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> objects representing the public and non-public constructors defined for this class, as specified.</source>
          <target state="translated">指定に従って、このクラスに定義されているパブリック コンストラクターおよび非パブリック コンストラクターを表す <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> objects representing the specified constructors defined for this class.</source>
          <target state="translated">このクラスに定義されている指定したコンストラクターを表す <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>If no constructors are defined, an empty array is returned.</source>
          <target state="translated">コンストラクターが定義されていない場合は、空の配列が返されます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了の型のコンス トラクターを取得することができますを取得する型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Returns the custom attributes defined for this constructor.</source>
          <target state="translated">このコンストラクターに定義済みのカスタム属性を返します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for this constructor.</source>
          <target state="translated">このコンストラクターに定義済みのカスタム属性をすべて返します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns an array of objects representing all the custom attributes of the constructor represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> インスタンスで表されるコンストラクターのすべてのカスタム属性を表すオブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> and call <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> on the returned <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">この問題を回避するには、終了型のカスタム属性を取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>を呼び出すと<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph>で返された<ph id="ph3">&lt;xref:System.Type&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>The following code sample illustrates the use of <ph id="ph1">`GetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>.</source>
          <target state="translated">次のコード サンプルは、の使用方法を示します<ph id="ph1">`GetCustomAttribute`</ph>のコンテキストで<ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the custom attributes are applied.</source>
          <target state="translated">カスタム属性が適用される <ph id="ph1">&lt;see langword="Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns the custom attributes identified by the given type.</source>
          <target state="translated">指定された型で識別されるカスタム属性を返します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of objects representing the attributes of this constructor that are of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph><ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>.</source>
          <target state="translated">このコンストラクターの属性を表すオブジェクトの配列を返します。コンストラクターの属性は、<ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph><ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> and call <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on the returned <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">この問題を回避するには、終了型のカスタム属性を取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>を呼び出すと<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>で返された<ph id="ph3">&lt;xref:System.Type&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The following code sample illustrates the use of <ph id="ph1">`GetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>.</source>
          <target state="translated">次のコード サンプルは、の使用方法を示します<ph id="ph1">`GetCustomAttribute`</ph>のコンテキストで<ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">このメソッドを呼び出すと、必ず <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> がスローされます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>This method is not supported.</source>
          <target state="translated">このメソッドはサポートされていません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>No value is returned.</source>
          <target state="translated">値は返されません。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>This method is not currently supported.</source>
          <target state="translated">このメソッドは現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
          <source>Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</source>
          <target state="translated">列挙体のビルダーが定義されている場合に設定されている、現在の列挙体の基になる整数型を返します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
          <source>The underlying type.</source>
          <target state="translated">基になる型。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The name of the event to get.</source>
          <target state="translated">取得するイベントの名前。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This invocation attribute.</source>
          <target state="translated">この呼び出しの属性。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> など、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns the event with the specified name.</source>
          <target state="translated">指定した名前のイベントを返します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> object representing the event declared or inherited by this type with the specified name.</source>
          <target state="translated">指定した名前によってこの型で宣言または継承されているイベントを表す <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>If there are no matches, <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned.</source>
          <target state="translated">一致がない場合は、<ph id="ph1">&lt;see langword="null" /&gt;</ph> が返されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the event of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のイベントを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>This method is not supported on types that have not been completed.</source>
          <target state="translated">このメソッドは、完了していない型ではサポートされていません。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>Returns the events for the public events declared or inherited by this type.</source>
          <target state="translated">この型によって宣言または継承されているパブリック イベントのイベントを返します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public events declared or inherited by this type.</source>
          <target state="translated">この型で宣言または継承されているパブリック イベントを表す <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>An empty array is returned if there are no public events.</source>
          <target state="translated">パブリック イベントがない場合は、空の配列が返されます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>As a workaround, to retrieve the events of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のイベントを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> などの、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns the public and non-public events that are declared by this type.</source>
          <target state="translated">この型で宣言されているパブリック イベントとパブリックでないイベントを返します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public and non-public events declared or inherited by this type.</source>
          <target state="translated">この型で宣言または継承されているパブリック イベントと非パブリック イベントを表す <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no events, as specified.</source>
          <target state="translated">指定どおりに、イベントがない場合は空の配列が返されます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the events of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type to retrieve the events.</source>
          <target state="translated">この問題を回避するには、終了型のイベントを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用して、イベントを取得します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The name of the field to get.</source>
          <target state="translated">取得するフィールドの名前。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> など、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns the field specified by the given name.</source>
          <target state="translated">指定した名前で指定されたフィールドを返します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</source>
          <target state="translated">指定した名前と公開または非公開の修飾子を持つ、この型によって宣言または継承されているフィールドを表す <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>If there are no matches, then null is returned.</source>
          <target state="translated">どれとも一致しない場合は、null が返されます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the field of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、完成した型のフィールドを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as InvokeMethod, NonPublic, and so on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> のビット フラグ InvokeMethod、NonPublic などにする必要があります。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Returns the public and non-public fields that are declared by this type.</source>
          <target state="translated">この型で宣言されているパブリック フィールドとパブリックでないフィールドを返します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects representing the public and non-public fields declared or inherited by this type.</source>
          <target state="translated">この型で宣言または継承されているパブリック フィールドと非パブリック フィールドを表す <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no fields, as specified.</source>
          <target state="translated">指定どおりに、フィールドがない場合は空の配列が返されます。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the field of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、完成した型のフィールドを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder.GetFields%2A&gt;</ph>メソッドで返されないフィールドを特定の順序など、アルファベットまたは宣言の順序。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
          <target state="translated">その順序が異なるので、コードは、フィールドが返される順序に依存しない必要があります。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>The name of the interface.</source>
          <target state="translated">インターフェイスの名前。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the search is case-insensitive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合、検索では、大文字と小文字を区別しません。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the search is case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合、検索では、大文字と小文字が区別されます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</source>
          <target state="translated">指定された完全修飾子名を名前とし、この型によって (直接または間接に) 実装されるインターフェイスを返します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the implemented interface.</source>
          <target state="translated">実装されているインターフェイスを表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>Returns null if no interface matching name is found.</source>
          <target state="translated">インターフェイスの一致する名前が見つからない場合、null を返します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>As a workaround, to retrieve the interface of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のインターフェイスを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>The type of the interface for which the interface mapping is to be retrieved.</source>
          <target state="translated">インターフェイス マップの取得対象のインターフェイスの型。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>Returns an interface mapping for the interface requested.</source>
          <target state="translated">要求されたインターフェイスに対するインターフェイス マップを返します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>The requested interface mapping.</source>
          <target state="translated">要求されたインターフェイス マップ。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のインターフェイスのマッピングの種類を取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>The type does not implement the interface.</source>
          <target state="translated">この型はインターフェイスを実装していません。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>Returns an array of all the interfaces implemented on this a class and its base classes.</source>
          <target state="translated">このクラスとその基本クラスに実装されているすべてのインターフェイスの配列を返します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects representing the implemented interfaces.</source>
          <target state="translated">実装されているインターフェイスを表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>If none are defined, an empty array is returned.</source>
          <target state="translated">何も定義されていない場合は、空の配列が返されます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>As a workaround, to retrieve the interface of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のインターフェイスを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The name of the member.</source>
          <target state="translated">メンバーの名前。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The type of member that is to be returned.</source>
          <target state="translated">返されるメンバーの型。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> など、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</source>
          <target state="translated">この型によって宣言または継承されている指定された名前、型、およびバインドを持つすべてのメンバーを返します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects representing the public and non-public members defined on this type if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is used; otherwise, only the public members are returned.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> が使用されている場合、この型で定義されているパブリック メンバーと非パブリック メンバーを表す <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクトの配列を返します。それ以外の場合、パブリック メンバーのみが返されます。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the member of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、完成した型のメンバーを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> など、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns the specified members declared or inherited by this type,.</source>
          <target state="translated">この型で宣言または継承されている指定メンバーを返します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects representing the public and non-public members declared or inherited by this type.</source>
          <target state="translated">この型で宣言または継承されているパブリック メンバーと非パブリック メンバーを表す <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> オブジェクトの配列を返します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no matching members.</source>
          <target state="translated">一致するメンバーがない場合は、空の配列が返されます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the members of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のメンバーを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> などの、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns all the public and non-public methods declared or inherited by this type, as specified.</source>
          <target state="translated">指定のとおりに、この型によって宣言または継承されたパブリック メソッドと非パブリック メソッドをすべて返します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects representing the public and non-public methods defined on this type if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is used; otherwise, only the public methods are returned.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> が使用されている場合、この型で定義されているパブリック メソッドと非パブリック メソッドを表す <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> オブジェクトの配列を返します。それ以外の場合、パブリック メソッドのみが返されます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the methods of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、完成した型のメソッドを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of the nested type to get.</source>
          <target state="translated">取得対象の入れ子にされた型の名前を格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask comprised of one or more <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> that specify how the search is conducted.</source>
          <target state="translated">検索の実行方法を指定する 1 つ以上の <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> から成るビットマスク。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Zero, to conduct a case-sensitive search for public methods.</source>
          <target state="translated">大文字小文字を区別してパブリック メソッドの検索を行う場合は 0。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Returns the specified nested type that is declared by this type.</source>
          <target state="translated">この型で宣言されている指定された入れ子の型を返します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the nested type that matches the specified requirements, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定した要件と一致し、入れ子にされた型が存在する場合は、その型を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクト。それ以外の場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the nested type of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型の入れ子にされた型を取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> などの、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Returns the public and non-public nested types that are declared or inherited by this type.</source>
          <target state="translated">この型で宣言または継承されている入れ子にされたパブリック型とパブリックでない型を返します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects representing all the types nested within the current <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> that match the specified binding constraints.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 内で入れ子にされた型のうち、指定したバインディング制約に一致するすべての型を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>An empty array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, if no types are nested within the current <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, or if none of the nested types match the binding constraints.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 内で型が入れ子にされていないか、または入れ子にされた型の中にバインディング制約に一致するものが存在しない場合は、<ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型の空の配列。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the nested types of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型の入れ子にされた型を取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This invocation attribute.</source>
          <target state="translated">この呼び出しの属性。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">これは <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph> や <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> など、<ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns all the public and non-public properties declared or inherited by this type, as specified.</source>
          <target state="translated">指定のとおりに、この型によって宣言または継承されたパブリック プロパティと非パブリック プロパティをすべて返します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects representing the public and non-public properties defined on this type if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is used; otherwise, only the public properties are returned.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> が使用されている場合、この型で定義されているパブリック プロパティと非パブリック プロパティを表す <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> オブジェクトの配列を返します。 それ以外の場合、パブリック プロパティのみが返されます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the properties of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">この問題を回避するには、終了型のプロパティを取得するには、取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>Returns the GUID of this enum.</source>
          <target state="translated">この列挙型の GUID を返します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>The GUID of this enum.</source>
          <target state="translated">この列挙型の GUID。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`GUID`</ph> property to reference the associated <ph id="ph2">&lt;xref:System.Guid&gt;</ph> of the current <ph id="ph3">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード サンプルの使用を示します、<ph id="ph1">`GUID`</ph>プロパティ、関連付けられている参照を<ph id="ph2">&lt;xref:System.Guid&gt;</ph>、現在の<ph id="ph3">`EnumBuilder`</ph>します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The name of the member to invoke.</source>
          <target state="translated">呼び出すメンバーの名前。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This can be a constructor, method, property, or field.</source>
          <target state="translated">コンストラクター、メソッド、プロパティ、またはフィールドを指定できます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">適切な呼び出し属性を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</source>
          <target state="translated">メンバーの名前として空の文字列を渡すことによって、クラスの既定のメンバーを呼び出せることにご注意ください。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The invocation attribute.</source>
          <target state="translated">呼び出し属性。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This must be a bit flag from <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph>.</source>
          <target state="translated">これは <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> からのビット フラグでなければなりません。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> オブジェクトの取得を有効にするオブジェクト。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If binder is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">バインダーが <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、既定のバインダーが使用されます。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">指定したメンバーを呼び出す対象となるオブジェクト。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If the member is static, this parameter is ignored.</source>
          <target state="translated">メンバーが静的な場合、このパラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An argument list.</source>
          <target state="translated">引数リスト。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">これは、呼び出されるメンバーのパラメーターの数、順序、および型を含むオブジェクトの配列です。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If there are no parameters this should be null.</source>
          <target state="translated">パラメーターがない場合は、これは null である必要があります。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of the same length as <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
          <target state="translated">呼び出されるメンバーの引数に関連付けられた属性を表す要素を持つ、<bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> と同じ長さの配列。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A parameter has attributes associated with it in the metadata.</source>
          <target state="translated">メタデータの中でパラメーターには属性が関連付けられています。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>They are used by various interoperability services.</source>
          <target state="translated">これらは、さまざまな相互運用サービスで使用されます。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>See the metadata specs for details such as this.</source>
          <target state="translated">このような場合の詳細については、メタデータの仕様を参照してください。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An instance of <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">型の強制変換を制御するために使用する <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> のインスタンス。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If this is null, the <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">null の場合は、現在のスレッドの <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> が使用されます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>(Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)</source>
          <target state="translated">(これは、たとえば、1000 を表す String を Double 値に変換する場合に必要であることに注意ください。これは、カルチャによって 1000 の表記が異なるためです。)</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Each parameter in the <bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept> array gets the value in the corresponding element in the <bpt id="p2">&lt;c&gt;</bpt>args<ept id="p2">&lt;/c&gt;</ept> array.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept> 配列の各パラメーターは、<bpt id="p2">&lt;c&gt;</bpt>args<ept id="p2">&lt;/c&gt;</ept> 配列内の対応する要素の値を取得します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If the length of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> is greater than the length of <bpt id="p2">&lt;c&gt;</bpt>namedParameters<ept id="p2">&lt;/c&gt;</ept>, the remaining argument values are passed in order.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> の長さが <bpt id="p2">&lt;c&gt;</bpt>namedParameters<ept id="p2">&lt;/c&gt;</ept> の長さを超える場合は、残った引数の値が順に渡されます。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Invokes the specified member.</source>
          <target state="translated">指定したメンバーを呼び出します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</source>
          <target state="translated">呼び出すメソッドはアクセス可能でなければならず、指定したバインダーと呼び出し属性の制約下で、指定された引数リストとの最も具体的な一致を提供する必要があります。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Returns the return value of the invoked member.</source>
          <target state="translated">呼び出されたメンバーの戻り値を返します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>You can retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">使用して型を取得する<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The object to test.</source>
          <target state="translated">テストするオブジェクト。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Gets a value that indicates whether a specified <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> object can be assigned to this object.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> オブジェクトをこのオブジェクトに割り当てることができるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeInfo" /&gt;</ph> can be assigned to this object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="typeInfo" /&gt;</ph> をこのオブジェクトに割り当てることができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このオブジェクトが構築ジェネリック型を表している場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the custom attributes are applied.</source>
          <target state="translated">カスタム属性が適用される <ph id="ph1">&lt;see langword="Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Checks if the specified custom attribute type is defined.</source>
          <target state="translated">指定されたカスタム属性の型が定義されているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instance of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> is defined on this member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このメンバーに <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> のインスタンスが 1 つ以上定義されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> and call <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> on the returned <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">この問題を回避するには、確認するには終了型のカスタム属性が定義されているかどうかは取得型を使用して、<ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph>を呼び出すと<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph>で返された<ph id="ph3">&lt;xref:System.Type&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">このメソッドは、不完全な型では現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing an array of the current type.</source>
          <target state="translated">現在の型の配列を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing a one-dimensional array of the current type, with a lower bound of zero.</source>
          <target state="translated">下限を 0 に設定して現在の型の 1 次元配列を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing a one-dimensional array of the current type, with a lower bound of zero.</source>
          <target state="translated">下限を 0 に設定して現在の型の 1 次元配列を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>The number of dimensions for the array.</source>
          <target state="translated">配列の次元数。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>This number must be less than or equal to 32.</source>
          <target state="translated">この数値は 32 以下である必要があります。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing an array of the current type, with the specified number of dimensions.</source>
          <target state="translated">次元数を指定して現在の型の配列を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>An object representing an array of the current type, with the specified number of dimensions.</source>
          <target state="translated">次元数を指定して現在の型の配列を表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> が 1 未満です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current type when passed as a <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> parameter (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> parameter in Visual Basic).</source>
          <target state="translated"><bpt id="p1">**</bpt>ref<ept id="p1">**</ept> パラメーター (Visual Basic の場合は <bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> パラメーター) として渡されるときに現在の型を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current type when passed as a <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> parameter (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> parameter in Visual Basic).</source>
          <target state="translated"><bpt id="p1">**</bpt>ref<ept id="p1">**</ept> パラメーター (Visual Basic の場合は <bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> パラメーター) として渡されるときに現在の型を表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current type.</source>
          <target state="translated">現在の型へのポインターを表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current type.</source>
          <target state="translated">現在の型へのポインターを表す <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>Retrieves the dynamic module that contains this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> 定義を含む動的モジュールを取得します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>The dynamic module that contains this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> 定義を含む動的モジュール。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Module`</ph> property to reference the parent module of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード サンプルの使用を示します、<ph id="ph1">`Module`</ph>プロパティ、現在の親モジュールの参照を<ph id="ph2">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>Returns the name of this enum.</source>
          <target state="translated">この列挙型の名前を返します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>The name of this enum.</source>
          <target state="translated">この列挙型の名前。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Name`</ph> property to reference the name of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード サンプルの使用を示します、 <ph id="ph1">`Name`</ph> 、現在の名前を参照するプロパティ<ph id="ph2">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>Returns the namespace of this enum.</source>
          <target state="translated">この列挙型の名前空間を返します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>The namespace of this enum.</source>
          <target state="translated">この列挙型の名前空間。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Namespace`</ph> property to reference the associated namespace of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">次のコード サンプルの使用を示します、<ph id="ph1">`Namespace`</ph>プロパティ、現在の関連付けられた名前空間の参照を<ph id="ph2">`EnumBuilder`</ph>です。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
          <source>Returns the type that was used to obtain this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> を取得するために使用した型を返します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
          <source>The type that was used to obtain this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> を取得するために使用した型。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Sets custom attributes for this constructor.</source>
          <target state="translated">このコンストラクターのカスタム属性を設定します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class to define the custom attribute.</source>
          <target state="translated">カスタム属性を定義するヘルパー クラスのインスタンス。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Sets a custom attribute using a custom attribute builder.</source>
          <target state="translated">カスタム属性ビルダーを使用して、カスタム属性を設定します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>, passing a <ph id="ph3">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph>.</source>
          <target state="translated">次のコード サンプルは、の使用方法を示します<ph id="ph1">`SetCustomAttribute`</ph>のコンテキストで<ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>渡す、<ph id="ph3">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">カスタム属性のコンストラクター。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attributes.</source>
          <target state="translated">属性を表すバイト blob。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Sets a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id="ph1">`binaryAttribute`</ph>.</source>
          <target state="translated">書式設定する方法の詳細については、ECMA Partition II ドキュメント内のメタデータ仕様を参照してください<ph id="ph1">`binaryAttribute`</ph>です。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">ドキュメントはオンラインで入手できます。MSDN の「<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>」 (ECMA の C# および共通言語基盤の標準規格) と、ECMA のインターナショナル Web サイトにある「<bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>, passing a byte blob.</source>
          <target state="translated">次のコード サンプルは、の使用方法を示します<ph id="ph1">`SetCustomAttribute`</ph>のコンテキストで<ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>バイトの blob を渡すことです。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> or <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> または <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL にする必要があります。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">マッピング対象として渡される名前の配列。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">マッピングされる名前のカウント。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">名前を解釈するロケール コンテキスト。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">返される型情報。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">型情報のロケール ID。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">要求された型情報オブジェクトへのポインターを取得します。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetTypeInfo`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">メンバーを識別します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL にする必要があります。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">引数を解釈する対象のロケール コンテキスト。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">呼び出しのコンテキストを記述するフラグ。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">結果が格納される場所へのポインター。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">例外情報を格納する構造体へのポインター。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">エラーが存在する最初の引数のインデックス。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">詳細については<ph id="ph1">`IDispatch::Invoke`</ph>、MSDN ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">このメソッドは COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> インターフェイスを使用して遅延バインディングで呼び出されます。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>Retrieves the internal handle for this enum.</source>
          <target state="translated">この列挙型の内部ハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>The internal handle for this enum.</source>
          <target state="translated">この列挙型の内部ハンドル。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>You can retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">使用して型を取得する<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>取得した型のリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>Use this handle to access the underlying metadata handle.</source>
          <target state="translated">基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>This property is not currently supported.</source>
          <target state="translated">このプロパティは現在サポートされていません。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.TypeToken">
          <source>Returns the internal metadata type token of this enum.</source>
          <target state="translated">この列挙型の内部メタデータ型トークンを返します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeToken">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeToken">
          <source>The type token of this enum.</source>
          <target state="translated">この列挙型の型トークンです。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
          <source>Returns the underlying field for this enum.</source>
          <target state="translated">この列挙型の基になるフィールドを返します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
          <source>The underlying field for this enum.</source>
          <target state="translated">この列挙型の基になるフィールド。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
          <source>Returns the underlying system type for this enum.</source>
          <target state="translated">この列挙型の基になるシステム型を返します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
          <source>Returns the underlying system type.</source>
          <target state="translated">基になるシステム型を返します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>