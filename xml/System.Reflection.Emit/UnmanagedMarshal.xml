<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMarshal.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac546fc4e13279b8ca823d2162a58c8f9ff13114e65.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46fc4e13279b8ca823d2162a58c8f9ff13114e65</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Represents the class that describes how to marshal a field from managed to unmanaged code.</source>
          <target state="translated">マネージ コードからアンマネージ コードにフィールドをマーシャリングする方法を記述するクラスを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The code example shows the workaround for this obsolete type.</source>
          <target state="translated">コード例では、この旧式の型の回避策を示します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.</source>
          <target state="translated">マーシャ リングは、リモート プロシージャ コールを確立するためのパッケージ化とアンパッケージ化パラメーターのプロセスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.</source>
          <target state="translated">、マーシャ リング中にフィールドをマネージ型の形式が、対応するアンマネージ型の形式と異なる場合に形式変換を行うこともできます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>For example, you might want to marshal a <ph id="ph1">`String`</ph> type as an unmanaged BSTR.</source>
          <target state="translated">マーシャ リングするなど、<ph id="ph1">`String`</ph>アンマネージ BSTR と型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Some format conversions are handled automatically by the runtime.</source>
          <target state="translated">いくつかの形式の変換は、ランタイムによって自動的に処理されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>To override the default behavior, you must use the <ph id="ph1">`UnmanagedMarshal`</ph> class to define the format conversion.</source>
          <target state="translated">既定の動作をオーバーライドするには、使用する必要があります、<ph id="ph1">`UnmanagedMarshal`</ph>形式変換を定義するクラス。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The following code example shows replacement code for the obsolete <ph id="ph1">&lt;xref:System.Reflection.Emit.UnmanagedMarshal&gt;</ph> type.</source>
          <target state="translated">次のコード例は、古い形式に置換コードを示しています<ph id="ph1">&lt;xref:System.Reflection.Emit.UnmanagedMarshal&gt;</ph>型です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The example emits a single-module assembly named <ph id="ph1">`EmitMarshalAs.dll`</ph>, containing a type named <ph id="ph2">`Sample`</ph>.</source>
          <target state="translated">例では、という名前の単一モジュール アセンブリの出力<ph id="ph1">`EmitMarshalAs.dll`</ph>、という名前の型を含む<ph id="ph2">`Sample`</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The type has a method named <ph id="ph1">`Test`</ph>, with one parameter of type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">型のという名前のメソッドが<ph id="ph1">`Test`</ph>、型の 1 つのパラメーターを持つ<ph id="ph2">&lt;xref:System.String&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The code example applies the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> with <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType&gt;</ph> to the parameter.</source>
          <target state="translated">コード例では適用、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>で<ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType&gt;</ph>パラメーターにします。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the emitted assembly and observe that the parameter is marked <ph id="ph1">`marshal(bstr)`</ph>.</source>
          <target state="translated">使用することができます、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>生成のアセンブリを調べるし、パラメーターをマークすることを確認する<ph id="ph1">`marshal(bstr)`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>Gets an unmanaged base type.</source>
          <target state="translated">アンマネージ基本型を取得します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>This property is read-only.</source>
          <target state="translated">このプロパティは読み取り専用です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>An <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>The unmanaged type is not an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> or a <ph id="ph2">&lt;see langword="SafeArray" /&gt;</ph>.</source>
          <target state="translated">アンマネージ型が <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> または <ph id="ph2">&lt;see langword="SafeArray" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The number of elements in the fixed-length array.</source>
          <target state="translated">固定長の配列の要素数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</source>
          <target state="translated">アンマネージ コードにマーシャリングする固定長の配列 (ByValArray) を指定します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The <ph id="ph1">`DefineByValArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineByValArray`</ph>メソッドは、単純なネイティブ マーシャ リングではありません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">引数が単純なネイティブ型ではありません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The number of elements in the fixed array buffer.</source>
          <target state="translated">固定長の配列バッファーの要素数。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</source>
          <target state="translated">アンマネージ コードにマーシャリングする固定長の配列バッファー (ByValTStr) の文字列を指定します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The <ph id="ph1">`DefineByValStr`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineByValStr`</ph>メソッドは、単純なネイティブ マーシャ リングではありません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">引数が単純なネイティブ型ではありません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The unmanaged type to which to marshal the array.</source>
          <target state="translated">配列をマーシャリングする先のアンマネージ型。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> to marshal to unmanaged code.</source>
          <target state="translated">アンマネージ コードにマーシャリングする <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The length of an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> is determined at runtime by the size of the actual marshaled array.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> の長さは、実際にマーシャリングされた配列のサイズによって実行時に決定されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">`DefineLPArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineLPArray`</ph>メソッドは、単純なネイティブ マーシャ リングではありません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">引数が単純なネイティブ型ではありません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The base type or the <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> of each element of the array.</source>
          <target state="translated">配列の各要素の基本型または <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies a <ph id="ph1">&lt;see langword="SafeArray" /&gt;</ph> to marshal to unmanaged code.</source>
          <target state="translated">アンマネージ コードにマーシャリングする <ph id="ph1">&lt;see langword="SafeArray" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">`DefineSafeArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineSafeArray`</ph>メソッドは、単純なネイティブ マーシャ リングではありません。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">引数が単純なネイティブ型ではありません。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The unmanaged type to which the type is to be marshaled.</source>
          <target state="translated">型をマーシャリングする先のアンマネージ型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies a given type that is to be marshaled to unmanaged code.</source>
          <target state="translated">アンマネージ コードにマーシャリングする型を指定します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> passed to this method must be a simple native type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph>このメソッドに渡される単純なネイティブ型でなければなりません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>None of the following values may be used: <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">次の値のいずれも使用することがあります: <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType&gt;</ph>、 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType&gt;</ph>、 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType&gt;</ph>、 <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType&gt;</ph>、または<ph id="ph5">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using this method.</source>
          <target state="translated">このメソッドを使用してアンマネージ マーシャ リングの構成要素のみが可能です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">引数が単純なネイティブ型ではありません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>Gets a number element.</source>
          <target state="translated">要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>This property is read-only.</source>
          <target state="translated">このプロパティは読み取り専用です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>An integer indicating the element count.</source>
          <target state="translated">要素数を示す整数。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>There is an <ph id="ph1">`ElementCount`</ph> only if there is a <ph id="ph2">`NativeTypeFixedArray`</ph>.</source>
          <target state="translated"><ph id="ph1">`ElementCount`</ph>がある場合にのみ、<ph id="ph2">`NativeTypeFixedArray`</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>The argument is not an unmanaged element count.</source>
          <target state="translated">引数がアンマネージ要素数ではありません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>Indicates an unmanaged type.</source>
          <target state="translated">アンマネージ型を示します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>This property is read-only.</source>
          <target state="translated">このプロパティは読み取り専用です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.UnmanagedType" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.UnmanagedType" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>The <ph id="ph1">`GetUnmanagedType`</ph> property is an accessor function for the native type.</source>
          <target state="translated"><ph id="ph1">`GetUnmanagedType`</ph>プロパティは、ネイティブ型のアクセサー関数。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>Gets a GUID.</source>
          <target state="translated">グローバル一意識別子 (GUID: Globally Unique Indentifier) を取得します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property is read-only.</source>
          <target state="translated">このプロパティは読み取り専用です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property always returns Guid.Empty.</source>
          <target state="translated">このプロパティは、常に Guid.Empty を返します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property might be removed in a future release.</source>
          <target state="translated">このプロパティは、将来のリリースで削除する可能性があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>The argument is not a custom marshaler.</source>
          <target state="translated">引数がカスタム マーシャラーではありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>