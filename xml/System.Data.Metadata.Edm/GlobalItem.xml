<Type Name="GlobalItem" FullName="System.Data.Metadata.Edm.GlobalItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="762494ee184fbe2e9c6348b14aa098d7c19fcbaa" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70590323" /></Metadata><TypeSignature Language="C#" Value="public abstract class GlobalItem : System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GlobalItem extends System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="DocId" Value="T:System.Data.Metadata.Edm.GlobalItem" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GlobalItem&#xA;Inherits MetadataItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class GlobalItem abstract : System::Data::Metadata::Edm::MetadataItem" />
  <TypeSignature Language="F#" Value="type GlobalItem = class&#xA;    inherit MetadataItem" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Metadata.Edm.MetadataItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ac52c-101">すべての概念モデルの型およびエンティティ コンテナーの基本項目クラスを表します。</span><span class="sxs-lookup"><span data-stu-id="ac52c-101">Represents the base item class for all the  conceptual model types and entity containers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac52c-102">詳細については、「[メタデータ型の階層の概要](https://msdn.microsoft.com/library/d2b18fe0-60a5-4a5c-940d-21d07e5165d4)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ac52c-102">For more information, see [Metadata Type Hierarchy Overview](https://msdn.microsoft.com/library/d2b18fe0-60a5-4a5c-940d-21d07e5165d4).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ac52c-103">次のコード サンプルでは、接続からメタデータ ワークスペースを取得した後、そのメタデータ ワークスペースを使用して、メタデータ型階層を参照します。</span><span class="sxs-lookup"><span data-stu-id="ac52c-103">The following code sample demonstrates how to get a metadata workspace from the connection and then use that metadata workspace to browse the metadata type hierarchy.</span></span> <span data-ttu-id="ac52c-104">メタデータ ワークスペースは、メタデータの取得をサポートするランタイム サービス コンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="ac52c-104">Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.</span></span>  
  
 <span data-ttu-id="ac52c-105">このコード サンプルでは、<xref:System.Data.Metadata.Edm.DataSpace.CSpace> を使用してモデルを指定します。</span><span class="sxs-lookup"><span data-stu-id="ac52c-105">The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace.CSpace> to specify the model.</span></span> <span data-ttu-id="ac52c-106"><xref:System.Data.Metadata.Edm.DataSpace.CSpace> は、概念モデルの既定の名前を表します。</span><span class="sxs-lookup"><span data-stu-id="ac52c-106">The <xref:System.Data.Metadata.Edm.DataSpace.CSpace> represents the default name for the conceptual model.</span></span> <span data-ttu-id="ac52c-107">このコード サンプルでは、アプリケーション構成ファイルに指定されている接続文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="ac52c-107">The code sample uses the connection string that is provided in the application config file.</span></span> <span data-ttu-id="ac52c-108">アプリケーション構成ファイルの例については、「[アプリケーションでの Adventure Works オブジェクトモデル (EDM)](https://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ac52c-108">For an example of the application config file, see [Adventure Works Object Model in Applications (EDM)](https://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45).</span></span>  
  
```csharp  
using System;  
using System.Data;  
using System.Data.EntityClient;  
using System.Data.Metadata.Edm;  
using System.Collections.ObjectModel;  
  
class BrowseTypes  
{  
  static void Main()  
  {  
    try  
    {  
      // Establish a connection to the underlying data provider by  
      // using the connection string specified in the config file.  
      using (EntityConnection connection =  
             new EntityConnection("Name=AdventureworksContext"))  
      {  
         // Access the metadata workspace.  
         MetadataWorkspace workspace =   
              connection.GetMetadataWorkspace();  
         // Browse the metadata type hierarchy.  
         BrowseTypesExample(workspace);  
      }  
    }  
    catch (MetadataException exceptionMetadata)  
    {  
       Console.WriteLine("MetadataException: {0}",  
                         exceptionMetadata.Message);  
     }  
     catch (System.Data.MappingException exceptionMapping)  
     {  
        Console.WriteLine("MappingException: {0}",  
                          exceptionMapping.Message);  
     }  
  }  
  
  private static void BrowseTypesExample(MetadataWorkspace workspace)  
  {  
    // Get a collection of the GlobalItems.   
    // An GlobalItem class is the base class for   
    // the conceptual model types and entity containers.  
    ReadOnlyCollection<GlobalItem> items =   
         workspace.GetItems<GlobalItem>(DataSpace.CSpace);  
  
    // Iterate through the collection to get each item.  
    foreach (GlobalItem item in items)  
    {  
       Console.WriteLine(  
           "Item BuiltInTypeKind: {0}, Type: {1} ",   
           item.BuiltInTypeKind, item.GetType().FullName);  
  
       EntityContainer entityContainer = item as EntityContainer;  
       if (entityContainer != null)  
       {  
          Console.WriteLine(  
               "EntityContainer Name: {0}",  
               entityContainer.Name);  
          continue;  
       }  
  
       EntityType entityType = item as EntityType;  
       if (entityType != null)  
       {  
         Console.WriteLine(  
             "EntityType Name: {0}, Namespace: {1}",  
             entityType.Name, entityType.NamespaceName);  
        continue;  
       }  
  
       AssociationType associationType = item as AssociationType;  
       if (associationType != null)  
       {  
          Console.WriteLine(  
             "AssociationType Name: {0}, Namespace: {1}",  
             associationType.Name, associationType.NamespaceName);  
          continue;  
       }  
  
       PrimitiveType primType = item as PrimitiveType;  
       if (primType != null)  
       {  
         Console.WriteLine(  
             "PrimitiveType Name: {0}, Namespace: {1}",   
             primType.Name, primType.NamespaceName);  
         continue;  
       }  
  
       EdmFunction function = item as EdmFunction;  
       if (function != null)  
       {  
         Console.WriteLine(  
           "EdmFunction Name: {0}, Namespace: {1}",  
           function.Name, function.NamespaceName);  
         continue;  
       }  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
