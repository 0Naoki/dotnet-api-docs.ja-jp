<Type Name="Publish" FullName="System.EnterpriseServices.Internal.Publish">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e677652a54e1fe7544257e6b9b8855518ca4fc20" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410326" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Publish : System.EnterpriseServices.Internal.IComSoapPublisher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Publish extends System.Object implements class System.EnterpriseServices.Internal.IComSoapPublisher" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.Publish" />
  <TypeSignature Language="VB.NET" Value="Public Class Publish&#xA;Implements IComSoapPublisher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Publish : System::EnterpriseServices::Internal::IComSoapPublisher" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.Internal.IComSoapPublisher</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("d8013eef-730b-45e2-ba24-874b7242c425")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>SOAP 対応 COM+ アプリケーションのための COM インターフェイスを発行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish> .NET Framework によって内部的に使用されます。 コード内で直接使用する必要はありません。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Publish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Publish();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.EnterpriseServices.Internal.Publish" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMailBox">
      <MemberSignature Language="C#" Value="public void CreateMailBox (string RootMailServer, string MailBox, out string SmtpName, out string Domain, out string PhysicalPath, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateMailBox(string RootMailServer, string MailBox, [out] string&amp; SmtpName, [out] string&amp; Domain, [out] string&amp; PhysicalPath, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateMailBox (RootMailServer As String, MailBox As String, ByRef SmtpName As String, ByRef Domain As String, ByRef PhysicalPath As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateMailBox(System::String ^ RootMailServer, System::String ^ MailBox, [Runtime::InteropServices::Out] System::String ^ % SmtpName, [Runtime::InteropServices::Out] System::String ^ % Domain, [Runtime::InteropServices::Out] System::String ^ % PhysicalPath, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RootMailServer" Type="System.String" />
        <Parameter Name="MailBox" Type="System.String" />
        <Parameter Name="SmtpName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="Domain" Type="System.String&amp;" RefType="out" />
        <Parameter Name="PhysicalPath" Type="System.String&amp;" RefType="out" />
        <Parameter Name="Error" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="RootMailServer">ルート メール サーバーの URL。</param>
        <param name="MailBox">作成するメールボックス。</param>
        <param name="SmtpName">このメソッドが返されるときに、このパラメーターに、メールボックスが入っている SMTP (Simple Mail Transport Protocol) サーバーの名前を格納します。</param>
        <param name="Domain">このメソッドが返されるときに、このパラメーターに SMTP サーバーのドメインを格納します。</param>
        <param name="PhysicalPath">このメソッドが返されるときに、このパラメーターにメールボックスのファイル システム パスを格納します。</param>
        <param name="Error">問題が発生した場合は、このメソッドが返されるときに、このパラメーターにエラー メッセージを格納します。</param>
        <summary>指定した URL の場所に、SOAP 対応の COM+ アプリケーション メールボックスを作成します。 一部しか実装されていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完全に実装します。メールボックスは作成されません。 "COM + SOAP services SMTP パブリケーションはサポートされていません"というエラー メッセージを返します  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateVirtualRoot">
      <MemberSignature Language="C#" Value="public void CreateVirtualRoot (string Operation, string FullUrl, out string BaseUrl, out string VirtualRoot, out string PhysicalPath, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateVirtualRoot(string Operation, string FullUrl, [out] string&amp; BaseUrl, [out] string&amp; VirtualRoot, [out] string&amp; PhysicalPath, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateVirtualRoot (Operation As String, FullUrl As String, ByRef BaseUrl As String, ByRef VirtualRoot As String, ByRef PhysicalPath As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateVirtualRoot(System::String ^ Operation, System::String ^ FullUrl, [Runtime::InteropServices::Out] System::String ^ % BaseUrl, [Runtime::InteropServices::Out] System::String ^ % VirtualRoot, [Runtime::InteropServices::Out] System::String ^ % PhysicalPath, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Operation" Type="System.String" />
        <Parameter Name="FullUrl" Type="System.String" />
        <Parameter Name="BaseUrl" Type="System.String&amp;" RefType="out" />
        <Parameter Name="VirtualRoot" Type="System.String&amp;" RefType="out" />
        <Parameter Name="PhysicalPath" Type="System.String&amp;" RefType="out" />
        <Parameter Name="Error" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="Operation">実行する操作。</param>
        <param name="FullUrl">仮想ルートの完全な URL アドレス。</param>
        <param name="BaseUrl">このメソッドが返されるときに、このパラメーターにベース URL アドレスを格納します。</param>
        <param name="VirtualRoot">このメソッドが返されるときに、このパラメーターに仮想ルートの名前を格納します。</param>
        <param name="PhysicalPath">このメソッドが返されるときに、このパラメーターに仮想ルートのファイル パスを格納します。</param>
        <param name="Error">問題が発生した場合は、このメソッドが返されるときに、このパラメーターにエラー メッセージを格納します。</param>
        <summary>SOAP 対応の COM+ アプリケーションの仮想ルートを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 推奨<xref:System.EnterpriseServices.Internal.SoapServerVRoot.CreateVirtualRootEx%2A>の代わりに使用する<xref:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。  
  
 - または -  
  
 呼び出し元に、DNS 情報にアクセスするためのアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="FullUrl" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">ローカル ホスト名を解決するときにエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="FullUrl" /> が空です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたスキームが無効です。  
  
 - または -  
  
 <paramref name="FullUrl" /> には、3 つ以上の連続するスラッシュが格納されます。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたパスワードが無効です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたホスト名が無効です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたファイル名が無効です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">リモート処理インフラストラクチャを構成します。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteMailBox">
      <MemberSignature Language="C#" Value="public void DeleteMailBox (string RootMailServer, string MailBox, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteMailBox(string RootMailServer, string MailBox, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteMailBox (RootMailServer As String, MailBox As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteMailBox(System::String ^ RootMailServer, System::String ^ MailBox, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RootMailServer" Type="System.String" />
        <Parameter Name="MailBox" Type="System.String" />
        <Parameter Name="Error" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="RootMailServer">ルート メール サーバーの URL。</param>
        <param name="MailBox">削除対象のメールボックス。</param>
        <param name="Error">問題が発生した場合は、このメソッドが返されるときに、このパラメーターにエラー メッセージを格納します。</param>
        <summary>指定した URL にある SOAP 対応の COM+ アプリケーションのメール ボックスを削除します。 一部しか実装されていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完全に実装されている、メールボックスは削除されません。 "COM + SOAP services SMTP パブリケーションはサポートされていません"というエラー メッセージを返します  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteVirtualRoot">
      <MemberSignature Language="C#" Value="public void DeleteVirtualRoot (string RootWebServer, string FullUrl, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteVirtualRoot(string RootWebServer, string FullUrl, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteVirtualRoot (RootWebServer As String, FullUrl As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteVirtualRoot(System::String ^ RootWebServer, System::String ^ FullUrl, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RootWebServer" Type="System.String" />
        <Parameter Name="FullUrl" Type="System.String" />
        <Parameter Name="Error" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="RootWebServer">ルート Web サーバー。</param>
        <param name="FullUrl">仮想ルートの完全な URL アドレス。</param>
        <param name="Error">問題が発生した場合は、このメソッドが返されるときに、このパラメーターにエラー メッセージを格納します。</param>
        <summary>SOAP 対応の COM+ アプリケーションの仮想ルートを削除します。 一部しか実装されていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 機能は、<xref:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot%2A>はまだありません。  
  
> [!CAUTION]
>  現在、このメソッドは、エラーがなかったを返しますが、仮想ルートは削除されません。  
  
 機能が使用可能になるときに、推奨される方法になります<xref:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GacInstall">
      <MemberSignature Language="C#" Value="public void GacInstall (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GacInstall(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GacInstall(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GacInstall (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GacInstall(System::String ^ AssemblyPath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">アセンブリのファイル システム パス。</param>
        <summary>グローバル アセンブリ キャッシュにアセンブリをインストールします。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GacRemove">
      <MemberSignature Language="C#" Value="public void GacRemove (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GacRemove(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GacRemove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GacRemove (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GacRemove(System::String ^ AssemblyPath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">アセンブリのファイル システム パス。</param>
        <summary>グローバル アセンブリ キャッシュからアセンブリを削除します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。  
  
 - または -  
  
 呼び出し元に、パス検索アクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="AssemblyPath" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="AssemblyPath" /> が空です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="AssemblyPath" /> が見つかりません。</exception>
        <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="AssemblyPath" /> は正しいアセンブリではありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyNameForCache">
      <MemberSignature Language="C#" Value="public void GetAssemblyNameForCache (string TypeLibPath, out string CachePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAssemblyNameForCache(string TypeLibPath, [out] string&amp; CachePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetAssemblyNameForCache (TypeLibPath As String, ByRef CachePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetAssemblyNameForCache(System::String ^ TypeLibPath, [Runtime::InteropServices::Out] System::String ^ % CachePath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TypeLibPath" Type="System.String" />
        <Parameter Name="CachePath" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="TypeLibPath">タイプ ライブラリを格納しているファイルへのパス。</param>
        <param name="CachePath">このメソッドが返されるときに、このパラメーターには SoapCache ディレクトリの名前を格納します。</param>
        <summary>SoapCache ディレクトリ内の厳密な名前付き、署名付きの生成済みアセンブリの完全パスを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アンマネージ COM + コンポーネントの SOAP エンドポイントとして .NET リモート処理を介して公開する、プロキシは、アンマネージ コンポーネントを .NET Framework を使用できるようにに生成する必要があります。 これは、プログラムでタイプ ライブラリ インポーター (Tlbimp.exe) と同じ手順を実行することで、[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]プロキシ メタデータ アセンブリにアンマネージ COM + のタイプ ライブラリを変換するために使用するツールです。 クライアントが成功する SOAP 経由でライセンス認証、ただし、クライアントとサーバーのマシン必要があります共有同じ厳密な名前の署名済みメタデータ プロキシ。 このため、アンマネージの COM + コンポーネント、管理対象のプロキシ アセンブリが生成されたときに、厳密な名前のキーが生成し、プロキシ アセンブリに署名するために使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="TypeLibPath" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">ファイル名は空で、空白のみで構成されているか、正しくない文字を含んでいます。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="TypeLibPath" /> へのアクセスが拒否されました。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="TypeLibPath" /> の文字列の中に、コロン (:) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを読み取る。 関連する列挙。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetClientPhysicalPath">
      <MemberSignature Language="C#" Value="public static string GetClientPhysicalPath (bool CreateDir);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetClientPhysicalPath(bool CreateDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetClientPhysicalPath (CreateDir As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetClientPhysicalPath(bool CreateDir);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CreateDir" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="CreateDir">ディレクトリを作成する場合は <see langword="true" /> に設定し、パスは返すけれどもディレクトリを作成しない場合は <see langword="false" /> に設定します。</param>
        <summary>クライアントの構成ファイルを格納するディレクトリのパスを返します。</summary>
        <returns>構成ファイルを格納するディレクトリのパス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリを作成"\com\SOAPAssembly\\"システム ディレクトリの下。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeNameFromProgId">
      <MemberSignature Language="C#" Value="public string GetTypeNameFromProgId (string AssemblyPath, string ProgId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeNameFromProgId(string AssemblyPath, string ProgId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeNameFromProgId (AssemblyPath As String, ProgId As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeNameFromProgId(System::String ^ AssemblyPath, System::String ^ ProgId);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
        <Parameter Name="ProgId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">アセンブリのファイル システム パス。</param>
        <param name="ProgId">クラスのプログラム ID。</param>
        <summary>アセンブリの ProgID に一致する型名を返します。</summary>
        <returns>ProgID と一致する型名。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ParseUrl">
      <MemberSignature Language="C#" Value="public static void ParseUrl (string FullUrl, out string BaseUrl, out string VirtualRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParseUrl(string FullUrl, [out] string&amp; BaseUrl, [out] string&amp; VirtualRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ParseUrl (FullUrl As String, ByRef BaseUrl As String, ByRef VirtualRoot As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ParseUrl(System::String ^ FullUrl, [Runtime::InteropServices::Out] System::String ^ % BaseUrl, [Runtime::InteropServices::Out] System::String ^ % VirtualRoot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FullUrl" Type="System.String" />
        <Parameter Name="BaseUrl" Type="System.String&amp;" RefType="out" />
        <Parameter Name="VirtualRoot" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="FullUrl">仮想ルートの完全な URL アドレス。</param>
        <param name="BaseUrl">このメソッドが返されるときに、このパラメーターにベース URL アドレスを格納します。</param>
        <param name="VirtualRoot">このメソッドが返されるときに、このパラメーターに仮想ルートの名前を格納します。</param>
        <summary>URL を解析し、ベース URL と仮想ルート部分を返します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="FullUrl" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">ローカル ホスト名を解決するときにエラーが発生しました。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、DNS 情報にアクセスするためのアクセス許可がありません。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="FullUrl" /> が空です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたスキームが無効です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に含まれているスラッシュが多すぎます。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたパスワードが無効です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたホスト名が無効です。  
  
 - または -  
  
 <paramref name="FullUrl" /> に指定されたファイル名が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ProcessClientTlb">
      <MemberSignature Language="C#" Value="public void ProcessClientTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, out string AssemblyName, out string TypeName, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessClientTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, [out] string&amp; AssemblyName, [out] string&amp; TypeName, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessClientTlb (ProgId As String, SrcTlbPath As String, PhysicalPath As String, VRoot As String, BaseUrl As String, Mode As String, Transport As String, ByRef AssemblyName As String, ByRef TypeName As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessClientTlb(System::String ^ ProgId, System::String ^ SrcTlbPath, System::String ^ PhysicalPath, System::String ^ VRoot, System::String ^ BaseUrl, System::String ^ Mode, System::String ^ Transport, [Runtime::InteropServices::Out] System::String ^ % AssemblyName, [Runtime::InteropServices::Out] System::String ^ % TypeName, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="SrcTlbPath" Type="System.String" />
        <Parameter Name="PhysicalPath" Type="System.String" />
        <Parameter Name="VRoot" Type="System.String" />
        <Parameter Name="BaseUrl" Type="System.String" />
        <Parameter Name="Mode" Type="System.String" />
        <Parameter Name="Transport" Type="System.String" />
        <Parameter Name="AssemblyName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="TypeName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="Error" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ProgId">クラスのプログラム ID。</param>
        <param name="SrcTlbPath">タイプ ライブラリを格納しているファイルへのパス。</param>
        <param name="PhysicalPath">Web アプリケーション ディレクトリ。</param>
        <param name="VRoot">仮想ルートの名前。</param>
        <param name="BaseUrl">仮想ルートを表すベース URL。</param>
        <param name="Mode">アクティベーション モード。</param>
        <param name="Transport">使用しません。 このパラメーターに <see langword="null" /> を指定します。</param>
        <param name="AssemblyName">このメソッドが返されるときに、このパラメーターにアセンブリの表示名を格納します。</param>
        <param name="TypeName">このメソッドが返されるときに、このパラメーターにアセンブリの完全修飾型名を格納します。</param>
        <param name="Error">問題が発生した場合は、このメソッドが返されるときに、このパラメーターにエラー メッセージを格納します。</param>
        <summary>クライアントのタイプ ライブラリを処理し、クライアントに構成ファイルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、リモート処理構成ファイルを生成するクライアント プロキシのインポート時に使用されます。  
  
 場合、`Mode`パラメーターが"wellknownobject"または空の文字列 ("")、既知のオブジェクトが想定されます。それ以外の場合、クライアントのライセンス認証が使用されます。  
  
 推奨<xref:System.EnterpriseServices.Internal.SoapClientImport.ProcessClientTlbEx%2A>の代わりに使用する<xref:System.EnterpriseServices.Internal.Publish.ProcessClientTlb%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessServerTlb">
      <MemberSignature Language="C#" Value="public void ProcessServerTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, out string strAssemblyName, out string TypeName, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessServerTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, [out] string&amp; strAssemblyName, [out] string&amp; TypeName, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessServerTlb (ProgId As String, SrcTlbPath As String, PhysicalPath As String, Operation As String, ByRef strAssemblyName As String, ByRef TypeName As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessServerTlb(System::String ^ ProgId, System::String ^ SrcTlbPath, System::String ^ PhysicalPath, System::String ^ Operation, [Runtime::InteropServices::Out] System::String ^ % strAssemblyName, [Runtime::InteropServices::Out] System::String ^ % TypeName, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="SrcTlbPath" Type="System.String" />
        <Parameter Name="PhysicalPath" Type="System.String" />
        <Parameter Name="Operation" Type="System.String" />
        <Parameter Name="strAssemblyName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="TypeName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="Error" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ProgId">クラスのプログラム ID。</param>
        <param name="SrcTlbPath">タイプ ライブラリを格納しているファイルへのパス。</param>
        <param name="PhysicalPath">Web アプリケーション ディレクトリ。</param>
        <param name="Operation">実行する操作。</param>
        <param name="strAssemblyName">このメソッドが返されるときに、このパラメーターにアセンブリの表示名を格納します。</param>
        <param name="TypeName">このメソッドが返されるときに、このパラメーターにアセンブリの完全修飾型名を格納します。</param>
        <param name="Error">問題が発生した場合は、このメソッドが返されるときに、このパラメーターにエラー メッセージを格納します。</param>
        <summary>サーバーのタイプ ライブラリを処理し、Web.config ファイルおよび Default.disco ファイルにコンポーネント エントリを追加または削除します。 必要に応じてプロキシを生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish.ProcessServerTlb%2A> 探索ファイルと、タイプ ライブラリ内のコンポーネントの web.config ファイルにエントリを追加し、またはアンマネージ コンポーネントの bin ディレクトリにコピーし、プロキシが生成されます。 場合`Operation`equals"、"し、削除、Web.config ファイルと値ファイルからコンポーネントのエントリが削除されます。  
  
 推奨<xref:System.EnterpriseServices.Internal.SoapServerTlb.AddServerTlb%2A>と<xref:System.EnterpriseServices.Internal.SoapServerTlb.DeleteServerTlb%2A>の代わりに使用する<xref:System.EnterpriseServices.Internal.Publish.ProcessServerTlb%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。</exception>
        <exception cref="T:System.EnterpriseServices.ServicedComponentException">
          <paramref name="SrcTlbPath" /> パラメーターが scrobj.dll を参照しました。そのため、スクリプト コンポーネントの SOAP 発行はサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードへのアクセスに必要なアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public void RegisterAssembly (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAssembly(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterAssembly (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAssembly(System::String ^ AssemblyPath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">アセンブリのファイル システム パス。</param>
        <summary>COM 相互運用のアセンブリを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish.RegisterAssembly%2A> アセンブリ登録ツール (Regasm.exe) を使用して、作成可能なクラスをアセンブリに登録します。 詳細については、次を参照してください。 [Regasm.exe (アセンブリ登録ツール)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.EnterpriseServices.RegistrationException">入力アセンブリには厳密な名前がありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。  
  
 - または -  
  
 "file://" 以外で始まるコードベースが指定されましたが、必要な <see cref="T:System.Net.WebPermission" /> がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="AssemblyPath" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="AssemblyPath" /> が見つかりません。またはファイル名の拡張子が指定されていません。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="AssemblyPath" /> は正しいアセンブリではありません。</exception>
        <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが 2 回読み込まれ、2 つの異なる証拠が出されました。あるいは、アセンブリ名が MAX_PATH の文字数を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> でマークされたメソッドが <see langword="static" /> ではありません。  
  
 - または -  
  
 階層の特定のレベルに、<see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> でマークされた複数のメソッドがあります。  
  
 - または -  
  
 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> でマークされたメソッドのシグネチャが有効ではありません。</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリにアクセスする権限です。 関連する列挙。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">現在のディレクトリを決定します。 関連する列挙。 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">file:// で始まる URI を読み取る。 関連する列挙。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Net.WebPermission">file:// で始まらないする URI を読み取る。</permission>
      </Docs>
    </Member>
    <Member MemberName="UnRegisterAssembly">
      <MemberSignature Language="C#" Value="public void UnRegisterAssembly (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnRegisterAssembly(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnRegisterAssembly (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnRegisterAssembly(System::String ^ AssemblyPath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">アセンブリのファイル システム パス。</param>
        <summary>COM 相互運用機能アセンブリを登録解除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish.UnRegisterAssembly%2A> Regasm.exe を使用して、アセンブリの作成可能なクラスの登録を解除します。 詳細については、次を参照してください。 [Regasm.exe (アセンブリ登録ツール)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。  
  
 - または -  
  
 "file://" 以外で始まるコードベースが指定されましたが、必要な <see cref="T:System.Net.WebPermission" /> がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="AssemblyPath" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="AssemblyPath" /> が見つかりません。またはファイル名の拡張子が指定されていません。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="AssemblyPath" /> は正しいアセンブリではありません。</exception>
        <exception cref="T:System.IO.FileLoadException">アセンブリまたはモジュールが 2 回読み込まれ、2 つの異なる証拠が出されました。あるいは、アセンブリ名が MAX_PATH の文字数を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> でマークされたメソッドが <see langword="static" /> ではありません。  
  
 - または -  
  
 階層の特定のレベルに、<see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> でマークされた複数のメソッドがあります。  
  
 - または -  
  
 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> でマークされたメソッドのシグネチャが有効ではありません。</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリにアクセスする権限です。 関連する列挙。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">現在のディレクトリを決定します。 関連する列挙。 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">file:// で始まる URI を読み取る。 関連する列挙。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Net.WebPermission">file:// で始まらないする URI を読み取る。</permission>
      </Docs>
    </Member>
  </Members>
</Type>