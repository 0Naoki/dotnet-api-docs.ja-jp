<Type Name="Complex" FullName="System.Numerics.Complex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1d09a8a36ecb9900234c91bab02a146b88a0f72a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36471955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Complex : IEquatable&lt;System.Numerics.Complex&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Complex extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Numerics.Complex&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Complex" />
  <TypeSignature Language="VB.NET" Value="Public Structure Complex&#xA;Implements IEquatable(Of Complex), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Complex : IEquatable&lt;System::Numerics::Complex&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type Complex = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d4300-101">複素数を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4300-101">Represents a complex number.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-102">複素数の実数部と虚数部で構成される数値です。</span><span class="sxs-lookup"><span data-stu-id="d4300-102">A complex number is a number that comprises a real number part and an imaginary number part.</span></span> <span data-ttu-id="d4300-103">複素数 z は通常、z のフォームで書き込まれ = x + イ語、場所*x*と*y*は実数と*すれば*プロパティを持つ仮想的な単位は、 *i*<sup>2</sup> -1 を = です。</span><span class="sxs-lookup"><span data-stu-id="d4300-103">A complex number z is usually written in the form z = x + yi, where *x* and *y* are real numbers, and *i* is the imaginary unit that has the property *i*<sup>2</sup> = -1.</span></span> <span data-ttu-id="d4300-104">複素数の実数部として表されます*x*、によっての複素数の虚数部が表されます*y*です。</span><span class="sxs-lookup"><span data-stu-id="d4300-104">The real part of the complex number is represented by *x*, and the imaginary part of the complex number is represented by *y*.</span></span>  
  
 <span data-ttu-id="d4300-105"><xref:System.Numerics.Complex>型はデカルト座標系 (実際、虚数部) を使用してインスタンス化して、複素数を操作するときにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-105">The <xref:System.Numerics.Complex> type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers.</span></span> <span data-ttu-id="d4300-106">複素数は、システムでは 2 次元座標、複素平面と呼ばれるポイントとして表現できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-106">A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane.</span></span> <span data-ttu-id="d4300-107">複素数の実数部が x 軸 (水平軸) に配置されているし、虚数部が、y 軸 (縦軸) に配置されています。</span><span class="sxs-lookup"><span data-stu-id="d4300-107">The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis).</span></span>  
  
 <span data-ttu-id="d4300-108">絶対値を使用して極座標グラフの座標系、極座標のに基づいて複素平面内の任意の時点を表現することできますも、ポイントは、2 つの数値によって特徴付けられます。</span><span class="sxs-lookup"><span data-stu-id="d4300-108">Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system., In polar coordinates, a point is characterized by two numbers:</span></span>  
  
-   <span data-ttu-id="d4300-109">原点からの距離である大きさ (つまり、0, 0、または x 軸と y 軸の交差ポイント)。</span><span class="sxs-lookup"><span data-stu-id="d4300-109">Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).</span></span>  
  
-   <span data-ttu-id="d4300-110">そのはフェーズを実際の軸と原点から点を結ぶ直線の角度。</span><span class="sxs-lookup"><span data-stu-id="d4300-110">Its phase, which is the angle between the real axis and the line drawn from the origin to the point.</span></span>  
  
## <a name="instantiating-a-complex-number"></a><span data-ttu-id="d4300-111">複素数をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d4300-111">Instantiating a Complex Number</span></span>  
 <span data-ttu-id="d4300-112">次の方法のいずれかの値から複素数へ値を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-112">You can assign a value to a complex number in one of the following ways:</span></span>  
  
-   <span data-ttu-id="d4300-113">2 つを渡すことによって<xref:System.Double>コンス トラクターの値。</span><span class="sxs-lookup"><span data-stu-id="d4300-113">By passing two <xref:System.Double> values to its constructor.</span></span> <span data-ttu-id="d4300-114">最初の値は、複素数の実数部を表し、2 番目の値がその虚数部を表します。</span><span class="sxs-lookup"><span data-stu-id="d4300-114">The first value represents the real part of the complex number, and the second value represents its imaginary part.</span></span> <span data-ttu-id="d4300-115">これらの値は、2 次元のデカルト座標システム内の複素数の位置を表します。</span><span class="sxs-lookup"><span data-stu-id="d4300-115">These values represent the position of the complex number in the two-dimensional Cartesian coordinate system.</span></span>  
  
-   <span data-ttu-id="d4300-116">静的なを呼び出すことによって (`Shared` Visual Basic で)<xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>極座標から複素数を作成するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d4300-116">By calling the static (`Shared` in Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType> method to create a complex number from its polar coordinates.</span></span>  
  
-   <span data-ttu-id="d4300-117">割り当てることによって、 <xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、 <xref:System.Single>、または<xref:System.Double>値を<xref:System.Numerics.Complex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-117">By assigning a <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, or <xref:System.Double> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="d4300-118">複素数の実数部の値になります、虚数部が 0 と等しい。</span><span class="sxs-lookup"><span data-stu-id="d4300-118">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="d4300-119">キャスト (c#) または (Visual Basic) の変換によって、<xref:System.Decimal>または<xref:System.Numerics.BigInteger>値を<xref:System.Numerics.Complex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-119">By casting (in C#) or converting (in Visual Basic) a <xref:System.Decimal> or <xref:System.Numerics.BigInteger> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="d4300-120">複素数の実数部の値になります、虚数部が 0 と等しい。</span><span class="sxs-lookup"><span data-stu-id="d4300-120">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="d4300-121">メソッドまたはに演算子によって返される複素数を割り当てることによって、<xref:System.Numerics.Complex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-121">By assigning the complex number that is returned by a method or operator to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="d4300-122">たとえば、<xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType>を 2 つの複素数の和である複素数を返す静的メソッドは、および<xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType>演算子が 2 つの複素数を加算し、結果を返します。</span><span class="sxs-lookup"><span data-stu-id="d4300-122">For example, <xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> is a static method that returns a complex number that is the sum of two complex numbers, and the <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> operator adds two complex numbers and returns the result.</span></span>  
  
 <span data-ttu-id="d4300-123">次の例では、各値から複素数への値を割り当てることのこれら 5 つの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-123">The following example demonstrates each of these five ways of assigning a value to a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/create1.cs#2)]
 [!code-vb[System.Numerics.Complex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/create1.vb#2)]  
  
## <a name="operations-with-complex-numbers"></a><span data-ttu-id="d4300-124">複素数の操作</span><span class="sxs-lookup"><span data-stu-id="d4300-124">Operations with Complex Numbers</span></span>  
 <span data-ttu-id="d4300-125"><xref:System.Numerics.Complex> .NET Framework の構造体には、次の機能を提供するメンバーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d4300-125">The <xref:System.Numerics.Complex> structure in the .NET Framework includes members that provide the following functionality:</span></span>  
  
-   <span data-ttu-id="d4300-126">それらが等しいかどうかを決定する 2 つの複素数を比較するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d4300-126">Methods to compare two complex numbers to determine whether they are equal.</span></span>  
  
-   <span data-ttu-id="d4300-127">複素数の算術演算を実行する演算子です。</span><span class="sxs-lookup"><span data-stu-id="d4300-127">Operators to perform arithmetic operations on complex numbers.</span></span> <span data-ttu-id="d4300-128"><xref:System.Numerics.Complex> 演算子を使用すると、加算、減算、乗算、除算、および複素数の単項否定演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-128"><xref:System.Numerics.Complex> operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers.</span></span>  
  
-   <span data-ttu-id="d4300-129">複素数の他の数値の操作を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d4300-129">Methods to perform other numerical operations on complex numbers.</span></span> <span data-ttu-id="d4300-130">だけでなく 4 つの基本的な算術演算を指定した複素数を発生させる、複素数の平方根を求めるして複素数の絶対値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-130">In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number.</span></span>  
  
-   <span data-ttu-id="d4300-131">複素数の三角関数演算を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d4300-131">Methods to perform trigonometric operations on complex numbers.</span></span> <span data-ttu-id="d4300-132">たとえば、複合型で表される角度のタンジェントを計算できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-132">For example, you can calculate the tangent of an angle represented by a complex number.</span></span>  
  
 <span data-ttu-id="d4300-133">なお、ため、<xref:System.Numerics.Complex.Real%2A>と<xref:System.Numerics.Complex.Imaginary%2A>プロパティは読み取り専用、既存の値を変更することはできません<xref:System.Numerics.Complex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-133">Note that, because the <xref:System.Numerics.Complex.Real%2A> and  <xref:System.Numerics.Complex.Imaginary%2A> properties are read-only, you cannot modify the value of an existing <xref:System.Numerics.Complex> object.</span></span>  <span data-ttu-id="d4300-134">操作を実行するすべてのメソッド、<xref:System.Numerics.Complex>番号、戻り値の型の場合<xref:System.Numerics.Complex>を返す新しい<xref:System.Numerics.Complex>数。</span><span class="sxs-lookup"><span data-stu-id="d4300-134">All methods that perform an operation on a <xref:System.Numerics.Complex> number, if their return value is of type <xref:System.Numerics.Complex>, return a new <xref:System.Numerics.Complex> number.</span></span>  
  
## <a name="precision-and-complex-numbers"></a><span data-ttu-id="d4300-135">精度と複素数</span><span class="sxs-lookup"><span data-stu-id="d4300-135">Precision and Complex Numbers</span></span>  
 <span data-ttu-id="d4300-136">複素数の実数部と虚数部の部分は、次の 2 つの倍精度浮動小数点値で表されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-136">The real and imaginary parts of a complex number are represented by two double-precision floating-point values.</span></span> <span data-ttu-id="d4300-137">つまり、<xref:System.Numerics.Complex>倍精度浮動小数点値などの値には、数値演算の結果の精度が失われる可能性がします。</span><span class="sxs-lookup"><span data-stu-id="d4300-137">This means that <xref:System.Numerics.Complex> values, like double-precision floating-point values, can lose precision as a result of numerical operations.</span></span> <span data-ttu-id="d4300-138">つまり、その厳密な 2 つの等価性の比較<xref:System.Numerics.Complex>値が失敗する、2 つの値の違いは、有効桁数の損失による場合でもです。</span><span class="sxs-lookup"><span data-stu-id="d4300-138">This means that strict comparisons for equality of two <xref:System.Numerics.Complex> values may fail, even if the difference between the two values is due to a loss of precision.</span></span> <span data-ttu-id="d4300-139">詳細については、「<xref:System.Double>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-139">For more information, see <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="d4300-140">たとえば、数値の対数の指数演算を実行すると、元の番号を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d4300-140">For example, performing exponentiation on the logarithm of a number should return the original number.</span></span> <span data-ttu-id="d4300-141">しかし、場合によっては、浮動小数点値の有効桁数の損失が 2 つの値の間で若干異なります次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-141">However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#5)]
 [!code-vb[System.Numerics.Complex.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#5)]  
  
 <span data-ttu-id="d4300-142">同様に、次の例の平方根を計算する、<xref:System.Numerics.Complex>番号、32 ビット、IA64 バージョンの .NET Framework に若干異なる結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="d4300-142">Similarly, the following example, which calculates the square root of a <xref:System.Numerics.Complex> number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#6)]
 [!code-vb[System.Numerics.Complex.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#6)]  
  
## <a name="complex-numbers-infinity-and-nan"></a><span data-ttu-id="d4300-143">複素数、無限大および NaN</span><span class="sxs-lookup"><span data-stu-id="d4300-143">Complex Numbers, Infinity, and NaN</span></span>  
 <span data-ttu-id="d4300-144">複素数の実数部と虚数部の部分がによって表される<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-144">The real and imaginary parts of a complex number are represented by <xref:System.Double> values.</span></span> <span data-ttu-id="d4300-145">範囲だけでなく<xref:System.Double.MinValue?displayProperty=nameWithType>に<xref:System.Double.MaxValue?displayProperty=nameWithType>、複素数の実数部または虚数部の一部の値をとります。 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または<xref:System.Double.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-145">In addition to ranging from <xref:System.Double.MinValue?displayProperty=nameWithType> to <xref:System.Double.MaxValue?displayProperty=nameWithType>, the real or imaginary part of a complex number can have a value of <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-146"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、および<xref:System.Double.NaN?displayProperty=nameWithType>算術演算または三角関数演算ですべてを伝達します。</span><span class="sxs-lookup"><span data-stu-id="d4300-146"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType> all propagate in any arithmetic or trigonometric operation.</span></span>  
  
 <span data-ttu-id="d4300-147">次の例では、除算<xref:System.Numerics.Complex.Zero>複素数の実数部と虚数部構成の両方が生成する<xref:System.Double.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-147">In the following example, division by <xref:System.Numerics.Complex.Zero> produces a complex number whose real and imaginary parts are both <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-148">その結果、この値で乗算を実行するも生成複素数の実数部と虚数部の部分は<xref:System.Double.NaN?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="d4300-148">As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-149">同様の範囲からオーバーフローする乗算を実行する、<xref:System.Double>型が複素数の実数部を生成する<xref:System.Double.NaN?displayProperty=nameWithType>虚数部と<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-149">Similarly, performing a multiplication that overflows the range of the <xref:System.Double> type produces a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-150">複素数の実数部を返します、後でこの複素数で除算を実行する<xref:System.Double.NaN?displayProperty=nameWithType>虚数部と<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-150">Subsequently performing division with this complex number returns a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/nan1.cs#3)]
 [!code-vb[System.Numerics.Complex.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/nan1.vb#3)]  
  
 <span data-ttu-id="d4300-151">無効なまたは範囲をオーバーフローする複素数の算術演算、<xref:System.Double>データ型が例外をスローしないでください。</span><span class="sxs-lookup"><span data-stu-id="d4300-151">Mathematical operations with complex numbers that are invalid or that overflow the range of the <xref:System.Double> data type do not throw an exception.</span></span> <span data-ttu-id="d4300-152">代わりに、返す、 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または<xref:System.Double.NaN?displayProperty=nameWithType>次の条件下で。</span><span class="sxs-lookup"><span data-stu-id="d4300-152">Instead, they return a <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> under the following conditions:</span></span>  
  
-   <span data-ttu-id="d4300-153">0 を返しますで正の数値で除算<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-153">The division of a positive number by zero returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d4300-154">上限の境界オーバーフローが発生する操作を行う、<xref:System.Double>データ型を返します<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-154">Any operation that overflows the upper bound of the <xref:System.Double> data type returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d4300-155">0 を返しますで負の数値で除算<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-155">The division of a negative number by zero returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d4300-156">下限の境界オーバーフローが発生する操作を行う、<xref:System.Double>データ型を返します<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-156">Any operation that overflows the lower bound of the <xref:System.Double> data type returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d4300-157">0 を 0 で除算を返します<xref:System.Double.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-157">The division of a zero by zero returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d4300-158">値を持つオペランドに対して実行する操作を行う<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または<xref:System.Double.NaN?displayProperty=nameWithType>を返します<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または<xref:System.Double.NaN?displayProperty=nameWithType>、特定の操作によって異なります。</span><span class="sxs-lookup"><span data-stu-id="d4300-158">Any operation that is performed on operands whose values are <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>, depending on the specific operation.</span></span>  
  
 <span data-ttu-id="d4300-159">このメソッドによって実行される中間の計算に適用されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-159">Note that this applies to any intermediate calculations performed by a method.</span></span> <span data-ttu-id="d4300-160">乗算など、`new Complex(9e308, 9e308) and new Complex(2.5, 3.5)`数式を使用して (ac - bd) + (ad + bc) しました。</span><span class="sxs-lookup"><span data-stu-id="d4300-160">For example, the multiplication of `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` uses the formula (ac - bd) + (ad + bc)i.</span></span> <span data-ttu-id="d4300-161">実数部、乗算を実行した結果の計算に評価される式 9 e 308 * 2.5 - 9 e 308 * 3.5。</span><span class="sxs-lookup"><span data-stu-id="d4300-161">The calculation of the real component that results from the multiplication evaluates the expression 9e308 * 2.5 - 9e308 * 3.5.</span></span> <span data-ttu-id="d4300-162">この式では各中間の乗算を返します<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>と減算する試行<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>から<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>返します<xref:System.Double.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-162">Each intermediate multiplication in this expression returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and the attempt to subtract <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> from <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
## <a name="formatting-a-complex-number"></a><span data-ttu-id="d4300-163">複素数の書式設定</span><span class="sxs-lookup"><span data-stu-id="d4300-163">Formatting a Complex Number</span></span>  
 <span data-ttu-id="d4300-164">既定では、複雑な数値の文字列形式を形式の`(`*実際*`,` *虚数*`)`ここで、*実際*と*虚数*の文字列形式には、<xref:System.Double>複素数の実数部と虚数部のコンポーネントを構成する値。</span><span class="sxs-lookup"><span data-stu-id="d4300-164">By default, the string representation of a complex number takes the form `(`*real*`,` *imaginary*`)`, where *real* and *imaginary* are the string representations of the <xref:System.Double> values that form the complex number's real and imaginary components.</span></span> <span data-ttu-id="d4300-165">一部のオーバー ロード、<xref:System.Numerics.Complex.ToString%2A>メソッドには、これらの文字列形式のカスタマイズができるように<xref:System.Double>特定のカルチャの書式指定規則を反映するように、または標準またはカスタムの数値によって定義された特定の形式で表示される値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="d4300-165">Some overloads of the <xref:System.Numerics.Complex.ToString%2A> method allow customization of the string representations of these <xref:System.Double> values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string.</span></span> <span data-ttu-id="d4300-166">(詳細については、次を参照してください[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)。)。</span><span class="sxs-lookup"><span data-stu-id="d4300-166">(For more information, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
 <span data-ttu-id="d4300-167">複素数の文字列形式を表す一般的な方法のいずれかの形式を + bi ここで、複素数の実数部、かつ b が複素数の虚数部。</span><span class="sxs-lookup"><span data-stu-id="d4300-167">One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number's real component, and b is the complex number's imaginary component.</span></span> <span data-ttu-id="d4300-168">電気エンジニア リングの複素数を最もよくとして表す、+ bj です。</span><span class="sxs-lookup"><span data-stu-id="d4300-168">In electrical engineering, a complex number is most commonly expressed as a + bj.</span></span> <span data-ttu-id="d4300-169">これら 2 つの形式のいずれかでは、複雑な数値の文字列形式を取得できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-169">You can return the string representation of a complex number in either of these two forms.</span></span> <span data-ttu-id="d4300-170">これを行うには、実装することによって、カスタム書式プロバイダーを定義、<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>インターフェイス、および、呼び出し、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-170">To do this, define a custom format provider by implementing the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces, and then call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d4300-171">次の例では定義、`ComplexFormatter`をいずれかの形式の文字列として複素数を表すクラスを + bi または + bj です。</span><span class="sxs-lookup"><span data-stu-id="d4300-171">The following example defines a `ComplexFormatter` class that represents a complex number as a string in the form of either a + bi or a + bj.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#1)]
 [!code-vb[System.Numerics.Complex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#1)]  
  
 <span data-ttu-id="d4300-172">次の例は、このカスタム フォーマッタを使用して複雑な数値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-172">The following example then uses this custom formatter to display the string representation of a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#4)]
 [!code-vb[System.Numerics.Complex.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Complex (double real, double imaginary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 real, float64 imaginary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (real As Double, imaginary As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Complex(double real, double imaginary);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Complex : double * double -&gt; System.Numerics.Complex" Usage="new System.Numerics.Complex (real, imaginary)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imaginary" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real">
          <span data-ttu-id="d4300-173">複素数の実数部。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-173">The real part of the complex number.</span>
          </span>
        </param>
        <param name="imaginary">
          <span data-ttu-id="d4300-174">複素数の虚数部。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-174">The imaginary part of the complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-175">指定した実数値と虚数値を使用して <see cref="T:System.Numerics.Complex" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-175">Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-176">`real`または`imaginary`への明示的なキャストが必要なデータ型では場合、引数は精度を失う可能性があります<xref:System.Double>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-176">The `real` or `imaginary` arguments may lose precision if they are data types that require an explicit cast to <xref:System.Double>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-177">次の例では、2 つの複素数をインスタンス化し、それらを加算、減算、乗算、および除算操作で使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-177">The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Numerics.Complex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Complex) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.Complex -&gt; double" Usage="System.Numerics.Complex.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-178">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-178">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-179">複素数の絶対値 (または大きさ) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-179">Gets the absolute value (or magnitude) of a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-180">
            <paramref name="value" /> の絶対値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-180">The absolute value of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-181">複素数の絶対値はその<xref:System.Numerics.Complex.Magnitude%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-181">The absolute value of a complex number is equivalent to its <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span> <span data-ttu-id="d4300-182">実数値の絶対値を + bi は、次のように計算します。</span><span class="sxs-lookup"><span data-stu-id="d4300-182">The absolute value of a real number a + bi is calculated as follows:</span></span>  
  
-   <span data-ttu-id="d4300-183">場合 b = 0 の場合、結果は 0 です。</span><span class="sxs-lookup"><span data-stu-id="d4300-183">If b = 0, the result is 0.</span></span>  
  
-   <span data-ttu-id="d4300-184">場合、> b、結果は、\*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>)。</span><span class="sxs-lookup"><span data-stu-id="d4300-184">If a > b, the result is a \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>).</span></span>  
  
-   <span data-ttu-id="d4300-185">場合 b > の結果は b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + a<sup>2</sup>/b<sup>2</sup>)。</span><span class="sxs-lookup"><span data-stu-id="d4300-185">If b > a, the result is b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + a<sup>2</sup>/b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="d4300-186">絶対値の計算の結果、オーバーフローになる場合は、いずれかが返されます<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-186">If the calculation of the absolute value results in an overflow, the method returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-187">どちらの場合、<xref:System.Numerics.Complex.Real%2A>または<xref:System.Numerics.Complex.Imaginary%2A>プロパティは<xref:System.Double.NaN?displayProperty=nameWithType>し、その他のプロパティがどちらも<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>も<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、メソッドを返します<xref:System.Double.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-187">If either the <xref:System.Numerics.Complex.Real%2A> or <xref:System.Numerics.Complex.Imaginary%2A> property is <xref:System.Double.NaN?displayProperty=nameWithType> and the other property is neither <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> nor <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-188">次の例は、複素数の絶対値を計算しの値に相当あることを示しています、<xref:System.Numerics.Complex.Magnitude%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-188">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Acos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Acos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Acos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Acos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Acos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-189">コサインを表す複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-189">A complex number that represents a cosine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-190">指定した複素数のアーク コサインである角度を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-190">Returns the angle that is the arc cosine of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-191">
            <paramref name="value" /> のアーク コサインであるラジアン単位の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-191">The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-192"><xref:System.Numerics.Complex.Acos%2A>複素数のメソッドに対応して、<xref:System.Math.Acos%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-192">The <xref:System.Numerics.Complex.Acos%2A> method for complex numbers corresponds to the <xref:System.Math.Acos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-193"><xref:System.Numerics.Complex.Acos%2A>メソッドは、次の式を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-193">The <xref:System.Numerics.Complex.Acos%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="d4300-194">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span><span class="sxs-lookup"><span data-stu-id="d4300-194">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="d4300-195">次の例を示しています、<xref:System.Numerics.Complex.Acos%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-195">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="d4300-196">によって返される値を渡すことを示しています、<xref:System.Numerics.Complex.Acos%2A>メソッドを<xref:System.Numerics.Complex.Cos%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-196">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Acos(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-197">加算する 1 番目の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-197">The first complex number to add.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-198">加算する 2 番目の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-198">The second complex number to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-199">2 つの複素数を加算し、その結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-199">Adds two complex numbers and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-200">
            <paramref name="left" /> と <paramref name="right" /> の合計。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-200">The sum of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-201">複雑なを追加、+、bi、番号し、2 番目の複素数、c + di は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-201">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-202">(a + c) + (b + d) i。</span><span class="sxs-lookup"><span data-stu-id="d4300-202">(a + c) + (b + d)i.</span></span>  
  
 <span data-ttu-id="d4300-203">コンポーネントの値は、いずれかの場合は、メソッドのいずれかでオーバーフローが発生、結果が実数部または虚数部のコンポーネントで呼び出し、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-203">If the method call results in an overflow in either the real or imaginary component, the value of the component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-204">カスタム演算子をサポートしない言語を使用して、<xref:System.Numerics.Complex.Add%2A>複素数の加算を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d4300-204">Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Add%2A> method to perform addition with complex numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-205">次の例は、複素数の加算を示しています。</span><span class="sxs-lookup"><span data-stu-id="d4300-205">The following example illustrates addition with complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add1.cs#1)]
 [!code-vb[System.Numerics.Complex.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Asin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Asin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Asin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Asin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Asin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Asin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-206">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-206">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-207">指定した複素数のアーク サインである角度を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-207">Returns the angle that is the arc sine of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-208">
            <paramref name="value" /> のアーク サインである角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-208">The angle which is the arc sine of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-209"><xref:System.Numerics.Complex.Asin%2A>複素数のメソッドに対応して、<xref:System.Math.Asin%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-209">The <xref:System.Numerics.Complex.Asin%2A> method for complex numbers corresponds to the <xref:System.Math.Asin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-210"><xref:System.Numerics.Complex.Asin%2A>メソッドは、次の式を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-210">The <xref:System.Numerics.Complex.Asin%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="d4300-211">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* 値 + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> -値 \* 値))</span><span class="sxs-lookup"><span data-stu-id="d4300-211">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* value + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - value \* value))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="d4300-212">次の例を示しています、<xref:System.Numerics.Complex.Asin%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-212">The following example illustrates the <xref:System.Numerics.Complex.Asin%2A> method.</span></span> <span data-ttu-id="d4300-213">によって返される値を渡すことを示しています、<xref:System.Numerics.Complex.Asin%2A>メソッドを<xref:System.Numerics.Complex.Sin%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-213">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Asin(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Atan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Atan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Atan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Atan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Atan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-214">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-214">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-215">指定した複素数のアーク タンジェントである角度を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-215">Returns the angle that is the arc tangent of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-216">
            <paramref name="value" /> のアーク タンジェントである角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-216">The angle that is the arc tangent of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-217"><xref:System.Numerics.Complex.Atan%2A>複素数のメソッドに対応して、<xref:System.Math.Atan%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-217">The <xref:System.Numerics.Complex.Atan%2A> method for complex numbers corresponds to the <xref:System.Math.Atan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-218"><xref:System.Numerics.Complex.Atan%2A>メソッドは、次の式を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-218">The <xref:System.Numerics.Complex.Atan%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="d4300-219"><xref:System.Numerics.Complex.ImaginaryOne> /新しい複合型 (2.0、0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One>  -  <xref:System.Numerics.Complex.ImaginaryOne> \* 値)- <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* 値)</span><span class="sxs-lookup"><span data-stu-id="d4300-219"><xref:System.Numerics.Complex.ImaginaryOne> / new Complex(2.0, 0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> \* value) - <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* value)</span></span>   
  
   
  
## Examples  
 <span data-ttu-id="d4300-220">次の例を示しています、<xref:System.Numerics.Complex.Atan%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-220">The following example illustrates the <xref:System.Numerics.Complex.Atan%2A> method.</span></span> <span data-ttu-id="d4300-221">によって返される値を渡すことを示しています、<xref:System.Numerics.Complex.Atan%2A>メソッドを<xref:System.Numerics.Complex.Tan%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-221">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Atan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Conjugate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Conjugate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Conjugate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Conjugate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Conjugate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-222">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-222">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-223">複素数の共役を計算し、結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-223">Computes the conjugate of a complex number and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-224">
            <paramref name="value" /> の共役。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-224">The conjugate of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-225">複素数の共役虚数の符号を反転させます。つまり、虚数部を単項否定演算を適用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-225">The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component.</span></span> <span data-ttu-id="d4300-226">場合は、+ bi 複素数で、その共役-bi です。</span><span class="sxs-lookup"><span data-stu-id="d4300-226">If a + bi is a complex number, its conjugate is a - bi.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-227">次の例では、2 つの複素数の共役を表示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-227">The following example displays the conjugate of two complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Conjugate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.conjugate/cs/conjugate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Conjugate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.conjugate/vb/conjugate1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-228">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-228">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-229">指定した複素数のコサインを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-229">Returns the cosine of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-230">
            <paramref name="value" /> のコサイン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-230">The cosine of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-231"><xref:System.Numerics.Complex.Cos%2A>複素数のメソッドに対応して、<xref:System.Math.Cos%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-231">The <xref:System.Numerics.Complex.Cos%2A> method for complex numbers corresponds to the <xref:System.Math.Cos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-232"><xref:System.Numerics.Complex.Cos%2A>メソッドでは、次の数式を使用して、複素数のコサインを計算する + bi:</span><span class="sxs-lookup"><span data-stu-id="d4300-232">The <xref:System.Numerics.Complex.Cos%2A> method uses the following formula to calculate the cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="d4300-233">(<xref:System.Math.Cos%2A>(a) * <xref:System.Math.Cosh%2A>(b), -(<xref:System.Math.Sin%2A>(a) * <xref:System.Math.Sinh%2A>(b)))</span><span class="sxs-lookup"><span data-stu-id="d4300-233">(<xref:System.Math.Cos%2A>(a) * <xref:System.Math.Cosh%2A>(b), -(<xref:System.Math.Sin%2A>(a) * <xref:System.Math.Sinh%2A>(b)))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-234">次の例を示しています、<xref:System.Numerics.Complex.Acos%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-234">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="d4300-235">によって返される値を渡すことを示しています、<xref:System.Numerics.Complex.Acos%2A>メソッドを<xref:System.Numerics.Complex.Cos%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-235">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Cos(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cosh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cosh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cosh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cosh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cosh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-236">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-236">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-237">指定した複素数のハイパーボリック コサインを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-237">Returns the hyperbolic cosine of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-238">
            <paramref name="value" /> のハイパーボリック コサイン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-238">The hyperbolic cosine of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-239"><xref:System.Numerics.Complex.Cosh%2A>複素数のメソッドに対応して、<xref:System.Math.Cosh%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-239">The <xref:System.Numerics.Complex.Cosh%2A> method for complex numbers corresponds to the <xref:System.Math.Cosh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-240"><xref:System.Numerics.Complex.Cosh%2A>メソッドでは、次の数式を使用して、複素数のハイパーボリック コサインを計算する + bi:</span><span class="sxs-lookup"><span data-stu-id="d4300-240">The <xref:System.Numerics.Complex.Cosh%2A> method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="d4300-241">(<xref:System.Math.Cosh%2A>(a) * <xref:System.Math.Cos%2A>(b)、 <xref:System.Math.Sinh%2A>(a) * <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="d4300-241">(<xref:System.Math.Cosh%2A>(a) * <xref:System.Math.Cos%2A>(b), <xref:System.Math.Sinh%2A>(a) * <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Cosh(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(valuetype System.Numerics.Complex dividend, valuetype System.Numerics.Complex divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Complex, divisor As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(System::Numerics::Complex dividend, System::Numerics::Complex divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.Complex" />
        <Parameter Name="divisor" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="dividend">
          <span data-ttu-id="d4300-242">被除数の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-242">The complex number to be divided.</span>
          </span>
        </param>
        <param name="divisor">
          <span data-ttu-id="d4300-243">除数の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-243">The complex number to divide by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-244">複素数を別の複素数で除算し、その結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-244">Divides one complex number by another and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-245">除算の商。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-245">The quotient of the division.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-246">複素数を除算、+、2 番目の複素数、数、c + di での bi は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-246">The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-247">((ac + bd)/(c<sup>2</sup> + d<sup>2</sup>)) + ((bc-ad)/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="d4300-247">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>  
  
 <span data-ttu-id="d4300-248">商の計算結果が実数部または虚数部のいずれかのコンポーネントで、オーバーフローになる場合は、そのコンポーネントの値は<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-248">If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-249"><xref:System.Numerics.Complex.Divide%2A>メソッドは、カスタム演算子をサポートしない言語で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-249">The <xref:System.Numerics.Complex.Divide%2A> method can be used by languages that do not support custom operators.</span></span> <span data-ttu-id="d4300-250">その動作は、除算演算子を使用する除算と同じです。</span><span class="sxs-lookup"><span data-stu-id="d4300-250">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-251">次の例では、複素数の配列内の各要素で複素数を除算します。</span><span class="sxs-lookup"><span data-stu-id="d4300-251">The following example divides a complex number by each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide1.cs#1)]
 [!code-vb[System.Numerics.Complex.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-252">2 つの複素数が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-252">Returns a value that indicates whether two complex numbers are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.Complex -&gt; bool" Usage="complex.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-253">比較対象の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-253">The complex number to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-254">現在のインスタンスの値と指定した複素数の値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-254">Returns a value that indicates whether the current instance and a specified complex number have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-255">この複素数の値と <paramref name="value" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-255">
              <see langword="true" /> if this complex number and <paramref name="value" /> have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-256"><xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>メソッドには、<xref:System.IEquatable%601>の実装、<xref:System.Numerics.Complex>構造体。</span><span class="sxs-lookup"><span data-stu-id="d4300-256">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method provides the <xref:System.IEquatable%601> implementation for the <xref:System.Numerics.Complex> structure.</span></span> <span data-ttu-id="d4300-257">若干の実行よりも高く<xref:System.Numerics.Complex.Equals%28System.Object%29>メソッド値から複素数へのパラメーターの変換先があるないためです。</span><span class="sxs-lookup"><span data-stu-id="d4300-257">It performs slightly better than <xref:System.Numerics.Complex.Equals%28System.Object%29> method because it does not have to convert its parameter to a complex number.</span></span>  
  
 <span data-ttu-id="d4300-258">その実数部が等しいとその虚数部が等しい場合、2 つの複素数が等しいです。</span><span class="sxs-lookup"><span data-stu-id="d4300-258">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="d4300-259"><xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>メソッドは、次の式に相当します。</span><span class="sxs-lookup"><span data-stu-id="d4300-259">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#1)]
 [!code-vb[System.Numerics.Complex.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="d4300-260">
            <para>使用して、<see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" />メソッド、注意を 2 つの値が等しいためにと見なされます。 その実数部と虚数部のコンポーネントの有効桁数が異なるため等しくないです。次の例では、レポートを<c>(3.33333, 0.142857)</c>と<c>(10/3, 1/7)</c>が等しくないです。 [! code-csharp[System.Numerics.Complex.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)][! code-vb[System.Numerics.Complex.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)] 手法は、次の 2 つの値の差の許容の余白を定義することをお勧めいずれか (などです。 値の実数部と虚数部のコンポーネントの 1 つの 01%) 等しいかどうかの値を比較するのではなくです。2 つの値の差の絶対値は、以下が許容範囲は、違いは、多くの場合、精度の違いにより、そのため、値が一致することです。次の例では、このテクニックを使用して、等しくない場合に上記のコード例にある 2 つの複雑な値を比較します。2 つの複素数が等しい場合を検索します。 [! code-csharp[System.Numerics.Complex.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)][! code-vb[System.Numerics.Complex.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-260">
              <para>Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components. The following example reports that <c>(3.33333, 0.142857)</c> and <c>(10/3, 1/7)</c> are not equal.  [!code-csharp[System.Numerics.Complex.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)] [!code-vb[System.Numerics.Complex.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)]  One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality. If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision, and, therefore, the values are likely to be equal. The following example uses this technique to compare the two complex values that the previous code example found to be unequal. It finds the two complex numbers to be equal.  [!code-csharp[System.Numerics.Complex.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)] [!code-vb[System.Numerics.Complex.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="complex.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d4300-261">比較対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-261">The object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-262">現在のインスタンスの値と指定されたオブジェクトの値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-262">Returns a value that indicates whether the current instance and a specified object have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-263">
            <paramref name="obj" /> パラメーターが <see cref="T:System.Numerics.Complex" /> オブジェクトであるか <see cref="T:System.Numerics.Complex" /> オブジェクトに暗黙的に変換できる型であり、その値が現在の <see cref="T:System.Numerics.Complex" /> オブジェクトの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-263">
              <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-264">その実数部が等しいとその虚数部が等しい場合、2 つの複素数が等しいです。</span><span class="sxs-lookup"><span data-stu-id="d4300-264">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="d4300-265"><xref:System.Numerics.Complex.Equals%28System.Object%29>メソッドは、次の式に相当します。</span><span class="sxs-lookup"><span data-stu-id="d4300-265">The <xref:System.Numerics.Complex.Equals%28System.Object%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#2)]
 [!code-vb[System.Numerics.Complex.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#2)]  
  
 <span data-ttu-id="d4300-266">場合、`obj`パラメーターではありません、<xref:System.Numerics.Complex>オブジェクトが、暗黙的な変換が定義されているデータ型、<xref:System.Numerics.Complex.Equals%28System.Object%29>メソッドに変換`obj`を<xref:System.Numerics.Complex>実数部はの値と等しいオブジェクト`obj`、比較を実行する前に、虚数部は 0 に等しいとします。</span><span class="sxs-lookup"><span data-stu-id="d4300-266">If the `obj` parameter is not a <xref:System.Numerics.Complex> object, but it is a data type for which an implicit conversion is defined, the <xref:System.Numerics.Complex.Equals%28System.Object%29> method converts `obj` to a <xref:System.Numerics.Complex> object whose real part is equal to the value of `obj` and whose imaginary part is equal to zero before it performs the comparison.</span></span> <span data-ttu-id="d4300-267">次の例では、複素数および倍精度浮動小数点値が等しいことを見つけることによってこれを示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-267">The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals3.cs#6)]
 [!code-vb[System.Numerics.Complex.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals3.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="d4300-268">
            <para>使用して、<see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" />メソッド、注意を 2 つの値が等しいためにと見なされます。 その実数部と虚数部のコンポーネントの有効桁数が異なるため等しくないです。問題がある顕著になる場合<paramref name="obj" />に変換する必要があります、<see cref="T:System.Double" />比較を実行する前にします。次の例では、複素数の実数部を値と等しくなりますが表示されます、<see cref="T:System.Single" />を持つ値<see cref="T:System.Single" />値。出力を等価性の比較を返します<see langword="False" />です。 [! code-csharp[System.Numerics.Complex.Equals#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)][! code-vb[System.Numerics.Complex.Equals#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)] 手法は、次の 2 つの値の差の許容の余白を定義することをお勧めいずれか (などです。 値の実数部と虚数部のコンポーネントの 1 つの 01%) 等しいかどうかの値を比較するのではなくです。2 つの値の差の絶対値は、以下が許容範囲は、違いは、有効桁数の違いによりする可能性があります、したがって、値は等しいと考えられます。次の例では、このテクニックを使用して、等しくない場合に上記のコード例にある 2 つの値を比較します。等しい場合に検索されます。 [! code-csharp[System.Numerics.Complex.Equals#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)][! code-vb[System.Numerics.Complex.Equals#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-268">
              <para>Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components. The problem can be accentuated if <paramref name="obj" /> must be converted to a <see cref="T:System.Double" /> before performing the comparison. The following example compares a complex number whose real component appears to be equal to a <see cref="T:System.Single" /> value with that <see cref="T:System.Single" /> value. As the output shows, the comparison for equality returns <see langword="False" />.  [!code-csharp[System.Numerics.Complex.Equals#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)] [!code-vb[System.Numerics.Complex.Equals#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)]  One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality. If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare the two values that the previous code example found to be unequal. It now finds them to be equal.  [!code-csharp[System.Numerics.Complex.Equals#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)] [!code-vb[System.Numerics.Complex.Equals#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Exp (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Exp(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Exp(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Exp : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Exp value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-269">累乗に使用する値を指定する複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-269">A complex number that specifies a power.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-270">
            <see langword="e" /> を指定した複素数で累乗した値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-270">Returns <see langword="e" /> raised to the power specified by a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-271">数値 <see langword="e" /> を <paramref name="value" /> で累乗した値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-271">The number <see langword="e" /> raised to the power <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-272">使用して、<xref:System.Numerics.Complex.Pow%2A>メソッドを他のベースのべき乗を計算します。</span><span class="sxs-lookup"><span data-stu-id="d4300-272">Use the <xref:System.Numerics.Complex.Pow%2A> method to calculate the powers of other bases.</span></span>  
  
 <span data-ttu-id="d4300-273"><xref:System.Numerics.Complex.Exp%2A>複素数のメソッドに対応して、<xref:System.Math.Exp%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-273">The <xref:System.Numerics.Complex.Exp%2A> method for complex numbers corresponds to the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method for real numbers.</span></span> <span data-ttu-id="d4300-274"><xref:System.Numerics.Complex.Exp%2A> 逆関数は、<xref:System.Numerics.Complex.Log%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-274"><xref:System.Numerics.Complex.Exp%2A> is the inverse of <xref:System.Numerics.Complex.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-275">次の例を示しています、<xref:System.Numerics.Complex.Exp%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-275">The following example illustrates the <xref:System.Numerics.Complex.Exp%2A> method.</span></span> <span data-ttu-id="d4300-276">示しています、有効桁数の欠落をいくつかの状況において、<xref:System.Double>によって返される値を渡すと、データ型、<xref:System.Numerics.Complex.Log%2A>メソッドを<xref:System.Numerics.Complex.Exp%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-276">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromPolarCoordinates">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex FromPolarCoordinates(float64 magnitude, float64 phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPolarCoordinates (magnitude As Double, phase As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex FromPolarCoordinates(double magnitude, double phase);" />
      <MemberSignature Language="F#" Value="static member FromPolarCoordinates : double * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.FromPolarCoordinates (magnitude, phase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="magnitude" Type="System.Double" />
        <Parameter Name="phase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="magnitude">
          <span data-ttu-id="d4300-277">原点 (X 軸と Y 軸の交点) から値までの距離である大きさ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-277">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</span>
          </span>
        </param>
        <param name="phase">
          <span data-ttu-id="d4300-278">線から水平軸までの角度であるフェーズ (ラジアン単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-278">The phase, which is the angle from the line to the horizontal axis, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-279">ポイントの極座標から複素数を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-279">Creates a complex number from a point's polar coordinates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-280">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-280">A complex number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-281"><xref:System.Numerics.Complex.FromPolarCoordinates%2A>メソッドは、極座標に基づく値から複素数をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d4300-281">The <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method instantiates a complex number based on its polar coordinates.</span></span>  
  
 <span data-ttu-id="d4300-282">複素平面での戻り値のポイントの複数の表現があるため、<xref:System.Numerics.Complex.FromPolarCoordinates%2A>メソッドは正規化されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-282">Because there are multiple representations of a point on a complex plane, the return value of the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method is normalized.</span></span> <span data-ttu-id="d4300-283">正の数値に大きさを正規化し、フェーズの範囲内の値は正規化<xref:System.Math.PI>に<xref:System.Math.PI>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-283">The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<xref:System.Math.PI> to <xref:System.Math.PI>.</span></span> <span data-ttu-id="d4300-284">その結果の値、<xref:System.Numerics.Complex.Phase%2A>と<xref:System.Numerics.Complex.Magnitude%2A>結果として得られる複素数のプロパティではの元の値が等しくない場合があります、`magnitude`と`phase`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d4300-284">As a result, the values of the <xref:System.Numerics.Complex.Phase%2A> and <xref:System.Numerics.Complex.Magnitude%2A> properties of the resulting complex number may not equal the original values of the `magnitude` and `phase` parameters.</span></span>  
  
 <span data-ttu-id="d4300-285">値を度数からラジアンに変換する、`phase`ことによって乗算パラメーター  <xref:System.Math.PI?displayProperty=nameWithType> /180 です。</span><span class="sxs-lookup"><span data-stu-id="d4300-285">To convert a value from degrees to radians for the `phase` parameter, multiply it by <xref:System.Math.PI?displayProperty=nameWithType>/180.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-286">次の例で、<xref:System.Numerics.Complex.FromPolarCoordinates%2A>する複素数をインスタンス化、極座標に基づくメソッドとの値を表示し、その<xref:System.Numerics.Complex.Magnitude%2A>と<xref:System.Numerics.Complex.Phase%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-286">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="complex.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4300-287">現在の <see cref="T:System.Numerics.Complex" /> オブジェクトのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-287">Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-288">32 ビット符号付き整数ハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-288">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Imaginary" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Imaginary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Imaginary As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Imaginary { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Imaginary : double" Usage="System.Numerics.Complex.Imaginary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-289">現在の <see cref="T:System.Numerics.Complex" /> オブジェクトの虚数部を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-289">Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4300-290">複素数の虚数部。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-290">The imaginary component of a complex number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-291">複素数の指定、+、bi、 <xref:System.Numerics.Complex.Imaginary%2A> b の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d4300-291">Given a complex number a + bi, the <xref:System.Numerics.Complex.Imaginary%2A> property returns the value of b.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-292">次の例の配列をインスタンス化<xref:System.Numerics.Complex>オブジェクトし、フォームでは、それぞれの実数部と虚数部のコンポーネントが表示されます、+ bi です。</span><span class="sxs-lookup"><span data-stu-id="d4300-292">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Real" />
      </Docs>
    </Member>
    <Member MemberName="ImaginaryOne">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex ImaginaryOne;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex ImaginaryOne" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.ImaginaryOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ImaginaryOne As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex ImaginaryOne;" />
      <MemberSignature Language="F#" Value=" staticval mutable ImaginaryOne : System.Numerics.Complex" Usage="System.Numerics.Complex.ImaginaryOne" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-293">実数が 0 で虚数が 1 の新しい <see cref="T:System.Numerics.Complex" /> インスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-293">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d4300-294">次の例のインスタンスを作成、<xref:System.Numerics.Complex>値を使用して、<xref:System.Numerics.Complex.ImaginaryOne>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-294">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.ImaginaryOne> property.</span></span> <span data-ttu-id="d4300-295">この値を呼び出すことによってインスタンス化される別の値を比較して、 <xref:System.Numerics.Complex> 0 に等しい実数部と虚数部 1 に等しいを持つコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="d4300-295">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to one.</span></span> <span data-ttu-id="d4300-296">例の出力に示す 2 つの値が等しいです。</span><span class="sxs-lookup"><span data-stu-id="d4300-296">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/cs/imaginaryone1.cs#1)]
 [!code-vb[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/vb/imaginaryone1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.One" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-297">複素数の対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-297">Returns the logarithm of a complex number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-298">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-298">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-299">指定した複素数の自然 (底 <see langword="e" />) 対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-299">Returns the natural (base <see langword="e" />) logarithm of a specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-300">
            <paramref name="value" /> の自然 (底 <see langword="e" />) 対数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-300">The natural (base <see langword="e" />) logarithm of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-301"><xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29>複素数のメソッドに対応して、<xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-301">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-302">次の例を示しています、<xref:System.Numerics.Complex.Log%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-302">The following example illustrates the <xref:System.Numerics.Complex.Log%2A> method.</span></span> <span data-ttu-id="d4300-303">示しています、有効桁数の欠落をいくつかの状況において、<xref:System.Double>によって返される値を渡すと、データ型、<xref:System.Numerics.Complex.Log%2A>メソッドを<xref:System.Numerics.Complex.Exp%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-303">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Log(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex, baseValue As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-304">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-304">A complex number.</span>
          </span>
        </param>
        <param name="baseValue">
          <span data-ttu-id="d4300-305">対数の底。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-305">The base of the logarithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-306">指定した複素数の指定した底での対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-306">Returns the logarithm of a specified complex number in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-307">
            <paramref name="value" /> の底 <paramref name="baseValue" /> での対数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-307">The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-308"><xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29>複素数のメソッドに対応して、<xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-308">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log10 (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log10(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log10(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log10(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-309">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-309">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-310">指定した複素数の底 10 の対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-310">Returns the base-10 logarithm of a specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-311">
            <paramref name="value" /> の底 10 の対数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-311">The base-10 logarithm of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-312"><xref:System.Numerics.Complex.Log10%2A>複素数のメソッドに対応して、<xref:System.Math.Log10%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-312">The <xref:System.Numerics.Complex.Log10%2A> method for complex numbers corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Magnitude">
      <MemberSignature Language="C#" Value="public double Magnitude { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Magnitude" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Magnitude" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Magnitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Magnitude { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Magnitude : double" Usage="System.Numerics.Complex.Magnitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-313">複素数の大きさ (または絶対値) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-313">Gets the magnitude (or absolute value) of a complex number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4300-314">現在のインスタンスの大きさ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-314">The magnitude of the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-315"><xref:System.Numerics.Complex.Magnitude%2A>プロパティは、複素数の絶対値に相当します。</span><span class="sxs-lookup"><span data-stu-id="d4300-315">The <xref:System.Numerics.Complex.Magnitude%2A> property is equivalent to the absolute value of a complex number.</span></span> <span data-ttu-id="d4300-316">複素数で表される 2 次元の点を原点 (x 軸とデカルト座標システムで y 軸の交点) からの距離が指定します。</span><span class="sxs-lookup"><span data-stu-id="d4300-316">It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number.</span></span> <span data-ttu-id="d4300-317">絶対値は次のように計算されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-317">The absolute value is calculated as follows:</span></span>  
  
 <span data-ttu-id="d4300-318">&#124;a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(、*、+ b * b)</span><span class="sxs-lookup"><span data-stu-id="d4300-318">&#124; a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(a * a + b * b)</span></span>  
  
 <span data-ttu-id="d4300-319">このプロパティに、いずれかを返します絶対値の計算の結果、オーバーフローになる場合<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-319">If the calculation of the absolute value results in an overflow, this property returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-320"><xref:System.Numerics.Complex.Magnitude%2A>と<xref:System.Numerics.Complex.Phase%2A>プロパティは、極座標グラフの座標系で複素数を表すポイントの位置を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-320">The <xref:System.Numerics.Complex.Magnitude%2A> and the <xref:System.Numerics.Complex.Phase%2A> properties define the position of a point that represents a complex number in the polar coordinate system.</span></span>  
  
 <span data-ttu-id="d4300-321">呼び出して、デカルト座標ではなく、極座標に基づく値から複素数をインスタンス化することができます、<xref:System.Numerics.Complex.FromPolarCoordinates%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-321">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-322">次の例は、複素数の絶対値を計算しの値に相当あることを示しています、<xref:System.Numerics.Complex.Magnitude%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-322">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-323">乗算する 1 番目の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-323">The first complex number to multiply.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-324">乗算する 2 番目の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-324">The second complex number to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-325">2 つの複素数の積を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-325">Returns the product of two complex numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-326">
            <paramref name="left" /> と <paramref name="right" /> の 2 つのパラメーターの積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-326">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-327">複雑なの乗算 number, a + bi、および 2 番目の複素数、c + di は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-327">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-328">(ac - bd) + (ad + bc) i</span><span class="sxs-lookup"><span data-stu-id="d4300-328">(ac - bd) + (ad + bc)i</span></span>  
  
 <span data-ttu-id="d4300-329">そのコンポーネントの値がいずれかの場合は、乗算の結果は実数部または虚数部のいずれかのコンポーネントでオーバーフローが発生、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-329">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-330"><xref:System.Numerics.Complex.Multiply%2A>カスタム演算子をサポートしない言語のメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d4300-330">The <xref:System.Numerics.Complex.Multiply%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="d4300-331">その動作は、乗算演算子を使用する乗算と同じです。</span><span class="sxs-lookup"><span data-stu-id="d4300-331">Its behavior is identical to multiplication using the multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-332">次の例の複素数の配列の各要素によっての複素数を乗算します。</span><span class="sxs-lookup"><span data-stu-id="d4300-332">The following example multiples a complex number by each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Multiply#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply1.cs#1)]
 [!code-vb[System.Numerics.Complex.Multiply#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Negate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Negate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Negate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-333">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-333">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-334">指定した複素数の加法に関する逆元を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-334">Returns the additive inverse of a specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-335">
            <paramref name="value" /> パラメーターの <see cref="P:System.Numerics.Complex.Real" /> 部および <see cref="P:System.Numerics.Complex.Imaginary" /> 部に -1 を乗算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-335">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-336">複素数の加法に関する逆元は、複素数の値を生成する<xref:System.Numerics.Complex>複素数を元に追加されたとき。</span><span class="sxs-lookup"><span data-stu-id="d4300-336">The additive inverse of a complex number is a complex number that produces a value of <xref:System.Numerics.Complex> when it is added to the original complex number.</span></span> <span data-ttu-id="d4300-337">このメソッドは、元の複素数の実数部と虚数部のコンポーネントが-1 で乗算される複素数を返します。</span><span class="sxs-lookup"><span data-stu-id="d4300-337">This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.</span></span>  
  
 <span data-ttu-id="d4300-338"><xref:System.Numerics.Complex.Negate%2A>カスタム演算子をサポートしない言語のメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d4300-338">The <xref:System.Numerics.Complex.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="d4300-339">この動作は、単項否定演算子を使用した否定演算<xref:System.Numerics.Complex.op_UnaryNegation%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-339">Its behavior is identical to negation using the unary negation operator, <xref:System.Numerics.Complex.op_UnaryNegation%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-340">次の例では、複素数の配列内の各要素の加法に関する逆元を取得します。</span><span class="sxs-lookup"><span data-stu-id="d4300-340">The following example obtains the additive inverse of each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Negate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex One;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex One" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly One As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex One;" />
      <MemberSignature Language="F#" Value=" staticval mutable One : System.Numerics.Complex" Usage="System.Numerics.Complex.One" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-341">実数が 1 で虚数が 0 の新しい <see cref="T:System.Numerics.Complex" /> インスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-341">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d4300-342">次の例のインスタンスを作成、<xref:System.Numerics.Complex>値を使用して、<xref:System.Numerics.Complex.One>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-342">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.One> property.</span></span> <span data-ttu-id="d4300-343">この値を呼び出すことによってインスタンス化される別の値を比較して、 <xref:System.Numerics.Complex> 1 に等しい実数部と虚数部を 0 に等しいを持つコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="d4300-343">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to one and an imaginary part equal to zero.</span></span> <span data-ttu-id="d4300-344">例の出力に示す 2 つの値が等しいです。</span><span class="sxs-lookup"><span data-stu-id="d4300-344">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.One#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.one/cs/one1.cs#1)]
 [!code-vb[System.Numerics.Complex.One#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.one/vb/one1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-345">加算する 1 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-345">The first value to add.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-346">加算する 2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-346">The second value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-347">2 つの複素数を加算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-347">Adds two complex numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-348">
            <paramref name="left" /> と <paramref name="right" /> の合計。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-348">The sum of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-349"><xref:System.Numerics.Complex.op_Addition%2A>メソッドは、複素数の加算演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-349">The <xref:System.Numerics.Complex.op_Addition%2A> method defines the addition operation for complex numbers.</span></span> <span data-ttu-id="d4300-350">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-350">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add3.cs#3)]
 [!code-vb[System.Numerics.Complex.Add#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add3.vb#3)]  
  
 <span data-ttu-id="d4300-351">複雑なを追加、+、bi、番号し、2 番目の複素数、c + di は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-351">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-352">(a + c) + (b + d) i</span><span class="sxs-lookup"><span data-stu-id="d4300-352">(a + c) + (b + d)i</span></span>  
  
 <span data-ttu-id="d4300-353">そのコンポーネントの値は、いずれかの場合は、メソッドのいずれかでオーバーフローが発生、結果が実数部または虚数部のコンポーネントで呼び出し、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-353">If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-354">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.Complex.Add%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-354">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%2A> method instead.</span></span>  
  
 <span data-ttu-id="d4300-355">この演算子を同等の方法は、します。 <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d4300-355">The equivalent method for this operator is <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d4300-356">次の例は、複素数の加算を示しています。</span><span class="sxs-lookup"><span data-stu-id="d4300-356">The following example illustrates addition with complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add2.cs#2)]
 [!code-vb[System.Numerics.Complex.Add#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-357">被除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-357">The value to be divided.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-358">除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-358">The value to divide by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-359">指定した複素数を別の指定した複素数で除算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-359">Divides a specified complex number by another specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-360">
            <paramref name="left" /> を <paramref name="right" /> で除算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-360">The result of dividing <paramref name="left" /> by <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-361"><xref:System.Numerics.Complex.op_Division%2A>メソッドは、複素数を除算演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-361">The <xref:System.Numerics.Complex.op_Division%2A> method defines the division operation for complex numbers.</span></span> <span data-ttu-id="d4300-362">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-362">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Divide#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide2.cs#2)]
 [!code-vb[System.Numerics.Complex.Divide#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide2.vb#2)]  
  
 <span data-ttu-id="d4300-363">複雑な除算 number, a + bi、および 2 番目の複素数、c + di は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-363">The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-364">((ac + bd)/(c<sup>2</sup> + d<sup>2</sup>)) + ((bc-ad)/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="d4300-364">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>  
  
 <span data-ttu-id="d4300-365">除算した結果が実数部または虚数部のいずれかのコンポーネントでオーバーフローが、そのコンポーネントの値がいずれかの<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-365">If the division results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-366">カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.Numerics.Complex.Divide%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-366">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="d4300-367">この演算子を同等の方法は、します。 <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d4300-367">The equivalent method for this operator is <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-368">比較対象の 1 番目の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-368">The first complex number to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-369">比較対象の 2 番目の複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-369">The second complex number to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-370">2 つの複素数が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-370">Returns a value that indicates whether two complex numbers are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-371">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-371">
              <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-372"><xref:System.Numerics.Complex.op_Equality%2A>メソッド定義の等値演算子の動作<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-372">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the equality operator for <xref:System.Numerics.Complex> values.</span></span> <span data-ttu-id="d4300-373">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-373">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/eqoperator1.cs#9)]
 [!code-vb[System.Numerics.Complex.Equals#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/eqoperator1.vb#9)]  
  
 <span data-ttu-id="d4300-374">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-374">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method instead.</span></span>  
  
 <span data-ttu-id="d4300-375">その実数部が等しいとその虚数部が等しい場合、2 つの複素数が等しいです。</span><span class="sxs-lookup"><span data-stu-id="d4300-375">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="d4300-376"><xref:System.Numerics.Complex.op_Equality%2A>メソッドは、次の式に相当します。</span><span class="sxs-lookup"><span data-stu-id="d4300-376">The <xref:System.Numerics.Complex.op_Equality%2A> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#3)]
 [!code-vb[System.Numerics.Complex.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#3)]  
  
 <span data-ttu-id="d4300-377">有効桁数が異なる、ため明らかと等価である 2 つの複素数できると見なされる等しくないに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-377">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="d4300-378">詳細と回避策は、次を参照してください。、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-378">For more information and a possible workaround, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 <span data-ttu-id="d4300-379">この演算子を同等の方法は、します。 <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d4300-379">The equivalent method for this operator is <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-380">
            <see cref="T:System.Numerics.Complex" /> オブジェクトと別の型の間の明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-380">Defines an explicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span>
          </span>
        </summary>
        <altmember cref="Overload:System.Numerics.Complex.op_Implicit" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-381">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-381">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-382">
            <see cref="T:System.Decimal" /> 値から複素数への明示的な型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-382">Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-383">実数部が <paramref name="value" /> で、虚数部が 0 である複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-383">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-384">明示的な変換演算子に変換できる型を定義する、<xref:System.Numerics.Complex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-384">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="d4300-385">言語コンパイラは実行されませんこの変換に自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="d4300-385">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="d4300-386">代わりに、実行、変換、キャスト演算子 (C# の場合) または変換関数の場合のみ (など`CType`Visual Basic で) を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-386">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="d4300-387">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-387">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="d4300-388">変換、<xref:System.Decimal>複素数の実数部の値につながる精度が失われるのため、 <xref:System.Double>、これは、型の複素数の<xref:System.Numerics.Complex.Real%2A>プロパティが有効桁数よりも少ない、<xref:System.Decimal>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-388">The conversion of a <xref:System.Decimal> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Decimal>.</span></span>



## Examples
 <span data-ttu-id="d4300-389">次の例では、明示的に変換<xref:System.Decimal>値<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-389">The following example illustrates the explicit conversion of <xref:System.Decimal> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-390">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-390">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-391">
            <see cref="T:System.Numerics.BigInteger" /> 値から複素数への明示的な型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-391">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-392">実数部が <paramref name="value" /> で、虚数部が 0 である複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-392">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-393">明示的な変換演算子に変換できる型を定義する、<xref:System.Numerics.Complex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-393">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="d4300-394">言語コンパイラは実行されませんこの変換に自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="d4300-394">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="d4300-395">代わりに、実行、変換、キャスト演算子 (C# の場合) または変換関数の場合のみ (など`CType`Visual Basic で) を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-395">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="d4300-396">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-396">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="d4300-397">変換、<xref:System.Numerics.BigInteger>複素数の実数部の値につながる精度が失われるのため、 <xref:System.Double>、これは、型の複素数の<xref:System.Numerics.Complex.Real%2A>プロパティが有効桁数よりも少ない、<xref:System.Numerics.BigInteger>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-397">The conversion of a <xref:System.Numerics.BigInteger> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Numerics.BigInteger>.</span></span>

 <span data-ttu-id="d4300-398">変換が成功しなかった場合ため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Double>型、操作はスローされません、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-398">If the conversion is unsuccessful because the <xref:System.Numerics.BigInteger> value is out of the range of the <xref:System.Double> type, the operation does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="d4300-399">代わりに場合、`value`はより小さい<xref:System.Double.MinValue>、結果は、複素数を持つ、<xref:System.Numerics.Complex.Real%2A>プロパティの値に等しい<xref:System.Double.NegativeInfinity>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-399">Instead, if `value` is less than <xref:System.Double.MinValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="d4300-400">場合`value`がより大きい<xref:System.Double.MaxValue>、結果は、複素数を持つ、<xref:System.Numerics.Complex.Real%2A>プロパティの値に等しい<xref:System.Double.PositiveInfinity>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-400">If `value` is greater than <xref:System.Double.MaxValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.PositiveInfinity>.</span></span>



## Examples
 <span data-ttu-id="d4300-401">次の例では、明示的に変換<xref:System.Numerics.BigInteger>値<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-401">The following example illustrates the explicit conversion of <xref:System.Numerics.BigInteger> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-402">
            <see cref="T:System.Numerics.Complex" /> オブジェクトと別の型との間の暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-402">Defines an implicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-403">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-403">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-404">符号なしバイト値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-404">Defines an implicit conversion of an unsigned byte to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-405">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-405">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-406">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-406">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-407">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-407">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-408">このオーバー ロードにより、コンパイラからの変換を処理する<xref:System.Byte>から次の例のように、複素数の値。</span><span class="sxs-lookup"><span data-stu-id="d4300-408">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-409">変換の結果は、複素数の実数部と等しいことに注意してください、<xref:System.Byte>値と虚数部は 0 です。</span><span class="sxs-lookup"><span data-stu-id="d4300-409">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Byte> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(double value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-410">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-410">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-411">倍精度浮動小数点数から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-411">Defines an implicit conversion of a double-precision floating-point number to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-412">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-412">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-413">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-413">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-414">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-414">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-415">このオーバー ロードにより、コンパイラからの変換を処理する<xref:System.Double>から次の例のように、複素数の値。</span><span class="sxs-lookup"><span data-stu-id="d4300-415">This overload lets the compiler handle conversions from a <xref:System.Double> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-416">変換の結果は、複素数の実数部と等しいことに注意してください、<xref:System.Double>値と虚数部は 0 です。</span><span class="sxs-lookup"><span data-stu-id="d4300-416">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Double> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-417">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-417">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-418">16 ビット符号付き整数値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-418">Defines an implicit conversion of a 16-bit signed integer to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-419">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-419">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-420">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-420">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-421">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-421">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-422">このオーバー ロードでは、コンパイラは、次の例のように、符号付き 16 ビット整数から複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-422">This overload lets the compiler handle conversions from a signed 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-423">変換の結果は、複素数の実数部は 16 ビット符号付き整数と虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-423">Note that the result of the conversion is a complex number whose real part is equal to the signed 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#3)]   
 [!code-vb[System.Numerics.Complex.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-424">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-424">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-425">32 ビット符号付き整数値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-425">Defines an implicit conversion of a 32-bit signed integer to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-426">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-426">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-427">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-427">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-428">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-428">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-429">このオーバー ロードでは、コンパイラは、次の例のように、符号付き 32 ビット整数から複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-429">This overload lets the compiler handle conversions from a signed 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-430">変換の結果は、複素数の実数部は符号付き 32 ビット整数と虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-430">Note that the result of the conversion is a complex number whose real part is equal to the signed 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#4)]   
 [!code-vb[System.Numerics.Complex.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-431">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-431">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-432">64 ビット符号付き整数値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-432">Defines an implicit conversion of a 64-bit signed integer to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-433">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-433">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-434">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-434">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-435">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-435">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-436">このオーバー ロードでは、コンパイラは、次の例のように、64 ビットの符号付き整数から複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-436">This overload lets the compiler handle conversions from a signed 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-437">変換の結果は、複素数の実数部は 64 ビットの符号付き整数と虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-437">Note that the result of the conversion is a complex number whose real part is equal to the signed 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#5)]   
 [!code-vb[System.Numerics.Complex.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#5)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-438">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-438">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-439">符号付きバイト値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-439">Defines an implicit conversion of a signed byte to a complex number.</span>
          </span>
          <span data-ttu-id="d4300-440">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-440">This API is not CLS-compliant.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-441">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-441">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-442">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-442">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-443">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-443">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-444">このオーバー ロードでは、コンパイラは、次の例のように、符号付きバイトから複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-444">This overload lets the compiler handle conversions from a signed byte to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-445">変換の結果は、複素数の実数部を符号付きバイトと虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-445">Note that the result of the conversion is a complex number whose real part is equal to the signed byte and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#6)]   
 [!code-vb[System.Numerics.Complex.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#6)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Single) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(float value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : single -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-446">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-446">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-447">単精度浮動小数点数から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-447">Defines an implicit conversion of a single-precision floating-point number to a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-448">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-448">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-449">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-449">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-450">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-450">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-451">このオーバー ロードにより、コンパイラからの変換を処理する<xref:System.Single>から次の例のように、複素数の値。</span><span class="sxs-lookup"><span data-stu-id="d4300-451">This overload lets the compiler handle conversions from a <xref:System.Single> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-452">変換の結果は、複素数の実数部と等しいことに注意してください、<xref:System.Single>値と虚数部は 0 です。</span><span class="sxs-lookup"><span data-stu-id="d4300-452">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Single> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#7)]   
 [!code-vb[System.Numerics.Complex.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#7)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-453">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-453">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-454">16 ビット符号なし整数値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-454">Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</span>
          </span>
          <span data-ttu-id="d4300-455">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-455">This API is not CLS-compliant.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-456">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-456">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-457">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-457">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-458">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-458">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-459">このオーバー ロードでは、コンパイラは、次の例のように、16 ビット符号なし整数から複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-459">This overload lets the compiler handle conversions from an unsigned 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-460">変換の結果は、複素数の実数部は 16 ビット符号なし整数と虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-460">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#8)]   
 [!code-vb[System.Numerics.Complex.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-461">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-461">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-462">32 ビット符号なし整数値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-462">Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</span>
          </span>
          <span data-ttu-id="d4300-463">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-463">This API is not CLS-compliant.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-464">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-464">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-465">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-465">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-466">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-466">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-467">このオーバー ロードでは、コンパイラは、次の例のように、符号なし 32 ビット整数から複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-467">This overload lets the compiler handle conversions from an unsigned 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-468">変換の結果は、複素数の実数部は 32 ビットの符号なし整数と虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-468">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#9)]   
 [!code-vb[System.Numerics.Complex.Implicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#9)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-469">複素数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-469">The value to convert to a complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-470">64 ビット符号なし整数値から複素数への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-470">Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</span>
          </span>
          <span data-ttu-id="d4300-471">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-471">This API is not CLS-compliant.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-472">
            <paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-472">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-473">オーバー ロード、<xref:System.Numerics.Complex.op_Implicit%2A>演算子は、コンパイラを自動的に変換する元の型を定義、<xref:System.Numerics.Complex>せずに明示的なキャスト演算子 (c#) または (Visual Basic) の変換関数の呼び出しオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-473">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="d4300-474">これらには、拡大変換をデータの損失を伴わないおよびスローしないでください、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-474">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="d4300-475">このオーバー ロードでは、コンパイラは、次の例のように、符号なし 64 ビット整数から複素数への変換を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d4300-475">This overload lets the compiler handle conversions from an unsigned 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="d4300-476">変換の結果は、複素数の実数部は 64 ビットの符号なし整数と虚数部は 0 に等しいことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-476">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#10)]   
 [!code-vb[System.Numerics.Complex.Implicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#10)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-477">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-477">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-478">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-478">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-479">2 つの複素数が等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-479">Returns a value that indicates whether two complex numbers are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-480">
            <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-480">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-481"><xref:System.Numerics.Complex.op_Equality%2A>メソッドは、複素数の非等値演算子の動作を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-481">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the inequality operator for complex numbers.</span></span> <span data-ttu-id="d4300-482">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-482">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.inequality/cs/inequality1.cs#1)]
 [!code-vb[System.Numerics.Complex.Inequality#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.inequality/vb/inequality1.vb#1)]  
  
 <span data-ttu-id="d4300-483">カスタム演算子をサポートしない言語を呼び出すことによって非等値をテストできます、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>メソッドとその値を反転します。</span><span class="sxs-lookup"><span data-stu-id="d4300-483">Languages that do not support custom operators can test for inequality by calling the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method and reversing its value.</span></span>  
  
 <span data-ttu-id="d4300-484">有効桁数が異なる、ため明らかと等価である 2 つの複素数できると見なされる等しくないに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-484">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="d4300-485">1 つの可能な回避策を返す比較メソッドを実装する`true`2 つの複素数の実数部と虚数部部分部分の違いは、特定のしきい値を超えた場合にのみ (などの実数部または虚数部のコンポーネントの値の 01%。1 つの複素数の)。</span><span class="sxs-lookup"><span data-stu-id="d4300-485">One possible workaround is to implement a comparison method that returns `true` only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers).</span></span> <span data-ttu-id="d4300-486">詳細については、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d4300-486">For more information, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-487">乗算する 1 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-487">The first value to multiply.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-488">乗算する 2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-488">The second value to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-489">指定した 2 つの複素数を乗算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-489">Multiplies two specified complex numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-490">
            <paramref name="left" /> と <paramref name="right" /> の積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-490">The product of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-491"><xref:System.Numerics.Complex.op_Multiply%2A>メソッドは、複素数を乗算演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-491">The <xref:System.Numerics.Complex.op_Multiply%2A> method defines the operation of the multiplication operator for complex numbers.</span></span> <span data-ttu-id="d4300-492">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-492">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Multiply#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply2.cs#2)]
 [!code-vb[System.Numerics.Complex.Multiply#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply2.vb#2)]  
  
 <span data-ttu-id="d4300-493">複雑なの乗算 number, a + bi、および 2 番目の複素数、c + di は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-493">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-494">(ac - bd) + (ad + bc) i</span><span class="sxs-lookup"><span data-stu-id="d4300-494">(ac - bd) + (ad + bc)i</span></span>  
  
 <span data-ttu-id="d4300-495">そのコンポーネントの値がいずれかの場合は、乗算の結果は実数部または虚数部のいずれかのコンポーネントでオーバーフローが発生、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-495">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-496">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.Complex.Multiply%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-496">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%2A> method instead.</span></span>  
  
 <span data-ttu-id="d4300-497">この演算子を同等の方法は、します。 <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d4300-497">The equivalent method for this operator is <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-498">減算される値 (被減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-498">The value to subtract from (the minuend).</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-499">減算する値 (減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-499">The value to subtract (the subtrahend).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-500">複素数を別の複素数から減算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-500">Subtracts a complex number from another complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-501">
            <paramref name="right" /> から <paramref name="left" /> を減算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-501">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-502"><xref:System.Numerics.Complex.op_Subtraction%2A>メソッドは、複素数を減算演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-502">The <xref:System.Numerics.Complex.op_Subtraction%2A> method defines the operation of the subtraction operator for complex numbers.</span></span> <span data-ttu-id="d4300-503">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-503">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Subtract#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract2.cs#2)]
 [!code-vb[System.Numerics.Complex.Subtract#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract2.vb#2)]  
  
 <span data-ttu-id="d4300-504">そのコンポーネントの値は、いずれかの場合は、メソッドのいずれかでオーバーフローが発生、結果が実数部または虚数部のコンポーネントで呼び出し、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-504">If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-505">複素数、c + di、別の複素数から減算、+、bi は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-505">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-506">(c、-) + (b、d) i</span><span class="sxs-lookup"><span data-stu-id="d4300-506">(a - c) + (b - d)i</span></span>  
  
 <span data-ttu-id="d4300-507">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.Complex.Subtract%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-507">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%2A> method instead.</span></span>  
  
 <span data-ttu-id="d4300-508">この演算子を同等の方法は、します。 <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d4300-508">The equivalent method for this operator is <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_UnaryNegation(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-509">否定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-509">The value to negate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-510">指定した複素数の加法に関する逆元を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-510">Returns the additive inverse of a specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-511">
            <paramref name="value" /> パラメーターの <see cref="P:System.Numerics.Complex.Real" /> 部および <see cref="P:System.Numerics.Complex.Imaginary" /> 部に -1 を乗算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-511">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-512"><xref:System.Numerics.Complex.op_UnaryNegation%2A>メソッドは、複素数の単項否定 (加法に関する逆元) 演算子の動作を定義します。</span><span class="sxs-lookup"><span data-stu-id="d4300-512">The <xref:System.Numerics.Complex.op_UnaryNegation%2A> method defines the operation of the unary negation (additive inverse) operator for complex numbers.</span></span> <span data-ttu-id="d4300-513">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-513">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate2.cs#2)]
 [!code-vb[System.Numerics.Complex.Negate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate2.vb#2)]  
  
 <span data-ttu-id="d4300-514">結果として得られる複素数の値を生成する<xref:System.Numerics.Complex>0 (ゼロ) 元の値に追加されたとき。</span><span class="sxs-lookup"><span data-stu-id="d4300-514">The resulting complex number produces a value of <xref:System.Numerics.Complex> 0 (zero) when it is added to the original complex number.</span></span> <span data-ttu-id="d4300-515">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.Complex.Negate%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d4300-515">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="d4300-516">この演算子を同等の方法は、します。 <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d4300-516">The equivalent method for this operator is <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Phase">
      <MemberSignature Language="C#" Value="public double Phase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Phase" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Phase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phase As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Phase { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Phase : double" Usage="System.Numerics.Complex.Phase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-517">複素数のフェーズを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-517">Gets the phase of a complex number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4300-518">複素数のフェーズ (ラジアン単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-518">The phase of a complex number, in radians.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-519">複素数の bi、フェーズが算出 + <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b、)。</span><span class="sxs-lookup"><span data-stu-id="d4300-519">For a complex number a + bi, the phase is computed as <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b, a).</span></span>  
  
 <span data-ttu-id="d4300-520">複素平面上、デカルト座標または極座標によっての複素数を識別できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-520">You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates.</span></span> <span data-ttu-id="d4300-521">複素数のフェーズ (引数) は、複素数で表されるポイントの原点 (x 軸と y 軸の交点) から描画される線での実際の軸を角度です。</span><span class="sxs-lookup"><span data-stu-id="d4300-521">The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number.</span></span> <span data-ttu-id="d4300-522">絶対値 (によって表される、<xref:System.Numerics.Complex.Magnitude%2A>プロパティ) の原点から複素数で表されるポイントまでの距離がします。</span><span class="sxs-lookup"><span data-stu-id="d4300-522">The magnitude (represented by the <xref:System.Numerics.Complex.Magnitude%2A> property) is the distance from the point of origin to the point that is represented by the complex number.</span></span>  
  
 <span data-ttu-id="d4300-523">呼び出して、デカルト座標ではなく、極座標に基づく値から複素数をインスタンス化することができます、<xref:System.Numerics.Complex.FromPolarCoordinates%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-523">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
 <span data-ttu-id="d4300-524">フェーズをラジアンから度に変換する 180 で乗算/<xref:System.Math.PI?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-524">To convert the phase from radians to degrees, multiply it by 180/<xref:System.Math.PI?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-525">次の例で、<xref:System.Numerics.Complex.FromPolarCoordinates%2A>する複素数をインスタンス化、極座標に基づくメソッドとの値を表示し、その<xref:System.Numerics.Complex.Magnitude%2A>と<xref:System.Numerics.Complex.Phase%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-525">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Pow">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-526">指定した値で複素数を累乗した値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-526">Returns a specified complex number raised to a specified power.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, float64 power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, double power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-527">累乗する複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-527">A complex number to be raised to a power.</span>
          </span>
        </param>
        <param name="power">
          <span data-ttu-id="d4300-528">累乗を指定する倍精度浮動小数点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-528">A double-precision floating-point number that specifies a power.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-529">倍精度浮動小数点数で指定した値で複素数を累乗した値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-529">Returns a specified complex number raised to a power specified by a double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-530">複素数 <paramref name="value" /> を <paramref name="power" /> で累乗した値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-530">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-531">`value` が <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType> の場合、メソッドは <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="d4300-531">If `value` is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-532">その他の値の場合は`power`0 の場合は、メソッドが返される<xref:System.Numerics.Complex.One?displayProperty=nameWithType>、場合`power`は 1 を返します`value`です。</span><span class="sxs-lookup"><span data-stu-id="d4300-532">For other values, if `power` is 0, the method returns <xref:System.Numerics.Complex.One?displayProperty=nameWithType>, and if `power` is 1, it returns `value`.</span></span>  
  
 <span data-ttu-id="d4300-533">このメソッドに対応、<xref:System.Math.Pow%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-533">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-534">次の例では、値の範囲が-1 から 10 に複雑な数と指数部を使用して指数演算を示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-534">The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.pow/cs/pow1.cs#1)]
 [!code-vb[System.Numerics.Complex.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, valuetype System.Numerics.Complex power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, System::Numerics::Complex power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-535">累乗する複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-535">A complex number to be raised to a power.</span>
          </span>
        </param>
        <param name="power">
          <span data-ttu-id="d4300-536">累乗に使用する値を指定する複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-536">A complex number that specifies a power.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-537">別の複素数で指定した値で複素数を累乗した値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-537">Returns a specified complex number raised to a power specified by a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-538">複素数 <paramref name="value" /> を <paramref name="power" /> で累乗した値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-538">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public double Real { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Real" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Real" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Real As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Real { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Real : double" Usage="System.Numerics.Complex.Real" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-539">現在の <see cref="T:System.Numerics.Complex" /> オブジェクトの実数部を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-539">Gets the real component of the current <see cref="T:System.Numerics.Complex" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4300-540">複素数の実数部。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-540">The real component of a complex number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-541">複素数の指定、+、bi、<xref:System.Numerics.Complex.Real%2A>プロパティの値を返します、します。</span><span class="sxs-lookup"><span data-stu-id="d4300-541">Given a complex number a + bi, the <xref:System.Numerics.Complex.Real%2A> property returns the value of a.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-542">次の例の配列をインスタンス化<xref:System.Numerics.Complex>オブジェクトし、フォームでは、それぞれの実数部と虚数部のコンポーネントが表示されます、+ bi です。</span><span class="sxs-lookup"><span data-stu-id="d4300-542">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Imaginary" />
      </Docs>
    </Member>
    <Member MemberName="Reciprocal">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Reciprocal(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Reciprocal (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Reciprocal(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Reciprocal : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Reciprocal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-543">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-543">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-544">複素数の逆数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-544">Returns the multiplicative inverse of a complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-545">
            <paramref name="value" /> の逆数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-545">The reciprocal of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-546">逆数、または数の逆数*x*数値*y*場所*x*を掛けた*y* 1 となります。</span><span class="sxs-lookup"><span data-stu-id="d4300-546">The reciprocal, or multiplicative inverse, of a number *x* is a number *y* where *x* multiplied by *y* yields 1.</span></span> <span data-ttu-id="d4300-547">複素数の逆数を生成する複素数<xref:System.Numerics.Complex.One?displayProperty=nameWithType>2 つの数値が乗算されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-547">The reciprocal of a complex number is the complex number that produces <xref:System.Numerics.Complex.One?displayProperty=nameWithType> when the two numbers are multiplied.</span></span> <span data-ttu-id="d4300-548">その逆数を式で表される値から複素数は、a + bi で表される場合、/(、<sup>2</sup>+ b<sup>2</sup>) + b/(、<sup>2</sup> + b<sup>2</sup>)。</span><span class="sxs-lookup"><span data-stu-id="d4300-548">If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a<sup>2</sup>+b<sup>2</sup>) + -b/(a<sup>2</sup> + b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="d4300-549">値が場合<xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>、メソッドを返します<xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-549">If value is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d4300-550">それ以外の場合、式の結果を返します<xref:System.Numerics.Complex.One?displayProperty=nameWithType> /`value`です。</span><span class="sxs-lookup"><span data-stu-id="d4300-550">Otherwise, it returns the result of the expression <xref:System.Numerics.Complex.One?displayProperty=nameWithType>/`value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-551">次の例では、<xref:System.Numerics.Complex.Reciprocal%2A>メソッドをいくつかの複素数の相互の値を計算します。</span><span class="sxs-lookup"><span data-stu-id="d4300-551">The following example uses the <xref:System.Numerics.Complex.Reciprocal%2A> method to calculate the reciprocal values of several complex numbers.</span></span> <span data-ttu-id="d4300-552">その逆数で複素数を乗算した結果ことも示します<xref:System.Numerics.Complex.One?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-552">It also demonstrates that the result of multiplying a complex number by its reciprocal is <xref:System.Numerics.Complex.One?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/cs/reciprocal1.cs#1)]
 [!code-vb[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/vb/reciprocal1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-553">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-553">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-554">指定した複素数のサインを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-554">Returns the sine of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-555">
            <paramref name="value" /> のサイン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-555">The sine of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-556"><xref:System.Numerics.Complex.Sin%2A>複素数のメソッドに対応して、<xref:System.Math.Sin%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-556">The <xref:System.Numerics.Complex.Sin%2A> method for complex numbers corresponds to the <xref:System.Math.Sin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-557"><xref:System.Numerics.Complex.Sin%2A>メソッドでは、次の数式を使用して、複素数のサインを計算する + bi:</span><span class="sxs-lookup"><span data-stu-id="d4300-557">The <xref:System.Numerics.Complex.Sin%2A> method uses the following formula to calculate the sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="d4300-558">(<xref:System.Math.Sin%2A>(a) * <xref:System.Math.Cosh%2A>(b)、 <xref:System.Math.Cos%2A>(a) * <xref:System.Math.Sinh%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="d4300-558">(<xref:System.Math.Sin%2A>(a) * <xref:System.Math.Cosh%2A>(b), <xref:System.Math.Cos%2A>(a) * <xref:System.Math.Sinh%2A>(b))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-559">次の例を示しています、<xref:System.Numerics.Complex.Sin%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-559">The following example illustrates the <xref:System.Numerics.Complex.Sin%2A> method.</span></span> <span data-ttu-id="d4300-560">によって返される値を渡すことを示しています、<xref:System.Numerics.Complex.Asin%2A>メソッドを<xref:System.Numerics.Complex.Sin%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-560">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Asin(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sinh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sinh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sinh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sinh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sinh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-561">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-561">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-562">指定した複素数のハイパーボリック サインを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-562">Returns the hyperbolic sine of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-563">
            <paramref name="value" /> のハイパーボリック サイン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-563">The hyperbolic sine of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-564"><xref:System.Numerics.Complex.Sinh%2A>複素数のメソッドに対応して、<xref:System.Math.Sinh%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-564">The <xref:System.Numerics.Complex.Sinh%2A> method for complex numbers corresponds to the <xref:System.Math.Sinh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-565"><xref:System.Numerics.Complex.Sinh%2A>メソッドでは、次の数式を使用して、複素数のハイパーボリック サインを計算する + bi:</span><span class="sxs-lookup"><span data-stu-id="d4300-565">The <xref:System.Numerics.Complex.Sinh%2A> method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="d4300-566">(<xref:System.Math.Sinh%2A>(a) * <xref:System.Math.Cos%2A>(b)、 <xref:System.Math.Cosh%2A>(a) * <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="d4300-566">(<xref:System.Math.Sinh%2A>(a) * <xref:System.Math.Cos%2A>(b), <xref:System.Math.Cosh%2A>(a) * <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sinh(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sqrt(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sqrt(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sqrt : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sqrt value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-567">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-567">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-568">指定した複素数の平方根を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-568">Returns the square root of a specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-569">
            <paramref name="value" /> の平方根。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-569">The square root of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-570">複素数の平方根`value`次の数式を使用して計算されます。</span><span class="sxs-lookup"><span data-stu-id="d4300-570">The square root of the complex number `value` is calculated by using the following formula:</span></span>  
  
 <span data-ttu-id="d4300-571"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2.0)</span><span class="sxs-lookup"><span data-stu-id="d4300-571"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2.0)</span></span>   
  
 <span data-ttu-id="d4300-572"><xref:System.Numerics.Complex.Sqrt%2A>複素数のメソッドに対応して、<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-572">The <xref:System.Numerics.Complex.Sqrt%2A> method for complex numbers corresponds to the <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d4300-573">減算される値 (被減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-573">The value to subtract from (the minuend).</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d4300-574">減算する値 (減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-574">The value to subtract (the subtrahend).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-575">複素数を別の複素数から減算し、その結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-575">Subtracts one complex number from another and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-576">
            <paramref name="right" /> から <paramref name="left" /> を減算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-576">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-577">複素数、c + di、別の複素数から減算、+、bi は次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="d4300-577">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>  
  
 <span data-ttu-id="d4300-578">(c、-) + (b、d) i</span><span class="sxs-lookup"><span data-stu-id="d4300-578">(a - c) + (b - d)i</span></span>  
  
 <span data-ttu-id="d4300-579">そのコンポーネントの値は、いずれかの場合は、メソッドのいずれかでオーバーフローが発生、結果が実数部または虚数部のコンポーネントで呼び出し、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-579">If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d4300-580">カスタム演算子をサポートしない言語を使用して、<xref:System.Numerics.Complex.Subtract%2A>複素数を使用して減算を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d4300-580">Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Subtract%2A> method to perform subtraction using complex numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-581">次の例では、複素数から、配列内の各複素数を減算します。</span><span class="sxs-lookup"><span data-stu-id="d4300-581">The following example subtracts each complex number in an array from a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract1.cs#1)]
 [!code-vb[System.Numerics.Complex.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-582">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-582">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-583">指定した複素数のタンジェントを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-583">Returns the tangent of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-584">
            <paramref name="value" /> のタンジェント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-584">The tangent of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-585"><xref:System.Numerics.Complex.Tan%2A>複素数のメソッドに対応して、<xref:System.Math.Tan%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-585">The <xref:System.Numerics.Complex.Tan%2A> method for complex numbers corresponds to the <xref:System.Math.Tan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-586"><xref:System.Numerics.Complex.Tan%2A>メソッドでは、次の数式を使用して、複素数のタンジェントを計算`value`:</span><span class="sxs-lookup"><span data-stu-id="d4300-586">The <xref:System.Numerics.Complex.Tan%2A> method uses the following formula to calculate the tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="d4300-587"><xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="d4300-587"><xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-588">次の例を示しています、<xref:System.Numerics.Complex.Tan%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-588">The following example illustrates the <xref:System.Numerics.Complex.Tan%2A> method.</span></span> <span data-ttu-id="d4300-589">によって返される値を渡すことを示しています、<xref:System.Numerics.Complex.Atan%2A>メソッドを<xref:System.Numerics.Complex.Tan%2A>メソッドは、元を返します<xref:System.Numerics.Complex>値。</span><span class="sxs-lookup"><span data-stu-id="d4300-589">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Tan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tanh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tanh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tanh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tanh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tanh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d4300-590">複素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-590">A complex number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-591">指定した複素数のハイパーボリック タンジェントを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-591">Returns the hyperbolic tangent of the specified complex number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-592">
            <paramref name="value" /> のハイパーボリック タンジェント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-592">The hyperbolic tangent of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-593"><xref:System.Numerics.Complex.Tanh%2A>複素数のメソッドに対応して、<xref:System.Math.Tanh%2A?displayProperty=nameWithType>実数のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d4300-593">The <xref:System.Numerics.Complex.Tanh%2A> method for complex numbers corresponds to the <xref:System.Math.Tanh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="d4300-594"><xref:System.Numerics.Complex.Tanh%2A>メソッドでは、次の数式を使用して、複素数のハイパーボリック タンジェントを計算`value`:</span><span class="sxs-lookup"><span data-stu-id="d4300-594">The <xref:System.Numerics.Complex.Tanh%2A> method uses the following formula to calculate the hyperbolic tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="d4300-595"><xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="d4300-595"><xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Tanh(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-596">複素数の値を等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-596">Converts the value of a complex number to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="complex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4300-597">現在の複素数の値を等価のデカルト形式の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-597">Converts the value of the current complex number to its equivalent string representation in Cartesian form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-598">現在のインスタンスを表すデカルト形式の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-598">The string representation of the current instance in Cartesian form.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-599">複素数の既定の文字列表現形式で、デカルト座標を使用して数を表示する`(` *、* `,` *b*`)`ここで、 *、* は、複素数の実数部と*b*虚数部は、します。</span><span class="sxs-lookup"><span data-stu-id="d4300-599">The default string representation of a complex number displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="d4300-600">両方 *、* と*b*一般書式指定子 ("G") と、現在のシステムのカルチャの規則を使用してフォーマットされています。</span><span class="sxs-lookup"><span data-stu-id="d4300-600">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the current system culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-601">次の例では、いくつかの複雑な数値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-601">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="d4300-602">出力は、英語 - 米国 ("EN-US") カルチャである、この例では、現在のシステムのカルチャの書式指定規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-602">The output uses the formatting conventions of the English - United States ("en-US") culture, which, in this case, is the current system culture.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Numerics.Complex.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="complex.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="d4300-603">カルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-603">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-604">指定したカルチャ固有の書式情報を使用して、現在の複素数を等価のデカルト形式の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-604">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-605">
            <paramref name="provider" /> が指定する現在のインスタンスのデカルト形式の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-605">The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-606">このメソッドによって返される複雑な数の文字列形式には、フォームで、デカルト座標を使用する番号が表示されます`(` *、* `,` *b*`)`、。ここで *、* は、複素数の実数部と*b*虚数部は、します。</span><span class="sxs-lookup"><span data-stu-id="d4300-606">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="d4300-607">両方 *、* と*b*一般書式指定子 ("G") として定義されているカルチャの規則を使用してフォーマットされて`provider`です。</span><span class="sxs-lookup"><span data-stu-id="d4300-607">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the culture defined by `provider`.</span></span>  
  
 <span data-ttu-id="d4300-608">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="d4300-608">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="d4300-609">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>実数と虚数で返される文字列の書式に関するカルチャ固有の情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-609">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="d4300-610">場合`provider`は`null`、返される文字列を使用して、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-610">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="d4300-611">`provider`パラメーターは、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-611">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="d4300-612">A<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト</span><span class="sxs-lookup"><span data-stu-id="d4300-612">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="d4300-613"><xref:System.Globalization.NumberFormatInfo>を書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-613">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="d4300-614">実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="d4300-614">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="d4300-615">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>を書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-615">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-616">次の例では、いくつかの複雑な数値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-616">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="d4300-617">結果は、英語 - 米国 ("EN-US") とフランス語 - フランス ("FR-FR") のカルチャの書式指定規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="d4300-617">The result uses the formatting conventions of the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Numerics.Complex.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="complex.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="d4300-618">標準またはカスタムの数値書式指定文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-618">A standard or custom numeric format string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-619">実数部と虚数部で構成される指定した書式を使用して、現在の複素数を等価のデカルト形式の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-619">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-620">現在のインスタンスを表すデカルト形式の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-620">The string representation of the current instance in Cartesian form.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-621">このメソッドによって返される複雑な数の文字列形式には、フォームで、デカルト座標を使用する番号が表示されます`(` *、* `,` *b*`)`、。ここで *、* は、複素数の実数部と*b*虚数部は、します。</span><span class="sxs-lookup"><span data-stu-id="d4300-621">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="d4300-622">両方 *、* と*b*で指定された書式指定文字列を使用してフォーマットされて`format`です。</span><span class="sxs-lookup"><span data-stu-id="d4300-622">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="d4300-623">`format`パラメーターには、任意の有効な標準の数値書式指定子、またはカスタムの数値書式指定子の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-623">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="d4300-624">場合`format`と等しい<xref:System.String.Empty?displayProperty=nameWithType>かが`null`複素数の実数部と虚数部の部分は、一般書式指定子 ("G") でフォーマットされています。</span><span class="sxs-lookup"><span data-stu-id="d4300-624">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="d4300-625">場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-625">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="d4300-626">.NET Framework では、次のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="d4300-626">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="d4300-627">数値書式指定文字列の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="d4300-627">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="d4300-628">.NET Framework における書式設定の詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="d4300-628">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="d4300-629">によって返される文字列の形式が決定されます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-629">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="d4300-630">によって、`format`パラメーター、このオブジェクトは、マイナス記号、桁区切り記号で、出力文字列に小数点記号などのシンボルを制御します。</span><span class="sxs-lookup"><span data-stu-id="d4300-630">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="d4300-631">現在のカルチャ以外のカルチャの書式情報を提供するには、呼び出し、<xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="d4300-631">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-632">次の例では、複素数を初期化し、いくつかの標準書式指定文字列を使用して、表示します。</span><span class="sxs-lookup"><span data-stu-id="d4300-632">The following example initializes a complex number and displays it using several standard format strings.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Numerics.Complex.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="d4300-633">
            <paramref name="format" /> は有効な文字列ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-633">
              <paramref name="format" /> is not a valid format string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="complex.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="d4300-634">標準またはカスタムの数値書式指定文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-634">A standard or custom numeric format string.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="d4300-635">カルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-635">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4300-636">実数部と虚数部で構成される指定した書式およびカルチャ固有の書式情報を使用して、現在の複素数を等価のデカルト形式の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-636">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4300-637">
            <paramref name="format" /> および <paramref name="provider" /> が指定する現在のインスタンスのデカルト形式の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-637">The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-638">このメソッドによって返される複雑な数の文字列形式には、フォームで、デカルト座標を使用する番号が表示されます`(` *、* `,` *b*`)`、。ここで *、* は、複素数の実数部と*b*虚数部は、します。</span><span class="sxs-lookup"><span data-stu-id="d4300-638">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="d4300-639">両方 *、* と*b*で指定された書式指定文字列を使用してフォーマットされて`format`です。</span><span class="sxs-lookup"><span data-stu-id="d4300-639">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="d4300-640">`format`パラメーターには、任意の有効な標準の数値書式指定子、またはカスタムの数値書式指定子の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-640">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="d4300-641">場合`format`と等しい<xref:System.String.Empty?displayProperty=nameWithType>かが`null`複素数の実数部と虚数部の部分は、一般書式指定子 ("G") でフォーマットされています。</span><span class="sxs-lookup"><span data-stu-id="d4300-641">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="d4300-642">場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。</span><span class="sxs-lookup"><span data-stu-id="d4300-642">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="d4300-643">.NET Framework では、次のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="d4300-643">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="d4300-644">数値書式指定文字列の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="d4300-644">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="d4300-645">.NET Framework における書式設定の詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="d4300-645">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="d4300-646">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="d4300-646">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="d4300-647">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>実数と虚数で返される文字列の書式に関するカルチャ固有の情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-647">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="d4300-648">によって、`format`パラメーター、このオブジェクトは、マイナス記号、桁区切り記号で、出力文字列に小数点記号などのシンボルを制御します。</span><span class="sxs-lookup"><span data-stu-id="d4300-648">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="d4300-649">場合`provider`は`null`、返される文字列を使用して、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-649">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="d4300-650">`provider`パラメーターは、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d4300-650">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="d4300-651">A<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト</span><span class="sxs-lookup"><span data-stu-id="d4300-651">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="d4300-652"><xref:System.Globalization.NumberFormatInfo>を書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-652">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="d4300-653">実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="d4300-653">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="d4300-654">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>を書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-654">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-655">次の例は、複素数の配列を作成し、いくつかの標準書式指定文字列を使用して各表示だけでなく<xref:System.Globalization.CultureInfo>英語 - 米国 ("EN-US") とフランス語 - フランス ("FR-FR") のカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d4300-655">The following example creates an array of complex numbers, and displays each using several standard format strings as well as <xref:System.Globalization.CultureInfo> objects that represent the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring4.cs#4)]
 [!code-vb[System.Numerics.Complex.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="d4300-656">
            <paramref name="format" /> は有効な文字列ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-656">
              <paramref name="format" /> is not a valid format string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex Zero" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex Zero;" />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : System.Numerics.Complex" Usage="System.Numerics.Complex.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4300-657">実数が 0 で虚数が 0 の新しい <see cref="T:System.Numerics.Complex" /> インスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4300-657">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4300-658"><xref:System.Numerics.Complex.Zero>プロパティが最もよく使用される比較に、<xref:System.Numerics.Complex>値を 0 にします。</span><span class="sxs-lookup"><span data-stu-id="d4300-658">The <xref:System.Numerics.Complex.Zero> property is most frequently used to compare a <xref:System.Numerics.Complex> value to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4300-659">次の例のインスタンスを作成、<xref:System.Numerics.Complex>値を使用して、<xref:System.Numerics.Complex.Zero>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d4300-659">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.Zero> property.</span></span> <span data-ttu-id="d4300-660">この値を呼び出すことによってインスタンス化される別の値を比較して、 <xref:System.Numerics.Complex> 0 に等しい実数部と虚数部 0 に等しいを持つコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="d4300-660">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to zero.</span></span> <span data-ttu-id="d4300-661">例の出力に示す 2 つの値が等しいです。</span><span class="sxs-lookup"><span data-stu-id="d4300-661">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.zero/cs/zero1.cs#1)]
 [!code-vb[System.Numerics.Complex.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.zero/vb/zero1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.One" />
      </Docs>
    </Member>
  </Members>
</Type>