<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="073c2f454818fb175ef8bf63702301eeccb18ed7" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48692176" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <TypeSignature Language="VB.NET" Value="Public Structure BigInteger&#xA;Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class BigInteger : IComparable, IComparable&lt;System::Numerics::BigInteger&gt;, IEquatable&lt;System::Numerics::BigInteger&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type BigInteger = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0f1a6-101">任意の大きさを持つ符号付き整数を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0f1a6-101">Represents an arbitrarily large signed integer.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-102"><xref:System.Numerics.BigInteger>型は、理論的には値に上限や下限がないサイズの大きい任意の整数を表す不変の型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-102">The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</span></span> <span data-ttu-id="0f1a6-103">メンバー、<xref:System.Numerics.BigInteger>型とか他の整数型 (、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.Int64>、 <xref:System.SByte>、 <xref:System.UInt16>、 <xref:System.UInt32>、および<xref:System.UInt64>型)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-103">The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types).</span></span> <span data-ttu-id="0f1a6-104">その他の整数型からこの型の違いは、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]で表される範囲である、`MinValue`と`MaxValue`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-104">This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-105"><xref:System.Numerics.BigInteger>型は変更できません (を参照してください[可変性や BigInteger 構造体](#mutability)) 上限または下限の境界があるないため、<xref:System.OutOfMemoryException>原因となるすべての操作に対してスローされる可能性を<xref:System.Numerics.BigInteger>すぎる拡張値大規模です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-105">Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.</span></span>  
  
## <a name="instantiating-a-biginteger-object"></a><span data-ttu-id="0f1a6-106">BigInteger オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-106">Instantiating a BigInteger Object</span></span>  
 <span data-ttu-id="0f1a6-107">インスタンス化することができます、<xref:System.Numerics.BigInteger>いくつかの方法でオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-107">You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:</span></span>  
  
-   <span data-ttu-id="0f1a6-108">使用することができます、`new`キーワードをパラメーターとして任意の整数または浮動小数点値を提供し、<xref:System.Numerics.BigInteger>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-108">You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="0f1a6-109">(が割り当てられるまで、浮動小数点の値は切り捨てられます、 <xref:System.Numerics.BigInteger>)。次の例を使用する方法を示しています、`new`をインスタンス化するキーワード<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-109">(Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   <span data-ttu-id="0f1a6-110">宣言することができます、<xref:System.Numerics.BigInteger>変数と割り当ての場合と同様の値とその値が整数型限り任意の数値型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-110">You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.</span></span> <span data-ttu-id="0f1a6-111">次の例では、割り当てを使用して、作成、<xref:System.Numerics.BigInteger>から値を<xref:System.Int64>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-111">The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   <span data-ttu-id="0f1a6-112">10 進数または浮動小数点値を割り当てることができます、<xref:System.Numerics.BigInteger>オブジェクトの値をキャストまたは、最初に変換するかどうか。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-112">You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first.</span></span> <span data-ttu-id="0f1a6-113">次の例が明示的にキャスト (で C# の場合) または (Visual Basic) で変換を<xref:System.Double>と<xref:System.Decimal>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-113">The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 <span data-ttu-id="0f1a6-114">これらのメソッドを使用すると、インスタンス化、<xref:System.Numerics.BigInteger>が既存の数値のいずれかの範囲内に値を持つオブジェクトの型だけです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-114">These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only.</span></span> <span data-ttu-id="0f1a6-115">インスタンス化することができます、<xref:System.Numerics.BigInteger>オブジェクトの値は 3 つの方法のいずれかで、既存の数値型の範囲を超えることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-115">You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:</span></span>  
  
-   <span data-ttu-id="0f1a6-116">使用することができます、`new`キーワードあらゆるサイズのバイト配列を提供し、<xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-116">You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="0f1a6-117">例:</span><span class="sxs-lookup"><span data-stu-id="0f1a6-117">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   <span data-ttu-id="0f1a6-118">呼び出すことができます、<xref:System.Numerics.BigInteger.Parse%2A>または<xref:System.Numerics.BigInteger.TryParse%2A>に数値の文字列形式に変換するメソッド、<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-118">You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>.</span></span> <span data-ttu-id="0f1a6-119">例:</span><span class="sxs-lookup"><span data-stu-id="0f1a6-119">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   <span data-ttu-id="0f1a6-120">呼び出すことができます、 `static` (`Shared` Visual Basic で)<xref:System.Numerics.BigInteger>数値式に対して何らかの操作を実行し、計算される返すメソッド<xref:System.Numerics.BigInteger>結果。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-120">You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result.</span></span> <span data-ttu-id="0f1a6-121">次の例では、これは、キューブ<xref:System.UInt64.MaxValue?displayProperty=nameWithType>し、結果を代入する<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-121">The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=nameWithType> and assigning the result to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 <span data-ttu-id="0f1a6-122">初期化されていない値を<xref:System.Numerics.BigInteger>は<xref:System.Numerics.BigInteger.Zero%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-122">The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.</span></span>  
  
## <a name="performing-operations-on-biginteger-values"></a><span data-ttu-id="0f1a6-123">BigInteger 値に対して操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-123">Performing Operations on BigInteger Values</span></span>  
 <span data-ttu-id="0f1a6-124">使用することができます、<xref:System.Numerics.BigInteger>インスタンスの他の任意の整数型を使用する場合とします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-124">You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type.</span></span> <span data-ttu-id="0f1a6-125"><xref:System.Numerics.BigInteger> 加算、減算、除算、乗算、減算、否定、単項マイナス演算子などの基本的な算術演算を実行できるようにする場合は、標準数値演算子をオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-125"><xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.</span></span> <span data-ttu-id="0f1a6-126">2 つを比較する、標準の数値演算子を使用することもできます。<xref:System.Numerics.BigInteger>相互の値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-126">You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other.</span></span> <span data-ttu-id="0f1a6-127">などの他の整数型、<xref:System.Numerics.BigInteger>もビットごとのようにサポート`And`、 `Or`、 `XOr`、左 shift キー、および右シフト演算子。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-127">Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators.</span></span> <span data-ttu-id="0f1a6-128">カスタム演算子をサポートしない言語に対して、<xref:System.Numerics.BigInteger>構造体には、算術演算を実行するための同等のメソッドも用意されています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-128">For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations.</span></span> <span data-ttu-id="0f1a6-129">以下の<xref:System.Numerics.BigInteger.Add%2A>、 <xref:System.Numerics.BigInteger.Divide%2A>、 <xref:System.Numerics.BigInteger.Multiply%2A>、 <xref:System.Numerics.BigInteger.Negate%2A>、 <xref:System.Numerics.BigInteger.Subtract%2A>、およびその他のいくつか。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-129">These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.</span></span>  
  
 <span data-ttu-id="0f1a6-130">多くのメンバー、<xref:System.Numerics.BigInteger>構造とその他の整数型のメンバーに直接対応します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-130">Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types.</span></span> <span data-ttu-id="0f1a6-131">さらに、<xref:System.Numerics.BigInteger>など、次のメンバーを追加します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-131">In addition, <xref:System.Numerics.BigInteger> adds members such as the following:</span></span>  
  
-   <span data-ttu-id="0f1a6-132"><xref:System.Numerics.BigInteger.Sign%2A>での符号を示す値を返す、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-132"><xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="0f1a6-133"><xref:System.Numerics.BigInteger.Abs%2A>、の絶対値を返す、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-133"><xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="0f1a6-134"><xref:System.Numerics.BigInteger.DivRem%2A>、商と除算の剰余の両方が返されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-134"><xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.</span></span>  
  
-   <span data-ttu-id="0f1a6-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>、2 つの最大公約数を返します<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="0f1a6-136">このメンバーの多くのメンバーに対応して、<xref:System.Math>クラスで、プリミティブな数値型を使用する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-136">Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.</span></span>  
  
<a name="mutability"></a>   
## <a name="mutability-and-the-biginteger-structure"></a><span data-ttu-id="0f1a6-137">可変性や BigInteger 構造体</span><span class="sxs-lookup"><span data-stu-id="0f1a6-137">Mutability and the BigInteger Structure</span></span>  
 <span data-ttu-id="0f1a6-138">次の例では、インスタンス化、<xref:System.Numerics.BigInteger>オブジェクトを 1 つの値をインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-138">The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 <span data-ttu-id="0f1a6-139">この例では、既存のオブジェクトの値を変更する表示されますが、これは、当てはまりません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-139">Although this example appears to modify the value of the existing object, this is not the case.</span></span> <span data-ttu-id="0f1a6-140"><xref:System.Numerics.BigInteger> オブジェクトは変更できなくなります。 つまり内部的には、共通言語ランタイムが実際に作成、新しい<xref:System.Numerics.BigInteger>オブジェクトと 1 つ前の値より大きい値を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-140"><xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value.</span></span> <span data-ttu-id="0f1a6-141">この新しいオブジェクトは、呼び出し元に返されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-141">This new object is then returned to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-142">.NET Framework の他の数値型も変更できません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-142">The other numeric types in the .NET Framework are also immutable.</span></span> <span data-ttu-id="0f1a6-143">ただし、ため、<xref:System.Numerics.BigInteger>型に上限や下限がない場合、その値が非常に大きくなるし、パフォーマンスに多大な影響があることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-143">However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.</span></span>  
  
 <span data-ttu-id="0f1a6-144">このプロセスは、呼び出し元に対して透過的ですには、パフォーマンスの低下を発生します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-144">Although this process is transparent to the caller, it does incur a performance penalty.</span></span> <span data-ttu-id="0f1a6-145">場合によっては、特に操作を繰り返し実行されるとき、ループ内で非常に大きな<xref:System.Numerics.BigInteger>値、そのパフォーマンスの低下を大幅に指定できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-145">In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant.</span></span> <span data-ttu-id="0f1a6-146">たとえば、次の例では、操作が、100万回まで繰り返し、<xref:System.Numerics.BigInteger>操作が成功するたびに、値が 1 ずつインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-146">For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 <span data-ttu-id="0f1a6-147">このような場合は、パフォーマンスが向上するすべての中間の割り当てを実行することによって、<xref:System.Int32>変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-147">In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable.</span></span> <span data-ttu-id="0f1a6-148">変数の最終的な値には割り当てられます、<xref:System.Numerics.BigInteger>オブジェクト、ループの終了時にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-148">The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits.</span></span> <span data-ttu-id="0f1a6-149">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-149">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## <a name="working-with-byte-arrays-and-hexadecimal-strings"></a><span data-ttu-id="0f1a6-150">バイト配列と 16 進数の文字列の操作</span><span class="sxs-lookup"><span data-stu-id="0f1a6-150">Working with Byte Arrays and Hexadecimal Strings</span></span>  
 <span data-ttu-id="0f1a6-151">変換する場合<xref:System.Numerics.BigInteger>バイト配列に値をバイト配列に変換する場合または<xref:System.Numerics.BigInteger>値、バイトの順序を考慮する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-151">If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes.</span></span> <span data-ttu-id="0f1a6-152"><xref:System.Numerics.BigInteger>構造体は、リトル エンディアン順で表示するバイト配列の個々 のバイトが必要です (つまり、上位バイトの前の値の下位バイト)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-152">The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).</span></span> <span data-ttu-id="0f1a6-153">ラウンドト リップすることができます、<xref:System.Numerics.BigInteger>値を呼び出すことによって、<xref:System.Numerics.BigInteger.ToByteArray%2A>メソッド結果のバイトを渡す、配列を<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>コンス トラクターには、次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-153">You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 <span data-ttu-id="0f1a6-154">インスタンス化する、<xref:System.Numerics.BigInteger>値からその他のいくつかの整数型の値を表すバイト配列、整数値を渡すことができます、<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>メソッド、および結果のバイト配列をパス、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-154">To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span> <span data-ttu-id="0f1a6-155">次の例では、インスタンス化、<xref:System.Numerics.BigInteger>を表すバイト配列から値を<xref:System.Int16>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-155">The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <span data-ttu-id="0f1a6-156"><xref:System.Numerics.BigInteger>構造体が 2 の補数表現を使用して、負の値が格納されていることを想定しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-156">The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation.</span></span> <span data-ttu-id="0f1a6-157"><xref:System.Numerics.BigInteger>構造がない固定長の数値を表して、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>コンス トラクターは、常に符号ビットとして、配列内の最後のバイトの最上位ビットを解釈します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-157">Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit.</span></span> <span data-ttu-id="0f1a6-158">防ぐために、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 2 の補数の表現負の値を正の値を正の符号および絶対値の表現との混乱を招くからコンス トラクターが、最も値をバイト配列内の最後のバイトの上位ビット通常はセットは、追加のバイト値が 0 を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-158">To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.</span></span> <span data-ttu-id="0f1a6-159">たとえば、0xC0 0xBD 0xF0 0xFF で-1,000,000 または 4,293,967,296 リトル エンディアンの 16 進表現であります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-159">For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.</span></span> <span data-ttu-id="0f1a6-160">バイト配列の値によって解釈されるこの配列の最後のバイトの最上位ビットは上にあるため、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>で-1,000,000 としてコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-160">Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000.</span></span> <span data-ttu-id="0f1a6-161">インスタンス化する、<xref:System.Numerics.BigInteger>値が正の値、0xC0 をられる要素を含むバイト配列 0xBD 0xF0 0xFF 0x00 をコンス トラクターに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-161">To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.</span></span> <span data-ttu-id="0f1a6-162">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-162">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 <span data-ttu-id="0f1a6-163">によって作成されたバイト配列、<xref:System.Numerics.BigInteger.ToByteArray%2A>メソッド正の値からがこの余分な 0 値のバイトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-163">Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte.</span></span> <span data-ttu-id="0f1a6-164">そのため、<xref:System.Numerics.BigInteger>構造への割り当てと、次の例のように、バイト配列から復元したり、値のラウンドト リップをことができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-164">Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 <span data-ttu-id="0f1a6-165">ただし、この追加の値 0 のバイトを開発者によって動的に作成されたまたは符号なし整数をバイト配列に変換するメソッドによって返されるをバイト配列に追加する必要がありますに可能性があります (など<xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>、 <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>、および<xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-165">However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="0f1a6-166">16 進数の文字列を解析するときに、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>と<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドとする場合は、文字列の最初のバイトの最上位ビットを設定すると、または文字列の最初の 16 進数の桁が下から 4 バイト値のビットを表す場合、値は2 つの補数表記を使用してを表されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-166">When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.</span></span> <span data-ttu-id="0f1a6-167">たとえば、"FF01"と"f01 のいずれ"の両方は、10 進値-255 を表します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-167">For example, both "FF01" and "F01" represent the decimal value -255.</span></span> <span data-ttu-id="0f1a6-168">負の値から正の値を区別するには、正の値は、先行ゼロを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-168">To differentiate positive from negative values, positive values should include a leading zero.</span></span> <span data-ttu-id="0f1a6-169">関連するオーバー ロード、<xref:System.Numerics.BigInteger.ToString%2A>メソッドは、"X"書式指定文字列で渡されるとは、正の値の場合は、返される 16 進数文字列に先行ゼロを追加します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-169">The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the "X" format string, add a leading zero to the returned hexadecimal string for positive values.</span></span> <span data-ttu-id="0f1a6-170">これにより、ラウンドト リップさせる<xref:System.Numerics.BigInteger>値を使用して、<xref:System.Numerics.BigInteger.ToString%2A>と<xref:System.Numerics.BigInteger.Parse%2A>メソッドは、次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-170">This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 <span data-ttu-id="0f1a6-171">16 進数の文字列を呼び出すことによって作成ただし、`ToString`他の整数型またはのオーバー ロードのメソッド、<xref:System.Convert.ToString%2A>メソッドが含まれる、`toBase`パラメーターは、値または元のソースのデータ型の符号を示していません16 進数の文字列が派生します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-171">However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.</span></span> <span data-ttu-id="0f1a6-172">正常にインスタンス化する、<xref:System.Numerics.BigInteger>このような文字列の値をいくつか追加のロジックが必要です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-172">Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic.</span></span> <span data-ttu-id="0f1a6-173">次の例では、1 つの考えられる実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-173">The following example provides one possible implementation.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-174">
            <see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-174">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : byte[] -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-175">リトル エンディアン順に格納されたバイト値の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-175">An array of byte values in little-endian order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-176">バイト配列の値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-176">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-177">個々 のバイト、`value`配列は、最上位バイトに最下位バイトから、リトル エンディアン順でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-177">The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte.</span></span> <span data-ttu-id="0f1a6-178">たとえば、数値 1,000,000,000,000 は、次の表に示すように表されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-178">For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0f1a6-179">16 進数文字列</span><span class="sxs-lookup"><span data-stu-id="0f1a6-179">Hexadecimal string</span></span>|<span data-ttu-id="0f1a6-180">E8D4A51000</span><span class="sxs-lookup"><span data-stu-id="0f1a6-180">E8D4A51000</span></span>|  
|<span data-ttu-id="0f1a6-181">バイト配列 (最初にインデックスが最も低い)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-181">Byte array (lowest index first)</span></span>|<span data-ttu-id="0f1a6-182">00 10 A5 D4 E8 00</span><span class="sxs-lookup"><span data-stu-id="0f1a6-182">00 10 A5 D4 E8 00</span></span>|  
  
 <span data-ttu-id="0f1a6-183">ほとんどのメソッドなどの数値をバイト配列に変換する<xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType>と<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>、リトル エンディアン順で、バイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-183">Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> and <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, return byte arrays in little-endian order.</span></span>  
  
 <span data-ttu-id="0f1a6-184">コンス トラクターでは、2 の補数表現を使用する、符号および絶対値による表現と負の値を使用するバイト配列内の正の値を期待しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-184">The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.</span></span> <span data-ttu-id="0f1a6-185">つまり、最上位ビットで最上位バイトのかどうかは`value`設定すると、その結果、<xref:System.Numerics.BigInteger>値が負の値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-185">In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative.</span></span> <span data-ttu-id="0f1a6-186">バイト配列のソースに応じて負の値として解釈される正の値があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-186">Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.</span></span> <span data-ttu-id="0f1a6-187">バイト配列は通常、次の方法で生成されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-187">Byte arrays are typically generated in the following ways:</span></span>  
  
-   <span data-ttu-id="0f1a6-188">呼び出すことによって、<xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-188">By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0f1a6-189">このメソッドは、正の値のゼロをアレイ セット内の最上位バイトの最上位ビットのバイト配列を返します、ために、負と正の値を解釈する可能性はありません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-189">Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.</span></span> <span data-ttu-id="0f1a6-190">によって作成されたバイト配列が変更されていない、<xref:System.Numerics.BigInteger.ToByteArray%2A>メソッドに渡されるときに常に正常にラウンドト リップ、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-190">Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
-   <span data-ttu-id="0f1a6-191">呼び出すことによって、<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>メソッドとパラメーターとして、符号付き整数を渡します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-191">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it a signed integer as a parameter.</span></span> <span data-ttu-id="0f1a6-192">符号付き整数では、符号および絶対値による表現と 2 の補数表現の両方を処理するため、負と正の値を解釈する可能性はありません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-192">Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</span></span>  
  
-   <span data-ttu-id="0f1a6-193">呼び出すことによって、<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>メソッドとパラメーターとして符号なし整数を渡します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-193">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it an unsigned integer as a parameter.</span></span> <span data-ttu-id="0f1a6-194">符号なし整数がその大きさだけで示されるため、正の値が負の値として誤って解釈されることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-194">Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.</span></span> <span data-ttu-id="0f1a6-195">この誤ってトライグラフとして解釈を防ぐためには、配列の末尾にゼロ バイトの値を追加できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-195">To prevent this misinterpretation, you can add a zero-byte value to the end of the array.</span></span> <span data-ttu-id="0f1a6-196">次のセクションの例に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-196">The example in the next section provides an illustration.</span></span>  
  
-   <span data-ttu-id="0f1a6-197">作成してバイト配列か、動的または静的にない必ずしもまたは既存のバイト配列を変更することで、上記の方法のいずれかを呼び出しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-197">By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.</span></span> <span data-ttu-id="0f1a6-198">正の値が負の値として誤って解釈されることを防ぐためには、配列の末尾にゼロ バイトの値を追加できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-198">To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</span></span>  
  
 <span data-ttu-id="0f1a6-199">場合`value`は、空<xref:System.Byte>配列、新しい<xref:System.Numerics.BigInteger>の値にオブジェクトが初期化される<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-199">If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-200">場合`value`は`null`、コンス トラクターがスローされます、<xref:System.ArgumentNullException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-200">If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-201">次の例では、インスタンス化、<xref:System.Numerics.BigInteger>値が {5、4、3、2, 1} 5 要素のバイト配列からのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-201">The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}.</span></span> <span data-ttu-id="0f1a6-202">これは、後、表示、<xref:System.Numerics.BigInteger>コンソールに、10 進数と 16 進数の両方の数値として表される値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-202">It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console.</span></span> <span data-ttu-id="0f1a6-203">テキスト出力、入力配列の比較では、その理由をオフになります。 のこのオーバー ロード、<xref:System.Numerics.BigInteger>クラスのコンス トラクターを作成、<xref:System.Numerics.BigInteger>オブジェクトの値が 4328719365 (または 0x102030405)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-203">A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405).</span></span> <span data-ttu-id="0f1a6-204">値が、5、バイト配列の最初の要素の下位バイトの値を定義する、 <xref:System.Numerics.BigInteger> 0x05 となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-204">The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05.</span></span> <span data-ttu-id="0f1a6-205">値が 4 バイト配列の 2 番目の要素の 2 番目のバイトの値を定義する、 <xref:System.Numerics.BigInteger> 0x04 となる、オブジェクトという具合です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-205">The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 <span data-ttu-id="0f1a6-206">次の例では、正の値と、負の値をインスタンス化<xref:System.Numerics.BigInteger>値には、コマンドを渡し、<xref:System.Numerics.BigInteger.ToByteArray%2A>メソッドでは、復元元<xref:System.Numerics.BigInteger>結果のバイト配列から値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-206">The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array.</span></span> <span data-ttu-id="0f1a6-207">2 つの値が同一のバイト配列で表されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-207">Note that the two values are represented by identical byte arrays.</span></span> <span data-ttu-id="0f1a6-208">それらの間の唯一の違いは、バイト配列の最後の要素の最上位ビットには。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-208">The only difference between them is in the most significant bit of the last element in the byte array.</span></span> <span data-ttu-id="0f1a6-209">このビットは、配列は、負の値から作成された場合 (バイトの値は 0 xff) 設定<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-209">This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="0f1a6-210">ビットが設定されていない (バイトの値は 0)、正の値の配列が作成された場合<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-210">The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 <span data-ttu-id="0f1a6-211">次の例を正の値が正しくインスタンス化されない負の値として値が配列の末尾にゼロ バイトを追加することでかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-211">The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f1a6-212">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-212">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : decimal -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-213">10 進数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-213">A decimal number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-214">
            <see cref="T:System.Decimal" /> 値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-214">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-215">このコンス トラクターの呼び出しの結果を明示的に割り当てるのと同じですが、<xref:System.Decimal>値を<xref:System.Numerics.BigInteger>変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-215">The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.</span></span>  
  
 <span data-ttu-id="0f1a6-216">このコンス トラクターを呼び出すデータ損失が発生することができます。小数部の`value`インスタンス化するときは切り捨てられます、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-216">Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-217">次の例では、使用、<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29>インスタンスを作成するコンス トラクター、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-217">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="0f1a6-218">配列を定義します<xref:System.Decimal>値とごとに値が渡されます、<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-218">It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor.</span></span> <span data-ttu-id="0f1a6-219">なお、<xref:System.Decimal>に割り当てられたときに丸められますの代わりに値が切り捨てられます、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-219">Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(double value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : double -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-220">倍精度浮動小数点数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-220">A double-precision floating-point value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-221">倍精度浮動小数点値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-221">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-222">小数部の`value`パラメーターがインスタンス化中に切り捨てられます、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-222">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="0f1a6-223">有効桁数がないのため、<xref:System.Double>このコンス トラクターの呼び出しのデータ型は、データ損失を引き起こすことができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-223">Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.</span></span>  
  
 <span data-ttu-id="0f1a6-224"><xref:System.Numerics.BigInteger>このコンス トラクターの呼び出しから結果値が明示的に割り当てることによって生成される値と同一で、<xref:System.Double>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-224">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-225">次の例では、使用、<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29>インスタンスを作成するコンス トラクター、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-225">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="0f1a6-226">使用する場合に発生する精度の損失も示しています、<xref:System.Double>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-226">It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type.</span></span> <span data-ttu-id="0f1a6-227">A<xref:System.Double>に割り当てられますが、大きな値が割り当てられている、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-227">A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="0f1a6-228">出力をこの割り当てには、精度の損失が含まれます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-228">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="0f1a6-229">両方の値は、いずれかで増加します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-229">Both values are then incremented by one.</span></span> <span data-ttu-id="0f1a6-230">出力を示していますが、<xref:System.Numerics.BigInteger>オブジェクトは変更後の値が反映されます、<xref:System.Double>オブジェクトはありません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-230">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-231">
            <paramref name="value" /> の値が <see cref="F:System.Double.NaN" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-231">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.</span>
          </span>
          <span data-ttu-id="0f1a6-232">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-232">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-233">
            <paramref name="value" /> の値が <see cref="F:System.Double.NegativeInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-233">The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</span>
          </span>
          <span data-ttu-id="0f1a6-234">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-234">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-235">
            <paramref name="value" /> の値が <see cref="F:System.Double.PositiveInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-235">The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(int value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-236">32 ビット符号付き整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-236">A 32-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-237">32 ビット符号付き整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-237">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-238">インスタンス化するときに、有効桁数の損失はありません、<xref:System.Numerics.BigInteger>このコンス トラクターを使用してオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-238">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="0f1a6-239"><xref:System.Numerics.BigInteger>このコンス トラクターの呼び出しから結果値が結果の割り当ての値と同じ、<xref:System.Int32>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-239">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
 <span data-ttu-id="0f1a6-240"><xref:System.Numerics.BigInteger>構造体にコンス トラクターを持つ型のパラメーターは含まれません<xref:System.Byte>、 <xref:System.Int16>、 <xref:System.SByte>、または<xref:System.UInt16>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-240">The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>.</span></span> <span data-ttu-id="0f1a6-241">ただし、<xref:System.Int32>型 8 ビット、16 ビット符号付きと符号なし整数の 32 ビット符号付き整数への暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-241">However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.</span></span> <span data-ttu-id="0f1a6-242">場合はその結果、このコンス トラクターが呼び出されます`value`これら 4 つの整数型のいずれかです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-242">As a result, this constructor is called if `value` is any one of these four integral types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-243">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29>インスタンスを作成するコンス トラクター <xref:System.Numerics.BigInteger> 32 ビット整数の配列からの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-243">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers.</span></span> <span data-ttu-id="0f1a6-244">各 32 ビット整数値を代入する暗黙的な変換を使用する<xref:System.Numerics.BigInteger>変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-244">It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="0f1a6-245">これは、値を比較して 2 つを確立するために、その結果<xref:System.Numerics.BigInteger>値が同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-245">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(long value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-246">64 ビット符号付き整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-246">A 64-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-247">64 ビット符号付き整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-247">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-248">インスタンス化するときに、有効桁数の損失はありません、<xref:System.Numerics.BigInteger>このコンス トラクターを使用してオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-248">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="0f1a6-249"><xref:System.Numerics.BigInteger>このコンス トラクターの呼び出しから結果値が結果の割り当ての値と同じ、<xref:System.Int64>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-249">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-250">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29>インスタンスを作成するコンス トラクター <xref:System.Numerics.BigInteger> 64 ビット整数の配列からの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-250">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers.</span></span> <span data-ttu-id="0f1a6-251">各 64 ビット整数値を代入する暗黙的な変換を使用する<xref:System.Numerics.BigInteger>変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-251">It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="0f1a6-252">これは、値を比較して 2 つを確立するために、その結果<xref:System.Numerics.BigInteger>値が同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-252">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(float value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : single -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-253">単精度浮動小数点数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-253">A single-precision floating-point value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-254">単精度浮動小数点値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-254">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-255">小数部の`value`パラメーターがインスタンス化中に切り捨てられます、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-255">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="0f1a6-256">有効桁数がないのため、<xref:System.Single>このコンス トラクターの呼び出しのデータ型のデータが失われる可能性です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-256">Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.</span></span>  
  
 <span data-ttu-id="0f1a6-257"><xref:System.Numerics.BigInteger>このコンス トラクターの呼び出しから結果値が明示的に割り当てることによって生成される値と同一で、<xref:System.Single>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-257">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-258">次の例では、使用、<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29>インスタンスを作成するコンス トラクター、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-258">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="0f1a6-259">使用する場合に発生する精度の損失も示しています、<xref:System.Single>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-259">It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type.</span></span> <span data-ttu-id="0f1a6-260">A<xref:System.Single>大きい負の値に割り当てられるが割り当てられている、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-260">A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="0f1a6-261">出力をこの割り当てには、精度の損失が含まれます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-261">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="0f1a6-262">両方の値は、いずれかで増加します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-262">Both values are then incremented by one.</span></span> <span data-ttu-id="0f1a6-263">出力を示していますが、<xref:System.Numerics.BigInteger>オブジェクトは変更後の値が反映されます、<xref:System.Single>オブジェクトはありません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-263">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-264">
            <paramref name="value" /> の値が <see cref="F:System.Single.NaN" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-264">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.</span>
          </span>
          <span data-ttu-id="0f1a6-265">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-265">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-266">
            <paramref name="value" /> の値が <see cref="F:System.Single.NegativeInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-266">The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</span>
          </span>
          <span data-ttu-id="0f1a6-267">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-267">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-268">
            <paramref name="value" /> の値が <see cref="F:System.Single.PositiveInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-268">The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint32 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-269">32 ビットの符号なし整数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-269">An unsigned 32-bit integer value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-270">32 ビット符号なし整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-270">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-271">インスタンス化するときに、有効桁数の損失はありません、<xref:System.Numerics.BigInteger>このコンス トラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-271">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="0f1a6-272"><xref:System.Numerics.BigInteger>このコンス トラクターの呼び出しから結果値が結果の割り当ての値と同じ、<xref:System.UInt32>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-272">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-273">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29>コンス トラクターおよび初期化するために、代入ステートメント<xref:System.Numerics.BigInteger>値符号なし 32 ビット整数の配列から。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-273">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers.</span></span> <span data-ttu-id="0f1a6-274">比較して 2 つのことを示す値を初期化する 2 つの方法、<xref:System.Numerics.BigInteger>値が同一の結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-274">It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-275">符号なし 64 ビット整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-275">An unsigned 64-bit integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-276">64 ビット符号なし整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-276">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-277">インスタンス化するときに、有効桁数の損失はありません、<xref:System.Numerics.BigInteger>このコンス トラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-277">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="0f1a6-278"><xref:System.Numerics.BigInteger>このコンス トラクターの呼び出しから結果値が結果の割り当ての値と同じ、<xref:System.UInt64>値を<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-278">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-279">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29>インスタンスを作成するコンス トラクター、<xref:System.Numerics.BigInteger>オブジェクトの値が等しく<xref:System.UInt64.MaxValue>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-279">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ReadOnlySpan&lt;byte&gt; value, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Byte), Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger (value, isUnsigned, isBigEndian)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Abs(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-280">数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-280">A number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-281">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトの絶対値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-281">Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-282">
            <paramref name="value" /> の絶対値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-282">The absolute value of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-283">数値の絶対値は、符号なし数値を次の表に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-283">The absolute value of a number is that number without its sign, as shown in the following table.</span></span>  
  
|<span data-ttu-id="0f1a6-284">`value` パラメーター</span><span class="sxs-lookup"><span data-stu-id="0f1a6-284">`value` parameter</span></span>|<span data-ttu-id="0f1a6-285">戻り値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-285">Return value</span></span>|  
|-----------------------|------------------|  
|<span data-ttu-id="0f1a6-286">`value` &gt;= 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-286">`value` >= 0</span></span>|`value`|  
|<span data-ttu-id="0f1a6-287">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-287">`value` < 0</span></span>|<span data-ttu-id="0f1a6-288">`value` \* -1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-288">`value` \* -1</span></span>|  
  
 <span data-ttu-id="0f1a6-289"><xref:System.Numerics.BigInteger.Abs%2A>メソッドは、<xref:System.Math.Abs%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-289">The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-290">次の例では、<xref:System.Numerics.BigInteger.Abs%2A>に変換するメソッド、 <xref:System.Numerics.BigInteger> 2 の補数表現からの値をファイルにシリアル化する前に符号および絶対値による表現にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-290">The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file.</span></span> <span data-ttu-id="0f1a6-291">ファイル内のデータが次に、逆シリアル化され、新しいに割り当てられている<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-291">Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Add(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-292">加算する 1 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-292">The first value to add.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-293">加算する 2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-293">The second value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-294">2 つの <see cref="T:System.Numerics.BigInteger" /> 値を加算し、その結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-294">Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-295">
            <paramref name="left" /> と <paramref name="right" /> の合計。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-295">The sum of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-296">演算子のオーバー ロードまたはカスタム演算子をサポートしない言語を使用して、<xref:System.Numerics.BigInteger.Add%2A>加算を使用して実行するメソッドを<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-296">Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="0f1a6-297"><xref:System.Numerics.BigInteger.Add%2A>メソッドをインスタンス化するときに、加算演算子便利な代替物である、<xref:System.Numerics.BigInteger>の次の例に示すように、さらに、結果の合計を割り当てることでは、変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-297">The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (left As BigInteger, right As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.Compare (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-298">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-298">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-299">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-299">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-300">2 つの <see cref="T:System.Numerics.BigInteger" /> 値を比較し、1 番目の値が 2 番目の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-300">Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-301">
            <paramref name="left" /> と <paramref name="right" /> の相対値を示す符号付き整数。次の表を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-301">A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="0f1a6-302">[値]</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-302">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-303">条件</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-303">Condition</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="0f1a6-304">0 より小さい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-304">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-305">
                  <paramref name="left" /> は <paramref name="right" /> より小さい値です。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-305">
                    <paramref name="left" /> is less than <paramref name="right" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-306">0</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-306">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-307">
                  <paramref name="left" /> と <paramref name="right" /> は等しい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-307">
                    <paramref name="left" /> equals <paramref name="right" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-308">0 より大きい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-308">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-309">
                  <paramref name="left" /> が <paramref name="right" /> より大きくなっています。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-309">
                    <paramref name="left" /> is greater than <paramref name="right" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-310">ただし、<xref:System.Numerics.BigInteger>型が固定の範囲の比較を持たない<xref:System.Numerics.BigInteger>値が浮動小数点数の比較の特性を設定する有効桁数の不足によって特徴付けられていません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-310">Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.</span></span> <span data-ttu-id="0f1a6-311">次の例では、2 つを比較<xref:System.Numerics.BigInteger>1 の値は、それぞれが異なる値がある 1,896 桁の数字です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-311">The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits.</span></span> <span data-ttu-id="0f1a6-312"><xref:System.Numerics.BigInteger.Compare%2A>メソッドは 2 つの値が等しくないことを正しく報告します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-312">The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-313">このインスタンスの値と別の値を比較し、このインスタンスの値がもう一方の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-313">Compares the value of this instance with another value and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the other value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(long other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : int64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0f1a6-314">比較する符号付き 64 ビット整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-314">The signed 64-bit integer to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-315">このインスタンスと符号付き 64 ビット整数を比較し、このインスタンスの値が符号付き 64 ビット整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-315">Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-316">このインスタンスと <paramref name="other" /> の関係を示す符号付き整数値 (次の表を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-316">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="0f1a6-317">戻り値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-317">Return value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-318">説明</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-318">Description</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="0f1a6-319">0 より小さい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-319">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-320">現在のインスタンスは <paramref name="other" /> より小さい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-320">The current instance is less than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-321">0</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-321">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-322">現在のインスタンスと <paramref name="other" /> は等しい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-322">The current instance equals <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-323">0 より大きい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-323">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-324">現在のインスタンスは <paramref name="other" /> より大きい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-324">The current instance is greater than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-325">場合`other`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>ときの値、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-325">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-326">次の例では、呼び出しの結果、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29>メソッドを整数値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-326">The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Numerics.BigInteger -&gt; int&#xA;override this.CompareTo : System.Numerics.BigInteger -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0f1a6-327">比較対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-327">The object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-328">このインスタンスともう 1 つの <see cref="T:System.Numerics.BigInteger" /> を比較し、このインスタンスの値が指定されたオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-328">Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-329">このインスタンスと <paramref name="other" /> の関係を示す符号付き整数値 (次の表を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-329">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="0f1a6-330">戻り値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-330">Return value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-331">説明</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-331">Description</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="0f1a6-332">0 より小さい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-332">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-333">現在のインスタンスは <paramref name="other" /> より小さい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-333">The current instance is less than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-334">0</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-334">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-335">現在のインスタンスと <paramref name="other" /> は等しい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-335">The current instance equals <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-336">0 より大きい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-336">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-337">現在のインスタンスは <paramref name="other" /> より大きい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-337">The current instance is greater than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-338">このオーバー ロード、<xref:System.Numerics.BigInteger.CompareTo%2A>メソッドの実装、<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-338">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0f1a6-339">ジェネリック コレクション オブジェクトがコレクション内の項目の並べ替えに使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-339">It is used by generic collection objects to order the items in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-340">次の例では、使用、<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>メソッドの一覧の並べ替えに`StarInfo`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-340">The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects.</span></span> <span data-ttu-id="0f1a6-341">各`StarInfo`オブジェクトは、星の名前とマイルで表現された地球からの距離に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-341">Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles.</span></span> <span data-ttu-id="0f1a6-342">`StarInfo` 実装して、<xref:System.IComparable%601>インターフェイスを有効にする`StarInfo`ジェネリック コレクション クラスでソートするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-342">`StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes.</span></span> <span data-ttu-id="0f1a6-343">その<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>の実装だけへの呼び出しをラップ<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-343">Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 <span data-ttu-id="0f1a6-344">次のコードをインスタンス化 4`StarInfo`オブジェクトし、ジェネリック型で格納する<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-344">The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="0f1a6-345">後に、<xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>メソッドが呼び出されると、`StarInfo`オブジェクトは、地球からの距離の順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-345">After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="bigInteger.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="0f1a6-346">比較対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-346">The object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-347">このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-347">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-348">現在のインスタンスと <paramref name="obj" /> パラメーターの関係を示す符号付き整数 (次の表を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-348">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="0f1a6-349">戻り値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-349">Return value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-350">説明</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-350">Description</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="0f1a6-351">0 より小さい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-351">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-352">現在のインスタンスは <paramref name="obj" /> より小さい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-352">The current instance is less than <paramref name="obj" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-353">0</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-353">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-354">現在のインスタンスと <paramref name="obj" /> は等しい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-354">The current instance equals <paramref name="obj" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-355">0 より大きい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-355">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-356">現在のインスタンスは <paramref name="obj" /> より大きい、または <paramref name="obj" /> パラメーターが <see langword="null" /> である。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-356">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-357">このオーバー ロード、<xref:System.Numerics.BigInteger.CompareTo%2A>メソッドの実装、<xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-357">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0f1a6-358">非ジェネリック コレクション オブジェクトがコレクション内の項目の並べ替えに使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-358">It is used by non-generic collection objects to order the items in the collection.</span></span>  
  
 <span data-ttu-id="0f1a6-359">`obj`パラメーターは、次のいずれかを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-359">The `obj` parameter must be one of the following:</span></span>  
  
-   <span data-ttu-id="0f1a6-360">実行時の型がオブジェクト<xref:System.Numerics.BigInteger>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-360">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>  
  
-   <span data-ttu-id="0f1a6-361"><xref:System.Object>値が変数`null`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-361">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="0f1a6-362">場合の値、`obj`パラメーターが`null`、メソッドは、現在のインスタンスがより大きいことを示す 1 を返します`obj`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-362">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-363">次の例では、<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29>を比較するメソッド、<xref:System.Numerics.BigInteger>オブジェクト配列内の各要素の値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-363">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f1a6-364">
            <paramref name="obj" /> が <see cref="T:System.Numerics.BigInteger" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-364">
              <paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : uint64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0f1a6-365">比較する符号なし 64 ビット整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-365">The unsigned 64-bit integer to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-366">このインスタンスと符号なし 64 ビット整数を比較し、このインスタンスの値が符号なし 64 ビット整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-366">Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-367">このインスタンスと <paramref name="other" /> の相対的な値を示す符号付き整数値です (次の表を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-367">A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="0f1a6-368">戻り値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-368">Return value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-369">説明</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-369">Description</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="0f1a6-370">0 より小さい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-370">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-371">現在のインスタンスは <paramref name="other" /> より小さい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-371">The current instance is less than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-372">0</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-372">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-373">現在のインスタンスと <paramref name="other" /> は等しい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-373">The current instance equals <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-374">0 より大きい値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-374">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-375">現在のインスタンスは <paramref name="other" /> より大きい。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-375">The current instance is greater than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Divide(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">
          <span data-ttu-id="0f1a6-376">被除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-376">The value to be divided.</span>
          </span>
        </param>
        <param name="divisor">
          <span data-ttu-id="0f1a6-377">除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-377">The value to divide by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-378">一方の <see cref="T:System.Numerics.BigInteger" /> 値をもう一方の値で除算し、その結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-378">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-379">除算の商。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-379">The quotient of the division.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-380"><xref:System.Numerics.BigInteger.Divide%2A>メソッドは、整数除算を実行します。 除算の結果生じた剰余が破棄されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-380">The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded.</span></span> <span data-ttu-id="0f1a6-381">残りの部分を保持しながら整数除算を実行するのには、呼び出し、<xref:System.Numerics.BigInteger.DivRem%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-381">To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span> <span data-ttu-id="0f1a6-382">残りの部分のみを取得する、<xref:System.Numerics.BigInteger.Remainder%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-382">To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="0f1a6-383"><xref:System.Numerics.BigInteger.Divide%2A>メソッドは、演算子のオーバー ロードをサポートしない言語で使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-383">The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading.</span></span> <span data-ttu-id="0f1a6-384">その動作は、除算演算子を使用した除算と同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-384">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-385">次の例の配列を作成する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-385">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-386">使用する除算演算の商として次の各要素を使用して、<xref:System.Numerics.BigInteger.Divide%2A>メソッド、除算演算子 (/)、および<xref:System.Numerics.BigInteger.DivRem%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-386">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="0f1a6-387">
            <paramref name="divisor" /> が 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-387">
              <paramref name="divisor" /> is 0 (zero).</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, [out] valuetype System.Numerics.BigInteger&amp; remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger DivRem(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor, [Runtime::InteropServices::Out] System::Numerics::BigInteger % remainder);" />
      <MemberSignature Language="F#" Value="static member DivRem : System.Numerics.BigInteger * System.Numerics.BigInteger *  -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.DivRem (dividend, divisor, remainder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend">
          <span data-ttu-id="0f1a6-388">被除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-388">The value to be divided.</span>
          </span>
        </param>
        <param name="divisor">
          <span data-ttu-id="0f1a6-389">除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-389">The value to divide by.</span>
          </span>
        </param>
        <param name="remainder">
          <span data-ttu-id="0f1a6-390">このメソッドから制御が戻るときに、除算の剰余を表す　<see cref="T:System.Numerics.BigInteger" /> 値が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-390">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division.</span>
          </span>
          <span data-ttu-id="0f1a6-391">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-391">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-392">ある <see cref="T:System.Numerics.BigInteger" /> 値を別の値で除算し、その結果を返します。剰余は出力パラメーターとして返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-392">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-393">除算の商。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-393">The quotient of the division.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-394">このメソッドは、商と剰余を整数除算の結果を保存します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-394">This method preserves both the quotient and the remainder that results from integer division.</span></span> <span data-ttu-id="0f1a6-395">残りの部分で必要のないの場合は、使用、<xref:System.Numerics.BigInteger.Divide%2A>のみ、残りの部分で関心があるを使用してメソッドまたは使用する場合は、除算演算子、<xref:System.Numerics.BigInteger.Remainder%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-395">If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="0f1a6-396">返されるの符号`remainder`値の符号と同じ、`dividend`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-396">The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="0f1a6-397">動作、<xref:System.Numerics.BigInteger.DivRem%2A>メソッドのと同じですが、<xref:System.Math.DivRem%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-397">The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-398">次の例の配列を作成する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-398">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-399">使用する除算演算の商として次の各要素を使用して、<xref:System.Numerics.BigInteger.Divide%2A>メソッド、除算演算子 (/)、および<xref:System.Numerics.BigInteger.DivRem%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-399">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="0f1a6-400">
            <paramref name="divisor" /> が 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-400">
              <paramref name="divisor" /> is 0 (zero).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-401">2 つの数値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-401">Returns a value that indicates whether two numeric values are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(long other);" />
      <MemberSignature Language="F#" Value="override this.Equals : int64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0f1a6-402">比較する符号付き 64 ビット整数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-402">The signed 64-bit integer value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-403">現在のインスタンスの値と符号付き 64 ビット整数の値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-403">Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-404">符号付き 64 ビット整数の値と現在のインスタンスの値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-404">
              <see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-405">場合`other`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>メソッドが呼び出されたときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-405">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.</span></span>  
  
 <span data-ttu-id="0f1a6-406">等しいかどうかを検査だけではなく 2 つのオブジェクト間のリレーションシップを確認するのには、呼び出し、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-406">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-407">次の例では、インスタンス化、<xref:System.Numerics.BigInteger>オブジェクト以外の各整数型から<xref:System.UInt64>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-407">The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>.</span></span> <span data-ttu-id="0f1a6-408">呼び出して、<xref:System.Numerics.BigInteger.Equals%28System.Int64%29>を比較するメソッド、<xref:System.Numerics.BigInteger>に渡された元の整数値を持つ値、<xref:System.Numerics.BigInteger>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-408">It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="0f1a6-409">出力は、各ケースで、値が等しい。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-409">As the output shows, the values are equal in each case.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.BigInteger -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0f1a6-410">比較対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-410">The object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-411">現在のインスタンスの値と指定された <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-411">Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-412">この <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値と <paramref name="other" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-412">
              <see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-413">このメソッドを実装、<xref:System.IEquatable%601>インターフェイスし、実行よりも若干優れています<xref:System.Numerics.BigInteger.Equals%28System.Object%29>に変換することはありませんので、`other`パラメーターを<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-413">This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="0f1a6-414">2 つの間の関係を決定する<xref:System.Numerics.BigInteger>等しいかどうかを検査するだけではなくオブジェクトが呼び出す、<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-414">To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-415">次の例では、地球からいくつかの星のおおよその距離まで Epsilon 示す等しいかどうかを判断する地球からの距離を比較します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-415">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="0f1a6-416">この例の各オーバー ロードを使用して、<xref:System.Numerics.BigInteger.Equals%2A>等しいかどうかをテストするメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-416">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="bigInteger.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="0f1a6-417">比較対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-417">The object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-418">現在のインスタンスの値と指定されたオブジェクトの値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-418">Returns a value that indicates whether the current instance and a specified object have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-419">
            <paramref name="obj" /> 引数が <see cref="T:System.Numerics.BigInteger" /> オブジェクトで、その値が現在の <see cref="T:System.Numerics.BigInteger" /> インスタンスの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-419">
              <see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-420">場合、`obj`引数がない、<xref:System.Numerics.BigInteger>値を返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-420">If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`.</span></span> <span data-ttu-id="0f1a6-421">メソッドを返します`true`場合にのみ`obj`は、<xref:System.Numerics.BigInteger>インスタンスの値が現在のインスタンスと等しい。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-421">The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.</span></span>  
  
 <span data-ttu-id="0f1a6-422">等しいかどうかを検査だけではなく 2 つのオブジェクト間のリレーションシップを確認するのには、呼び出し、<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-422">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-423">次の例では、並列<xref:System.Object>と<xref:System.Numerics.BigInteger>配列。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-423">The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays.</span></span> <span data-ttu-id="0f1a6-424">1 つの配列の各要素では、2 番目の配列の対応する要素と同じ値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-424">Each element of one array has the same value as the corresponding element of the second array.</span></span> <span data-ttu-id="0f1a6-425">例を示しますのインスタンスから出力として、<xref:System.Numerics.BigInteger>配列がのインスタンスと等しいと見なされる、<xref:System.Object>配列後者である場合にのみ、<xref:System.Numerics.BigInteger>とその値が等しい。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-425">As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="override this.Equals : uint64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0f1a6-426">比較する符号なし 64 ビット整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-426">The unsigned 64-bit integer to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-427">現在のインスタンスの値と符号なし 64 ビット整数の値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-427">Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-428">現在のインスタンスの値と符号なし 64 ビット整数の値が等しい場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-428">
              <see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-429">等しいかどうかを検査だけではなく 2 つのオブジェクト間のリレーションシップを確認するのには、呼び出し、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-429">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-430">次の例では、地球からいくつかの星のおおよその距離まで Epsilon 示す等しいかどうかを判断する地球からの距離を比較します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-430">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="0f1a6-431">この例の各オーバー ロードを使用して、<xref:System.Numerics.BigInteger.Equals%2A>等しいかどうかをテストするメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-431">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (bool isUnsigned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(bool isUnsigned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (Optional isUnsigned As Boolean = false) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : bool -&gt; int" Usage="bigInteger.GetByteCount isUnsigned" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="bigInteger.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-432">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-432">Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-433">32 ビット符号付き整数ハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-433">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreatestCommonDivisor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger GreatestCommonDivisor(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member GreatestCommonDivisor : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.GreatestCommonDivisor (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-434">最初の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-434">The first value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-435">2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-435">The second value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-436">2 つの <see cref="T:System.Numerics.BigInteger" /> 値の最大公約数を求めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-436">Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-437">
            <paramref name="left" /> と <paramref name="right" /> の最大公約数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-437">The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-438">最大公約数を最大数は、2 つ<xref:System.Numerics.BigInteger>値を返さず、残りの部分に分けることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-438">The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.</span></span>  
  
 <span data-ttu-id="0f1a6-439">場合、`left`と`right`パラメーターが 0 以外の数値をメソッドは、すべての数値は 1 で除算できますので、常に 1 の値以上を返します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-439">If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.</span></span> <span data-ttu-id="0f1a6-440">いずれかのパラメーターが 0 の場合は、0 以外のパラメーターの絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-440">If either parameter is zero, the method returns the absolute value of the non-zero parameter.</span></span> <span data-ttu-id="0f1a6-441">両方の値が 0 の場合は、メソッドは 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-441">If both values are zero, the method returns zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-442">コンピューティングの非常に大きな値の最大公約数`left`と`right`非常に時間のかかる操作を指定できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-442">Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.</span></span>  
  
 <span data-ttu-id="0f1a6-443">によって返される値、<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>メソッドは正の符号に関係なく常に、`left`と`right`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-443">The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-444">次の例への呼び出し、<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>メソッドと、例外処理に関する有用な情報を提供するために必要な<xref:System.ArgumentOutOfRangeException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-444">The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="0f1a6-445">結果は、これら 2 つの数値の最大公約数が 1 であることを示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-445">The result indicates that the greatest common divisor of these two numbers is 1.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEven As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEven { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEven : bool" Usage="System.Numerics.BigInteger.IsEven" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-446">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が偶数かどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-446">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-447">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が偶数の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-447">
              <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-448">このプロパティは、便利な機能を示すかどうかを<xref:System.Numerics.BigInteger>値が 2 で割り切れるします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-448">This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two.</span></span> <span data-ttu-id="0f1a6-449">これは、次の式に相当します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-449">It is equivalent to the following expression:</span></span>  
  
```csharp   
value % 2 == 0;  
```  
  
```vb  
value Mod 2 = 0  
```  
  
 <span data-ttu-id="0f1a6-450">場合、現在の値<xref:System.Numerics.BigInteger>オブジェクトが<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>、プロパティを返します。`true`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-450">If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, the property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOne As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOne { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOne : bool" Usage="System.Numerics.BigInteger.IsOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-451">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.One" /> かどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-451">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-452">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.One" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-452">
              <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-453">このプロパティは、1 つの他の比較よりもパフォーマンスが著しく向上をなど、`thisBigInteger.Equals(BigInteger.One)`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-453">This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerOfTwo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerOfTwo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerOfTwo : bool" Usage="System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-454">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が 2 の累乗かどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-454">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-455">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が 2 の累乗の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-455">
              <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-456">このプロパティを決定するかどうかを<xref:System.Numerics.BigInteger>値が 0 以外の単一のビットを設定します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-456">This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set.</span></span> <span data-ttu-id="0f1a6-457">つまり、返される`true`場合、現在の値<xref:System.Numerics.BigInteger>オブジェクトが 1 (つまり、2<sup>0</sup>) または任意の大きい 2 の累乗。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-457">This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two.</span></span> <span data-ttu-id="0f1a6-458">返します`false`場合、現在の値<xref:System.Numerics.BigInteger>オブジェクトは 0 です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-458">It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsZero As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsZero { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsZero : bool" Usage="System.Numerics.BigInteger.IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-459">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.Zero" /> かどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-459">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-460">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.Zero" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-460">
              <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-461">このプロパティよりパフォーマンスが大幅に向上`BigInteger.Equals(BigInteger.Zero)`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-461">This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-462">指定した数の対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-462">Returns the logarithm of a specified number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-463">対数を求める対象の数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-463">The number whose logarithm is to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-464">指定した数の自然 (底 <see langword="e" />) 対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-464">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-465">
            <paramref name="value" /> の自然対数 (<see langword="e" /> を底とする対数)。「解説」の表を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-465">The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-466">`value`底 10 の値としてパラメーターを指定します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-466">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="0f1a6-467">このメソッドの値の符号に依存、正確な返す`value`次の表に示すように、します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-467">The precise return value of this method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="0f1a6-468">サインアウト`value`パラメーター</span><span class="sxs-lookup"><span data-stu-id="0f1a6-468">Sign of `value` parameter</span></span>|<span data-ttu-id="0f1a6-469">戻り値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-469">Return value</span></span>|  
|-------------------------------|------------------|  
|<span data-ttu-id="0f1a6-470">正</span><span class="sxs-lookup"><span data-stu-id="0f1a6-470">Positive</span></span>|<span data-ttu-id="0f1a6-471">自然対数`value`。 つまり、ln `value`、または log e`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-471">The natural logarithm of `value`; that is, ln `value`, or log e`value`.</span></span>|  
|<span data-ttu-id="0f1a6-472">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-472">Zero</span></span>|<span data-ttu-id="0f1a6-473"><xref:System.Double.NegativeInfinity>。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-473"><xref:System.Double.NegativeInfinity>.</span></span>|  
|<span data-ttu-id="0f1a6-474">負</span><span class="sxs-lookup"><span data-stu-id="0f1a6-474">Negative</span></span>|<span data-ttu-id="0f1a6-475"><xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-475"><xref:System.Double.NaN>.</span></span>|  
  
 <span data-ttu-id="0f1a6-476">底 10 の対数を計算する、<xref:System.Numerics.BigInteger>値には、呼び出し、<xref:System.Numerics.BigInteger.Log10%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-476">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="0f1a6-477">別の基数での数値の対数を計算するには、呼び出し、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-477">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.</span></span>  
  
 <span data-ttu-id="0f1a6-478">呼び出すことによって、数値の平方根を見つけることができます、<xref:System.Numerics.BigInteger.Log%2A>メソッドと共に、<xref:System.Math.Exp%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-478">You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0f1a6-479">結果は<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>結果がより大きい場合<xref:System.Double.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-479">Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if the result is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-480">次の例の配列内の各要素の平方根を計算する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-480">The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]
  
 <span data-ttu-id="0f1a6-481">このメソッドに対応して、<xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-481">This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0f1a6-482">
            <paramref name="value" /> の自然対数が、<see cref="T:System.Double" /> データ型の範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-482">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger, baseValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger * double -&gt; double" Usage="System.Numerics.BigInteger.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-483">対数を検索する対象の数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-483">A number whose logarithm is to be found.</span>
          </span>
        </param>
        <param name="baseValue">
          <span data-ttu-id="0f1a6-484">対数の底。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-484">The base of the logarithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-485">指定した数値の指定した底での対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-485">Returns the logarithm of a specified number in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-486">
            <paramref name="baseValue" /> を底とする <paramref name="value" /> の対数。「解説」の表を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-486">The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-487">`value`と`baseValue`パラメーターが 10 個の番号を基準として指定します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-487">The `value` and `baseValue` parameters are specified as base 10 numbers.</span></span>  
  
 <span data-ttu-id="0f1a6-488">Precise を返すメソッドの値の符号に依存`value`符号との値に`baseValue`次の表に示すように、します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-488">The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.</span></span>  
  
|<span data-ttu-id="0f1a6-489">`value` パラメーター</span><span class="sxs-lookup"><span data-stu-id="0f1a6-489">`value` parameter</span></span>|<span data-ttu-id="0f1a6-490">`baseValue` パラメーター</span><span class="sxs-lookup"><span data-stu-id="0f1a6-490">`baseValue` parameter</span></span>|<span data-ttu-id="0f1a6-491">戻り値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-491">Return value</span></span>|  
|-----------------------|---------------------------|------------------|  
|<span data-ttu-id="0f1a6-492">`value` &gt; 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-492">`value` > 0</span></span>|<span data-ttu-id="0f1a6-493">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-493">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span></span>|<span data-ttu-id="0f1a6-494">logbaseValue(`value`)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-494">logbaseValue(`value`)</span></span>|  
|<span data-ttu-id="0f1a6-495">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-495">`value` < 0</span></span>|<span data-ttu-id="0f1a6-496">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-496">(any value)</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-497">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-497">(any value)</span></span>|<span data-ttu-id="0f1a6-498">`baseValue` < 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-498">`baseValue` < 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-499">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-499">`value` != 1</span></span>|<span data-ttu-id="0f1a6-500">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-500">`baseValue` = 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-501">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-501">`value` != 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-502">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-502">(any value)</span></span>|`baseValue` = <xref:System.Double.NaN?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-503">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="0f1a6-503">(any value)</span></span>|<span data-ttu-id="0f1a6-504">`baseValue` = 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-504">`baseValue` = 1</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-505">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-505">`value` = 0</span></span>|<span data-ttu-id="0f1a6-506">0 < `baseValue` < 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-506">0 < `baseValue` < 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-507">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-507">`value` = 0</span></span>|<span data-ttu-id="0f1a6-508">`baseValue` &gt; 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-508">`baseValue` > 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="0f1a6-509">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-509">`value` = 1</span></span>|<span data-ttu-id="0f1a6-510">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-510">`baseValue` = 0</span></span>|<span data-ttu-id="0f1a6-511">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-511">0</span></span>|  
|<span data-ttu-id="0f1a6-512">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-512">`value` = 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<span data-ttu-id="0f1a6-513">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-513">0</span></span>|  
  
 <span data-ttu-id="0f1a6-514">底 10 の対数を計算する、<xref:System.Numerics.BigInteger>値には、呼び出し、<xref:System.Numerics.BigInteger.Log10%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-514">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="0f1a6-515">数値の自然対数を計算するには、呼び出し、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-515">To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.</span></span>  
  
 <span data-ttu-id="0f1a6-516">このメソッドに対応して、<xref:System.Math.Log%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-516">This method corresponds to the <xref:System.Math.Log%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0f1a6-517">
            <paramref name="value" /> の対数が、<see cref="T:System.Double" /> データ型の範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-517">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-518">対数を検索する対象の数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-518">A number whose logarithm is to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-519">指定した数の底 10 の対数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-519">Returns the base 10 logarithm of a specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-520">10 を底とする <paramref name="value" /> の対数。「解説」の表を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-520">The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-521">`value`底 10 の値としてパラメーターを指定します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-521">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="0f1a6-522">Precise を返すメソッドの値の符号に依存`value`次の表に示すように、します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-522">The precise return value of the method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="0f1a6-523">値パラメーターの符号</span><span class="sxs-lookup"><span data-stu-id="0f1a6-523">Sign of value parameter</span></span>|<span data-ttu-id="0f1a6-524">戻り値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-524">Return value</span></span>|  
|-----------------------------|------------------|  
|<span data-ttu-id="0f1a6-525">正</span><span class="sxs-lookup"><span data-stu-id="0f1a6-525">Positive</span></span>|<span data-ttu-id="0f1a6-526">底 10 の log `value`; は、log10`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-526">The base 10 log of `value`; that is, log10`value`.</span></span>|  
|<span data-ttu-id="0f1a6-527">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-527">Zero</span></span>|<span data-ttu-id="0f1a6-528"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-528"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="0f1a6-529">負</span><span class="sxs-lookup"><span data-stu-id="0f1a6-529">Negative</span></span>|<span data-ttu-id="0f1a6-530"><xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-530"><xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="0f1a6-531">自然対数を計算する、<xref:System.Numerics.BigInteger>値には、呼び出し、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-531">To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0f1a6-532">別の基数での数値の対数を計算するには、呼び出し、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-532">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0f1a6-533">このメソッドに対応して、<xref:System.Math.Log10%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-533">This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0f1a6-534">10 を底とする <paramref name="value" /> の対数が、<see cref="T:System.Double" /> データ型の範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-534">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Max(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Max : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Max (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-535">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-535">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-536">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-536">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-537">2 つの <see cref="T:System.Numerics.BigInteger" /> 値のうち　大きい方の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-537">Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-538">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターのいずれか大きい方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-538">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-539">このメソッドに対応して、<xref:System.Math.Max%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-539">This method corresponds to the <xref:System.Math.Max%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-540">次の例では、<xref:System.Numerics.BigInteger.Max%2A>メソッドの配列の最大数を選択する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-540">The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Min(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Min : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Min (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-541">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-541">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-542">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-542">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-543">2 つの <see cref="T:System.Numerics.BigInteger" /> 値のうち小さい方の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-543">Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-544">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターのいずれか小さい方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-544">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-545">このメソッドに対応して、<xref:System.Math.Min%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-545">This method corresponds to the <xref:System.Math.Min%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-546">次の例では、<xref:System.Numerics.BigInteger.Min%2A>メソッドの配列の最小数を選択する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-546">The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinusOne As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger MinusOne { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.MinusOne : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.MinusOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-547">負の 1 (-1) を表す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-547">Gets a value that represents the number negative one (-1).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-548">値が負の 1 (-1) である整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-548">An integer whose value is negative one (-1).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-549"><xref:System.Numerics.BigInteger.MinusOne%2A>プロパティを使用して、比較、<xref:System.Numerics.BigInteger>値を割り当てるには-1 または-1 に、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-549">The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModPow (value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger ModPow(System::Numerics::BigInteger value, System::Numerics::BigInteger exponent, System::Numerics::BigInteger modulus);" />
      <MemberSignature Language="F#" Value="static member ModPow : System.Numerics.BigInteger * System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.ModPow (value, exponent, modulus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-550">
            <c> 指数 </c> で累乗する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-550">The number to raise to the <c>exponent</c> power.</span>
          </span>
        </param>
        <param name="exponent">
          <span data-ttu-id="0f1a6-551">
            <c> 値 </c> を累乗する指数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-551">The exponent to raise <c>value</c> by.</span>
          </span>
        </param>
        <param name="modulus">
          <span data-ttu-id="0f1a6-552">
            <c> 指数 </c> で累乗した <c> 値 </c> の除算に使用する除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-552">The number by which to divide <c>value</c> raised to the <c>exponent</c> power.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-553">ある数値を別の数値で累乗し、それをさらに別の数値で割った結果生じた剰余を求めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-553">Performs modulus division on a number raised to the power of another number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-554">
            <paramref name="value" />
            <sup> 指数 </sup> を <paramref name="modulus" /> で割った結果生じた剰余。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-554">The remainder after dividing <paramref name="value" /><sup>exponent</sup> by <paramref name="modulus" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-555"><xref:System.Numerics.BigInteger.ModPow%2A>メソッドは、次の式を評価します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-555">The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:</span></span>  
  
 <span data-ttu-id="0f1a6-556">(baseValue ^ 指数)Mod 剰余</span><span class="sxs-lookup"><span data-stu-id="0f1a6-556">(baseValue ^ exponent) Mod modulus</span></span>  
  
 <span data-ttu-id="0f1a6-557">指数演算を実行する<xref:System.Numerics.BigInteger>、剰余なしの値を使用して、<xref:System.Numerics.BigInteger.Pow%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-557">To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-558">次の例は、呼び出し元の簡単な図、<xref:System.Numerics.BigInteger.ModPow%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-558">The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="0f1a6-559">
            <paramref name="modulus" /> が 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-559">
              <paramref name="modulus" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0f1a6-560">
            <paramref name="exponent" /> が負の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-560">
              <paramref name="exponent" /> is negative.</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Multiply(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-561">乗算対象の最初の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-561">The first number to multiply.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-562">乗算対象の 2 番目の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-562">The second number to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-563">2 つの <see cref="T:System.Numerics.BigInteger" /> 値の積を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-563">Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-564">
            <paramref name="left" /> と <paramref name="right" /> の 2 つのパラメーターの積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-564">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-565"><xref:System.Numerics.BigInteger.Multiply%2A>演算子のオーバー ロードをサポートしない言語のメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-565">The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading.</span></span> <span data-ttu-id="0f1a6-566">その動作は、乗算演算子を使用する乗算と同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-566">Its behavior is identical to multiplication using the multiplication operator.</span></span> <span data-ttu-id="0f1a6-567">さらに、<xref:System.Numerics.BigInteger.Multiply%2A>メソッドをインスタンス化するときに乗算演算子は、便利な代替物である、<xref:System.Numerics.BigInteger>の次の例に示すように、乗算、得られる製品を割り当てることでは、変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-567">In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 <span data-ttu-id="0f1a6-568">必要に応じて、このメソッドに自動的に実行する他の整数型の暗黙的な変換<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-568">If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="0f1a6-569">次のセクションの例に示す場所、<xref:System.Numerics.BigInteger.Multiply%2A>メソッドが渡される 2 つ<xref:System.Int64>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-569">This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-570">次の例は、2 つの長整数の乗算を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-570">The following example tries to perform multiplication with two long integers.</span></span> <span data-ttu-id="0f1a6-571">結果を長整数の範囲を超えているため、<xref:System.OverflowException>スローされると、および<xref:System.Numerics.BigInteger.Multiply%2A>乗算を処理するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-571">Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication.</span></span> <span data-ttu-id="0f1a6-572">(C#) が必要であるかを使用することに注意してください、 `checked` (この例では) のようにキーワードまたは`/checked+`コンパイラ オプションは、数値オーバーフローの例外がスローされているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-572">Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Negate(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-573">否定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-573">The value to negate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-574">指定された <see cref="T:System.Numerics.BigInteger" /> 値を否定 (負数化) します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-574">Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-575">
            <paramref name="value" /> パラメーターに -1 を乗算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-575">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-576">否定は、数値の加法逆元を取得します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-576">Negation obtains the additive inverse of a number.</span></span> <span data-ttu-id="0f1a6-577">数値の加法逆元は、元の数に追加されたときに、ゼロの値を生成する数です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-577">The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</span></span>  
  
 <span data-ttu-id="0f1a6-578"><xref:System.Numerics.BigInteger.Negate%2A>カスタム演算子をサポートしない言語のメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-578">The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="0f1a6-579">その動作は、否定の単項否定演算子を使用するのと同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-579">Its behavior is identical to negation using the unary negation operator.</span></span> <span data-ttu-id="0f1a6-580">さらに、<xref:System.Numerics.BigInteger.Negate%2A>メソッドは、インスタンス化する場合に否定演算子の便利な代替、<xref:System.Numerics.BigInteger>変数は、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-580">In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-581">次の例の値を否定する 3 つの方法を示しています、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-581">The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger One { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.One : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-582">正の 1 (1) を表す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-582">Gets a value that represents the number one (1).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-583">値が正の 1 (1) であるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-583">An object whose value is one (1).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-584"><xref:System.Numerics.BigInteger.One%2A>プロパティは、通常の比較に使用する<xref:System.Numerics.BigInteger>値を 1 または 1 を割り当てる、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-584">The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-585">加算する 1 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-585">The first value to add.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-586">加算する 2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-586">The second value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-587">指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値を加算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-587">Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-588">
            <paramref name="left" /> と <paramref name="right" /> の合計。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-588">The sum of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-589"><xref:System.Numerics.BigInteger.op_Addition%2A>メソッド定義の加算演算<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-589">The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-590">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-590">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 <span data-ttu-id="0f1a6-591">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Add%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-591">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &amp; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &amp;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left &amp;&amp;&amp; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-592">最初の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-592">The first value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-593">2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-593">The second value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-594">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対し、ビットごとの <see langword="And" /> 演算を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-594">Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-595">ビットごとの <see langword="And" /> 演算の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-595">The result of the bitwise <see langword="And" /> operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-596"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>メソッドを定義、ビットごと`And`操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-596">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-597">ビット演算`And`操作場合のみ結果ビットに対応するビットを設定`left`と`right`設定されて、次の表に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-597">The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="0f1a6-598">内のビットします。 `left`</span><span class="sxs-lookup"><span data-stu-id="0f1a6-598">Bit in `left`</span></span>|<span data-ttu-id="0f1a6-599">内のビットします。 `right`</span><span class="sxs-lookup"><span data-stu-id="0f1a6-599">Bit in `right`</span></span>|<span data-ttu-id="0f1a6-600">内のビットします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-600">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="0f1a6-601">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-601">0</span></span>|<span data-ttu-id="0f1a6-602">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-602">0</span></span>|<span data-ttu-id="0f1a6-603">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-603">0</span></span>|  
|<span data-ttu-id="0f1a6-604">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-604">1</span></span>|<span data-ttu-id="0f1a6-605">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-605">0</span></span>|<span data-ttu-id="0f1a6-606">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-606">0</span></span>|  
|<span data-ttu-id="0f1a6-607">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-607">1</span></span>|<span data-ttu-id="0f1a6-608">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-608">1</span></span>|<span data-ttu-id="0f1a6-609">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-609">1</span></span>|  
|<span data-ttu-id="0f1a6-610">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-610">0</span></span>|<span data-ttu-id="0f1a6-611">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-611">1</span></span>|<span data-ttu-id="0f1a6-612">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-612">0</span></span>|  
  
 <span data-ttu-id="0f1a6-613"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>メソッドは、次のコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-613">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <span data-ttu-id="0f1a6-614"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A>演算を実行メソッド`And`2 つの操作<xref:System.Numerics.BigInteger>両者が 2 の補数表記で仮想の記号の拡張子を持つ値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-614">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator | (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator |(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ||| right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-615">最初の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-615">The first value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-616">2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-616">The second value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-617">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対し、ビットごとの <see langword="Or" /> 演算を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-617">Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-618">ビットごとの <see langword="Or" /> 演算の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-618">The result of the bitwise <see langword="Or" /> operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-619"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>メソッドを定義、ビットごと`Or`操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-619">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-620">ビット演算`Or`操作でいずれかまたは両方に対応するビットの場合のみ結果ビットは設定`left`と`right`次の表に示すように設定されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-620">The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="0f1a6-621">内のビットします。 `left`</span><span class="sxs-lookup"><span data-stu-id="0f1a6-621">Bit in `left`</span></span>|<span data-ttu-id="0f1a6-622">内のビットします。 `right`</span><span class="sxs-lookup"><span data-stu-id="0f1a6-622">Bit in `right`</span></span>|<span data-ttu-id="0f1a6-623">内のビットします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-623">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="0f1a6-624">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-624">0</span></span>|<span data-ttu-id="0f1a6-625">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-625">0</span></span>|<span data-ttu-id="0f1a6-626">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-626">0</span></span>|  
|<span data-ttu-id="0f1a6-627">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-627">1</span></span>|<span data-ttu-id="0f1a6-628">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-628">0</span></span>|<span data-ttu-id="0f1a6-629">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-629">1</span></span>|  
|<span data-ttu-id="0f1a6-630">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-630">1</span></span>|<span data-ttu-id="0f1a6-631">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-631">1</span></span>|<span data-ttu-id="0f1a6-632">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-632">1</span></span>|  
|<span data-ttu-id="0f1a6-633">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-633">0</span></span>|<span data-ttu-id="0f1a6-634">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-634">1</span></span>|<span data-ttu-id="0f1a6-635">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-635">1</span></span>|  
  
 <span data-ttu-id="0f1a6-636"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>メソッドは、次のコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-636">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <span data-ttu-id="0f1a6-637"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A>演算を実行メソッド`Or`2 つの操作<xref:System.Numerics.BigInteger>両者が 2 の補数表記で仮想の記号の拡張子を持つ値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-637">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator -- (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator --(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Decrement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Decrement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-638">デクリメントする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-638">The value to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-639">
            <see cref="T:System.Numerics.BigInteger" /> 値を 1 だけデクリメントします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-639">Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-640">
            <paramref name="value" /> パラメーターの値を 1 だけデクリメントした値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-640">The value of the <paramref name="value" /> parameter decremented by 1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-641"><xref:System.Numerics.BigInteger.op_Decrement%2A>メソッド定義のデクリメント操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-641">The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-642">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-642">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 <span data-ttu-id="0f1a6-643">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Subtract%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-643">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead.</span></span> <span data-ttu-id="0f1a6-644">例:</span><span class="sxs-lookup"><span data-stu-id="0f1a6-644">For example:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <span data-ttu-id="0f1a6-645"><xref:System.Numerics.BigInteger>オブジェクトは不変で、<xref:System.Numerics.BigInteger.op_Decrement%2A>オペレーターを作成する新しい<xref:System.Numerics.BigInteger>値が 1 つのオブジェクトより小さい<xref:System.Numerics.BigInteger>によって表されるオブジェクト`value`。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-645">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="0f1a6-646">つまりを繰り返し呼び出す<xref:System.Numerics.BigInteger.op_Decrement%2A>高価な場合があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-646">This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="0f1a6-647">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-647">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator / (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator /(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend / divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">
          <span data-ttu-id="0f1a6-648">被除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-648">The value to be divided.</span>
          </span>
        </param>
        <param name="divisor">
          <span data-ttu-id="0f1a6-649">除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-649">The value to divide by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-650">整数除算を使用して、指定された <see cref="T:System.Numerics.BigInteger" /> 値をもう 1 つの指定された <see cref="T:System.Numerics.BigInteger" /> 値で除算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-650">Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-651">除算の結果 (整数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-651">The integral result of the division.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-652"><xref:System.Numerics.BigInteger.op_Division%2A>メソッド定義の除算演算<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-652">The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-653">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-653">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 <span data-ttu-id="0f1a6-654">カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Divide%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-654">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-655">この演算子を同等のメソッドは、します。 <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="0f1a6-655">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="0f1a6-656">次の例の配列を作成する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-656">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-657">使用する除算演算の商として次の各要素を使用して、<xref:System.Numerics.BigInteger.Divide%2A>メソッド、除算演算子 (/)、および<xref:System.Numerics.BigInteger.DivRem%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-657">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="0f1a6-658">
            <paramref name="divisor" /> が 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-658">
              <paramref name="divisor" /> is 0 (zero).</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-659">指定された 2 つの値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-659">Returns a value that indicates whether two values are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-660">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-660">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-661">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-661">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-662">符号付き長整数値と <see cref="T:System.Numerics.BigInteger" /> 値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-662">Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-663">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-663">
              <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-664"><xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29>メソッド定義の等値比較演算<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-664">The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-665">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-665">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 <span data-ttu-id="0f1a6-666">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>インスタンス メソッドを代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-666">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-667">場合`left`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-667">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-668">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-668">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-669">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-669">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-670">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-670">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-671">
            <see cref="T:System.Numerics.BigInteger" /> 値と符号付き長整数値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-671">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-672">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-672">
              <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-673"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29>メソッド定義の等値比較演算<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-673">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-674">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-674">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 <span data-ttu-id="0f1a6-675">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>インスタンス メソッドを代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-675">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-676">場合`right`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-676">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-677">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-677">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-678">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-678">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-679">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-679">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-680">2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-680">Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-681">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-681">
              <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-682"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>メソッド定義の等値演算子の操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-682">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-683">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-683">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 <span data-ttu-id="0f1a6-684">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>インスタンス メソッドを代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-684">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-685">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-685">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-686">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-686">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-687">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-687">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-688">
            <see cref="T:System.Numerics.BigInteger" /> 値と符号なし長整数値が等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-688">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-689">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-689">
              <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-690"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29>メソッド定義の等値比較演算<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-690">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-691">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-691">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 <span data-ttu-id="0f1a6-692">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>インスタンス メソッドを代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-692">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-693">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-693">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-694">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-694">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-695">符号なし長整数値と <see cref="T:System.Numerics.BigInteger" /> 値と等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-695">Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-696">
            <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-696">
              <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-697"><xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29>メソッド定義の等値比較演算<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-697">The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-698">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-698">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 <span data-ttu-id="0f1a6-699">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>インスタンス メソッドを代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-699">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ^ (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ^(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ^^^ right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-700">最初の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-700">The first value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-701">2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-701">The second value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-702">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対し、ビットごとの排他的 <see langword="Or" /> (<see langword="XOr" />) 演算を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-702">Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-703">ビットごとの <see langword="Or" /> 演算の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-703">The result of the bitwise <see langword="Or" /> operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-704">結果のビットごとの排他的`Or`操作が`true`2 ビットの値が異なる、それ以外の場合は、`false`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-704">The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`.</span></span> <span data-ttu-id="0f1a6-705">次の表は、排他的な`Or`操作。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-705">The following table illustrates the exclusive `Or` operation.</span></span>  
  
|<span data-ttu-id="0f1a6-706">X のビット `left`</span><span class="sxs-lookup"><span data-stu-id="0f1a6-706">Bit x in `left`</span></span>|<span data-ttu-id="0f1a6-707">X のビット `right`</span><span class="sxs-lookup"><span data-stu-id="0f1a6-707">Bit x in `right`</span></span>|<span data-ttu-id="0f1a6-708">戻り値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-708">Return value</span></span>|  
|---------------------|----------------------|------------------|  
|<span data-ttu-id="0f1a6-709">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-709">0</span></span>|<span data-ttu-id="0f1a6-710">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-710">0</span></span>|<span data-ttu-id="0f1a6-711">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-711">0</span></span>|  
|<span data-ttu-id="0f1a6-712">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-712">0</span></span>|<span data-ttu-id="0f1a6-713">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-713">1</span></span>|<span data-ttu-id="0f1a6-714">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-714">1</span></span>|  
|<span data-ttu-id="0f1a6-715">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-715">1</span></span>|<span data-ttu-id="0f1a6-716">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-716">0</span></span>|<span data-ttu-id="0f1a6-717">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-717">1</span></span>|  
|<span data-ttu-id="0f1a6-718">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-718">1</span></span>|<span data-ttu-id="0f1a6-719">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-719">1</span></span>|<span data-ttu-id="0f1a6-720">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-720">0</span></span>|  
  
 <span data-ttu-id="0f1a6-721"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A>メソッドは、次のコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-721">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <span data-ttu-id="0f1a6-722"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A>メソッド実行のビットごとの排他的`Or`2 つの操作<xref:System.Numerics.BigInteger>両者が 2 の補数表記で仮想の記号の拡張子を持つ値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-722">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-723">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトと別の型の間の明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-723">Defines an explicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-724">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-724">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-725">
            <see cref="T:System.Decimal" /> オブジェクトから <see cref="T:System.Numerics.BigInteger" /> 値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-725">Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-726">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-726">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-727">小数部の`value`パラメーターは変換の前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-727">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="0f1a6-728">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-728">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-729">から変換<xref:System.Decimal>に<xref:System.Numerics.BigInteger>の小数部の切り捨てが生じる場合が`value`、言語コンパイラはこの変換を自動的に実行されません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-729">Because the conversion from <xref:System.Decimal> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="0f1a6-730">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-730">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-731">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-731">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="0f1a6-732">カスタム演算子をサポートしない言語の場合は、別の方法は<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-732">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="0f1a6-733">次の例の配列の個々 の要素を変換する<xref:System.Decimal>値<xref:System.Numerics.BigInteger>オブジェクトし、各変換の結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-733">The following example converts the individual elements in an array of <xref:System.Decimal> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="0f1a6-734">小数部に注意してくださいの一部を<xref:System.Decimal>値は、変換中に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-734">Note that any fractional part of a <xref:System.Decimal> value is truncated during the conversion.</span></span>   

 [!code-csharp[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(double value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-735">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-735">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-736">
            <see cref="T:System.Double" /> 値から <see cref="T:System.Numerics.BigInteger" /> 値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-736">Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-737">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-737">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-738">小数部の`value`パラメーターは変換の前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-738">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="0f1a6-739">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-739">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-740">から変換<xref:System.Double>に<xref:System.Numerics.BigInteger>の小数部の切り捨てが生じる場合が`value`、言語コンパイラはこの変換を自動的に実行されません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-740">Because the conversion from <xref:System.Double> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="0f1a6-741">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-741">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-742">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-742">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="0f1a6-743">カスタム演算子をサポートしない言語の場合は、別の方法は<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-743">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="0f1a6-744">次の例の配列の個々 の要素を変換する<xref:System.Double>値<xref:System.Numerics.BigInteger>オブジェクトし、各変換の結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-744">The following example converts the individual elements in an array of <xref:System.Double> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="0f1a6-745">小数部に注意してくださいの一部を<xref:System.Double>値は、変換中に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-745">Note that any fractional part of a <xref:System.Double> value is truncated during the conversion.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-746">
            <paramref name="value" /> の値が <see cref="F:System.Double.NaN" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-746">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.</span>
          </span>
          <span data-ttu-id="0f1a6-747">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-747">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-748">
            <paramref name="value" /> の値が <see cref="F:System.Double.PositiveInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-748">The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</span>
          </span>
          <span data-ttu-id="0f1a6-749">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-749">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-750">
            <paramref name="value" /> の値が <see cref="F:System.Double.NegativeInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-750">The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; byte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-751">
            <see cref="T:System.Byte" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-751">The value to convert to a <see cref="T:System.Byte" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-752">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なしバイト値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-752">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-753">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-753">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-754">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-754">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-755">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-755">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-756">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CByte`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-756">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CByte` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-757">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-757">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="0f1a6-758">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Byte>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-758">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span> <span data-ttu-id="0f1a6-759">結果の精度の損失がない<xref:System.Byte>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-759">There is no loss of precision in the resulting <xref:System.Byte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-760">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Byte>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-760">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Byte> values.</span></span> <span data-ttu-id="0f1a6-761">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Byte>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-761">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-762">
            <paramref name="value" /> の値が <see cref="F:System.Byte.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-762">The value of <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-763">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-763">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-764">
            <paramref name="value" /> の値が <see cref="F:System.Byte.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-764">The value of <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; decimal" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-765">
            <see cref="T:System.Decimal" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-765">The value to convert to a <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-766">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから <see cref="T:System.Decimal" /> 値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-766">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-767">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-767">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-768">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-768">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-769">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-769">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-770">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CDec`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-770">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDec` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="0f1a6-771">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Decimal>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-771">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span> 

## Examples
 <span data-ttu-id="0f1a6-772">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Decimal>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-772">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Decimal> values.</span></span> <span data-ttu-id="0f1a6-773">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Decimal>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-773">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-774">
            <paramref name="value" /> の値が <see cref="F:System.Decimal.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-774">The value of <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-775">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-775">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-776">
            <paramref name="value" /> の値が <see cref="F:System.Decimal.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-776">The value of <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-777">
            <see cref="T:System.Double" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-777">The value to convert to a <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-778">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから <see cref="T:System.Double" /> 値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-778">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-779">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-779">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-780">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-780">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-781">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-781">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-782">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CDbl`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-782">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDbl` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="0f1a6-783"><xref:System.Numerics.BigInteger>の範囲外値を指定できます、<xref:System.Double>データ型のこの操作は縮小変換します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-783">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Double> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="0f1a6-784">スローしない変換が成功しなかった場合、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-784">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-785">代わりに場合、<xref:System.Numerics.BigInteger>値より小さい<xref:System.Double.MinValue?displayProperty=nameWithType>、結果の<xref:System.Double>値は<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-785">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Double.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-786">場合、<xref:System.Numerics.BigInteger>値がより大きい<xref:System.Double.MaxValue?displayProperty=nameWithType>、その結果、<xref:System.Double>値は<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-786">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>
 
 <span data-ttu-id="0f1a6-787">変換、<xref:System.Numerics.BigInteger>を<xref:System.Double>有効桁数の損失が生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-787">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Double> may involve a loss of precision.</span></span> <span data-ttu-id="0f1a6-788">場合によっては、有効桁数の損失が生じるキャストまたは変換操作が成功する場合でも、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Double>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-788">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="0f1a6-789">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-789">The following example provides an illustration.</span></span> <span data-ttu-id="0f1a6-790">最大値を割り当てます、<xref:System.Double>を 2 つ<xref:System.Numerics.BigInteger>変数、1 つずつ<xref:System.Numerics.BigInteger>9.999e291 と等しいかどうかのテストの 2 つの変数では、変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-790">It assigns the maximum value of a <xref:System.Double> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="0f1a6-791">呼び出し、想定どおり、<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>メソッドは、それらが等しくないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-791">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="0f1a6-792">ただし、大きい方の変換<xref:System.Numerics.BigInteger>値にバックアップを<xref:System.Double>が成功したが、<xref:System.Numerics.BigInteger>値を超えるようになりました<xref:System.Double.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-792">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Double> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]   



## Examples
 <span data-ttu-id="0f1a6-793">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-793">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Double> values.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-794">16 ビット符号付き整数へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-794">The value to convert to a 16-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-795">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから 16 ビット符号付き整数値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-795">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-796">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-796">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-797">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-797">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-798">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-798">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-799">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CShort`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-799">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CShort` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-800">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-800">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="0f1a6-801">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Int16>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-801">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span> <span data-ttu-id="0f1a6-802">結果の精度の損失がない<xref:System.Int16>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-802">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-803">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Int16>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-803">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int16> values.</span></span> <span data-ttu-id="0f1a6-804">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Int16>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-804">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-805">
            <paramref name="value" /> の値が <see cref="F:System.Int16.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-805">The value of <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-806">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-806">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-807">
            <paramref name="value" /> の値が <see cref="F:System.Int16.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-807">The value of <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-808">32 ビット符号付き整数に変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-808">The value to convert to a 32-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-809">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから 32 ビット符号付き整数値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-809">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-810">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-810">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-811">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-811">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-812">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-812">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-813">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CInt`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-813">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CInt` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-814">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-814">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="0f1a6-815">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Int32>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-815">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span> <span data-ttu-id="0f1a6-816">結果の精度の損失がない<xref:System.Int16>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-816">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-817">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Int32>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-817">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int32> values.</span></span> <span data-ttu-id="0f1a6-818">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Int32>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-818">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-819">
            <paramref name="value" /> の値が <see cref="F:System.Int32.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-819">The value of <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-820">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-820">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-821">
            <paramref name="value" /> の値が <see cref="F:System.Int32.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-821">The value of <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-822">64 ビット符号付き整数へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-822">The value to convert to a 64-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-823">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから 64 ビット符号付き整数値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-823">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-824">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-824">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-825">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-825">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-826">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-826">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-827">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CLng`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-827">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CLng` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-828">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-828">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="0f1a6-829">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Int64>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-829">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span> 

## Examples
 <span data-ttu-id="0f1a6-830">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Int64>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-830">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int64> values.</span></span> <span data-ttu-id="0f1a6-831">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Int64>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-831">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-832">
            <paramref name="value" /> の値が <see cref="F:System.Int64.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-832">The value of <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-833">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-833">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-834">
            <paramref name="value" /> の値が <see cref="F:System.Int64.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-834">The value of <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; sbyte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-835">符号付き 8 ビット値へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-835">The value to convert to a signed 8-bit value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-836">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号付き 8 ビット値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-836">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</span>
          </span>
          <span data-ttu-id="0f1a6-837">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-837">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-838">準拠している代替として <see cref="T:System.Int16" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-838">The compliant alternative is <see cref="T:System.Int16" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-839">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-839">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-840">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-840">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-841">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-841">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-842">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CSByte`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-842">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSByte` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-843">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-843">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="0f1a6-844">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.SByte>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-844">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span> <span data-ttu-id="0f1a6-845">結果の精度の損失がない<xref:System.SByte>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-845">There is no loss of precision in the resulting <xref:System.SByte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-846">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.SByte>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-846">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.SByte> values.</span></span> <span data-ttu-id="0f1a6-847">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.SByte>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-847">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-848">
            <paramref name="value" /> の値が <see cref="F:System.SByte.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-848">The value of <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-849">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-849">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-850">
            <paramref name="value" /> の値が <see cref="F:System.SByte.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-850">The value of <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
        <altCompliant cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; single" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-851">単精度浮動小数点値へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-851">The value to convert to a single-precision floating-point value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-852">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから単精度浮動小数点値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-852">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-853">
            <paramref name="value" /> パラメーターの値にできるだけ近い値となるように変換したオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-853">An object that contains the closest possible representation of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-854">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-854">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-855">言語コンパイラはこの変換も実行しません自動的にデータの損失または精度の損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-855">Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision.</span></span> <span data-ttu-id="0f1a6-856">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CSng`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-856">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSng` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-857">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-857">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="0f1a6-858"><xref:System.Numerics.BigInteger>の範囲外値を指定できます、<xref:System.Single>データ型のこの操作は縮小変換します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-858">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Single> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="0f1a6-859">スローしない変換が成功しなかった場合、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-859">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-860">代わりに場合、<xref:System.Numerics.BigInteger>値より小さい<xref:System.Single.MinValue?displayProperty=nameWithType>、結果の<xref:System.Single>値は<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-860">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Single.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-861">場合、<xref:System.Numerics.BigInteger>値がより大きい<xref:System.Single.MaxValue?displayProperty=nameWithType>、その結果、<xref:System.Single>値は<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-861">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="0f1a6-862">変換、<xref:System.Numerics.BigInteger>を<xref:System.Single>有効桁数の損失が生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-862">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Single> may involve a loss of precision.</span></span> <span data-ttu-id="0f1a6-863">場合によっては、有効桁数の損失が生じるキャストまたは変換操作が成功する場合でも、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.Single>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-863">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Single> data type.</span></span> <span data-ttu-id="0f1a6-864">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-864">The following example provides an illustration.</span></span> <span data-ttu-id="0f1a6-865">最大値を割り当てます、<xref:System.Single>を 2 つ<xref:System.Numerics.BigInteger>変数、1 つずつ<xref:System.Numerics.BigInteger>9.999e291 と等しいかどうかのテストの 2 つの変数では、変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-865">It assigns the maximum value of a <xref:System.Single> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="0f1a6-866">呼び出し、想定どおり、<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>メソッドは、それらが等しくないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-866">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="0f1a6-867">ただし、大きい方の変換<xref:System.Numerics.BigInteger>値にバックアップを<xref:System.Single>が成功したが、<xref:System.Numerics.BigInteger>値を超えるようになりました<xref:System.Single.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-867">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Single> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]   



## Examples
 <span data-ttu-id="0f1a6-868">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-868">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Single> values.</span></span>   
     
 [!code-csharp[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-869">符号なし 16 ビット整数へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-869">The value to convert to an unsigned 16-bit integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-870">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なし 16 ビット整数値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-870">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</span>
          </span>
          <span data-ttu-id="0f1a6-871">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-871">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-872">準拠している代替として <see cref="T:System.Int32" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-872">The compliant alternative is <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-873">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-873">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-874">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-874">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-875">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-875">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-876">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CUShort`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-876">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUShort` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-877">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-877">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="0f1a6-878">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.UInt16>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-878">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span> <span data-ttu-id="0f1a6-879">結果の精度の損失がない<xref:System.UInt16>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-879">There is no loss of precision in the resulting <xref:System.UInt16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-880">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.UInt16>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-880">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt16> values.</span></span> <span data-ttu-id="0f1a6-881">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.UInt16>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-881">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-882">
            <paramref name="value" /> の値が <see cref="F:System.UInt16.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-882">The value of <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-883">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-883">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-884">
            <paramref name="value" /> の値が <see cref="F:System.UInt16.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-884">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
        <altCompliant cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint32" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-885">符号なし 32 ビット整数へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-885">The value to convert to an unsigned 32-bit integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-886">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なし 32 ビット整数値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-886">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</span>
          </span>
          <span data-ttu-id="0f1a6-887">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-887">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-888">準拠している代替として <see cref="T:System.Int64" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-888">The compliant alternative is <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-889">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-889">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-890">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-890">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-891">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-891">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-892">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CUInt`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-892">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUInt` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-893">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-893">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="0f1a6-894">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.UInt32>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-894">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span> <span data-ttu-id="0f1a6-895">結果の精度の損失がない<xref:System.UInt32>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-895">There is no loss of precision in the resulting <xref:System.UInt32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-896">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.UInt32>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-896">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt32> values.</span></span> <span data-ttu-id="0f1a6-897">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.UInt32>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-897">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-898">
            <paramref name="value" /> の値が <see cref="F:System.UInt32.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-898">The value of <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-899">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-899">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-900">
            <paramref name="value" /> の値が <see cref="F:System.UInt32.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-900">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
        <altCompliant cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-901">符号なし 64 ビット整数へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-901">The value to convert to an unsigned 64-bit integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-902">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なし 64 ビット整数値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-902">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</span>
          </span>
          <span data-ttu-id="0f1a6-903">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-903">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-904">準拠している代替として <see cref="T:System.Double" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-904">The compliant alternative is <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-905">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-905">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-906">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-906">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-907">言語コンパイラはこの変換も実行しません自動的にデータの損失が生じる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-907">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="0f1a6-908">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`または`CULng`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-908">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CULng` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-909">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-909">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="0f1a6-910">スローすることができます、この操作は、縮小変換を定義するため、 <xref:System.OverflowException> 、実行時に場合、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.UInt64>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-910">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span> <span data-ttu-id="0f1a6-911">結果の精度の損失がない<xref:System.UInt64>変換が成功した場合の値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-911">There is no loss of precision in the resulting <xref:System.UInt64> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="0f1a6-912">次の例は、の変換を示しています。<xref:System.Numerics.BigInteger>に<xref:System.UInt64>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-912">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt64> values.</span></span> <span data-ttu-id="0f1a6-913">処理を<xref:System.OverflowException>スローされたため、<xref:System.Numerics.BigInteger>の範囲外の値は、<xref:System.UInt64>データ型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-913">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-914">
            <paramref name="value" /> の値が <see cref="F:System.UInt64.MinValue" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-914">The value of <paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" />.</span>
          </span>
          <span data-ttu-id="0f1a6-915">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-915">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-916">
            <paramref name="value" /> の値が <see cref="F:System.UInt64.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-916">The value of <paramref name="value" /> is greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(float value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-917">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-917">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-918">
            <see cref="T:System.Single" /> 値から <see cref="T:System.Numerics.BigInteger" /> 値への明示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-918">Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-919">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-919">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-920">小数部の`value`パラメーターは変換の前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-920">Any fractional part of the `value` parameter is truncated before conversion.</span></span>
 
 <span data-ttu-id="0f1a6-921">オーバー ロード、<xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger>メソッドが型を定義する、または元の<xref:System.Numerics.BigInteger>オブジェクトを変換することができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-921">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="0f1a6-922">から変換<xref:System.Single>に<xref:System.Numerics.BigInteger>の小数部の切り捨てが生じる場合が`value`、言語コンパイラはこの変換を自動的に実行されません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-922">Because the conversion from <xref:System.Single> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="0f1a6-923">(で C# の場合)、キャスト演算子または変換関数の場合にのみ変換を実行する代わりに、(など`CType`Visual Basic で) 使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-923">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="0f1a6-924">それ以外の場合、コンパイラ エラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-924">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="0f1a6-925">カスタム演算子をサポートしない言語の場合は、別の方法は<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-925">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="0f1a6-926">次の例の配列の個々 の要素を変換する<xref:System.Single>値<xref:System.Numerics.BigInteger>オブジェクトし、各変換の結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-926">The following example converts the individual elements in an array of <xref:System.Single> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="0f1a6-927">小数部に注意してくださいの一部を<xref:System.Single>値は、変換中に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-927">Note that any fractional part of a <xref:System.Single> value is truncated during the conversion.</span></span>
 
 [!code-csharp[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="0f1a6-928">
            <paramref name="value" /> の値が <see cref="F:System.Single.NaN" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-928">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.</span>
          </span>
          <span data-ttu-id="0f1a6-929">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-929">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-930">
            <paramref name="value" /> の値が <see cref="F:System.Single.PositiveInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-930">The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</span>
          </span>
          <span data-ttu-id="0f1a6-931">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-931">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-932">
            <paramref name="value" /> の値が <see cref="F:System.Single.NegativeInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-932">The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-933">指定された値がもう 1 つの指定された値より大きいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-933">Returns a value that indicates whether a specified value is greater than another specified value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-934">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-934">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-935">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-935">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-936">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値より大きいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-936">Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-937">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-937">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-938"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>メソッドは、大なり演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-938">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-939">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-939">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 <span data-ttu-id="0f1a6-940">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>インスタンス メソッドを代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-940">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span> <span data-ttu-id="0f1a6-941">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-941">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 <span data-ttu-id="0f1a6-942">場合`left`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-942">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-943">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-943">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-944">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-944">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-945">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-945">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-946">
            <see cref="T:System.Numerics.BigInteger" /> が 64 ビット符号付き整数値より大きいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-946">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-947">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-947">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-948"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>メソッドは、大なり演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-948">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-949">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-949">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 <span data-ttu-id="0f1a6-950">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-950">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-951">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-951">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 <span data-ttu-id="0f1a6-952">場合`right`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-952">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-953">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-953">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-954">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-954">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-955">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-955">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-956">
            <see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値より大きいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-956">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-957">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-957">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-958"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>メソッドは、大なり演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-958">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-959">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-959">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 <span data-ttu-id="0f1a6-960">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-960">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-961">呼び出すことができます、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-961">They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 <span data-ttu-id="0f1a6-962">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-962">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-963">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-963">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-964">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-964">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-965">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より大きいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-965">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-966">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-966">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-967"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>メソッドは、大なり演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-967">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-968">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-968">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 <span data-ttu-id="0f1a6-969">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-969">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-970">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-970">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-971">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-971">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-972">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-972">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-973">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より大きいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-973">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-974">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-974">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-975"><xref:System.Numerics.BigInteger.op_GreaterThan%2A>メソッドは、大なり演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-975">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-976">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-976">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 <span data-ttu-id="0f1a6-977">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-977">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-978">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-978">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-979">指定された値がもう 1 つの指定された値以上かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-979">Returns a value that indicates whether a specified value is greater than or equal to another specified value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-980">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-980">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-981">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-981">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-982">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値以上かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-982">Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-983">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-983">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-984"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>メソッドより大きいまたは等しいオペレーターの操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-984">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-985">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-985">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 <span data-ttu-id="0f1a6-986">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-986">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-987">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-987">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 <span data-ttu-id="0f1a6-988">場合`left`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-988">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-989">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-989">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-990">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-990">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-991">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-991">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-992">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号付き整数値以上かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-992">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-993">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-993">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-994"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>メソッドより大きいまたは等しいオペレーターの操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-994">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-995">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-995">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 <span data-ttu-id="0f1a6-996">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-996">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-997">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-997">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 <span data-ttu-id="0f1a6-998">場合`right`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-998">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-999">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-999">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1000">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1000">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1001">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1001">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1002">
            <see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値以上かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1002">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1003">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1003">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1004"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>メソッドより大きいまたは等しいオペレーターの操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1004">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1005">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1005">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 <span data-ttu-id="0f1a6-1006">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1006">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1007">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1007">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 <span data-ttu-id="0f1a6-1008">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1008">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1009">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1009">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1010">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1010">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1011">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数値以上かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1011">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1012">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1012">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1013"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>メソッドより大きいまたは等しいオペレーターの操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1013">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1014">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1014">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 <span data-ttu-id="0f1a6-1015">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1015">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1016">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1016">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 <span data-ttu-id="0f1a6-1017">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1017">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1018">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1018">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1019">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1019">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1020">64 ビット符号なし整数が <see cref="T:System.Numerics.BigInteger" /> 値以上かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1020">Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1021">
            <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1021">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1022"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A>メソッドより大きいまたは等しいオペレーターの操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1022">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1023">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1023">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 <span data-ttu-id="0f1a6-1024">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1024">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1025">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1025">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 <span data-ttu-id="0f1a6-1026">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1026">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1027">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトと別の型との間の暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1027">Defines an implicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1028">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1028">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1029">符号なしバイト値から <see cref="T:System.Numerics.BigInteger" /> 値への暗示的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1029">Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1030">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1030">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1031">小数部の`value`パラメーターは変換の前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1031">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="0f1a6-1032">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1032">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="0f1a6-1033">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1033">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1034">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1034">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1035">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.Byte>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1035">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1036">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1036">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1037">符号付き 16 ビット整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1037">Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1038">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1038">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1039">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1039">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="0f1a6-1040">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1040">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1041">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1041">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1042">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.Int16>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1042">This overload lets the compiler handle conversions from a <xref:System.Int16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1043">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1043">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1044">符号付き 32 ビット整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1044">Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1045">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1045">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1046">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1046">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="0f1a6-1047">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1047">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1048">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1048">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1049">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.Int32>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1049">This overload lets the compiler handle conversions from a <xref:System.Int32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1050">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1050">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1051">符号付き 64 ビット整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1051">Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1052">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1052">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1053">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1053">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span></span>   
 
 <span data-ttu-id="0f1a6-1054">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1054">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1055">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1055">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1056">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.Int64>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1056">This overload lets the compiler handle conversions from a <xref:System.Int64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1057">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1057">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1058">8 ビット符号付き整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1058">Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1059">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1059">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-1060">準拠している代替として <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1060">The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1061">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1061">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1062">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1062">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="0f1a6-1063">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1063">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1064">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1064">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1065">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.SByte>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1065">This overload lets the compiler handle conversions from a <xref:System.SByte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1066">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1066">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1067">16 ビット符号なし整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1067">Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1068">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1068">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-1069">準拠している代替として <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1069">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1070">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1070">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1071">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1071">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="0f1a6-1072">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1072">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1073">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1073">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1074">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.UInt16>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1074">This overload lets the compiler handle conversions from a <xref:System.UInt16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1075">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1075">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1076">32 ビット符号なし整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1076">Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1077">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1077">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-1078">準拠している代替として <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1078">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1079">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1079">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1080">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1080">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="0f1a6-1081">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1081">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1082">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1082">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1083">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.UInt32>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1083">This overload lets the compiler handle conversions from a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1084">
            <see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1084">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1085">64 ビット符号なし整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1085">Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1086">この API は、CLS に準拠していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1086">This API is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="0f1a6-1087">準拠している代替として <see cref="T:System.Double" />.を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1087">The compliant alternative is <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1088">
            <paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1088">An object that contains the value of the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1089">別の方法は、暗黙的な演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1089">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="0f1a6-1090">オーバー ロード、<xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger>メソッドが型を定義するかをコンパイラに自動的に変換できるから、<xref:System.Numerics.BigInteger>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しの値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1090">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="0f1a6-1091">これらには、拡大変換をデータの損失を伴わないスローしないでください、<xref:System.OverflowException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1091">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="0f1a6-1092">このオーバー ロードにより、コンパイラからの変換を処理、<xref:System.UInt64>値を<xref:System.Numerics.BigInteger>値、例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1092">This overload lets the compiler handle conversions from a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]   

 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ++ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ++(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Increment : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Increment value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1093">インクリメントする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1093">The value to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1094">
            <see cref="T:System.Numerics.BigInteger" /> 値を 1 だけインクリメントします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1094">Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1095">
            <paramref name="value" /> パラメーターの値を 1 だけインクリメントした値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1095">The value of the <paramref name="value" /> parameter incremented by 1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1096"><xref:System.Numerics.BigInteger.op_Increment%2A>メソッド定義のインクリメント操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1096">The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1097">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1097">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 <span data-ttu-id="0f1a6-1098">インクリメント演算子がない、または演算子のオーバー ロードをサポートしていません (Visual Basic) などの一部の言語、<xref:System.Numerics.BigInteger.op_Increment%2A>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1098">Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <span data-ttu-id="0f1a6-1099"><xref:System.Numerics.BigInteger>オブジェクトは不変で、<xref:System.Numerics.BigInteger.op_Increment%2A>オペレーターを作成する新しい<xref:System.Numerics.BigInteger>値が 1 つのオブジェクトよりも多く<xref:System.Numerics.BigInteger>によって表されるオブジェクト`value`。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1099">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="0f1a6-1100">そのためへの呼び出しを繰り返す<xref:System.Numerics.BigInteger.op_Increment%2A>高価な場合があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1100">Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="0f1a6-1101">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1101">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1102">2 つの数値が等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1102">Returns a value that indicates whether two numeric values are not equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : int64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1103">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1103">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1104">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1104">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1105">64 ビット符号付き整数値と <see cref="T:System.Numerics.BigInteger" /> 値が等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1105">Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1106">
            <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1106">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1107"><xref:System.Numerics.BigInteger.op_Inequality%2A>メソッドの非等値演算子の動作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1107">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1108">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1108">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 <span data-ttu-id="0f1a6-1109">カスタム演算子をサポートしない言語は、次の手法のいずれかを使用して非等値テストできます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1109">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="0f1a6-1110">呼び出す、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>インスタンス間のリレーションシップを示すメソッドを<xref:System.Numerics.BigInteger>と符号付き長整数値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1110">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="0f1a6-1111">呼び出す、<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>インスタンス メソッドとその値を反転します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1111">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method and reversing its value.</span></span>  
  
 <span data-ttu-id="0f1a6-1112">場合`left`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1112">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * int64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1113">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1113">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1114">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1114">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1115">
            <see cref="T:System.Numerics.BigInteger" /> 値と 64 ビット符号付き整数値が等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1115">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1116">
            <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1116">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1117"><xref:System.Numerics.BigInteger.op_Inequality%2A>メソッドの非等値演算子の動作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1117">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1118">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1118">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 <span data-ttu-id="0f1a6-1119">カスタム演算子をサポートしない言語は、次の手法のいずれかを使用して非等値テストできます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1119">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="0f1a6-1120">呼び出す、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>間のリレーションシップを示すメソッドを<xref:System.Numerics.BigInteger>と符号付き長整数値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1120">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="0f1a6-1121">呼び出す、<xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>メソッドとその値を反転します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1121">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="0f1a6-1122">場合`right`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1122">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-1123">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1123">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1124">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1124">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1125">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1125">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1126">2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が異なるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1126">Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1127">
            <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1127">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1128"><xref:System.Numerics.BigInteger.op_Inequality%2A>メソッドの非等値演算子の動作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1128">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1129">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1129">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 <span data-ttu-id="0f1a6-1130">カスタム演算子をサポートしない言語は、次の手法のいずれかを使用して非等値テストできます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1130">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="0f1a6-1131">呼び出す、<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>メソッドで、2 つの間の関係を示す<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1131">Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.</span></span>  
  
-   <span data-ttu-id="0f1a6-1132">呼び出す、<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>メソッドとその値を反転します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1132">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="0f1a6-1133">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1133">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1134">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1134">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1135">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1135">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1136">
            <see cref="T:System.Numerics.BigInteger" /> 値と 64 ビット符号なし整数値が等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1136">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1137">
            <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1137">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1138"><xref:System.Numerics.BigInteger.op_Inequality%2A>メソッドの非等値演算子の動作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1138">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1139">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1139">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 <span data-ttu-id="0f1a6-1140">カスタム演算子をサポートしない言語は、次の手法のいずれかを使用して非等値テストできます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1140">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="0f1a6-1141">呼び出す、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>間のリレーションシップを示すメソッドを<xref:System.Numerics.BigInteger>と符号なし長整数値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1141">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="0f1a6-1142">呼び出す、<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>メソッドとその値を反転します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1142">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1143">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1143">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1144">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1144">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1145">64 ビット符号なし整数値と <see cref="T:System.Numerics.BigInteger" /> 値が等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1145">Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1146">
            <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1146">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1147"><xref:System.Numerics.BigInteger.op_Inequality%2A>メソッドの非等値演算子の動作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1147">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1148">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1148">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 <span data-ttu-id="0f1a6-1149">カスタム演算子をサポートしない言語は、次の手法のいずれかを使用して非等値テストできます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1149">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="0f1a6-1150">呼び出す、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>間のリレーションシップを示すメソッドを<xref:System.Numerics.BigInteger>と符号なし長整数値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1150">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="0f1a6-1151">呼び出す、<xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType>メソッドとその値を反転します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1151">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &lt;&lt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &lt;&lt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &lt;&lt;&lt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &lt;&lt;&lt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1152">ビットをシフトする対象の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1152">The value whose bits are to be shifted.</span>
          </span>
        </param>
        <param name="shift">
          <span data-ttu-id="0f1a6-1153">
            <c>値</c>を左にシフトするビット数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1153">The number of bits to shift <c>value</c> to the left.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1154">指定されたビット数だけ <see cref="T:System.Numerics.BigInteger" /> 値を左にシフトします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1154">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1155">指定されたビット数だけ左にシフトされた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1155">A value that has been shifted to the left by the specified number of bits.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1156"><xref:System.Numerics.BigInteger.op_LeftShift%2A>メソッドは、ビットごとの左シフト演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1156">The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1157">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1157">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1158">整数のプリミティブのビットごとの左シフト演算とは異なり、<xref:System.Numerics.BigInteger.op_LeftShift%2A>メソッドには、元の符号が保持されます<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1158">Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="0f1a6-1159">乗算することによってカスタム演算子をサポートしていない言語がビットごとの左シフト演算を実行できます`value`によって`BigInteger.Pow(2, shift)`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1159">Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`.</span></span> <span data-ttu-id="0f1a6-1160">次の例では、結果がこの演算子を使用しての結果と同じであることを示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1160">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1161">指定された値がもう 1 つの指定された値より小さいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1161">Returns a value that indicates whether a specified value is less than a second specified value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1162">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1162">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1163">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1163">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1164">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値より小さいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1164">Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1165">
            <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1165">
              <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1166"><xref:System.Numerics.BigInteger.op_LessThan%2A>メソッド定義の演算子よりも低いの操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1166">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1167">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1167">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 <span data-ttu-id="0f1a6-1168">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1168">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1169">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1169">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 <span data-ttu-id="0f1a6-1170">場合`left`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1170">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-1171">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1171">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1172">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1172">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1173">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1173">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1174">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号付き整数より小さいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1174">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1175">
            <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1175">
              <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1176"><xref:System.Numerics.BigInteger.op_LessThan%2A>メソッド定義の演算子よりも低いの操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1176">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1177">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1177">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 <span data-ttu-id="0f1a6-1178">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1178">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1179">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1179">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 <span data-ttu-id="0f1a6-1180">場合`right`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1180">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-1181">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1181">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1182">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1182">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1183">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1183">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1184">
            <see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値より小さいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1184">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1185">
            <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1185">
              <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1186"><xref:System.Numerics.BigInteger.op_LessThan%2A>メソッド定義の演算子よりも低いの操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1186">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1187">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1187">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 <span data-ttu-id="0f1a6-1188">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1188">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1189">一部の言語を呼び出すことも、<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1189">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 <span data-ttu-id="0f1a6-1190">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1190">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1191">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1191">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1192">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1192">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1193">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より小さいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1193">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1194">
            <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1194">
              <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1195"><xref:System.Numerics.BigInteger.op_LessThan%2A>メソッド定義の演算子よりも低いの操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1195">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1196">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1196">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 <span data-ttu-id="0f1a6-1197">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1197">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1198">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1198">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 <span data-ttu-id="0f1a6-1199">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1199">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1200">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1200">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1201">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1201">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1202">64 ビット符号なし整数が <see cref="T:System.Numerics.BigInteger" /> 値より小さいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1202">Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1203">
            <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1203">
              <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1204"><xref:System.Numerics.BigInteger.op_LessThan%2A>メソッド定義の演算子よりも低いの操作<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1204">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1205">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1205">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 <span data-ttu-id="0f1a6-1206">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1206">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1207">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1207">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 <span data-ttu-id="0f1a6-1208">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1208">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1209">指定された値がもう 1 つの指定された値以下かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1209">Returns a value that indicates whether a specified value is less than or equal to another specified value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1210">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1210">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1211">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1211">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1212">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値以下かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1212">Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1213">
            <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1213">
              <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1214"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>メソッドの操作を定義するオペレーターに等しいまたはそれよりも小さい<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1214">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1215">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1215">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 <span data-ttu-id="0f1a6-1216">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1216">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1217">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1217">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 <span data-ttu-id="0f1a6-1218">場合`left`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1218">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-1219">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1219">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1220">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1220">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1221">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1221">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1222">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号付き整数以下かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1222">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1223">
            <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1223">
              <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1224"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>メソッドの操作を定義するオペレーターに等しいまたはそれよりも小さい<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1224">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1225">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1225">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 <span data-ttu-id="0f1a6-1226">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1226">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1227">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1227">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 <span data-ttu-id="0f1a6-1228">場合`right`は、 <xref:System.Byte>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.SByte>、 <xref:System.UInt16>、または<xref:System.UInt32>値、暗黙的に変換されます、<xref:System.Int64>操作を実行するときの値します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1228">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="0f1a6-1229">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1229">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1230">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1230">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1231">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1231">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1232">
            <see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値以下かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1232">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1233">
            <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1233">
              <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1234"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>メソッドの操作を定義するオペレーターに等しいまたはそれよりも小さい<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1234">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1235">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1235">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 <span data-ttu-id="0f1a6-1236">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Compare%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1236">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead.</span></span> <span data-ttu-id="0f1a6-1237">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1237">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 <span data-ttu-id="0f1a6-1238">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1238">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1239">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1239">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1240">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1240">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1241">
            <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数以下かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1241">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1242">
            <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1242">
              <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1243"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>メソッドの操作を定義するオペレーターに等しいまたはそれよりも小さい<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1243">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1244">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1244">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 <span data-ttu-id="0f1a6-1245">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1245">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1246">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1246">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 <span data-ttu-id="0f1a6-1247">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1247">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1248">比較する最初の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1248">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1249">比較する 2 番目の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1249">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1250">64 ビット符号なし整数が <see cref="T:System.Numerics.BigInteger" /> 値以下かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1250">Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1251">
            <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1251">
              <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1252"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A>メソッドの操作を定義するオペレーターに等しいまたはそれよりも小さい<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1252">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1253">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1253">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 <span data-ttu-id="0f1a6-1254">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1254">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="0f1a6-1255">呼び出すことができます、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29>メソッドを直接として次の例を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1255">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 <span data-ttu-id="0f1a6-1256">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1256">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator % (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator %(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( % ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend % divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">
          <span data-ttu-id="0f1a6-1257">被除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1257">The value to be divided.</span>
          </span>
        </param>
        <param name="divisor">
          <span data-ttu-id="0f1a6-1258">除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1258">The value to divide by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1259">指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> 値の除算の結果生じた剰余を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1259">Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1260">除算の結果生じた剰余。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1260">The remainder that results from the division.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1261"><xref:System.Numerics.BigInteger.op_Modulus%2A>メソッドは、剰余演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1261">The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1262">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1262">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 <span data-ttu-id="0f1a6-1263">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1263">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-1264">剰余演算によって返される値の符号がの符号に依存`dividend`: 場合`dividend`剰余演算は陽性の結果を返します。 剰余演算が負の結果を返しますが負の場合は正です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1264">The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</span></span> <span data-ttu-id="0f1a6-1265">剰余の操作の動作<xref:System.Numerics.BigInteger>値はその他の整数型の剰余演算と同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1265">The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.</span></span>  
  
 <span data-ttu-id="0f1a6-1266">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1266">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="0f1a6-1267">
            <paramref name="divisor" /> が 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1267">
              <paramref name="divisor" /> is 0 (zero).</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator * (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator *(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1268">乗算する 1 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1268">The first value to multiply.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1269">乗算する 2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1269">The second value to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1270">指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> 値を乗算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1270">Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1271">
            <paramref name="left" /> と <paramref name="right" /> の積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1271">The product of <paramref name="left" /> and <paramref name="right" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1272"><xref:System.Numerics.BigInteger.op_Multiply%2A>メソッドの乗算演算子の動作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1272">The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1273">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1273">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 <span data-ttu-id="0f1a6-1274">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1274">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ~ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ~(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1275">整数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1275">An integer value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1276">
            <see cref="T:System.Numerics.BigInteger" /> 値のビットごとの 1 の補数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1276">Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1277">
            <paramref name="value" /> のビットごとの 1 の補数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1277">The bitwise one's complement of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1278"><xref:System.Numerics.BigInteger.op_OnesComplement%2A>メソッドは、ビットごとの操作を定義します。 1 の補数演算子の<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1278">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1279">数値の値の各ビット ビットごとの補数演算子を反転させます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1279">The bitwise one's complement operator reverses each bit in a numeric value.</span></span> <span data-ttu-id="0f1a6-1280">ビット`value`にある 0 は結果では、1 に設定され、1 ビットが結果に 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1280">That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.</span></span> <span data-ttu-id="0f1a6-1281"><xref:System.Numerics.BigInteger.op_OnesComplement%2A>メソッドは、次のコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1281">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 <span data-ttu-id="0f1a6-1282">カスタム演算子をサポートしない言語を呼び出すことができる可能性があります、<xref:System.Numerics.BigInteger.op_OnesComplement%2A>メソッドを直接実行 1 のビットごとの補数演算。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1282">Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation.</span></span> <span data-ttu-id="0f1a6-1283">例:</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1283">For example:</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &gt;&gt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &gt;&gt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &gt;&gt;&gt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &gt;&gt;&gt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1284">ビットをシフトする対象の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1284">The value whose bits are to be shifted.</span>
          </span>
        </param>
        <param name="shift">
          <span data-ttu-id="0f1a6-1285">
            <c>値</c>を右にシフトするビット数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1285">The number of bits to shift <c>value</c> to the right.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1286">指定されたビット数だけ <see cref="T:System.Numerics.BigInteger" /> 値を右にシフトします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1286">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1287">指定されたビット数だけ右にシフトされた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1287">A value that has been shifted to the right by the specified number of bits.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1288"><xref:System.Numerics.BigInteger.op_RightShift%2A>メソッドは、ビットごとの右シフト演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1288">The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1289">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1289">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 <span data-ttu-id="0f1a6-1290">カスタム演算子をサポートしない言語で割ってビットごとの右シフト演算を実行できます`value`によって`BigInteger.Pow(2, shift)`で 1 回の減算`shift`負の値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1290">Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values.</span></span> <span data-ttu-id="0f1a6-1291">次の例では、結果がこの演算子を使用しての結果と同じであることを示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1291">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 <span data-ttu-id="0f1a6-1292">場合`shift`は正の値のビット数以上<xref:System.Numerics.BigInteger>値、右シフト演算の結果は<xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1292">If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-1293">場合`shift`、負の値のビット数を超える<xref:System.Numerics.BigInteger>値、右シフト演算の結果は<xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1293">If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1294">減算される値 (被減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1294">The value to subtract from (the minuend).</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1295">減算する値 (減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1295">The value to subtract (the subtrahend).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1296">
            <see cref="T:System.Numerics.BigInteger" /> 値をもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値から減算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1296">Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1297">
            <paramref name="right" /> から <paramref name="left" /> を減算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1297">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1298"><xref:System.Numerics.BigInteger.op_Subtraction%2A>メソッドは、減算演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1298">The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1299">次のようなコードが有効にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1299">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 <span data-ttu-id="0f1a6-1300">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1300">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-1301">この演算子を同等のメソッドは<xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1301">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1302">否定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1302">The value to negate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1303">指定された BigInteger 値を否定 (負数化) します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1303">Negates a specified BigInteger value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1304">
            <paramref name="value" /> パラメーターに -1 を乗算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1304">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1305"><xref:System.Numerics.BigInteger.op_UnaryNegation%2A>メソッドの単項否定演算子 (または、加法逆元演算子) の操作を定義する<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1305">The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1306">操作は、元の数に追加されたときに、0 (ゼロ) で結果の値を生成します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1306">The operation produces a value that results in 0 (zero) when it is added to the original number.</span></span> <span data-ttu-id="0f1a6-1307">カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.Numerics.BigInteger.Negate%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1307">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="0f1a6-1308">この演算子を同等のメソッドは、します。 <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="0f1a6-1308">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="0f1a6-1309">次の例の値を否定する 3 つの方法を示しています、<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1309">The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="+ value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1310">整数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1310">An integer value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1311">
            <see cref="T:System.Numerics.BigInteger" /> オペランドの値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1311">Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand.</span>
          </span>
          <span data-ttu-id="0f1a6-1312">オペランドの符号は変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1312">(The sign of the operand is unchanged.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1313">
            <paramref name="value" /> オペランドの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1313">The value of the <paramref name="value" /> operand.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1314"><xref:System.Numerics.BigInteger.op_UnaryPlus%2A>メソッドは、単項プラス演算子の操作を定義します。<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1314">The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1315">数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1315">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1316">変換する数値を含んだ文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1316">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1317">数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1317">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1318">
            <paramref name="value" /> パラメーターで指定されている数値と等価の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1318">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1319">`value`パラメーターは、次の形式の数値の文字列形式でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1319">The `value` parameter should be the string representation of a number in the following form.</span></span>  
  
 <span data-ttu-id="0f1a6-1320">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1320">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1321">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1321">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="0f1a6-1322">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1322">The following table describes each element.</span></span>  
  
|<span data-ttu-id="0f1a6-1323">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1323">Element</span></span>|<span data-ttu-id="0f1a6-1324">説明</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1324">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="0f1a6-1325">*ws*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1325">*ws*</span></span>|<span data-ttu-id="0f1a6-1326">空白文字の省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1326">Optional white space.</span></span>|  
|<span data-ttu-id="0f1a6-1327">*sign*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1327">*sign*</span></span>|<span data-ttu-id="0f1a6-1328">オプションの符号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1328">An optional sign.</span></span> <span data-ttu-id="0f1a6-1329">有効な署名の文字はによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>現在のカルチャのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1329">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="0f1a6-1330">*digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1330">*digits*</span></span>|<span data-ttu-id="0f1a6-1331">0 から 9 までの数字のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1331">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="0f1a6-1332">先頭の 0 は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1332">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1333">指定された文字列、`value`パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>スタイル。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1333">The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="0f1a6-1334">任意のグループ区切り記号または 10 進数の区切り記号を含めることはできず、小数部を持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1334">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="0f1a6-1335">`value`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>オブジェクトを現在のシステム カルチャが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1335">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> object that is initialized for the current system culture.</span></span> <span data-ttu-id="0f1a6-1336">詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1336">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-1337">使用して、特定のカルチャの書式設定情報を使用して文字列を解析する、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1337">To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f1a6-1338">使用する場合、<xref:System.Numerics.BigInteger.Parse%2A>文字列表現をラウンドト リップさせる方法の<xref:System.Numerics.BigInteger>によって出力された値、<xref:System.Numerics.BigInteger.ToString%2A>メソッドを使用する必要がある、<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>メソッドの文字列表現を生成する"R"書式指定子、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1338">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="0f1a6-1339">それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50、元の値とデータの最上位桁数が失われるを使用する場合のみが保持されます、<xref:System.Numerics.BigInteger.Parse%2A>を復元する方法、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1339">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1340">次の例では、 <xref:System.Numerics.BigInteger.Parse%28System.String%29> 2 つのインスタンスを作成するメソッド<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1340">The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="0f1a6-1341">各オブジェクトを他の数値を乗算しを呼び出して、<xref:System.Numerics.BigInteger.Compare%2A>メソッドを 2 つの値の間の関係を決定します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1341">It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f1a6-1342">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1342">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="0f1a6-1343">
            <paramref name="value" /> が正しい形式ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1343">
              <paramref name="value" /> is not in the correct format.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1344">変換する数値を含んだ文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1344">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="0f1a6-1345">
            <c> 値 </c> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1345">A bitwise combination of the enumeration values that specify the permitted format of <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1346">指定のスタイルで表現された数値の文字列形式を、それと等価な <see cref="T:System.Numerics.BigInteger" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1346">Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1347">
            <paramref name="value" /> パラメーターで指定されている数値と等価の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1347">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1348">`style` (空白、正または負記号、桁区切り記号、小数点記号など) で使用できるスタイル要素を定義するパラメーター、`value`解析操作が成功するためのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1348">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="0f1a6-1349">`styles` ビット フラグの組み合わせを使用する必要があります、<xref:System.Globalization.NumberStyles>列挙体。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1349">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="0f1a6-1350">`style`パラメーター オーバー ロードする便利な場合にこのメソッドは、`value`によって表される数システム (10 進または 16 進数) と 16 進数の値の文字列表現が含まれています`value`、実行時にしかわからない場合、またはします。空白を許可しないようにするかで記号`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1350">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="0f1a6-1351">値に応じて`style`、`value`パラメーターは、次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1351">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="0f1a6-1352">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1352">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1353">場合`style`が含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>、`value`パラメーターは、次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1353">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="0f1a6-1354">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1354">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1355">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1355">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="0f1a6-1356">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1356">The following table describes each element.</span></span>  
  
|<span data-ttu-id="0f1a6-1357">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1357">Element</span></span>|<span data-ttu-id="0f1a6-1358">説明</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1358">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="0f1a6-1359">*ws*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1359">*ws*</span></span>|<span data-ttu-id="0f1a6-1360">空白文字の省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1360">Optional white space.</span></span> <span data-ttu-id="0f1a6-1361">先頭に空白文字を表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>の最後に、フラグ、およびそれが表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1361">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="0f1a6-1362">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1362">A culture-specific currency symbol.</span></span> <span data-ttu-id="0f1a6-1363">によって、文字列内の位置が定義されている、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>現在のカルチャのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1363">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="0f1a6-1364">現在のカルチャの通貨記号に表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1364">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1365">*sign*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1365">*sign*</span></span>|<span data-ttu-id="0f1a6-1366">オプションの符号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1366">An optional sign.</span></span> <span data-ttu-id="0f1a6-1367">先頭に表示できる符号`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>の最後に、フラグ、およびそれが表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1367">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="0f1a6-1368">かっこを使用できる`value`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1368">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1369">*digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1369">*digits*</span></span><br /><br /> <span data-ttu-id="0f1a6-1370">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1370">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="0f1a6-1371">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1371">*exponential_digits*</span></span>|<span data-ttu-id="0f1a6-1372">0 ~ 9 桁の数字のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1372">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="0f1a6-1373">*Fractional_digits*数字の 0 が有効では専用です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1373">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="0f1a6-1374">*、*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1374">*,*</span></span>|<span data-ttu-id="0f1a6-1375">カルチャ固有のグループの区切り記号です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1375">A culture-specific group separator symbol.</span></span> <span data-ttu-id="0f1a6-1376">現在のカルチャの桁区切り記号に表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1376">The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1377">*.*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1377">*.*</span></span>|<span data-ttu-id="0f1a6-1378">カルチャに固有の小数点記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1378">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="0f1a6-1379">現在のカルチャの小数点記号に表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1379">The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="0f1a6-1380">数字の 0 は、解析操作を成功させるための小数部の桁として表示されます。場合*fractional_digits*他の任意の数字が含まれています、<xref:System.FormatException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1380">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="0f1a6-1381">E</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1381">E</span></span>|<span data-ttu-id="0f1a6-1382">"E"または"E"文字は、値は指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1382">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="0f1a6-1383">`value`パラメーターは指数表記の数値を表すことができる場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1383">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1384">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1384">*hexdigits*</span></span>|<span data-ttu-id="0f1a6-1385">0 ~ f、または f の 0 から 16 進数のシーケンス</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1385">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="0f1a6-1386">終端の NUL (u+0000) 文字`s`の値に関係なく、解析操作では無視されますが、`style`引数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1386">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="0f1a6-1387">数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) 常に正常に解析します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1387">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="0f1a6-1388">残りのほとんど<xref:System.Globalization.NumberStyles>メンバーが存在する場合がありますが、入力文字列内に存在する必要はありません、要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1388">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="0f1a6-1389">次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在する要素に影響を与える`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1389">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="0f1a6-1390">`NumberStyles` の値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1390">`NumberStyles` value</span></span>|<span data-ttu-id="0f1a6-1391">使用できる要素`value`数字だけでなく</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1391">Elements permitted in `value` in addition to digits</span></span>|  
|--------------------------|---------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="0f1a6-1392">*桁*要素のみです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1392">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="0f1a6-1393">小数点 (.) と*桁の小数部*要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1393">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="0f1a6-1394">"E"または"E"文字と共に、指数表記を示す*exponential_digits*します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1394">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="0f1a6-1395">*Ws*要素の開始時`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1395">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="0f1a6-1396">*Ws*の末尾にある要素`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1396">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="0f1a6-1397">*サインオン*要素の開始時`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1397">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="0f1a6-1398">*サインオン*の末尾にある要素`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1398">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="0f1a6-1399">*サインオン*形式の数値を囲むかっこ内の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1399">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="0f1a6-1400">グループ区切り記号 (,) の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1400">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="0f1a6-1401">通貨 ($) の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1401">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="0f1a6-1402">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1402">All elements.</span></span> <span data-ttu-id="0f1a6-1403">ただし、 `value` 16 進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1403">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="0f1a6-1404">*Ws*先頭または末尾に要素`value`、*サインオン*の開始時`value`、および小数点 (*.*) シンボル。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1404">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="0f1a6-1405">`value`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1405">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="0f1a6-1406">`ws`、 `sign`、桁区切り記号 (*、*)、および小数点 10 進数 (*.*) 要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1406">The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="0f1a6-1407">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1407">All elements.</span></span> <span data-ttu-id="0f1a6-1408">ただし、 `value` 16 進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1408">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f1a6-1409">使用する場合、<xref:System.Numerics.BigInteger.Parse%2A>文字列表現をラウンドト リップさせる方法の<xref:System.Numerics.BigInteger>によって出力された値、<xref:System.Numerics.BigInteger.ToString%2A>メソッドを使用する必要がある、<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>メソッドの文字列表現を生成する"R"書式指定子、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1409">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="0f1a6-1410">それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50、元の値とデータの最上位桁数が失われるを使用する場合のみが保持されます、<xref:System.Numerics.BigInteger.Parse%2A>を復元する方法、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1410">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="0f1a6-1411">異なり、その他の<xref:System.Globalization.NumberStyles>、許可が必要としない、特定のスタイルの要素の存在、値`value`、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>スタイルの値を意味する個別の数値文字で`value`として常に解釈されます16 進数の文字。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1411">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="0f1a6-1412">有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1412">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="0f1a6-1413">のみ他のフラグと組み合わせて使用できますが、`style`パラメーターは<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1413">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-1414">(、<xref:System.Globalization.NumberStyles>列挙には、複合数値スタイルが含まれています<xref:System.Globalization.NumberStyles.HexNumber>、空白文字の両方のフラグが含まれます。)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1414">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1415">場合`value`文字列表現ですが、16 進数は、接頭辞前ことはできません (など`0x`または`&h`)、16 進数として区別します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1415">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="0f1a6-1416">これにより、変換に失敗します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1416">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="0f1a6-1417">場合`value`16 進数の文字列、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>メソッドは解釈`value`その最初の 2 つの 16 進数の数字がより大きいか等しい場合は、2 の補数表現を使用して、格納されている負の数値として`0x80`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1417">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="0f1a6-1418">つまり、メソッドは、最初のバイトの最上位ビットを解釈`value`符号ビットとして。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1418">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="0f1a6-1419">16 進数の文字列が正の数の最初の桁として正しく解釈されるかどうかを確認する`value`値が 0 の必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1419">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="0f1a6-1420">たとえば、このメソッドは解釈`0x80`負の値が解釈するか、`0x080`または`0x0080`正の値として。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1420">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="0f1a6-1421">次の例では、負と正の値を表す 16 進数の文字列間の差を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1421">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="0f1a6-1422">`value`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>オブジェクトを現在のシステム カルチャが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1422">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="0f1a6-1423">書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1423">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1424">次の例への呼び出し、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>メソッドのいくつかの値を`style`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1424">The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter.</span></span> <span data-ttu-id="0f1a6-1425">16 進数の値として文字列を解釈する方法とスペースを許可しないし、シンボルを署名する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1425">It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f1a6-1426">
            <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1426">
              <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1427">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1427">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-1428">
            <paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1428">
              <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f1a6-1429">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1429">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="0f1a6-1430">
            <paramref name="value" /> は、<see cref="T:System.Globalization.NumberStyles" /> によって指定された入力パターンに従っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1430">
              <paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1431">変換する数値を含んだ文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1431">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="0f1a6-1432">
            <c> 値 </c> に関するカルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1432">An object that provides culture-specific formatting information about <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1433">指定されたカルチャ固有の書式で表現された文字列形式の数値を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1433">Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1434">
            <paramref name="value" /> パラメーターで指定されている数値と等価の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1434">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1435">`value`パラメーターは、次の形式の数値の文字列形式でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1435">The `value` parameter should be the string representation of a number in the following form:</span></span>  
  
 <span data-ttu-id="0f1a6-1436">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1436">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1437">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1437">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="0f1a6-1438">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1438">The following table describes each element.</span></span>  
  
|<span data-ttu-id="0f1a6-1439">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1439">Element</span></span>|<span data-ttu-id="0f1a6-1440">説明</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1440">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="0f1a6-1441">*ws*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1441">*ws*</span></span>|<span data-ttu-id="0f1a6-1442">空白文字の省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1442">Optional white space.</span></span>|  
|<span data-ttu-id="0f1a6-1443">*sign*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1443">*sign*</span></span>|<span data-ttu-id="0f1a6-1444">オプションの符号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1444">An optional sign.</span></span> <span data-ttu-id="0f1a6-1445">有効な署名の文字はによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>のプロパティ、<xref:System.Globalization.NumberFormatInfo>オブジェクトによって返される、`provider`オブジェクトの<xref:System.IFormatProvider.GetFormat%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1445">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.</span></span>|  
|<span data-ttu-id="0f1a6-1446">*digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1446">*digits*</span></span>|<span data-ttu-id="0f1a6-1447">0 から 9 までの数字のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1447">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="0f1a6-1448">先頭の 0 は無視されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1448">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1449">指定された文字列、`value`パラメーターを使用して解釈されますが、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>スタイル。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1449">The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="0f1a6-1450">任意のグループ区切り記号または 10 進数の区切り記号を含めることはできず、小数部を持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1450">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f1a6-1451">使用する場合、<xref:System.Numerics.BigInteger.Parse%2A>文字列表現をラウンドト リップさせる方法の<xref:System.Numerics.BigInteger>によって出力された値、<xref:System.Numerics.BigInteger.ToString%2A>メソッドを使用する必要がある、<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>メソッドの文字列表現を生成する"R"書式指定子、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1451">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="0f1a6-1452">それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50、元の値とデータの最上位桁数が失われるを使用する場合のみが保持されます、<xref:System.Numerics.BigInteger.Parse%2A>を復元する方法、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1452">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="0f1a6-1453">`provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.NumberFormatInfo>カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1453">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="0f1a6-1454">ときに、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29>メソッドが呼び出される、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A>メソッドを渡します、<xref:System.Type>を表すオブジェクトを<xref:System.Globalization.NumberFormatInfo>型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1454">When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="0f1a6-1455"><xref:System.IFormatProvider.GetFormat%2A>メソッド、<xref:System.Globalization.NumberFormatInfo>の形式に関する情報を提供するオブジェクト、`value`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1455">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter.</span></span> <span data-ttu-id="0f1a6-1456">3 つの方法を使用する、`provider`解析操作にカスタムの書式設定情報を指定するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1456">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="0f1a6-1457">渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1457">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="0f1a6-1458">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドが返す、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1458">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="0f1a6-1459">実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1459">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="0f1a6-1460">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1460">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="0f1a6-1461">実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1461">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="0f1a6-1462">その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化して返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1462">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="0f1a6-1463">場合`provider`は`null`の書式設定`value`に基づいて解釈されます、<xref:System.Globalization.NumberFormatInfo>の現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1463">If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1464">次の例では、チルダ (~) を定義する 2 つの方法を示しますの書式設定に負の符号として<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1464">The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="0f1a6-1465">表示する、 <xref:System.Numerics.BigInteger> 、元の文字列と同じ形式で値をコードを呼び出す必要があります、<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドを渡して、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1465">Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="0f1a6-1466">最初の例は、実装するクラスを定義します。<xref:System.IFormatProvider>を使用して、<xref:System.IFormatProvider.GetFormat%2A>を返すメソッドを、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1466">The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 <span data-ttu-id="0f1a6-1467">A<xref:System.Numerics.BigInteger>オブジェクトは、次のコードでインスタンス化しできます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1467">A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 <span data-ttu-id="0f1a6-1468">2 番目の例では、さらに簡単です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1468">The second example is more straightforward.</span></span> <span data-ttu-id="0f1a6-1469">渡す、<xref:System.Globalization.NumberFormatInfo>書式設定情報を提供するオブジェクト、`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1469">It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f1a6-1470">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1470">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="0f1a6-1471">
            <paramref name="value" /> が正しい形式ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1471">
              <paramref name="value" /> is not in the correct format.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As BigInteger" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1472">変換する数値を含んだ文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1472">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="0f1a6-1473">
            <c> 値 </c> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1473">A bitwise combination of the enumeration values that specify the permitted format of <c>value</c>.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="0f1a6-1474">
            <c> 値 </c> に関するカルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1474">An object that provides culture-specific formatting information about <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1475">指定したスタイルおよびカルチャ固有の書式の数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1475">Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1476">
            <paramref name="value" /> パラメーターで指定されている数値と等価の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1476">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1477">`style` (空白、正または負記号、桁区切り記号、小数点記号など) で使用できるスタイル要素を定義するパラメーター、`value`解析操作が成功するためのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1477">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="0f1a6-1478">`styles` ビット フラグの組み合わせを使用する必要があります、<xref:System.Globalization.NumberStyles>列挙体。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1478">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="0f1a6-1479">`style`パラメーター オーバー ロードする便利な場合にこのメソッドは、`value`によって表される数システム (10 進または 16 進数) と 16 進数の値の文字列表現が含まれています`value`、実行時にしかわからない場合、またはします。空白を許可しないようにするかで記号`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1479">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="0f1a6-1480">値に応じて`style`、`value`パラメーターは、次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1480">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="0f1a6-1481">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1481">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1482">場合`style`が含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>、`value`パラメーターは、次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1482">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="0f1a6-1483">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1483">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1484">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1484">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="0f1a6-1485">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1485">The following table describes each element.</span></span>  
  
|<span data-ttu-id="0f1a6-1486">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1486">Element</span></span>|<span data-ttu-id="0f1a6-1487">説明</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1487">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="0f1a6-1488">*ws*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1488">*ws*</span></span>|<span data-ttu-id="0f1a6-1489">空白文字の省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1489">Optional white space.</span></span> <span data-ttu-id="0f1a6-1490">先頭に空白文字を表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>の最後に、フラグ、およびそれが表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1490">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="0f1a6-1491">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1491">A culture-specific currency symbol.</span></span> <span data-ttu-id="0f1a6-1492">によって、文字列内の位置が定義されている、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>によって示されるカルチャのプロパティ、`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1492">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="0f1a6-1493">現在のカルチャの通貨記号に表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1493">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1494">*sign*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1494">*sign*</span></span>|<span data-ttu-id="0f1a6-1495">オプションの符号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1495">An optional sign.</span></span> <span data-ttu-id="0f1a6-1496">先頭に表示できる符号`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>の最後に、フラグ、およびそれが表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1496">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="0f1a6-1497">かっこを使用できる`value`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1497">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1498">*digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1498">*digits*</span></span><br /><br /> <span data-ttu-id="0f1a6-1499">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1499">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="0f1a6-1500">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1500">*exponential_digits*</span></span>|<span data-ttu-id="0f1a6-1501">0 ~ 9 桁の数字のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1501">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="0f1a6-1502">*Fractional_digits*数字の 0 が有効では専用です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1502">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="0f1a6-1503">*、*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1503">*,*</span></span>|<span data-ttu-id="0f1a6-1504">カルチャ固有のグループの区切り記号です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1504">A culture-specific group separator symbol.</span></span> <span data-ttu-id="0f1a6-1505">指定されたカルチャの区切り記号`provider`に表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1505">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1506">*.*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1506">*.*</span></span>|<span data-ttu-id="0f1a6-1507">カルチャに固有の小数点記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1507">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="0f1a6-1508">によって指定されたカルチャの小数点記号`provider`に表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1508">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="0f1a6-1509">数字の 0 は、解析操作を成功させるための小数部の桁として表示されます。場合*fractional_digits*他の任意の数字が含まれています、<xref:System.FormatException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1509">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="0f1a6-1510">E</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1510">E</span></span>|<span data-ttu-id="0f1a6-1511">"E"または"E"文字は、値は指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1511">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="0f1a6-1512">`value`パラメーターは指数表記の数値を表すことができる場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1512">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1513">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1513">*hexdigits*</span></span>|<span data-ttu-id="0f1a6-1514">0 ~ f、または f の 0 から 16 進数のシーケンス</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1514">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="0f1a6-1515">終端の NUL (u+0000) 文字`s`の値に関係なく、解析操作では無視されますが、`style`引数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1515">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="0f1a6-1516">数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) 常に正常に解析します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1516">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="0f1a6-1517">残りのほとんど<xref:System.Globalization.NumberStyles>メンバーが存在する場合がありますが、入力文字列内に存在する必要はありません、要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1517">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="0f1a6-1518">次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在する要素に影響を与える`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1518">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="0f1a6-1519">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1519">NumberStyles value</span></span>|<span data-ttu-id="0f1a6-1520">数字以外の値で使用できる要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1520">Elements permitted in value in addition to digits</span></span>|  
|------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="0f1a6-1521">*桁*要素のみです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1521">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="0f1a6-1522">小数点 (.) と*桁の小数部*要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1522">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="0f1a6-1523">"E"または"E"文字は、指数表記法を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1523">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="0f1a6-1524">と共に*exponential_digits*します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1524">along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="0f1a6-1525">*Ws*要素の開始時`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1525">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="0f1a6-1526">*Ws*の末尾にある要素`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1526">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="0f1a6-1527">*サインオン*要素の開始時`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1527">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="0f1a6-1528">*サインオン*の末尾にある要素`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1528">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="0f1a6-1529">*サインオン*形式の数値を囲むかっこ内の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1529">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="0f1a6-1530">グループ区切り記号 (,) の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1530">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="0f1a6-1531">通貨 ($) の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1531">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="0f1a6-1532">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1532">All elements.</span></span> <span data-ttu-id="0f1a6-1533">ただし、 `value` 16 進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1533">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="0f1a6-1534">*Ws*先頭または末尾に要素`value`、*サインオン*の開始時`value`、および小数点 (.) シンボル。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1534">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="0f1a6-1535">`value`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1535">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="0f1a6-1536">`ws`、 `sign`、桁区切り記号 (,)、および小数点 (.) の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1536">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="0f1a6-1537">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1537">All elements.</span></span> <span data-ttu-id="0f1a6-1538">ただし、 `value` 16 進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1538">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f1a6-1539">使用する場合、<xref:System.Numerics.BigInteger.Parse%2A>文字列表現をラウンドト リップさせる方法の<xref:System.Numerics.BigInteger>によって出力された値、<xref:System.Numerics.BigInteger.ToString%2A>メソッドを使用する必要がある、<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>メソッドの文字列表現を生成する"R"書式指定子、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1539">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="0f1a6-1540">それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50、元の値とデータの最上位桁数が失われるを使用する場合のみが保持されます、<xref:System.Numerics.BigInteger.Parse%2A>を復元する方法、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1540">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="0f1a6-1541">異なり、その他の<xref:System.Globalization.NumberStyles>値を許可するが、特定のスタイルの要素の存在を必要としない`value`、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>スタイルの値を意味する個別の数値文字で`value`として常に解釈されます16 進数の文字。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1541">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="0f1a6-1542">有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1542">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="0f1a6-1543">のみ他のフラグと組み合わせて使用できますが、`style`パラメーターは<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1543">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-1544">(、<xref:System.Globalization.NumberStyles>列挙には、複合数値スタイルが含まれています<xref:System.Globalization.NumberStyles.HexNumber>、空白文字の両方のフラグが含まれます。)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1544">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1545">場合`value`文字列表現ですが、16 進数は、接頭辞前ことはできません (など`0x`または`&h`)、16 進数として区別します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1545">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="0f1a6-1546">これにより、変換に失敗します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1546">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="0f1a6-1547">場合`value`16 進数の文字列、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>メソッドは解釈`value`その最初の 2 つの 16 進数の数字がより大きいか等しい場合は、2 の補数表現を使用して、格納されている負の数値として`0x80`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1547">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="0f1a6-1548">つまり、メソッドは、最初のバイトの最上位ビットを解釈`value`符号ビットとして。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1548">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="0f1a6-1549">16 進数の文字列が正の数の最初の桁として正しく解釈されるかどうかを確認する`value`値が 0 の必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1549">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="0f1a6-1550">たとえば、このメソッドは解釈`0x80`負の値が解釈するか、`0x080`または`0x0080`正の値として。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1550">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="0f1a6-1551">次の例では、負と正の値を表す 16 進数の文字列間の差を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1551">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="0f1a6-1552">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1552">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="0f1a6-1553">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.NumberFormatInfo>の書式設定に関するカルチャ固有の情報を提供するオブジェクト`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1553">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="0f1a6-1554">通常、`provider`次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1554">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="0f1a6-1555">A<xref:System.Globalization.CultureInfo>数値の書式設定情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1555">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="0f1a6-1556">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドが返す、<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1556">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="0f1a6-1557">A<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1557">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="0f1a6-1558">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1558">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="0f1a6-1559">実装するカスタム オブジェクト<xref:System.IFormatProvider>を使用して、<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>をインスタンス化して返すメソッド、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1559">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="0f1a6-1560">場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1560">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1561">次の例でいくつかの呼び出し、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッドの値のさまざまな組み合わせを使用して、`style`と`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1561">The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 <span data-ttu-id="0f1a6-1562">個々 の呼び出し数、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッドは、次のインスタンスを渡す`BigIntegerFormatProvider`クラスは、負の符号としてティルダ (~) を定義します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1562">A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f1a6-1563">
            <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1563">
              <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1564">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1564">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-1565">
            <paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1565">
              <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f1a6-1566">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1566">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="0f1a6-1567">
            <paramref name="value" /> は、<paramref name="style" /> によって指定された入力パターンに従っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1567">
              <paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As BigInteger, exponent As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Pow(System::Numerics::BigInteger value, int exponent);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Pow (value, exponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1568">
            <c> 指数 </c> で累乗する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1568">The number to raise to the <c>exponent</c> power.</span>
          </span>
        </param>
        <param name="exponent">
          <span data-ttu-id="0f1a6-1569">
            <c> 値 </c> を累乗する指数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1569">The exponent to raise <c>value</c> by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1570">指定された値を指数として <see cref="T:System.Numerics.BigInteger" /> 値を累乗します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1570">Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1571">
            <paramref name="value" /> を <paramref name="exponent" /> で累乗した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1571">The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1572"><xref:System.Numerics.BigInteger.Pow%2A>メソッドは、指数のパラメーターの値が 0 の場合、または、1 を返します両方の値、`value`と`exponent`パラメーターは 0。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1572">The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0.</span></span> <span data-ttu-id="0f1a6-1573">場合`exponent`1 に設定されて、<xref:System.Numerics.BigInteger.Pow%2A>メソッドを返します。`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1573">If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`.</span></span> <span data-ttu-id="0f1a6-1574">場合`value`が負の場合、負の結果は、メソッドに返されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1574">If `value` is negative, the method returns a negative result.</span></span>  
  
 <span data-ttu-id="0f1a6-1575">このメソッドに対応して、<xref:System.Math.Pow%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1575">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1576">指数演算を使用して次の例を示しています、<xref:System.Numerics.BigInteger>値と指数部の値を 0 から 10 に範囲します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1576">The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0f1a6-1577">
            <paramref name="exponent" /> パラメーターの値が負数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1577">The value of the <paramref name="exponent" /> parameter is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remainder (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Remainder(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Remainder : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Remainder (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">
          <span data-ttu-id="0f1a6-1578">被除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1578">The value to be divided.</span>
          </span>
        </param>
        <param name="divisor">
          <span data-ttu-id="0f1a6-1579">除数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1579">The value to divide by.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1580">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対する整数除算を実行し、その剰余を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1580">Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1581">
            <paramref name="dividend" /> を <paramref name="divisor" /> で除算した結果生じた剰余。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1581">The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1582">剰余の符号の符号、`dividend`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1582">The sign of the remainder is the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="0f1a6-1583"><xref:System.Numerics.BigInteger.Remainder%2A>カスタム演算子をサポートしない言語のメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1583">The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="0f1a6-1584">その動作は、除算、剰余演算子を使用すると同じです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1584">Its behavior is identical to division using the modulus operator.</span></span>  
  
 <span data-ttu-id="0f1a6-1585">必要に応じて、メソッド、自動的に実行する他の整数型の暗黙的な変換<xref:System.Numerics.BigInteger>剰余演算の実行前にオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1585">If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1586">次の例では、残りの部分から、<xref:System.Numerics.BigInteger.DivRem%2A>メソッドによって返される残りの部分を<xref:System.Numerics.BigInteger.Remainder%2A>メソッドを 2 つの方法が同一の剰余を計算します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1586">The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="0f1a6-1587">
            <paramref name="divisor" /> が 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1587">
              <paramref name="divisor" /> is 0 (zero).</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sign As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Sign { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Sign : int" Usage="System.Numerics.BigInteger.Sign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1588">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの符号 (負、正、または 0) を示す数値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1588">Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-1589">
            <see cref="T:System.Numerics.BigInteger" /> オブジェクトの符号を示す数値 (次の表を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1589">A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="0f1a6-1590">数値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1590">Number</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-1591">説明</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1591">Description</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="0f1a6-1592">-1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1592">-1</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-1593">このオブジェクトの値は負です。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1593">The value of this object is negative.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-1594">0</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1594">0</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-1595">このオブジェクトの値は 0 (ゼロ) です。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1595">The value of this object is 0 (zero).</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="0f1a6-1596">1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1596">1</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="0f1a6-1597">このオブジェクトの値は正です。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="0f1a6-1597">The value of this object is positive.</span>
                </span>
              </description>
            </item>
          </list>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1598"><xref:System.Numerics.BigInteger.Sign%2A>プロパティは、<xref:System.Math.Sign%2A?displayProperty=nameWithType>のプリミティブ数値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1598">The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Subtract(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0f1a6-1599">減算される値 (被減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1599">The value to subtract from (the minuend).</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0f1a6-1600">減算する値 (減数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1600">The value to subtract (the subtrahend).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1601">ある <see cref="T:System.Numerics.BigInteger" /> 値を別の値から減算し、その結果を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1601">Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1602">
            <paramref name="right" /> から <paramref name="left" /> を減算した結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1602">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1603">カスタム演算子をサポートしない言語を使用して、<xref:System.Numerics.BigInteger.Subtract%2A>減算を使用して実行するメソッドを<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1603">Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="0f1a6-1604"><xref:System.Numerics.BigInteger.Subtract%2A>をインスタンス化するときに、メソッドは、減算演算子の便利な代替、<xref:System.Numerics.BigInteger>の次の例に示すように、減算の結果の違いを割り当てることでは、変数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1604">The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToByteArray();" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : unit -&gt; byte[]" Usage="bigInteger.ToByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1605">
            <see cref="T:System.Numerics.BigInteger" /> 値をバイト配列に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1605">Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1606">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトをバイトの配列に変換した値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1606">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1607">このメソッドによって返される配列内の個々 のバイトは、リトル エンディアン順で表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1607">The individual bytes in the array returned by this method appear in little-endian order.</span></span> <span data-ttu-id="0f1a6-1608">つまり、値の下位バイトには、上位バイトが前になります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1608">That is, the lower-order bytes of the value precede the higher-order bytes.</span></span> <span data-ttu-id="0f1a6-1609">配列の最初のバイトの最初の 8 ビットの反映、<xref:System.Numerics.BigInteger>と次の 8 ビット値、2 番目のバイトが反映されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1609">The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on.</span></span> <span data-ttu-id="0f1a6-1610">たとえば、値、1024 0x0400 は、次の 2 バイトの配列として格納されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1610">For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</span></span>  
  
|<span data-ttu-id="0f1a6-1611">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1611">Element</span></span>|<span data-ttu-id="0f1a6-1612">バイト値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1612">Byte value</span></span>|  
|-------------|----------------|  
|<span data-ttu-id="0f1a6-1613">0</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1613">0</span></span>|<span data-ttu-id="0f1a6-1614">0x00</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1614">0x00</span></span>|  
|<span data-ttu-id="0f1a6-1615">1</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1615">1</span></span>|<span data-ttu-id="0f1a6-1616">0x04</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1616">0x04</span></span>|  
  
 <span data-ttu-id="0f1a6-1617">コンパクトな形式の使用可能な 2 の補数表現を使用して、配列には、負の値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1617">Negative values are written to the array using two's complement representation in the most compact form possible.</span></span> <span data-ttu-id="0f1a6-1618">たとえば、-1 は、値が 1 バイトとして表されます。`0xFF`の代わりに、複数の要素を含む配列としてなど`0xFF`、`0xFF`または`0xFF`、 `0xFF`、 `0xFF`、`0xFF`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1618">For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span></span>  
  
 <span data-ttu-id="0f1a6-1619">最後のバイト配列内の最上位ビットを解釈するため、表示は常に 2 の補数 (位置にあるバイト<xref:System.Array.Length%2A?displayProperty=nameWithType> `- 1`)、符号ビットとしては、メソッドは値がゼロの余分な要素を持つバイト配列を返しますを。それ以外の場合、符号ビットがセットを持つものとして解釈できます正の値を明確にします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1619">Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.</span></span> <span data-ttu-id="0f1a6-1620">たとえば、120 までの値または`0x78`は 1 バイトの配列として表されます:`0x78`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1620">For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`.</span></span> <span data-ttu-id="0f1a6-1621">ただし、128、または`0x80`、2 バイト配列として表される: `0x80`、`0x00`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1621">However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.</span></span>  
  
 <span data-ttu-id="0f1a6-1622">ラウンドト リップすることができます、<xref:System.Numerics.BigInteger>をバイト配列に格納し、復元を使用する値、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1622">You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0f1a6-1623">コードでは、値を復元する前に、このメソッドによって返される配列内の個々 のバイトの値を変更する場合を誤って変更されない、符号ビットを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1623">If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.</span></span> <span data-ttu-id="0f1a6-1624">たとえば、変更は、正の値を増やすため、バイト配列の最後の要素内の最上位ビット場合は、設定された場合、値が 0 の配列の末尾に新しいバイトを追加することができますのようになります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1624">For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1625">次の例はいくつか方法を示しています<xref:System.Numerics.BigInteger>値はバイト配列で表されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1625">The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray (bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray(bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray (Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : bool * bool -&gt; byte[]" Usage="bigInteger.ToByteArray (isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1626">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値を等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1626">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="bigInteger.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1627">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値を等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1627">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1628">現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1628">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1629"><xref:System.Numerics.BigInteger.ToString>メソッド形式、 <xref:System.Numerics.BigInteger> "R"、または現在のカルチャの形式は、ラウンドト リップ内の値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1629">The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format of the current culture.</span></span> <span data-ttu-id="0f1a6-1630">別の形式またはカルチャを指定する場合の他のオーバー ロードを使用して、<xref:System.Numerics.BigInteger.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1630">If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="0f1a6-1631">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1631">To use format</span></span>|<span data-ttu-id="0f1a6-1632">カルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1632">For culture</span></span>|<span data-ttu-id="0f1a6-1633">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1633">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="0f1a6-1634">Round-trip ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1634">Round-trip ("R") format</span></span>|<span data-ttu-id="0f1a6-1635">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1635">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%2A>|  
|<span data-ttu-id="0f1a6-1636">特定の形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1636">A specific format</span></span>|<span data-ttu-id="0f1a6-1637">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1637">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="0f1a6-1638">特定の形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1638">A specific format</span></span>|<span data-ttu-id="0f1a6-1639">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1639">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="0f1a6-1640">文字列表現、<xref:System.Numerics.BigInteger>値には、その値が負の値、および一連の数字の 0 から 9 まで 0 を付けない場合、負の符号が含まれます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1640">The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.</span></span> <span data-ttu-id="0f1a6-1641">負の符号がによって定義されている、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1641">The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1642">次の例では、表示、<xref:System.Numerics.BigInteger>既定値を使用して値<xref:System.Numerics.BigInteger.ToString>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1642">The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method.</span></span> <span data-ttu-id="0f1a6-1643">文字列表現が表示されます、<xref:System.Numerics.BigInteger>いくつかの標準書式指定子を使用してから結果値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1643">It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers.</span></span> <span data-ttu-id="0f1a6-1644">例は、EN-US カルチャの書式指定規則を使用して表示されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1644">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">
          <span data-ttu-id="0f1a6-1645">標準の数値書式指定文字列</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1645">Standard Numeric Format Strings</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">
          <span data-ttu-id="0f1a6-1646">カスタム数値書式指定文字列</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1646">Custom Numeric Format Strings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="bigInteger.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="0f1a6-1647">カルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1647">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1648">指定されたカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1648">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1649">現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式を、<paramref name="provider" /> パラメーターで指定されている形式で表現した値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1649">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1650"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>メソッド形式、<xref:System.Numerics.BigInteger>値を使用して、"R"、またはラウンドト リップで書式設定、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1650">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="0f1a6-1651">別の形式または現在のカルチャを指定する場合の他のオーバー ロードを使用して、<xref:System.Numerics.BigInteger.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1651">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="0f1a6-1652">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1652">To use format</span></span>|<span data-ttu-id="0f1a6-1653">カルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1653">For culture</span></span>|<span data-ttu-id="0f1a6-1654">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1654">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="0f1a6-1655">Round-trip ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1655">Round-trip ("R") format</span></span>|<span data-ttu-id="0f1a6-1656">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1656">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="0f1a6-1657">特定の形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1657">A specific format</span></span>|<span data-ttu-id="0f1a6-1658">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1658">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="0f1a6-1659">特定の形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1659">A specific format</span></span>|<span data-ttu-id="0f1a6-1660">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1660">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="0f1a6-1661">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1661">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="0f1a6-1662">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.NumberFormatInfo>このメソッドによって返される文字列の書式設定に関するカルチャに固有の情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1662">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="0f1a6-1663">場合`provider`は`null`、<xref:System.Numerics.BigInteger>値を使用して書式設定されますが、<xref:System.Globalization.NumberFormatInfo>の現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1663">If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="0f1a6-1664">唯一のプロパティ、<xref:System.Globalization.NumberFormatInfo>の文字列形式を制御するオブジェクト、<xref:System.Numerics.BigInteger>一般書式指定子を使用して値が<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>、負の符号を表す文字を定義します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1664">The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, which defines the character that represents the negative sign.</span></span>  
  
 <span data-ttu-id="0f1a6-1665">`provider`パラメーターは、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1665">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="0f1a6-1666">A<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1666">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="0f1a6-1667"><xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1667">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="0f1a6-1668">実装するカスタム オブジェクト<xref:System.IFormatProvider>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1668">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="0f1a6-1669">その<xref:System.IFormatProvider.GetFormat%2A>メソッドが返す、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1669">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1670">次の例では、カスタムのインスタンスを作成<xref:System.Globalization.NumberFormatInfo>負の符号としてティルダ (~) を定義するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1670">The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span> <span data-ttu-id="0f1a6-1671"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>メソッドを使用し、カスタム<xref:System.Globalization.NumberFormatInfo>、負の値を表示するオブジェクト<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1671">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="bigInteger.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="0f1a6-1672">標準またはカスタムの数値書式指定文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1672">A standard or custom numeric format string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1673">指定された書式を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価な文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1673">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1674">現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式を、<paramref name="format" /> パラメーターで指定されている形式で表現した値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1674">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1675"><xref:System.Numerics.BigInteger.ToString%28System.String%29>メソッド形式、<xref:System.Numerics.BigInteger>を使用して指定された形式で値を<xref:System.Globalization.NumberFormatInfo>現在のカルチャの規則を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1675">The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="0f1a6-1676">"R"、またはラウンドト リップを使用する場合は、書式設定の他のオーバー ロードを使用して、または別のカルチャを指定、<xref:System.Numerics.BigInteger.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1676">If you want to use the "R", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="0f1a6-1677">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1677">To use format</span></span>|<span data-ttu-id="0f1a6-1678">カルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1678">For culture</span></span>|<span data-ttu-id="0f1a6-1679">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1679">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="0f1a6-1680">Round-trip ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1680">Round-trip ("R") format</span></span>|<span data-ttu-id="0f1a6-1681">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1681">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="0f1a6-1682">Round-trip ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1682">Round-trip ("R") format</span></span>|<span data-ttu-id="0f1a6-1683">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1683">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="0f1a6-1684">特定の形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1684">A specific format</span></span>|<span data-ttu-id="0f1a6-1685">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1685">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="0f1a6-1686">`format`パラメーターに任意の有効なできます[標準の数値文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、または任意の組み合わせの[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1686">The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="0f1a6-1687">場合`format`と等しい<xref:System.String.Empty?displayProperty=nameWithType>または`null`、現在の戻り値<xref:System.Numerics.BigInteger>オブジェクトは、ラウンドト リップ書式指定子 ("R") でフォーマットします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1687">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="0f1a6-1688">場合`format`他の値、メソッドがスローされますが、<xref:System.FormatException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1688">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="0f1a6-1689">.NET Framework は、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1689">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="0f1a6-1690">数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1690">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="0f1a6-1691">.NET Framework の書式設定のサポートの詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1691">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="0f1a6-1692">によって返される文字列の形式が決定されます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1692">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="0f1a6-1693">に応じて、`format`パラメーターでは、このオブジェクトは、負の符号、グループ区切り、および出力文字列に小数点記号などの記号を制御します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1693">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="0f1a6-1694">現在のカルチャ以外のカルチャの書式情報を提供するには、呼び出し、<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1694">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1695">次の例では、初期化、<xref:System.Numerics.BigInteger>値し、各標準書式指定文字列といくつかのカスタム書式指定文字列を使用して表示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1695">The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="0f1a6-1696">
            <paramref name="format" /> は有効な文字列ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1696">
              <paramref name="format" /> is not a valid format string.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">
          <span data-ttu-id="0f1a6-1697">標準の数値書式指定文字列</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1697">Standard Numeric Format Strings</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">
          <span data-ttu-id="0f1a6-1698">カスタム数値書式指定文字列</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1698">Custom Numeric Format Strings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="bigInteger.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="0f1a6-1699">標準またはカスタムの数値書式指定文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1699">A standard or custom numeric format string.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="0f1a6-1700">カルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1700">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1701">指定された書式とカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1701">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1702">
            <paramref name="format" /> パラメーターと <paramref name="provider" />パラメーターで指定されている現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列表現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1702">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1703"><xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>メソッド形式、<xref:System.Numerics.BigInteger>値を使用して指定された形式で、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1703">The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="0f1a6-1704">ラウンドト リップ書式または既定のカルチャ設定を使用する場合の他のオーバー ロードを使用して、<xref:System.Numerics.BigInteger.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1704">If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="0f1a6-1705">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1705">To use format</span></span>|<span data-ttu-id="0f1a6-1706">カルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1706">For culture</span></span>|<span data-ttu-id="0f1a6-1707">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1707">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="0f1a6-1708">Round-trip ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1708">Round-trip ("R") format</span></span>|<span data-ttu-id="0f1a6-1709">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1709">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="0f1a6-1710">Round-trip ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1710">Round-trip ("R") format</span></span>|<span data-ttu-id="0f1a6-1711">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1711">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="0f1a6-1712">特定の形式</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1712">A specific format</span></span>|<span data-ttu-id="0f1a6-1713">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1713">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 <span data-ttu-id="0f1a6-1714">`format`パラメーターに任意の有効なできます[標準の数値文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、または任意の組み合わせの[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1714">The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="0f1a6-1715">場合`format`と等しい<xref:System.String.Empty?displayProperty=nameWithType>または`null`、現在の戻り値<xref:System.Numerics.BigInteger>オブジェクトは、ラウンドト リップ書式指定子 ("R") でフォーマットします。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1715">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="0f1a6-1716">場合`format`他の値、メソッドがスローされますが、<xref:System.FormatException>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1716">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="0f1a6-1717">.NET Framework は、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1717">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="0f1a6-1718">数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1718">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="0f1a6-1719">.NET Framework の書式設定のサポートの詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1719">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="0f1a6-1720">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1720">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="0f1a6-1721">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.NumberFormatInfo>このメソッドによって返される文字列の書式設定に関するカルチャに固有の情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1721">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="0f1a6-1722">ときに、<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドが呼び出される、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A>メソッドを渡します、<xref:System.Type>を表すオブジェクトを<xref:System.Globalization.NumberFormatInfo>型。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1722">When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="0f1a6-1723"><xref:System.IFormatProvider.GetFormat%2A>メソッド、<xref:System.Globalization.NumberFormatInfo>の書式設定情報を提供するオブジェクト、`value`負の記号、桁区切り記号、小数点記号などのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1723">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.</span></span> <span data-ttu-id="0f1a6-1724">3 つの方法を使用する、`provider`を書式設定情報を指定するパラメーター、<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1724">There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:</span></span>  
  
-   <span data-ttu-id="0f1a6-1725">渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1725">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="0f1a6-1726">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドが返す、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1726">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="0f1a6-1727">実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1727">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="0f1a6-1728">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1728">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="0f1a6-1729">実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1729">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="0f1a6-1730">その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化して返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1730">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="0f1a6-1731">場合`provider`は`null`、に基づいて返される文字列の書式設定、<xref:System.Globalization.NumberFormatInfo>の現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1731">If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1732">次の例を初期化します、<xref:System.Numerics.BigInteger>値に設定して、標準書式指定文字列を使用して、コンソールに表示されます、<xref:System.Globalization.NumberFormatInfo>負の符号としてティルダ (~) を定義するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1732">The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="0f1a6-1733">
            <paramref name="format" /> は有効な文字列ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1733">
              <paramref name="format" /> is not a valid format string.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">
          <span data-ttu-id="0f1a6-1734">標準の数値書式指定文字列</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1734">Standard Numeric Format Strings</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">
          <span data-ttu-id="0f1a6-1735">カスタム数値書式指定文字列</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1735">Custom Numeric Format Strings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="bigInteger.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1736">数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1736">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1737">数値の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1737">The string representation of a number.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="0f1a6-1738">このメソッドから制御が戻るときに、<c> 値 </c> に含まれる数値と等価の <see cref="T:System.Numerics.BigInteger" /> が格納されます。変換に失敗した場合は 0 が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1738">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <c>value</c>, or zero (0) if the conversion fails.</span>
          </span>
          <span data-ttu-id="0f1a6-1739">
            <c> 値 </c> パラメーターが <see langword="null" /> の場合、または正しい形式ではない場合、変換は失敗します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1739">The conversion fails if the <c>value</c> parameter is <see langword="null" /> or is not of the correct format.</span>
          </span>
          <span data-ttu-id="0f1a6-1740">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1740">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1741">数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1741">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1742">
            <see langword="true" /> が正常に変換された場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1742">
              <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1743"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29>などのメソッドは、<xref:System.Numerics.BigInteger.Parse%28System.String%29>メソッド、点を除いて、変換が失敗した場合、その it が例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1743">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="0f1a6-1744">このメソッドをテストする例外処理を使用する必要はありません、<xref:System.FormatException>場合`value`有効でないし、正常に解析されることはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1744">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="0f1a6-1745">`value`パラメーターは、次の形式の 10 進数の文字列形式を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1745">The `value` parameter should be the string representation of a decimal number in the following form:</span></span>  
  
 <span data-ttu-id="0f1a6-1746">[*ws*][*sign*]*digits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1746">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1747">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1747">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="0f1a6-1748">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1748">The following table describes each element.</span></span>  
  
|<span data-ttu-id="0f1a6-1749">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1749">Element</span></span>|<span data-ttu-id="0f1a6-1750">説明</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1750">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="0f1a6-1751">*ws*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1751">*ws*</span></span>|<span data-ttu-id="0f1a6-1752">空白文字の省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1752">Optional white space.</span></span>|  
|<span data-ttu-id="0f1a6-1753">*sign*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1753">*sign*</span></span>|<span data-ttu-id="0f1a6-1754">オプションの符号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1754">An optional sign.</span></span> <span data-ttu-id="0f1a6-1755">有効な署名の文字はによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>現在のカルチャのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1755">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="0f1a6-1756">*digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1756">*digits*</span></span>|<span data-ttu-id="0f1a6-1757">10 進数字の 0 から 9 までのシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1757">A sequence of decimal digits ranging from 0 to 9.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1758">指定された文字列、`value`パラメーターは、グループ区切り記号または 10 進数の区切り記号を含めることはできず、小数部を持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1758">The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="0f1a6-1759">`value`パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>スタイル。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1759">The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="0f1a6-1760">10 進の数字だけでなくには、先頭と末尾のスペースを先頭の符号のみを許可します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1760">In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.</span></span> <span data-ttu-id="0f1a6-1761">使用できるカルチャに固有の書式情報を持つスタイル要素を明示的に定義する`value`を呼び出し、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1761">To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.</span></span>  
  
 <span data-ttu-id="0f1a6-1762">`value`で書式設定情報を使用してパラメーターを解析する<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1762">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="0f1a6-1763">詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1763">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0f1a6-1764">このオーバー ロード内のすべての桁を解釈し、`value`として 10 進数字のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1764">This overload interprets all digits in the `value` parameter as decimal digits.</span></span> <span data-ttu-id="0f1a6-1765">16 進数の文字列表現を解析する、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>オーバー ロードを代用します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1765">To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1766">次の例では、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> 2 つのインスタンスを作成するメソッド<xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1766">The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="0f1a6-1767">各オブジェクトを他の数値を乗算し、呼び出して、変換が成功した場合、、<xref:System.Numerics.BigInteger.Compare%2A>メソッドを 2 つのオブジェクト間の関係を決定します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1767">If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0f1a6-1768">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1768">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="0f1a6-1769">数値の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1769">The string representation of a number.</span>
          </span>
          <span data-ttu-id="0f1a6-1770">文字列は、<c> スタイル </c> で指定されたスタイルを使用して解釈されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1770">The string is interpreted using the style specified by <c>style</c>.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="0f1a6-1771">
            <c> 値 </c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1771">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>value</c>.</span>
          </span>
          <span data-ttu-id="0f1a6-1772">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1772">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="0f1a6-1773">
            <c> 値 </c>. に関するカルチャ固有の書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1773">An object that supplies culture-specific formatting information about <c>value</c>.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="0f1a6-1774">このメソッドから制御が戻るときに、 <c> 値 </c> に含まれる数値と等価の <see cref="T:System.Numerics.BigInteger" /> が格納されます。変換に失敗した場合は <see cref="P:System.Numerics.BigInteger.Zero" /> が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1774">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <c>value</c>, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span>
          </span>
          <span data-ttu-id="0f1a6-1775">
            <c>値</c> パラメーターが <see langword="null" /> の場合、または <c>スタイル</c> に従った形式ではない場合、変換は失敗します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1775">The conversion fails if the <c>value</c> parameter is <see langword="null" /> or is not in a format that is compliant with <c>style</c>.</span>
          </span>
          <span data-ttu-id="0f1a6-1776">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1776">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f1a6-1777">指定されたスタイルおよびカルチャ固有の書式の数値の文字列形式を等価の <see cref="T:System.Numerics.BigInteger" /> に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1777">Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f1a6-1778">
            <paramref name="value" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1778">
              <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1779"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>などのメソッドは、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッド、点を除いて、変換が失敗した場合、その it が例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1779">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="0f1a6-1780">このメソッドをテストする例外処理を使用する必要はありません、<xref:System.FormatException>場合`value`有効でないし、正常に解析されたことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1780">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="0f1a6-1781">`style` (空白や正または負符号) で使用できるスタイル要素を定義するパラメーター、`value`解析操作が成功するためのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1781">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="0f1a6-1782">ビット フラグの組み合わせがあります、<xref:System.Globalization.NumberStyles>列挙体。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1782">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="0f1a6-1783">値に応じて`style`、`value`パラメーターは、次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1783">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="0f1a6-1784">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1784">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1785">場合、`style`パラメーターが含まれる<xref:System.Globalization.NumberStyles.AllowHexSpecifier>、`value`パラメーターは、次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1785">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="0f1a6-1786">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1786">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="0f1a6-1787">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1787">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="0f1a6-1788">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1788">The following table describes each element.</span></span>  
  
|<span data-ttu-id="0f1a6-1789">要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1789">Element</span></span>|<span data-ttu-id="0f1a6-1790">説明</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1790">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="0f1a6-1791">*ws*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1791">*ws*</span></span>|<span data-ttu-id="0f1a6-1792">空白文字の省略可能です。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1792">Optional white space.</span></span> <span data-ttu-id="0f1a6-1793">先頭に空白文字を表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>フラグ、または末尾の`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1793">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="0f1a6-1794">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1794">A culture-specific currency symbol.</span></span> <span data-ttu-id="0f1a6-1795">によって、文字列内の位置が定義されている、<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A>のメソッド、`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1795">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="0f1a6-1796">通貨記号に表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1796">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1797">*sign*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1797">*sign*</span></span>|<span data-ttu-id="0f1a6-1798">オプションの符号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1798">An optional sign.</span></span> <span data-ttu-id="0f1a6-1799">先頭に表示できる符号`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>の最後に、フラグ、およびそれが表示される`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1799">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="0f1a6-1800">かっこを使用できる`value`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1800">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1801">*digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1801">*digits*</span></span>|<span data-ttu-id="0f1a6-1802">0 ~ 9 桁の数字のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1802">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="0f1a6-1803">*、*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1803">*,*</span></span>|<span data-ttu-id="0f1a6-1804">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1804">A culture-specific group separator.</span></span> <span data-ttu-id="0f1a6-1805">指定されたカルチャの桁区切り記号`provider`に表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1805">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1806">*.*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1806">*.*</span></span>|<span data-ttu-id="0f1a6-1807">カルチャに固有の小数点記号。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1807">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="0f1a6-1808">指定されたカルチャの小数点記号`provider`に表示できる`value`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1808">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1809">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1809">*fractional_digits*</span></span>|<span data-ttu-id="0f1a6-1810">1 つ以上の数字の 0。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1810">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="0f1a6-1811">小数部の桁数を表示できる`value`場合にのみ`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1811">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1812">E</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1812">E</span></span>|<span data-ttu-id="0f1a6-1813">"E"または"E"文字は、値は指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1813">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="0f1a6-1814">`value`パラメーターは指数表記の数値を表すことができる場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1814">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1815">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1815">*exponential_digits*</span></span>|<span data-ttu-id="0f1a6-1816">0 ~ 9 桁の数字のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1816">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="0f1a6-1817">`value`パラメーターは指数表記の数値を表すことができる場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1817">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="0f1a6-1818">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1818">*hexdigits*</span></span>|<span data-ttu-id="0f1a6-1819">0 ~ f、または f の 0 から 16 進数のシーケンス</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1819">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="0f1a6-1820">終端の NUL (u+0000) 文字`s`の値に関係なく、解析操作では無視されますが、`style`引数。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1820">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="0f1a6-1821">10 進数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>フラグ) を常に正常に解析します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1821">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="0f1a6-1822">残りのほとんど<xref:System.Globalization.NumberStyles>メンバーが存在する場合がありますが、この入力文字列内に存在する必要はありません、要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1822">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string.</span></span> <span data-ttu-id="0f1a6-1823">次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在する要素に影響を与える`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1823">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="0f1a6-1824">非コンポジット`NumberStyles`値</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1824">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="0f1a6-1825">数字以外の値で使用できる要素</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1825">Elements permitted in value in addition to digits</span></span>|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="0f1a6-1826">10 進数字のみです。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1826">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="0f1a6-1827">10 進数のポイント (*.*) と*fractional_digits*要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1827">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="0f1a6-1828">ただし、 *fractional_digits* 0 のみの 1 つ以上の数字、または、メソッドが返すので構成されている必要があります`false`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1828">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="0f1a6-1829">"E"または"E"文字と共に、指数表記を示す*exponential_digits*します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1829">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="0f1a6-1830">場合`value`の数値を表す、指数表記では、0 以外の小数部のコンポーネントを持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1830">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="0f1a6-1831">*Ws*要素の開始時`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1831">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="0f1a6-1832">*Ws*の末尾にある要素`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1832">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="0f1a6-1833">*サインオン*要素の前に*桁*します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1833">The *sign* element before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="0f1a6-1834">*サインオン*要素の後に*桁*します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1834">The *sign* element after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="0f1a6-1835">*サインオン*形式の数値を囲むかっこ内の要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1835">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="0f1a6-1836">グループ区切り記号 (*、*) 要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1836">The group separator (*,*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="0f1a6-1837">通貨 (*$*) 要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1837">The currency (*$*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="0f1a6-1838">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1838">All elements.</span></span> <span data-ttu-id="0f1a6-1839">ただし、 `value` 16 進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1839">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="0f1a6-1840">*Ws*先頭または末尾に要素`value`、*サインオン*の開始時`value`、および小数点 (*.*) シンボル。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1840">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="0f1a6-1841">`value`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1841">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="0f1a6-1842">*Ws*、*サインオン*、桁区切り記号 (*、*)、および小数点 10 進数 (*.*) 要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1842">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="0f1a6-1843">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1843">All elements.</span></span> <span data-ttu-id="0f1a6-1844">ただし、 `value` 16 進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1844">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f1a6-1845">使用する場合、<xref:System.Numerics.BigInteger.TryParse%2A>文字列表現をラウンドト リップさせる方法の<xref:System.Numerics.BigInteger>によって出力された値、<xref:System.Numerics.BigInteger.ToString%2A>メソッドを使用する必要がある、<xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType>メソッドの文字列表現を生成する"R"書式指定子、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1845">If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="0f1a6-1846">それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50、元の値とデータの最上位桁数が失われるを使用する場合のみが保持されます、<xref:System.Numerics.BigInteger.TryParse%2A>を復元する方法、<xref:System.Numerics.BigInteger>値。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1846">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="0f1a6-1847">場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>フラグを使用すると、 `value` 16 進数の値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1847">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="0f1a6-1848">他のフラグのみに存在することができる`style`は<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1848">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0f1a6-1849">(、<xref:System.Globalization.NumberStyles>列挙には複合スタイルは、 <xref:System.Globalization.NumberStyles.HexNumber>、空白文字の両方のフラグが含まれます)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1849">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f1a6-1850">場合`value`文字列表現ですが、16 進数は、接頭辞前ことはできません (など`0x`または`&h`)、16 進数として区別します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1850">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="0f1a6-1851">これにより、変換に失敗します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1851">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="0f1a6-1852">場合`value`16 進数の文字列、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>メソッドは解釈`value`その最初の 2 つの 16 進数の数字がより大きいか等しい場合は、2 の補数表現を使用して、格納されている負の数値として`0x80`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1852">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="0f1a6-1853">つまり、メソッドは、最初のバイトの最上位ビットを解釈`value`符号ビットとして。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1853">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="0f1a6-1854">16 進数の文字列が正の数の最初の桁として正しく解釈されるかどうかを確認する`value`値が 0 の必要があります。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1854">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="0f1a6-1855">たとえば、このメソッドは解釈`0x80`負の値が解釈するか、`0x080`または`0x0080`正の値として。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1855">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="0f1a6-1856">次の例では、負と正の値を表す 16 進数の文字列間の差を示します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1856">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 <span data-ttu-id="0f1a6-1857">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1857">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="0f1a6-1858">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.NumberFormatInfo>の書式設定に関するカルチャ固有の情報を提供するオブジェクト`value`します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1858">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="0f1a6-1859">`provider`パラメーターは、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1859">The `provider` parameter can be any one of the following:</span></span>  
  
-   <span data-ttu-id="0f1a6-1860">A<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1860">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="0f1a6-1861">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドが返す、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1861">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="0f1a6-1862">A<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1862">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="0f1a6-1863">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1863">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="0f1a6-1864">実装するカスタム オブジェクト<xref:System.IFormatProvider>します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1864">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="0f1a6-1865">その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化して返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1865">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="0f1a6-1866">場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1866">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f1a6-1867">次の例でいくつかの呼び出し、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>メソッドの値のさまざまな組み合わせを使用して、`style`と`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1867">The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 <span data-ttu-id="0f1a6-1868">個々 の呼び出し数、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29>メソッドは、次のインスタンスを渡す`BigIntegerFormatProvider`クラスは、負の符号としてティルダ (~) を定義します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1868">A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0f1a6-1869">
            <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1869">
              <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span>
          </span>
          <span data-ttu-id="0f1a6-1870">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1870">-or-</span>
          </span>
          <span data-ttu-id="0f1a6-1871">
            <paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1871">
              <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryWriteBytes : Span&lt;byte&gt; *  * bool * bool -&gt; bool" Usage="bigInteger.TryWriteBytes (destination, bytesWritten, isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isUnsigned" Type="System.Boolean" />
        <Parameter Name="isBigEndian" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <param name="isUnsigned">To be added.</param>
        <param name="isBigEndian">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger Zero { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.Zero : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0f1a6-1872">0 (ゼロ) を表す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1872">Gets a value that represents the number 0 (zero).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0f1a6-1873">値が 0 (ゼロ) である整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f1a6-1873">An integer whose value is 0 (zero).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f1a6-1874"><xref:System.Numerics.BigInteger>このプロパティによって返されるオブジェクトの割り当てとの比較で使用するための値が 0 の便利なソースを提供します。</span><span class="sxs-lookup"><span data-stu-id="0f1a6-1874">The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
  </Members>
</Type>