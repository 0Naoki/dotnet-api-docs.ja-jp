<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9f9c0589c228e3c4dfc0dcc9de08488d92bee1b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70511123" /></Metadata><TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ServiceBase = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Install.UserNTServiceDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2f1aa-101">サービス アプリケーションの一部として存在するサービスの基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-101">Provides a base class for a service that will exist as part of a service application.</span></span> <span data-ttu-id="2f1aa-102"><see cref="T:System.ServiceProcess.ServiceBase" /> は、新しいサービス クラスの作成時に派生される必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-102"><see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-103">サービスアプリケーション<xref:System.ServiceProcess.ServiceBase>でサービスクラスを定義するときに、から派生します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-103">Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application.</span></span> <span data-ttu-id="2f1aa-104">有用なサービスは<xref:System.ServiceProcess.ServiceBase.OnStart%2A> 、メソッドとメソッドを<xref:System.ServiceProcess.ServiceBase.OnStop%2A>オーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-104">Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods.</span></span> <span data-ttu-id="2f1aa-105">その他の機能について<xref:System.ServiceProcess.ServiceBase.OnPause%2A>は<xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 、サービス状態の変更に応じて、とを特定の動作でオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-105">For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.</span></span>  
  
 <span data-ttu-id="2f1aa-106">サービスは、ユーザーインターフェイスをサポートしておらず、ログオンしているユーザーアカウントで実行されない可能性がある、実行時間の長い実行可能ファイルです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-106">A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</span></span> <span data-ttu-id="2f1aa-107">このサービスは、ユーザーがコンピューターにログオンしていなくても実行できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-107">The service can run without any user being logged on to the computer.</span></span>  
  
 <span data-ttu-id="2f1aa-108">既定では、サービスはシステムアカウントで実行されますが、これは管理者アカウントと同じではありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-108">By default, services run under the System account, which is not the same as the Administrator account.</span></span> <span data-ttu-id="2f1aa-109">システムアカウントの権限を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-109">You cannot change the rights of the System account.</span></span> <span data-ttu-id="2f1aa-110">または、を<xref:System.ServiceProcess.ServiceProcessInstaller>使用して、サービスを実行するユーザーアカウントを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-110">Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.</span></span>  
  
 <span data-ttu-id="2f1aa-111">実行可能ファイルには複数のサービスを含めることができ<xref:System.ServiceProcess.ServiceInstaller>ますが、各サービスに個別のが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-111">An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service.</span></span> <span data-ttu-id="2f1aa-112">インスタンス<xref:System.ServiceProcess.ServiceInstaller>によって、サービスがシステムに登録されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-112">The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system.</span></span> <span data-ttu-id="2f1aa-113">インストーラーは、各サービスをイベントログに関連付けて、サービスコマンドを記録するために使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-113">The installer also associates each service with an event log that you can use to record service commands.</span></span> <span data-ttu-id="2f1aa-114">実行`main()`可能ファイルの関数は、実行するサービスを定義します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-114">The `main()` function in the executable defines which services should run.</span></span> <span data-ttu-id="2f1aa-115">サービスの現在の作業ディレクトリは、実行可能ファイルが配置されているディレクトリではなく、システムディレクトリです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-115">The current working directory of the service is the system directory, not the directory in which the executable is located.</span></span>  
  
 <span data-ttu-id="2f1aa-116">サービスを開始すると、実行可能ファイルが検索され、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>実行可能ファイル内に含まれるそのサービスのメソッドが実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-116">When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable.</span></span> <span data-ttu-id="2f1aa-117">ただし、サービスの実行は実行可能ファイルの実行と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-117">However, running the service is not the same as running the executable.</span></span> <span data-ttu-id="2f1aa-118">実行可能ファイルは、サービスのみを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-118">The executable only loads the service.</span></span> <span data-ttu-id="2f1aa-119">サービスは、サービスコントロールマネージャーを使用してアクセスされます (開始や停止など)。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-119">The service is accessed (for example, started and stopped) through the Service Control Manager.</span></span>  
  
 <span data-ttu-id="2f1aa-120">実行可能ファイルは<xref:System.ServiceProcess.ServiceBase> 、サービスで Start を初めて呼び出すときに、派生クラスのコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-120">The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service.</span></span> <span data-ttu-id="2f1aa-121"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>コマンド処理メソッドは、コンストラクターが実行された直後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-121">The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes.</span></span> <span data-ttu-id="2f1aa-122">最初にサービスが読み込まれた後、コンストラクターは再実行されません。したがって、コンストラクターによって実行される処理は、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>によって実行されるものと分離する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-122">The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="2f1aa-123">によって<xref:System.ServiceProcess.ServiceBase.OnStop%2A>解放できるリソースは、で<xref:System.ServiceProcess.ServiceBase.OnStart%2A>作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-123">Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="2f1aa-124">コンストラクターにリソースを作成すると、がリソースを解放した後<xref:System.ServiceProcess.ServiceBase.OnStop%2A>にサービスが再度開始された場合に、リソースが正しく作成されなくなります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-124">Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.</span></span>  
  
 <span data-ttu-id="2f1aa-125">サービスコントロールマネージャー (SCM) は、サービスと対話する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-125">The Service Control Manager (SCM) provides a way to interact with the service.</span></span> <span data-ttu-id="2f1aa-126">SCM を使用して、サービスに開始、停止、一時停止、続行、またはカスタムコマンドを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-126">You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</span></span> <span data-ttu-id="2f1aa-127">SCM は、および<xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>の値を使用して、サービスが停止、一時停止、または続行コマンドを受け入れるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-127">The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands.</span></span> <span data-ttu-id="2f1aa-128">SCM のコンテキストメニューでは、対応するプロパティ<xref:System.ServiceProcess.ServiceBase.CanStop%2A>または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>が`true`サービスクラスにある場合にのみ、停止、一時停止、および続行が有効になります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-128">Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class.</span></span> <span data-ttu-id="2f1aa-129">有効にすると<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、コマンドがサービスに渡され、、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-129">If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called.</span></span> <span data-ttu-id="2f1aa-130">、 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>、またはが `false` の場合、メソッドを実装していても、対応するコマンド処理メソッド (など) は処理されません。 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A></span><span class="sxs-lookup"><span data-stu-id="2f1aa-130">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.</span></span>  
  
 <span data-ttu-id="2f1aa-131"><xref:System.ServiceProcess.ServiceController>クラスを使用すると、ユーザーインターフェイスを使用して SCM が行う処理をプログラムで実行できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-131">You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface.</span></span> <span data-ttu-id="2f1aa-132">コンソールで使用できるタスクを自動化できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-132">You can automate the tasks available in the console.</span></span> <span data-ttu-id="2f1aa-133">、 <xref:System.ServiceProcess.ServiceBase.CanStop%2A>、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>または <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> がで `true` あるにもかかわらず、対応するコマンド処理メソッド (など<xref:System.ServiceProcess.ServiceBase.OnStop%2A>) が実装されていない場合、システムは例外をスローし、コマンドを無視します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-133">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.</span></span>  
  
 <span data-ttu-id="2f1aa-134">で<xref:System.ServiceProcess.ServiceBase.OnStart%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>、 、またはその他のメソッドを実装する必要はありません。 <xref:System.ServiceProcess.ServiceBase></span><span class="sxs-lookup"><span data-stu-id="2f1aa-134">You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="2f1aa-135">ただし、サービスの動作はで<xref:System.ServiceProcess.ServiceBase.OnStart%2A>説明されているので、少なくともこのメンバーをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-135">However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden.</span></span> <span data-ttu-id="2f1aa-136">実行`main()`可能ファイルの関数は、 <xref:System.ServiceProcess.ServiceBase.Run%2A>メソッドを呼び出すことによって、実行可能ファイル内のサービスをサービスコントロールマネージャーに登録します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-136">The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method.</span></span> <span data-ttu-id="2f1aa-137">メソッドに<xref:System.ServiceProcess.ServiceBase>渡されるオブジェクトの<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>プロパティは、そのサービスのサービスインストーラーのプロパティと一致する必要があります。 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.Run%2A></span><span class="sxs-lookup"><span data-stu-id="2f1aa-137">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.</span></span>  
  
 <span data-ttu-id="2f1aa-138">を使用`InstallUtil.exe`して、システムにサービスをインストールすることができます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-138">You can use `InstallUtil.exe` to install services on your system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f1aa-139">アプリケーションイベントログ以外のログを指定してサービス呼び出しの通知を受け取ることはできますが<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 、 <xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティとプロパティのどちらもカスタムログに書き込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-139">You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log.</span></span> <span data-ttu-id="2f1aa-140">自動<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>ログ`false`記録を使用しない場合は、に設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-140">Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f1aa-141"><see cref="T:System.ServiceProcess.ServiceBase" /> クラスの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-141">Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-142"><xref:System.ServiceProcess.ServiceBase>クラスのインスタンスは作成しないでください。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-142">Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class.</span></span> <span data-ttu-id="2f1aa-143">代わりに、派生クラス<xref:System.ServiceProcess.ServiceBase>から派生させ、派生クラスをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-143">Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class.</span></span> <span data-ttu-id="2f1aa-144">から<xref:System.ServiceProcess.ServiceBase>継承されたクラスのコンストラクターに実装する必要がある最小値は、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>コンポーネントでを設定することです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-144">The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component.</span></span> <span data-ttu-id="2f1aa-145">コンストラクターでは、他の処理は特に必要ありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-145">No other processing is specifically required in the constructor.</span></span> <span data-ttu-id="2f1aa-146">ほとんどの初期化は、コンストラクター <xref:System.ServiceProcess.ServiceBase.OnStart%2A>ではなく、で処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-146">You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor.</span></span> <span data-ttu-id="2f1aa-147">そうしないと、停止後にサービスを再起動したときに、オブジェクトが再初期化される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-147">Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</span></span>  
  
 <span data-ttu-id="2f1aa-148">派生クラスでコンストラクターをオーバーライドする場合は、コードで基底クラスのコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-148">If you override the constructor in your derived class, call the base class constructor in your code.</span></span>  
  
 <span data-ttu-id="2f1aa-149">コンストラクター <xref:System.ServiceProcess.ServiceBase>は、 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>を`true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-149">The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`.</span></span> <span data-ttu-id="2f1aa-150">サービスコントロールマネージャー (SCM) からサービスの呼び出しを自動的にログに記録しない場合は、を<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-150">If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.</span></span>  
  
 <span data-ttu-id="2f1aa-151">実行可能ファイルに1つのサービスが含まれている場合、SCM から Start を選択すると、システムによってサービスのコンストラクターが呼び出され、Stop が呼び出されるとデストラクターが実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-151">If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</span></span>  
  
 <span data-ttu-id="2f1aa-152">実行可能ファイルに複数のサービスが含まれている場合、1つのサービスで Start を呼び出すと、実行可能ファイル内のすべてのサービスに対してコンストラクターが呼び出されますが、指定されたサービスのみが開始されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-152">If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</span></span> <span data-ttu-id="2f1aa-153">サービスのデストラクターは、すべてのサービスが停止したときに一緒に実行されます。各サービスが停止したときに個別に実行されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-153">Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f1aa-154">基底クラスのコンストラクターをオーバーライドする場合は、派生クラスのコンストラクターで明示的に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-154">If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoLog : bool with get, set" Usage="System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-155">イベント ログで、Start、Stop、Pause、Continue の各コマンドをレポートするかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-155">Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</span></span></summary>
        <value><span data-ttu-id="2f1aa-156">イベント ログで情報をレポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-156"><see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-157">を<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> に `true` 設定すると、サービスは、アプリケーションイベントログを使用して、コマンドのエラーを報告したり、サービスの開始、停止、一時停止、および続行の各イベントの状態変更情報をレポートするように指示します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-157">Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</span></span> <span data-ttu-id="2f1aa-158">サービスの名前は、ログの<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>として使用されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-158">The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f1aa-159">アプリケーションログではなくカスタムイベントログに情報を報告するには<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 、 `false`をに設定し、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>コマンド処理メソッド<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>内に命令を記述して、適切なログにポストします。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-159">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f1aa-160">イベント<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>ログのソース文字列を提供するは、サービスがイベントログへの書き込みを試みる前に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-160">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</span></span> <span data-ttu-id="2f1aa-161">ソース名を設定する前にイベントログにアクセスしようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-161">Trying to access the event log before the source name is set throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandlePowerEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-162">サービスで、コンピューターの電源ステータスの変更の通知を処理できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-162">Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</span></span></summary>
        <value><span data-ttu-id="2f1aa-163"><see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> クラスで示されたコンピューターの電源ステータスの変更をサービスで処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-163"><see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-164">コンピューターの電源状態が変化すると、サービスコントロールマネージャー (SCM) は、サービスがの<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>値を使用して電源イベントコマンドを受け入れるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-164">When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span></span>  
  
 <span data-ttu-id="2f1aa-165">が<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>の場合、コマンドはサービスに渡され、定義されている場合はメソッドが呼び出されます。 `true`</span><span class="sxs-lookup"><span data-stu-id="2f1aa-165">If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined.</span></span> <span data-ttu-id="2f1aa-166">派生<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>クラスでが実装されていない場合、SCM は空の基底クラス<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType>メソッドを使用して power イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-166">If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-167">サービスの開始後にこのプロパティが変更されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-167">This property is modified after the service was started.</span></span></exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandleSessionChangeEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-168">ターミナル サーバー セッションから受信したセッション変更イベントをサービスで処理できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-168">Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</span></span></summary>
        <value><span data-ttu-id="2f1aa-169">ターミナル サーバーのセッション変更イベントをサービスで処理できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-169"><see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-170">サービスの開始後にこのプロパティが変更されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-170">This property is modified after the service was started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanPauseAndContinue : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-171">サービスを一時中断および再開できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-171">Gets or sets a value indicating whether the service can be paused and resumed.</span></span></summary>
        <value><span data-ttu-id="2f1aa-172">サービスを一時中断できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-172"><see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-173">サービスのコンストラクターで<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-173">Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.</span></span>  
  
 <span data-ttu-id="2f1aa-174">サービスを一時停止すると、サービスが停止します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-174">When a service is paused, it halts what it is doing.</span></span> <span data-ttu-id="2f1aa-175">サービスを続行すると (サービスコントロールマネージャーまたはプログラムによって) <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 、が実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-175">When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.</span></span>  
  
 <span data-ttu-id="2f1aa-176">サービスに一時停止要求を送信すると、システムリソースを節約できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-176">Sending a Pause request to the service can conserve system resources.</span></span> <span data-ttu-id="2f1aa-177">一時停止では、すべてのシステムリソースが解放されるとは限りませんが、停止します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-177">Pause may not release all system resources, but Stop does.</span></span> <span data-ttu-id="2f1aa-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A>とは、多くの場合、および<xref:System.ServiceProcess.ServiceBase.OnStart%2A>より<xref:System.ServiceProcess.ServiceBase.OnStop%2A>も少ない処理を実行するように実装されています。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A></span><span class="sxs-lookup"><span data-stu-id="2f1aa-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span>  
  
 <span data-ttu-id="2f1aa-179">が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>の`true`場合は<xref:System.ServiceProcess.ServiceBase.OnPause%2A> 、 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>およびをオーバーライドして、サービスコントロールマネージャー (SCM) がサービスに Pause または Continue 要求を渡したときに実行する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-179">When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="2f1aa-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A>で<xref:System.ServiceProcess.ServiceBase.OnPause%2A>処理を元に戻すには、を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="2f1aa-181">が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の場合、SCM はサービスに対して Pause または Continue 要求を渡しません。したがって、メソッドとメソッドは、実装されている場合でも呼び出されません。 `false`</span><span class="sxs-lookup"><span data-stu-id="2f1aa-181">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="2f1aa-182">SCM `Pause`では、および`Continue`コントロールは、が`false`の<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>場合は無効になります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-182">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-183">サービスが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-183">The service has already been started.</span></span> <span data-ttu-id="2f1aa-184"><see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> プロパティは、サービスが開始された後は変更できません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-184">The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanShutdown : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-185">システムのシャットダウン時に、サービスにそれを通知する必要があるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-185">Gets or sets a value indicating whether the service should be notified when the system is shutting down.</span></span></summary>
        <value><span data-ttu-id="2f1aa-186">システムのシャットダウン時にサービスに通知する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-186"><see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="2f1aa-187">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-187">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-188"><xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> が `true` の場合、システムのシャットダウン時にサービスに通知されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-188">If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down.</span></span> <span data-ttu-id="2f1aa-189">シャットダウン時に、 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>メソッドは、派生クラスで実装されている場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-189">At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f1aa-190">システムのみが<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>メソッドを実行する必要があります。サービスはこのメソッドを呼び出すことができますが、これは推奨されません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-190">Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-191">サービスが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-191">The service has already been started.</span></span> <span data-ttu-id="2f1aa-192"><see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> プロパティは、サービスが開始された後は変更できません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-192">The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanStop : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-193">サービスを開始した後に停止できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-193">Gets or sets a value indicating whether the service can be stopped once it has started.</span></span></summary>
        <value><span data-ttu-id="2f1aa-194">サービスを停止でき、<see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> メソッドを呼び出すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-194"><see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-195">サービスで Stop が呼び出されると、サービスコントロールマネージャー (SCM) は、サービスがの<xref:System.ServiceProcess.ServiceBase.CanStop%2A>値を使用して stop コマンドを受け入れるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-195">When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span></span> <span data-ttu-id="2f1aa-196">ほとんどのサービスでは、の<xref:System.ServiceProcess.ServiceBase.CanStop%2A>値`true`はになりますが、一部のオペレーティングシステムサービスではユーザーによる停止が許可されていません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-196">For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.</span></span>  
  
 <span data-ttu-id="2f1aa-197">が<xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>の場合は、Stop コマンドがサービスに渡され、メソッドが定義されている場合はメソッドが呼び出されます。 `true`</span><span class="sxs-lookup"><span data-stu-id="2f1aa-197">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="2f1aa-198">派生<xref:System.ServiceProcess.ServiceBase.OnStop%2A>クラスでが実装されていない場合、SCM は、空の基底クラス<xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType>メソッドを使用して Stop コマンドを処理します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-198">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-199">サービスが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-199">The service has already been started.</span></span> <span data-ttu-id="2f1aa-200"><see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> プロパティは、サービスが開始された後は変更できません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-200">The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="serviceBase.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="2f1aa-201">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-201"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="2f1aa-202"><see cref="T:System.ServiceProcess.ServiceBase" /> で使用されていたリソース (メモリを除く) を解放します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-202">Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-203">派生<xref:System.ServiceProcess.ServiceBase.Dispose%2A>クラスの使用が終了したら、派生クラス ( <xref:System.ServiceProcess.ServiceBase>およびクラス内) でを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-203">Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class.</span></span> <span data-ttu-id="2f1aa-204">メソッド<xref:System.ServiceProcess.ServiceBase.Dispose%2A>は、派生クラスを使用できない状態のままにします。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-204">The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state.</span></span> <span data-ttu-id="2f1aa-205">を呼び出し<xref:System.ServiceProcess.ServiceBase.Dispose%2A>た後、派生<xref:System.ServiceProcess.ServiceBase>クラスへのすべての参照を解放する必要があります。これにより、使用されていたメモリがガベージコレクションによって解放される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-205">After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f1aa-206"><xref:System.ServiceProcess.ServiceBase.Dispose%2A> から <xref:System.ServiceProcess.ServiceBase> 派生したクラスへの最後の参照を解放する前に、必ずを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-206">Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="2f1aa-207">そうしないと<xref:System.ServiceProcess.ServiceBase> 、ガベージコレクションがオブジェクトのデストラクターを呼び出すまで、リソースと派生クラスが使用しているが解放されません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-207">Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</span></span>  
  
 <span data-ttu-id="2f1aa-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A>は、のコードを処理するため<xref:System.ServiceProcess.ServiceBase.OnPause%2A>に多くの場合、の<xref:System.ServiceProcess.ServiceBase.Dispose%2A>呼び出しと組み合わせて実装されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span></span> <span data-ttu-id="2f1aa-209">派生クラスでこれを選択した場合は、を実装<xref:System.ServiceProcess.ServiceBase.OnStart%2A>して、 <xref:System.ServiceProcess.ServiceBase.Dispose%2A>解放されたものを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-209">If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventLog : System.Diagnostics.EventLog" Usage="System.ServiceProcess.ServiceBase.EventLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-210">Start や Stop などのサービス コマンドの呼び出し通知をアプリケーション イベント ログに書き込むために使用できるイベント ログを取得します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-210">Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</span></span></summary>
        <value><span data-ttu-id="2f1aa-211">ソースがアプリケーション ログに登録されている <see cref="T:System.Diagnostics.EventLog" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-211">An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-212">コンストラクターは、プロパティ<xref:System.ServiceProcess.ServiceBase.EventLog%2A> <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>と<xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType>プロパティが設定されたを使用して、プロパティをインスタンスに初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-212">The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> properties set.</span></span> <span data-ttu-id="2f1aa-213">ソースは<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスので、ログはコンピューターのアプリケーションログです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-213">The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log.</span></span> <span data-ttu-id="2f1aa-214">これらの値は自動的に設定され、サービスコマンドの自動ログ記録のためには変更できません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-214">These values are set automatically and cannot be changed for automatic logging of service commands.</span></span>  
  
 <span data-ttu-id="2f1aa-215"><xref:System.ServiceProcess.ServiceBase.AutoLog%2A> が `true` の場合、Start、Stop、Pause、Continue、およびカスタムコマンドはアプリケーションイベントログに自動的に記録されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-215">When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</span></span> <span data-ttu-id="2f1aa-216">プロパティを使用し<xref:System.ServiceProcess.ServiceBase.EventLog%2A>て、そのログに追加のメッセージを書き込むこともできます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-216">You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well.</span></span> <span data-ttu-id="2f1aa-217">コンポーネントは、 <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType>この<xref:System.ServiceProcess.ServiceBase.EventLog%2A>メンバーを使用してを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-217">The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.</span></span>  
  
 <span data-ttu-id="2f1aa-218">アプリケーションログではなくカスタムイベントログに情報を報告するには<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 、 `false`をに設定し、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>コマンド処理メソッド<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>内に命令を記述して、適切なログにポストします。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-218">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int with get, set" Usage="System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-219">サービスの終了コードを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-219">Gets or sets the exit code for the service.</span></span></summary>
        <value><span data-ttu-id="2f1aa-220">サービスの終了コード。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-220">The exit code for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-221">サービスを停止してサービスコントロールマネージャーにエラーを通知する前に、プロパティを0以外の値に設定します。 <xref:System.ServiceProcess.ServiceBase.ExitCode%2A></span><span class="sxs-lookup"><span data-stu-id="2f1aa-221">Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberSignature Language="F#" Value="val mutable MaxNameLength : int" Usage="System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-222">サービス名の最大サイズを示します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-222">Indicates the maximum size for a service name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-223">ServiceName と DisplayName の両方に、サービスクラスのプロパティを設定するときに確認する必要があるサイズ制限があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-223">ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberSignature Language="F#" Value="abstract member OnContinue : unit -&gt; unit&#xA;override this.OnContinue : unit -&gt; unit" Usage="serviceBase.OnContinue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f1aa-224">派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> は、サービス コントロール マネージャー (SCM) によって Continue コマンドがサービスに送信されるときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-224">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="2f1aa-225">サービスが一時中断してから通常の操作の再開時に実行されるアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-225">Specifies actions to take when a service resumes normal functioning after being paused.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-226">アプリケーション<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の応答をに<xref:System.ServiceProcess.ServiceBase.OnPause%2A>反映するために実装します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-226">Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span> <span data-ttu-id="2f1aa-227">サービスを続行すると (サービスコンソールまたはプログラムによって)、 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>処理が実行され、サービスが再びアクティブになります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-227">When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="2f1aa-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true`の場合、はオーバーライドされることが想定されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="2f1aa-229">が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の場合、SCM はサービスに対して Pause または Continue 要求を渡しません。したがって、メソッドとメソッドは、実装されている場合でも呼び出されません。 `false`</span><span class="sxs-lookup"><span data-stu-id="2f1aa-229">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="2f1aa-230">SCM `Pause`では、および`Continue`コントロールは、が`false`の<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>場合は無効になります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-230">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberSignature Language="F#" Value="abstract member OnCustomCommand : int -&gt; unit&#xA;override this.OnCustomCommand : int -&gt; unit" Usage="serviceBase.OnCustomCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="2f1aa-231">サービスに送信されたコマンド メッセージ。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-231">The command message sent to the service.</span></span></param>
        <summary><span data-ttu-id="2f1aa-232">派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> は、サービス コントロール マネージャー (SCM) でカスタム コマンドがサービスに渡されるときに、実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-232">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service.</span></span> <span data-ttu-id="2f1aa-233">パラメーター値が設定されているコマンドの発生時に実行されるアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-233">Specifies actions to take when a command with the specified parameter value occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>では、サービスを開始、停止、一時停止、および続行する以外に、追加の機能を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</span></span>  
  
 <span data-ttu-id="2f1aa-235">SCM はカスタムコマンドを調べて、渡されたパラメーターが`command`サービスでサポートされているかどうかを確認しません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-235">The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in.</span></span> <span data-ttu-id="2f1aa-236">カスタムコマンドがサービスに直接渡されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-236">It passes the custom command directly to the service.</span></span> <span data-ttu-id="2f1aa-237">サービスが`command`パラメーターを認識しない場合は、何も実行されません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-237">If the service does not recognize the `command` parameter, it does nothing.</span></span>  
  
 <span data-ttu-id="2f1aa-238">カスタムコマンドは、 <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> <xref:System.ServiceProcess.ServiceController>コンポーネント内のステートメントによって発生します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-238">Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component.</span></span> <span data-ttu-id="2f1aa-239">Switch ステートメントを使用するか、..次に、サービスで定義するカスタムコマンドを処理する条件を指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-239">Use a switch statement or if..then condition to handle the custom commands you define on your service.</span></span>  
  
 <span data-ttu-id="2f1aa-240">アプリケーションで定義したりで<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>使用したりできるカスタムコマンドの値は、128と255の間の値のみです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-240">The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255.</span></span> <span data-ttu-id="2f1aa-241">128未満の整数は、システム予約値に対応します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-241">Integers below 128 correspond to system-reserved values.</span></span>  
  
 <span data-ttu-id="2f1aa-242"><xref:System.ServiceProcess.ServiceBase.AutoLog%2A>プロパティが `true` の場合、他のすべてのコマンドと同様に、イベントログにエントリを書き込み、メソッドの実行が成功したか失敗したかを報告します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-242">If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberSignature Language="F#" Value="abstract member OnPause : unit -&gt; unit&#xA;override this.OnPause : unit -&gt; unit" Usage="serviceBase.OnPause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f1aa-243">派生クラスに実装されると、Pause コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-243">When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="2f1aa-244">サービスが一時中断したときに実行されるアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-244">Specifies actions to take when a service pauses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-245">サービス<xref:System.ServiceProcess.ServiceBase.OnPause%2A>が Pause コマンドを受信したときに発生する処理を指定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-245">Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command.</span></span> <span data-ttu-id="2f1aa-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true`の場合、はオーバーライドされることが想定されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="2f1aa-247">(サービスコンソールまたはプログラムによって) <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>一時停止しているサービスを続行すると、処理が実行され、サービスが再びアクティブになります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-247">When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="2f1aa-248">Pause コマンドを使用すると、アプリケーションは特定のイベントにのみ応答できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-248">The Pause command only allows your application to react to a specific event.</span></span> <span data-ttu-id="2f1aa-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A>実行するように定義していないサービスに対しては何も行いません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.</span></span>  
  
 <span data-ttu-id="2f1aa-250">一時停止要求をサービスに送信すると、すべてのシステムリソースを解放する必要がなくなるため、システムリソースを節約できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-250">Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</span></span> <span data-ttu-id="2f1aa-251">たとえば、プロセスによってスレッドが開かれている場合、停止するのではなくサービスを一時停止すると、スレッドを開いたままにすることができます。サービスが続行されるときに再割り当てする必要が習得ます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-251">For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</span></span> <span data-ttu-id="2f1aa-252">すべてのシステムリソースを解放するために Pause を定義すると、Stop コマンドのように動作します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-252">If you define Pause to release all system resources, it behaves like a Stop command.</span></span>  
  
 <span data-ttu-id="2f1aa-253">を<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>に`true`設定し、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> および <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> をオーバーライドして、SCM が Pause または Continue 要求をサービスに渡すときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-253">Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="2f1aa-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A>で<xref:System.ServiceProcess.ServiceBase.OnPause%2A>処理を元に戻すには、を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="2f1aa-255">が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の場合、SCM はサービスに対して Pause または Continue 要求を渡しません。そのため、実装されている場合でも、メソッドとメソッドは呼び出されません。 `false`</span><span class="sxs-lookup"><span data-stu-id="2f1aa-255">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented.</span></span> <span data-ttu-id="2f1aa-256">SCM `Pause`では、および`Continue`コントロールは、が`false`の<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>場合は無効になります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-256">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="F#" Value="abstract member OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool&#xA;override this.OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool" Usage="serviceBase.OnPowerEvent powerStatus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus"><span data-ttu-id="2f1aa-257">システムからの電源ステータスに関する通知を示す <see cref="T:System.ServiceProcess.PowerBroadcastStatus" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-257">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</span></span></param>
        <summary><span data-ttu-id="2f1aa-258">派生クラスに実装されると、コンピューターの電源ステータスの変更時に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-258">When implemented in a derived class, executes when the computer's power status has changed.</span></span> <span data-ttu-id="2f1aa-259">これは中断モードのラップトップ コンピューターに適用されるもので、システムのシャットダウンとは異なります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-259">This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</span></span></summary>
        <returns><span data-ttu-id="2f1aa-260">派生クラスに実装されると、アプリケーションの要求に応じて返される値が決定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-260">When implemented in a derived class, the needs of your application determine what value to return.</span></span> <span data-ttu-id="2f1aa-261">たとえば、<see langword="QuerySuspend" /> ブロードキャスト ステータスが渡されると、<see langword="false" /> を返すことでアプリケーションでクエリを拒否できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-261">For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-262">列挙に示されているシステムイベントが発生したときに発生する処理を指定するために使用<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>します。たとえば、コンピューターが中断モードになっている場合やバッテリ低下が示されている場合などです。 <xref:System.ServiceProcess.PowerBroadcastStatus></span><span class="sxs-lookup"><span data-stu-id="2f1aa-262">Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</span></span>  
  
 <span data-ttu-id="2f1aa-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> `true`の場合、はオーバーライドされることが想定されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit&#xA;override this.OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit" Usage="serviceBase.OnSessionChange changeDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="changeDescription"><span data-ttu-id="2f1aa-264">変更の種類を識別する構造体。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-264">A structure that identifies the change type.</span></span></param>
        <summary><span data-ttu-id="2f1aa-265">変更イベントがターミナル サーバー セッションから受信された場合に実行します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-265">Executes when a change event is received from a Terminal Server session.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-266">このメソッドの実行<xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>を有効`true`にするには、プロパティをに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-266">You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="serviceBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f1aa-267">派生クラスに実装されると、システムがシャット ダウンされるときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-267">When implemented in a derived class, executes when the system is shutting down.</span></span> <span data-ttu-id="2f1aa-268">システムがシャット ダウンする直前に発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-268">Specifies what should occur immediately prior to the system shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-269">システム<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>のシャットダウン時に発生する処理を指定するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-269">Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.</span></span>  
  
 <span data-ttu-id="2f1aa-270">このイベントは、コンピューターの電源がオフになっている場合ではなく、オペレーティングシステムがシャットダウンされた場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-270">This event occurs only when the operating system is shut down, not when the computer is turned off.</span></span>  
  
 <span data-ttu-id="2f1aa-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> `true`の場合、はオーバーライドされることが想定されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnStart : string[] -&gt; unit&#xA;override this.OnStart : string[] -&gt; unit" Usage="serviceBase.OnStart args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="2f1aa-272">Start コマンドによって渡されたデータ。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-272">Data passed by the start command.</span></span></param>
        <summary><span data-ttu-id="2f1aa-273">派生クラスに実装されると、Start コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるとき、またはオペレーティング システムが (自動的に起動するサービスのために) 起動するときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-273">When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</span></span> <span data-ttu-id="2f1aa-274">サービスが開始するときに実行されるアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-274">Specifies actions to take when the service starts.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-275">サービス<xref:System.ServiceProcess.ServiceBase.OnStart%2A>が Start コマンドを受信したときに発生する処理を指定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-275">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command.</span></span> <span data-ttu-id="2f1aa-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>は、サービスの動作を指定するメソッドです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service.</span></span> <span data-ttu-id="2f1aa-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>では、データを渡す方法として引数を受け取ることができますが、この使用方法はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f1aa-278">に含まれている必要がある処理は、コンストラクター <xref:System.ServiceProcess.ServiceBase.OnStart%2A>を使用して実行しないでください。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-278">Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="2f1aa-279">を<xref:System.ServiceProcess.ServiceBase.OnStart%2A>使用して、サービスのすべての初期化を処理します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-279">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service.</span></span> <span data-ttu-id="2f1aa-280">コンストラクターは、サービスの実行時ではなく、アプリケーションの実行可能ファイルの実行時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-280">The constructor is called when the application's executable runs, not when the service runs.</span></span> <span data-ttu-id="2f1aa-281">実行可能ファイルは<xref:System.ServiceProcess.ServiceBase.OnStart%2A>、の前に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-281">The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="2f1aa-282">たとえば、SCM が既にメモリ内にオブジェクトを保持しているために、コンストラクターが再度呼び出されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-282">When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</span></span> <span data-ttu-id="2f1aa-283">が<xref:System.ServiceProcess.ServiceBase.OnStop%2A> で <xref:System.ServiceProcess.ServiceBase.OnStart%2A> はなくコンストラクターで割り当てられたリソースを解放した場合、2回目にサービスが呼び出されたときに必要なリソースが再度作成されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-283">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.</span></span>  
  
 <span data-ttu-id="2f1aa-284">サービスのインストーラーのをに設定する<xref:System.ServiceProcess.ServiceInstaller.StartType%2A> <xref:System.ServiceProcess.ServiceStartMode.Automatic>ことによって、コンピューターが再起動したときにサービスを自動的に開始するように設定できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-284">Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="2f1aa-285">このような状況で<xref:System.ServiceProcess.ServiceBase.OnStart%2A>は、はシステムの起動時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-285">In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.</span></span>  
  
 <span data-ttu-id="2f1aa-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>は、派生クラスでオーバーライドされることが想定されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="2f1aa-287">サービスを有効にするために<xref:System.ServiceProcess.ServiceBase.OnStart%2A>は<xref:System.ServiceProcess.ServiceBase.OnStop%2A> 、との両方がサービスクラスに実装されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-287">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 <span data-ttu-id="2f1aa-288">Main メソッドではなく、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>メソッド内のサービスの初期化引数を処理します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-288">Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method.</span></span> <span data-ttu-id="2f1aa-289">`args`パラメーター配列内の引数は、サービスコンソールでサービスの [プロパティ] ウィンドウで手動で設定できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-289">The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console.</span></span> <span data-ttu-id="2f1aa-290">コンソールに入力した引数は保存されません。これらは、サービスがコントロールパネルから開始されたときに、一度にサービスに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-290">The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</span></span> <span data-ttu-id="2f1aa-291">サービスが自動的に開始されるときに存在する必要がある引数は、サービスのレジストリキーの ImagePath 文字列値 (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name) に配置できます >*).</span><span class="sxs-lookup"><span data-stu-id="2f1aa-291">Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name>*).</span></span> <span data-ttu-id="2f1aa-292">レジストリから引数を取得するには、 <xref:System.Environment.GetCommandLineArgs%2A>メソッドを使用します`string[] imagePathArgs = Environment.GetCommandLineArgs();`。たとえば、のようにします。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-292">You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberSignature Language="F#" Value="abstract member OnStop : unit -&gt; unit&#xA;override this.OnStop : unit -&gt; unit" Usage="serviceBase.OnStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f1aa-293">派生クラスに実装されると、Stop コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-293">When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="2f1aa-294">サービスが実行を停止したときに実行されるアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-294">Specifies actions to take when a service stops running.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-295">サービス<xref:System.ServiceProcess.ServiceBase.OnStop%2A>が Stop コマンドを受信したときに発生する処理を指定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-295">Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.</span></span>  
  
 <span data-ttu-id="2f1aa-296">SCM は、stop コマンドを受け取ると、の<xref:System.ServiceProcess.ServiceBase.CanStop%2A>値を使用して、サービスが停止コマンドを受け入れるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-296">When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands.</span></span> <span data-ttu-id="2f1aa-297">が<xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>の場合、Stop コマンドがサービスに渡され、メソッドが定義されている場合は呼び出されます。 `true`</span><span class="sxs-lookup"><span data-stu-id="2f1aa-297">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="2f1aa-298">が<xref:System.ServiceProcess.ServiceBase.OnStop%2A>サービスに実装されていない場合、SCM は Stop コマンドを処理します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-298">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.</span></span>  
  
 <span data-ttu-id="2f1aa-299"><xref:System.ServiceProcess.ServiceBase.CanStop%2A> が `false` の場合、SCM は Stop コマンドを無視します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-299">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command.</span></span> <span data-ttu-id="2f1aa-300">サービスに渡されません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-300">It is not passed to the service.</span></span> <span data-ttu-id="2f1aa-301">Stop コマンドはを返し、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-301">The Stop command returns and throws an exception.</span></span>  
  
 <span data-ttu-id="2f1aa-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A>は、派生クラスでオーバーライドされることが想定されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="2f1aa-303">サービスを有効にするために<xref:System.ServiceProcess.ServiceBase.OnStart%2A>は<xref:System.ServiceProcess.ServiceBase.OnStop%2A> 、との両方がサービスクラスに実装されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-303">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.RequestAdditionalTime : int -&gt; unit" Usage="serviceBase.RequestAdditionalTime milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="2f1aa-304">要求する時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-304">The requested time in milliseconds.</span></span></param>
        <summary><span data-ttu-id="2f1aa-305">保留中の操作について時間の延長を要求します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-305">Requests additional time for a pending operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-306"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnStart%2A>メソッドは、オーバーライドされた、、、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>の各メソッドによって呼び出され、保留中の操作の追加時間を要求し、サービスコントロールマネージャー (SCM) が<xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A>サービスが応答していません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-306">The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</span></span>  <span data-ttu-id="2f1aa-307">保留中の操作が続行、一時停止、開始、または停止<xref:System.InvalidOperationException>のいずれでもない場合は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-307">If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-308">サービスは保留状態ではありません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-308">The service is not in a pending state.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f1aa-309">サービスの実行可能ファイルのメイン エントリ ポイントを示します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-309">Provides the main entry point for a service executable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service"><span data-ttu-id="2f1aa-310">開始するサービスを示す <see cref="T:System.ServiceProcess.ServiceBase" />。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-310">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</span></span></param>
        <summary><span data-ttu-id="2f1aa-311">サービス コントロール マネージャー (SCM) を使用してサービスの実行可能ファイルを登録します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-311">Registers the executable for a service with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-312">サービスの実行可能ファイル`main()`の関数でこのオーバーロードを呼び出して、サービスをサービスコントロールマネージャーに登録します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-312">Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager.</span></span> <span data-ttu-id="2f1aa-313">を呼び出し<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>た後、サービスコントロールマネージャーは Start コマンドを発行します。これにより、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-313">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service.</span></span> <span data-ttu-id="2f1aa-314">開始コマンドが実行されるまで、サービスは開始されません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-314">The service is not started until the Start command is executed.</span></span>  
  
 <span data-ttu-id="2f1aa-315">メソッドは、Windows フォームアプリケーションの場合と<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>ほぼ同じ方法で呼び出されます。 <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2f1aa-315">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="2f1aa-316">`service`が<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> の `true` 場合、パラメーターで指定されたサービスを開始できなかった場合に、エントリがイベントログに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-316">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f1aa-317"><paramref name="service" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-317"><paramref name="service" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase[] -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services"><span data-ttu-id="2f1aa-318">ServiceBase インスタンスの配列。開始するサービスを示します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-318">An array of ServiceBase instances, which indicate services to start.</span></span></param>
        <summary><span data-ttu-id="2f1aa-319">複数サービスの実行可能ファイルをサービス コントロール マネージャー (SCM) に登録します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-319">Registers the executable for multiple services with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-320">サービスの実行可能ファイル`main()`の関数でこのオーバーロードを呼び出して、サービスをサービスコントロールマネージャーに登録します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-320">Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager.</span></span> <span data-ttu-id="2f1aa-321">を呼び出し<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>た後、サービスコントロールマネージャーは Start コマンドを発行します。これに<xref:System.ServiceProcess.ServiceBase.OnStart%2A>より、サービスのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-321">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services.</span></span> <span data-ttu-id="2f1aa-322">開始コマンドが実行されるまで、サービスは開始されません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-322">The services are not started until the Start commands are executed.</span></span>  
  
 <span data-ttu-id="2f1aa-323">メソッドは、Windows フォームアプリケーションの<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>メソッドとほとんど同じ方法で呼び出されます。 <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2f1aa-323">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> method for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="2f1aa-324"><xref:System.ServiceProcess.ServiceBase.AutoLog%2A> が `true` の場合、配列内のいずれかのサービスの起動に失敗すると、エントリがイベントログに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-324">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f1aa-325">開始するサービスが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-325">You did not supply a service to start.</span></span> <span data-ttu-id="2f1aa-326">配列が <see langword="null" /> または空である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-326">The array might be <see langword="null" /> or empty.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceHandle : nativeint" Usage="System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-327">サービスのサービス コントロール ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-327">Gets the service control handle for the service.</span></span></summary>
        <value><span data-ttu-id="2f1aa-328">サービスのサービス コントロール ハンドルを含む <see cref="T:System.IntPtr" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-328">An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-329">サービスコントロールハンドルは、サービスコントロールマネージャー (SCM) との通信に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-329">The service control handle is used to communicate with the Service Control Manager (SCM).</span></span>  <span data-ttu-id="2f1aa-330">ハンドルは、アンマネージ`SetServiceStatus`関数を使用して、呼び出し元のサービスのサービスコントロールマネージャーの状態情報を更新するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-330">The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="2f1aa-331">アンマネージコードへのアクセスに使用します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-331">for access to unmanaged code.</span></span> <span data-ttu-id="2f1aa-332"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="2f1aa-332">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberSignature Language="F#" Value="member this.ServiceMainCallback : int * nativeint -&gt; unit" Usage="serviceBase.ServiceMainCallback (argCount, argPointer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argPointer" Type="System.IntPtr" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="argCount"><span data-ttu-id="2f1aa-333">引数配列内の引数の数。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-333">The number of arguments in the argument array.</span></span></param>
        <param name="argPointer"><span data-ttu-id="2f1aa-334">引数配列を指す <see cref="T:System.IntPtr" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-334">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</span></span></param>
        <summary><span data-ttu-id="2f1aa-335">コマンド ハンドラーを登録し、サービスを開始します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-335">Registers the command handler and starts the service.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f1aa-336">システムでサービスを識別するために使用される短い名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-336">Gets or sets the short name used to identify the service to the system.</span></span></summary>
        <value><span data-ttu-id="2f1aa-337">サービスの名前。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-337">The name of the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-338">は<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスをサービスコントロールマネージャーに識別します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-338">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager.</span></span> <span data-ttu-id="2f1aa-339">このプロパティの値は、対応するインストーラークラスの<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>プロパティでサービスに記録されている名前と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-339">The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property of the corresponding installer class.</span></span> <span data-ttu-id="2f1aa-340">コードでは、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>通常、サービスのは実行可能ファイル`main()`の関数で設定されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-340">In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.</span></span>  
  
 <span data-ttu-id="2f1aa-341">は、 <xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティに<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>関連付けられているを指定するためにも使用されます。 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A></span><span class="sxs-lookup"><span data-stu-id="2f1aa-341">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property.</span></span> <span data-ttu-id="2f1aa-342">これ<xref:System.ServiceProcess.ServiceBase.EventLog%2A>は、サービスコマンド情報をアプリケーションログに書き込むインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-342">This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.</span></span>  
  
 <span data-ttu-id="2f1aa-343">イベント<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>ログのソース文字列を提供するは、サービスがイベントログに書き込む前に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-343">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log.</span></span> <span data-ttu-id="2f1aa-344">ソース名を設定する前にイベントログにアクセスしようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-344">Trying to access the event log before the source name is set causes an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f1aa-345">サービスが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-345">The service has already been started.</span></span> <span data-ttu-id="2f1aa-346"><see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> プロパティは、サービスが開始された後は変更できません。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-346">The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f1aa-347">指定された名前が、長さ 0 の文字列であるか、または <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /> より長い文字列です。または、指定された名前にスラッシュまたはバック スラッシュ文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-347">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</span></span></exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="serviceBase.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f1aa-348">サービスの実行を停止します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-348">Stops the executing service.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f1aa-349">メソッド<xref:System.ServiceProcess.ServiceBase.Stop%2A>は、停止が保留中であることを示すようにサービス<xref:System.ServiceProcess.ServiceBase.OnStop%2A>の状態を設定し、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-349">The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.</span></span>  <span data-ttu-id="2f1aa-350">アプリケーションが停止されると、サービスの状態が [停止] に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-350">After the application is stopped, the service state is set to stopped.</span></span> <span data-ttu-id="2f1aa-351">アプリケーションがホステッドサービスの場合、アプリケーションドメインはアンロードされます。</span><span class="sxs-lookup"><span data-stu-id="2f1aa-351">If the application is a hosted service, the application domain is unloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>
