<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9f9c0589c228e3c4dfc0dcc9de08488d92bee1b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231937" /></Metadata><TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ServiceBase = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Install.UserNTServiceDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>サービス アプリケーションの一部として存在するサービスの基本クラスを提供します。 <see cref="T:System.ServiceProcess.ServiceBase" /> は、新しいサービス クラスの作成時に派生される必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスアプリケーション<xref:System.ServiceProcess.ServiceBase>でサービスクラスを定義するときに、から派生します。 有用なサービスは<xref:System.ServiceProcess.ServiceBase.OnStart%2A> 、メソッドとメソッドを<xref:System.ServiceProcess.ServiceBase.OnStop%2A>オーバーライドします。 その他の機能について<xref:System.ServiceProcess.ServiceBase.OnPause%2A>は<xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 、サービス状態の変更に応じて、とを特定の動作でオーバーライドできます。  
  
 サービスは、ユーザーインターフェイスをサポートしておらず、ログオンしているユーザーアカウントで実行されない可能性がある、実行時間の長い実行可能ファイルです。 このサービスは、ユーザーがコンピューターにログオンしていなくても実行できます。  
  
 既定では、サービスはシステムアカウントで実行されますが、これは管理者アカウントと同じではありません。 システムアカウントの権限を変更することはできません。 または、を<xref:System.ServiceProcess.ServiceProcessInstaller>使用して、サービスを実行するユーザーアカウントを指定することもできます。  
  
 実行可能ファイルには複数のサービスを含めることができ<xref:System.ServiceProcess.ServiceInstaller>ますが、各サービスに個別のが含まれている必要があります。 インスタンス<xref:System.ServiceProcess.ServiceInstaller>によって、サービスがシステムに登録されます。 インストーラーは、各サービスをイベントログに関連付けて、サービスコマンドを記録するために使用することもできます。 実行`main()`可能ファイルの関数は、実行するサービスを定義します。 サービスの現在の作業ディレクトリは、実行可能ファイルが配置されているディレクトリではなく、システムディレクトリです。  
  
 サービスを開始すると、実行可能ファイルが検索され、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>実行可能ファイル内に含まれるそのサービスのメソッドが実行されます。 ただし、サービスの実行は実行可能ファイルの実行と同じではありません。 実行可能ファイルは、サービスのみを読み込みます。 サービスは、サービスコントロールマネージャーを使用してアクセスされます (開始や停止など)。  
  
 実行可能ファイルは<xref:System.ServiceProcess.ServiceBase> 、サービスで Start を初めて呼び出すときに、派生クラスのコンストラクターを呼び出します。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>コマンド処理メソッドは、コンストラクターが実行された直後に呼び出されます。 最初にサービスが読み込まれた後、コンストラクターは再実行されません。したがって、コンストラクターによって実行される処理は、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>によって実行されるものと分離する必要があります。 によって<xref:System.ServiceProcess.ServiceBase.OnStop%2A>解放できるリソースは、で<xref:System.ServiceProcess.ServiceBase.OnStart%2A>作成する必要があります。 コンストラクターにリソースを作成すると、がリソースを解放した後<xref:System.ServiceProcess.ServiceBase.OnStop%2A>にサービスが再度開始された場合に、リソースが正しく作成されなくなります。  
  
 サービスコントロールマネージャー (SCM) は、サービスと対話する方法を提供します。 SCM を使用して、サービスに開始、停止、一時停止、続行、またはカスタムコマンドを渡すことができます。 SCM は、および<xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>の値を使用して、サービスが停止、一時停止、または続行コマンドを受け入れるかどうかを判断します。 SCM のコンテキストメニューでは、対応するプロパティ<xref:System.ServiceProcess.ServiceBase.CanStop%2A>または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>が`true`サービスクラスにある場合にのみ、停止、一時停止、および続行が有効になります。 有効にすると<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、コマンドがサービスに渡され、、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>が呼び出されます。 、 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>、またはが`false`の場合、メソッドを実装していても、対応するコマンド処理メソッド (など) は処理されません。 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>  
  
 <xref:System.ServiceProcess.ServiceController>クラスを使用すると、ユーザーインターフェイスを使用して SCM が行う処理をプログラムで実行できます。 コンソールで使用できるタスクを自動化できます。 、 <xref:System.ServiceProcess.ServiceBase.CanStop%2A>、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>がで`true`あるにもかかわらず、対応するコマンド処理メソッド (など<xref:System.ServiceProcess.ServiceBase.OnStop%2A>) が実装されていない場合、システムは例外をスローし、コマンドを無視します。  
  
 で<xref:System.ServiceProcess.ServiceBase.OnStart%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>、 、またはその他のメソッドを実装する必要はありません。<xref:System.ServiceProcess.ServiceBase> ただし、サービスの動作はで<xref:System.ServiceProcess.ServiceBase.OnStart%2A>説明されているので、少なくともこのメンバーをオーバーライドする必要があります。 実行`main()`可能ファイルの関数は、 <xref:System.ServiceProcess.ServiceBase.Run%2A>メソッドを呼び出すことによって、実行可能ファイル内のサービスをサービスコントロールマネージャーに登録します。 メソッドに<xref:System.ServiceProcess.ServiceBase>渡されるオブジェクトの<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>プロパティは、そのサービスのサービスインストーラーのプロパティと一致する必要があります。 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.Run%2A>  
  
 を使用`InstallUtil.exe`して、システムにサービスをインストールすることができます。  
  
> [!NOTE]
>  アプリケーションイベントログ以外のログを指定してサービス呼び出しの通知を受け取ることはできますが<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 、 <xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティとプロパティのどちらもカスタムログに書き込むことはできません。 自動<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>ログ`false`記録を使用しない場合は、に設定します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceProcess.ServiceBase" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase>クラスのインスタンスは作成しないでください。 代わりに、派生クラス<xref:System.ServiceProcess.ServiceBase>から派生させ、派生クラスをインスタンス化します。 から<xref:System.ServiceProcess.ServiceBase>継承されたクラスのコンストラクターに実装する必要がある最小値は、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>コンポーネントでを設定することです。 コンストラクターでは、他の処理は特に必要ありません。 ほとんどの初期化は、コンストラクター <xref:System.ServiceProcess.ServiceBase.OnStart%2A>ではなく、で処理する必要があります。 そうしないと、停止後にサービスを再起動したときに、オブジェクトが再初期化される保証はありません。  
  
 派生クラスでコンストラクターをオーバーライドする場合は、コードで基底クラスのコンストラクターを呼び出します。  
  
 コンストラクター <xref:System.ServiceProcess.ServiceBase>は、 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>を`true`に設定します。 サービスコントロールマネージャー (SCM) からサービスの呼び出しを自動的にログに記録しない場合は、を<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`設定します。  
  
 実行可能ファイルに1つのサービスが含まれている場合、SCM から Start を選択すると、システムによってサービスのコンストラクターが呼び出され、Stop が呼び出されるとデストラクターが実行されます。  
  
 実行可能ファイルに複数のサービスが含まれている場合、1つのサービスで Start を呼び出すと、実行可能ファイル内のすべてのサービスに対してコンストラクターが呼び出されますが、指定されたサービスのみが開始されます。 サービスのデストラクターは、すべてのサービスが停止したときに一緒に実行されます。各サービスが停止したときに個別に実行されるわけではありません。  
  
> [!NOTE]
>  基底クラスのコンストラクターをオーバーライドする場合は、派生クラスのコンストラクターで明示的に呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoLog : bool with get, set" Usage="System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログで、Start、Stop、Pause、Continue の各コマンドをレポートするかどうかを示します。</summary>
        <value>イベント ログで情報をレポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> に`true`設定すると、サービスは、アプリケーションイベントログを使用して、コマンドのエラーを報告したり、サービスの開始、停止、一時停止、および続行の各イベントの状態変更情報をレポートするように指示します。 サービスの名前は、ログの<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>として使用されます。  
  
 アプリケーションログではなくカスタムイベントログに情報を報告するには<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 、 `false`をに設定し、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>コマンド処理メソッド<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>内に命令を記述して、適切なログにポストします。  
  
> [!NOTE]
>  イベント<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>ログのソース文字列を提供するは、サービスがイベントログへの書き込みを試みる前に設定する必要があります。 ソース名を設定する前にイベントログにアクセスしようとすると、例外がスローされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandlePowerEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスで、コンピューターの電源ステータスの変更の通知を処理できるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> クラスで示されたコンピューターの電源ステータスの変更をサービスで処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンピューターの電源状態が変化すると、サービスコントロールマネージャー (SCM) は、サービスがの<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>値を使用して電源イベントコマンドを受け入れるかどうかを確認します。  
  
 が<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>の場合、コマンドはサービスに渡され、定義されている場合はメソッドが呼び出されます。 `true` 派生<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>クラスでが実装されていない場合、SCM は空の基底クラス<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType>メソッドを使用して power イベントを処理します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスの開始後にこのプロパティが変更されています。</exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandleSessionChangeEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ターミナル サーバー セッションから受信したセッション変更イベントをサービスで処理できるかどうかを示す値を取得または設定します。</summary>
        <value>ターミナル サーバーのセッション変更イベントをサービスで処理できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">サービスの開始後にこのプロパティが変更されています。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanPauseAndContinue : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスを一時中断および再開できるかどうかを示す値を取得または設定します。</summary>
        <value>サービスを一時中断できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスのコンストラクターで<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティの値を設定します。  
  
 サービスを一時停止すると、サービスが停止します。 サービスを続行すると (サービスコントロールマネージャーまたはプログラムによって) <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 、が実行されます。  
  
 サービスに一時停止要求を送信すると、システムリソースを節約できます。 一時停止では、すべてのシステムリソースが解放されるとは限りませんが、停止します。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>とは、多くの場合、および<xref:System.ServiceProcess.ServiceBase.OnStart%2A>より<xref:System.ServiceProcess.ServiceBase.OnStop%2A>も少ない処理を実行するように実装されています。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>  
  
 が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>の`true`場合は<xref:System.ServiceProcess.ServiceBase.OnPause%2A> 、 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>およびをオーバーライドして、サービスコントロールマネージャー (SCM) がサービスに Pause または Continue 要求を渡したときに実行する処理を指定します。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>で<xref:System.ServiceProcess.ServiceBase.OnPause%2A>処理を元に戻すには、を実装する必要があります。  
  
 が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の場合、SCM はサービスに対して Pause または Continue 要求を渡しません。したがって、メソッドとメソッドは、実装されている場合でも呼び出されません。 `false` SCM `Pause`では、および`Continue`コントロールは、が`false`の<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>場合は無効になります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanShutdown : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムのシャットダウン時に、サービスにそれを通知する必要があるかどうかを示す値を取得または設定します。</summary>
        <value>システムのシャットダウン時にサービスに通知する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> が`true`の場合、システムのシャットダウン時にサービスに通知されます。 シャットダウン時に、 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>メソッドは、派生クラスで実装されている場合に呼び出されます。  
  
> [!NOTE]
>  システムのみが<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>メソッドを実行する必要があります。サービスはこのメソッドを呼び出すことができますが、これは推奨されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanStop : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスを開始した後に停止できるかどうかを示す値を取得または設定します。</summary>
        <value>サービスを停止でき、<see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> メソッドを呼び出すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスで Stop が呼び出されると、サービスコントロールマネージャー (SCM) は、サービスがの<xref:System.ServiceProcess.ServiceBase.CanStop%2A>値を使用して stop コマンドを受け入れるかどうかを確認します。 ほとんどのサービスでは、の<xref:System.ServiceProcess.ServiceBase.CanStop%2A>値`true`はになりますが、一部のオペレーティングシステムサービスではユーザーによる停止が許可されていません。  
  
 が<xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>の場合は、Stop コマンドがサービスに渡され、メソッドが定義されている場合はメソッドが呼び出されます。 `true` 派生<xref:System.ServiceProcess.ServiceBase.OnStop%2A>クラスでが実装されていない場合、SCM は、空の基底クラス<xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType>メソッドを使用して Stop コマンドを処理します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="serviceBase.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.ServiceProcess.ServiceBase" /> で使用されていたリソース (メモリを除く) を解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生<xref:System.ServiceProcess.ServiceBase.Dispose%2A>クラスの使用が終了したら、派生クラス ( <xref:System.ServiceProcess.ServiceBase>およびクラス内) でを呼び出します。 メソッド<xref:System.ServiceProcess.ServiceBase.Dispose%2A>は、派生クラスを使用できない状態のままにします。 を呼び出し<xref:System.ServiceProcess.ServiceBase.Dispose%2A>た後、派生<xref:System.ServiceProcess.ServiceBase>クラスへのすべての参照を解放する必要があります。これにより、使用されていたメモリがガベージコレクションによって解放される可能性があります。  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceBase.Dispose%2A> から<xref:System.ServiceProcess.ServiceBase>派生したクラスへの最後の参照を解放する前に、必ずを呼び出してください。 そうしないと<xref:System.ServiceProcess.ServiceBase> 、ガベージコレクションがオブジェクトのデストラクターを呼び出すまで、リソースと派生クラスが使用しているが解放されません。  
  
 <xref:System.ServiceProcess.ServiceBase.OnStop%2A>は、のコードを処理するため<xref:System.ServiceProcess.ServiceBase.OnPause%2A>に多くの場合、の<xref:System.ServiceProcess.ServiceBase.Dispose%2A>呼び出しと組み合わせて実装されます。 派生クラスでこれを選択した場合は、を実装<xref:System.ServiceProcess.ServiceBase.OnStart%2A>して、 <xref:System.ServiceProcess.ServiceBase.Dispose%2A>解放されたものを割り当てることができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventLog : System.Diagnostics.EventLog" Usage="System.ServiceProcess.ServiceBase.EventLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Start や Stop などのサービス コマンドの呼び出し通知をアプリケーション イベント ログに書き込むために使用できるイベント ログを取得します。</summary>
        <value>ソースがアプリケーション ログに登録されている <see cref="T:System.Diagnostics.EventLog" /> インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンストラクターは、プロパティ<xref:System.ServiceProcess.ServiceBase.EventLog%2A> <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>と<xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType>プロパティが設定されたを使用して、プロパティをインスタンスに初期化します。 ソースは<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスので、ログはコンピューターのアプリケーションログです。 これらの値は自動的に設定され、サービスコマンドの自動ログ記録のためには変更できません。  
  
 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> が`true`の場合、Start、Stop、Pause、Continue、およびカスタムコマンドはアプリケーションイベントログに自動的に記録されます。 プロパティを使用し<xref:System.ServiceProcess.ServiceBase.EventLog%2A>て、そのログに追加のメッセージを書き込むこともできます。 コンポーネントは、 <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType>この<xref:System.ServiceProcess.ServiceBase.EventLog%2A>メンバーを使用してを呼び出します。  
  
 アプリケーションログではなくカスタムイベントログに情報を報告するには<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 、 `false`をに設定し、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>コマンド処理メソッド<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>内に命令を記述して、適切なログにポストします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int with get, set" Usage="System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスの終了コードを取得または設定します。</summary>
        <value>サービスの終了コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスを停止してサービスコントロールマネージャーにエラーを通知する前に、プロパティを0以外の値に設定します。<xref:System.ServiceProcess.ServiceBase.ExitCode%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberSignature Language="F#" Value="val mutable MaxNameLength : int" Usage="System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary>サービス名の最大サイズを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ServiceName と DisplayName の両方に、サービスクラスのプロパティを設定するときに確認する必要があるサイズ制限があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberSignature Language="F#" Value="abstract member OnContinue : unit -&gt; unit&#xA;override this.OnContinue : unit -&gt; unit" Usage="serviceBase.OnContinue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> は、サービス コントロール マネージャー (SCM) によって Continue コマンドがサービスに送信されるときに実行されます。 サービスが一時中断してから通常の操作の再開時に実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーション<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の応答をに<xref:System.ServiceProcess.ServiceBase.OnPause%2A>反映するために実装します。 サービスを続行すると (サービスコンソールまたはプログラムによって)、 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>処理が実行され、サービスが再びアクティブになります。  
  
 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true`の場合、はオーバーライドされることが想定されます。  
  
 が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の場合、SCM はサービスに対して Pause または Continue 要求を渡しません。したがって、メソッドとメソッドは、実装されている場合でも呼び出されません。 `false` SCM `Pause`では、および`Continue`コントロールは、が`false`の<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>場合は無効になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberSignature Language="F#" Value="abstract member OnCustomCommand : int -&gt; unit&#xA;override this.OnCustomCommand : int -&gt; unit" Usage="serviceBase.OnCustomCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">サービスに送信されたコマンド メッセージ。</param>
        <summary>派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> は、サービス コントロール マネージャー (SCM) でカスタム コマンドがサービスに渡されるときに、実行されます。 パラメーター値が設定されているコマンドの発生時に実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>では、サービスを開始、停止、一時停止、および続行する以外に、追加の機能を指定できます。  
  
 SCM はカスタムコマンドを調べて、渡されたパラメーターが`command`サービスでサポートされているかどうかを確認しません。 カスタムコマンドがサービスに直接渡されます。 サービスが`command`パラメーターを認識しない場合は、何も実行されません。  
  
 カスタムコマンドは、 <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> <xref:System.ServiceProcess.ServiceController>コンポーネント内のステートメントによって発生します。 Switch ステートメントを使用するか、..次に、サービスで定義するカスタムコマンドを処理する条件を指定します。  
  
 アプリケーションで定義したりで<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>使用したりできるカスタムコマンドの値は、128と255の間の値のみです。 128未満の整数は、システム予約値に対応します。  
  
 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>プロパティが`true`の場合、他のすべてのコマンドと同様に、イベントログにエントリを書き込み、メソッドの実行が成功したか失敗したかを報告します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberSignature Language="F#" Value="abstract member OnPause : unit -&gt; unit&#xA;override this.OnPause : unit -&gt; unit" Usage="serviceBase.OnPause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、Pause コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。 サービスが一時中断したときに実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービス<xref:System.ServiceProcess.ServiceBase.OnPause%2A>が Pause コマンドを受信したときに発生する処理を指定するために使用します。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true`の場合、はオーバーライドされることが想定されます。  
  
 (サービスコンソールまたはプログラムによって) <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>一時停止しているサービスを続行すると、処理が実行され、サービスが再びアクティブになります。  
  
 Pause コマンドを使用すると、アプリケーションは特定のイベントにのみ応答できます。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>実行するように定義していないサービスに対しては何も行いません。  
  
 一時停止要求をサービスに送信すると、すべてのシステムリソースを解放する必要がなくなるため、システムリソースを節約できます。 たとえば、プロセスによってスレッドが開かれている場合、停止するのではなくサービスを一時停止すると、スレッドを開いたままにすることができます。サービスが続行されるときに再割り当てする必要が習得ます。 すべてのシステムリソースを解放するために Pause を定義すると、Stop コマンドのように動作します。  
  
 を<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>に`true`設定し、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> および<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>をオーバーライドして、SCM が Pause または Continue 要求をサービスに渡すときに発生する処理を指定します。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>で<xref:System.ServiceProcess.ServiceBase.OnPause%2A>処理を元に戻すには、を実装する必要があります。  
  
 が<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の場合、SCM はサービスに対して Pause または Continue 要求を渡しません。そのため、実装されている場合でも、メソッドとメソッドは呼び出されません。 `false` SCM `Pause`では、および`Continue`コントロールは、が`false`の<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>場合は無効になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="F#" Value="abstract member OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool&#xA;override this.OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool" Usage="serviceBase.OnPowerEvent powerStatus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus">システムからの電源ステータスに関する通知を示す <see cref="T:System.ServiceProcess.PowerBroadcastStatus" />。</param>
        <summary>派生クラスに実装されると、コンピューターの電源ステータスの変更時に実行されます。 これは中断モードのラップトップ コンピューターに適用されるもので、システムのシャットダウンとは異なります。</summary>
        <returns>派生クラスに実装されると、アプリケーションの要求に応じて返される値が決定します。 たとえば、<see langword="QuerySuspend" /> ブロードキャスト ステータスが渡されると、<see langword="false" /> を返すことでアプリケーションでクエリを拒否できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列挙に示されているシステムイベントが発生したときに発生する処理を指定するために使用<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>します。たとえば、コンピューターが中断モードになっている場合やバッテリ低下が示されている場合などです。 <xref:System.ServiceProcess.PowerBroadcastStatus>  
  
 <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> `true`の場合、はオーバーライドされることが想定されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit&#xA;override this.OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit" Usage="serviceBase.OnSessionChange changeDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="changeDescription">変更の種類を識別する構造体。</param>
        <summary>変更イベントがターミナル サーバー セッションから受信された場合に実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの実行<xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>を有効`true`にするには、プロパティをに設定する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="serviceBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、システムがシャット ダウンされるときに実行されます。 システムがシャット ダウンする直前に発生する処理を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 システム<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>のシャットダウン時に発生する処理を指定するには、を使用します。  
  
 このイベントは、コンピューターの電源がオフになっている場合ではなく、オペレーティングシステムがシャットダウンされた場合にのみ発生します。  
  
 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>プロパティが<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> `true`の場合、はオーバーライドされることが想定されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnStart : string[] -&gt; unit&#xA;override this.OnStart : string[] -&gt; unit" Usage="serviceBase.OnStart args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Start コマンドによって渡されたデータ。</param>
        <summary>派生クラスに実装されると、Start コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるとき、またはオペレーティング システムが (自動的に起動するサービスのために) 起動するときに実行されます。 サービスが開始するときに実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービス<xref:System.ServiceProcess.ServiceBase.OnStart%2A>が Start コマンドを受信したときに発生する処理を指定するために使用します。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>は、サービスの動作を指定するメソッドです。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>では、データを渡す方法として引数を受け取ることができますが、この使用方法はほとんどありません。  
  
> [!CAUTION]
>  に含まれている必要がある処理は、コンストラクター <xref:System.ServiceProcess.ServiceBase.OnStart%2A>を使用して実行しないでください。 を<xref:System.ServiceProcess.ServiceBase.OnStart%2A>使用して、サービスのすべての初期化を処理します。 コンストラクターは、サービスの実行時ではなく、アプリケーションの実行可能ファイルの実行時に呼び出されます。 実行可能ファイルは<xref:System.ServiceProcess.ServiceBase.OnStart%2A>、の前に実行されます。 たとえば、SCM が既にメモリ内にオブジェクトを保持しているために、コンストラクターが再度呼び出されることはありません。 が<xref:System.ServiceProcess.ServiceBase.OnStop%2A> で<xref:System.ServiceProcess.ServiceBase.OnStart%2A>はなくコンストラクターで割り当てられたリソースを解放した場合、2回目にサービスが呼び出されたときに必要なリソースが再度作成されることはありません。  
  
 サービスのインストーラーのをに設定する<xref:System.ServiceProcess.ServiceInstaller.StartType%2A> <xref:System.ServiceProcess.ServiceStartMode.Automatic>ことによって、コンピューターが再起動したときにサービスを自動的に開始するように設定できます。 このような状況で<xref:System.ServiceProcess.ServiceBase.OnStart%2A>は、はシステムの起動時に呼び出されます。  
  
 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>は、派生クラスでオーバーライドされることが想定されています。 サービスを有効にするために<xref:System.ServiceProcess.ServiceBase.OnStart%2A>は<xref:System.ServiceProcess.ServiceBase.OnStop%2A> 、との両方がサービスクラスに実装されている必要があります。  
  
 Main メソッドではなく、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>メソッド内のサービスの初期化引数を処理します。 `args`パラメーター配列内の引数は、サービスコンソールでサービスの [プロパティ] ウィンドウで手動で設定できます。 コンソールに入力した引数は保存されません。これらは、サービスがコントロールパネルから開始されたときに、一度にサービスに渡されます。 サービスが自動的に開始されるときに存在する必要がある引数は、サービスのレジストリキーの ImagePath 文字列値 (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name) に配置できます >*). レジストリから引数を取得するには、 <xref:System.Environment.GetCommandLineArgs%2A>メソッドを使用します`string[] imagePathArgs = Environment.GetCommandLineArgs();`。たとえば、のようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberSignature Language="F#" Value="abstract member OnStop : unit -&gt; unit&#xA;override this.OnStop : unit -&gt; unit" Usage="serviceBase.OnStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、Stop コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。 サービスが実行を停止したときに実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービス<xref:System.ServiceProcess.ServiceBase.OnStop%2A>が Stop コマンドを受信したときに発生する処理を指定するために使用します。  
  
 SCM は、stop コマンドを受け取ると、の<xref:System.ServiceProcess.ServiceBase.CanStop%2A>値を使用して、サービスが停止コマンドを受け入れるかどうかを確認します。 が<xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A>の場合、Stop コマンドがサービスに渡され、メソッドが定義されている場合は呼び出されます。 `true` が<xref:System.ServiceProcess.ServiceBase.OnStop%2A>サービスに実装されていない場合、SCM は Stop コマンドを処理します。  
  
 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> が`false`の場合、SCM は Stop コマンドを無視します。 サービスに渡されません。 Stop コマンドはを返し、例外をスローします。  
  
 <xref:System.ServiceProcess.ServiceBase.OnStop%2A>は、派生クラスでオーバーライドされることが想定されています。 サービスを有効にするために<xref:System.ServiceProcess.ServiceBase.OnStart%2A>は<xref:System.ServiceProcess.ServiceBase.OnStop%2A> 、との両方がサービスクラスに実装されている必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.RequestAdditionalTime : int -&gt; unit" Usage="serviceBase.RequestAdditionalTime milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="milliseconds">要求する時間 (ミリ秒単位)。</param>
        <summary>保留中の操作について時間の延長を要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnStart%2A>メソッドは、オーバーライドされた、、、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>の各メソッドによって呼び出され、保留中の操作の追加時間を要求し、サービスコントロールマネージャー (SCM) が<xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A>サービスが応答していません。  保留中の操作が続行、一時停止、開始、または停止<xref:System.InvalidOperationException>のいずれでもない場合は、がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスは保留状態ではありません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>サービスの実行可能ファイルのメイン エントリ ポイントを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service">開始するサービスを示す <see cref="T:System.ServiceProcess.ServiceBase" />。</param>
        <summary>サービス コントロール マネージャー (SCM) を使用してサービスの実行可能ファイルを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスの実行可能ファイル`main()`の関数でこのオーバーロードを呼び出して、サービスをサービスコントロールマネージャーに登録します。 を呼び出し<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>た後、サービスコントロールマネージャーは Start コマンドを発行します。これにより、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスのメソッドが呼び出されます。 開始コマンドが実行されるまで、サービスは開始されません。  
  
 メソッドは、Windows フォームアプリケーションの場合と<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>ほぼ同じ方法で呼び出されます。 <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>  
  
 `service`が<xref:System.ServiceProcess.ServiceBase.AutoLog%2A> の`true`場合、パラメーターで指定されたサービスを開始できなかった場合に、エントリがイベントログに書き込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="service" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase[] -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services">ServiceBase インスタンスの配列。開始するサービスを示します。</param>
        <summary>複数サービスの実行可能ファイルをサービス コントロール マネージャー (SCM) に登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスの実行可能ファイル`main()`の関数でこのオーバーロードを呼び出して、サービスをサービスコントロールマネージャーに登録します。 を呼び出し<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>た後、サービスコントロールマネージャーは Start コマンドを発行します。これに<xref:System.ServiceProcess.ServiceBase.OnStart%2A>より、サービスのメソッドが呼び出されます。 開始コマンドが実行されるまで、サービスは開始されません。  
  
 メソッドは、Windows フォームアプリケーションの<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>メソッドとほとんど同じ方法で呼び出されます。 <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> が`true`の場合、配列内のいずれかのサービスの起動に失敗すると、エントリがイベントログに書き込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">開始するサービスが指定されていません。 配列が <see langword="null" /> または空である可能性があります。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceHandle : nativeint" Usage="System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスのサービス コントロール ハンドルを取得します。</summary>
        <value>サービスのサービス コントロール ハンドルを含む <see cref="T:System.IntPtr" /> 構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスコントロールハンドルは、サービスコントロールマネージャー (SCM) との通信に使用されます。  ハンドルは、アンマネージ`SetServiceStatus`関数を使用して、呼び出し元のサービスのサービスコントロールマネージャーの状態情報を更新するために使用できます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberSignature Language="F#" Value="member this.ServiceMainCallback : int * nativeint -&gt; unit" Usage="serviceBase.ServiceMainCallback (argCount, argPointer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argPointer" Type="System.IntPtr" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="argCount">引数配列内の引数の数。</param>
        <param name="argPointer">引数配列を指す <see cref="T:System.IntPtr" /> 構造体。</param>
        <summary>コマンド ハンドラーを登録し、サービスを開始します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムでサービスを識別するために使用される短い名前を取得または設定します。</summary>
        <value>サービスの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 は<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスをサービスコントロールマネージャーに識別します。 このプロパティの値は、対応するインストーラークラスの<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>プロパティでサービスに記録されている名前と同じである必要があります。 コードでは、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>通常、サービスのは実行可能ファイル`main()`の関数で設定されます。  
  
 は、 <xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティに<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>関連付けられているを指定するためにも使用されます。 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> これ<xref:System.ServiceProcess.ServiceBase.EventLog%2A>は、サービスコマンド情報をアプリケーションログに書き込むインスタンスです。  
  
 イベント<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>ログのソース文字列を提供するは、サービスがイベントログに書き込む前に設定する必要があります。 ソース名を設定する前にイベントログにアクセスしようとすると、例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <exception cref="T:System.ArgumentException">指定された名前が、長さ 0 の文字列であるか、または <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /> より長い文字列です。または、指定された名前にスラッシュまたはバック スラッシュ文字が含まれています。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="serviceBase.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サービスの実行を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.ServiceProcess.ServiceBase.Stop%2A>は、停止が保留中であることを示すようにサービス<xref:System.ServiceProcess.ServiceBase.OnStop%2A>の状態を設定し、メソッドを呼び出します。  アプリケーションが停止されると、サービスの状態が [停止] に設定されます。 アプリケーションがホステッドサービスの場合、アプリケーションドメインはアンロードされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>
