<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a235e77899566becd85a0a9f0cefc29c9b9aea4" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53476793" /></Metadata><TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ServiceBase = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Install.UserNTServiceDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>サービス アプリケーションの一部として存在するサービスの基本クラスを提供します。 <see cref="T:System.ServiceProcess.ServiceBase" /> は、新しいサービス クラスの作成時に派生される必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生<xref:System.ServiceProcess.ServiceBase>サービス アプリケーションで、サービス クラスを定義する場合。 有効なサービスのすべての上書き、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>と<xref:System.ServiceProcess.ServiceBase.OnStop%2A>メソッド。 他の機能をオーバーライドできます<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の特定の動作をサービスの状態の変更に応答します。  
  
 サービスは、ユーザー インターフェイスをサポートしていない実行時間の長い実行可能ファイルとユーザーのログオン アカウントで実行します。 サービスは、すべてのユーザー、コンピューターにログオンすることがなく実行できます。  
  
 既定では、サービスは、管理者アカウントと同じではないシステム アカウントで実行します。 システム アカウントの権限を変更することはできません。 また、使用することができます、<xref:System.ServiceProcess.ServiceProcessInstaller>サービスを実行するユーザー アカウントを指定します。  
  
 実行可能ファイルは、1 つ以上のサービスを含めることができますが、個別に含める必要があります<xref:System.ServiceProcess.ServiceInstaller>サービスごとにします。 <xref:System.ServiceProcess.ServiceInstaller>インスタンス システム サービスに登録します。 インストーラーは、各サービスをサービスのコマンドを記録するために使用できるイベント ログを関連付けます。 `main()`実行可能ファイルで関数を定義するサービスを実行する必要があります。 サービスの現在の作業ディレクトリは、実行可能ファイルが配置されているディレクトリではなく、システム ディレクトリです。  
  
 サービスを開始すると、システムは、実行可能ファイルを検索され、実行、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>実行可能ファイル内に含まれる、そのサービスのメソッド。 ただし、サービスを実行してない実行可能ファイルを実行すると同じです。 実行可能ファイルは、サービスのみを読み込みます。 サービス コントロール マネージャーから、(たとえば、開始および停止)、サービスがアクセスします。  
  
 実行可能ファイルの呼び出し、<xref:System.ServiceProcess.ServiceBase>派生したクラスのコンス トラクターの最初の時間がサービスの開始を呼び出すことです。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>コンス トラクターの実行直後に、コマンド処理メソッドが呼び出されます。 によって実行されるコンス トラクターによって実行される処理を分離する必要があるため、コンス トラクターは最初に、サービスが読み込まれた後にもう一度実行されません<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。 すべてのリソースを解放することができますを<xref:System.ServiceProcess.ServiceBase.OnStop%2A>で作成する必要があります<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。 コンス トラクターでリソースを作成することを防止、サービスが後にもう一度開始する場合に正しく作成されている<xref:System.ServiceProcess.ServiceBase.OnStop%2A>リソースがリリースされました。  
  
 サービス コントロール マネージャー (SCM) は、サービスと対話する方法を提供します。 SCM を使用すると、開始、停止、一時停止、続行、およびカスタム コマンドをサービスに渡します。 SCM の値を使用して<xref:System.ServiceProcess.ServiceBase.CanStop%2A>と<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>サービスが停止を受け入れるかどうかを確認するのには、一時停止、またはコマンドを続行します。 停止、一時停止、および続行は SCM のコンテキスト メニューのみの場合に有効になっている、対応するプロパティ<xref:System.ServiceProcess.ServiceBase.CanStop%2A>または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`true`サービス クラスにします。 コマンドがサービスに渡された有効な場合、および<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>が呼び出されます。 場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>、または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、対応するコマンド処理メソッド (など<xref:System.ServiceProcess.ServiceBase.OnStop%2A>) は処理されず、メソッドを実装している場合でもです。  
  
 使用することができます、<xref:System.ServiceProcess.ServiceController>どのような SCM をプログラムで実行するためには、ユーザー インターフェイスを使用します。 コンソールで使用できるタスクを自動化できます。 場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>、または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`true`が対応するコマンド処理メソッドを実装していない (など<xref:System.ServiceProcess.ServiceBase.OnStop%2A>)、システムが例外をスローし、コマンドは無視されます。  
  
 実装する必要はありません<xref:System.ServiceProcess.ServiceBase.OnStart%2A>、 <xref:System.ServiceProcess.ServiceBase.OnStop%2A>、またはその他の方法で<xref:System.ServiceProcess.ServiceBase>します。 ただし、サービスの動作は、「<xref:System.ServiceProcess.ServiceBase.OnStart%2A>ので少なくとも、このメンバーをオーバーライドする必要があります。 `main()`実行可能ファイルの関数は、実行可能ファイル、サービス コントロール マネージャーでサービスを呼び出すことによって登録、<xref:System.ServiceProcess.ServiceBase.Run%2A>メソッド。 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>のプロパティ、<xref:System.ServiceProcess.ServiceBase>オブジェクトに渡される、<xref:System.ServiceProcess.ServiceBase.Run%2A>メソッドに一致する必要があります、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>そのサービスのサービスのインストーラーのプロパティ。  
  
 使用することができます`InstallUtil.exe`サービス、システムをインストールします。  
  
> [!NOTE]
>  サービスの呼び出しが、どちらの通知を受け取るアプリケーション イベント ログ以外のログを指定することができます、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>も<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティは、カスタムのログに書き込むことができます。 設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`自動ログ記録を使用したくない場合。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceProcess.ServiceBase" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスを作成しないでください、<xref:System.ServiceProcess.ServiceBase>クラス。 派生させる代わりに、<xref:System.ServiceProcess.ServiceBase>および派生クラスをインスタンス化します。 最小値から継承されたクラスのコンス トラクターを実装する必要があります<xref:System.ServiceProcess.ServiceBase>を設定するには、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>コンポーネントにします。 その他の処理は、コンス トラクターで具体的には必要ありません。 ほとんどの初期化を処理する必要があります<xref:System.ServiceProcess.ServiceBase.OnStart%2A>コンス トラクターではなく。 それが停止した後にサービスを再起動すると、オブジェクトは再初期化する保証はありません。  
  
 派生クラスでコンス トラクターをオーバーライドする場合は、コードで基底クラスのコンス トラクターを呼び出します。  
  
 <xref:System.ServiceProcess.ServiceBase>コンス トラクターのセット<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`true`します。 サービス コントロール マネージャー (SCM) から、サービスに対する呼び出しを自動的にログオンしない場合は、設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`します。  
  
 実行可能ファイルに 1 つのサービスが含まれている場合、システムは、開始は、SCM からを選択し、Stop が呼び出された場合、デストラクターが実行されるサービスのコンス トラクターを呼び出します。  
  
 実行可能ファイルに複数のサービスが含まれている場合、実行可能ファイルのすべてのサービスに対して呼び出されるコンス トラクターは、1 つのサービスの開始を呼び出すとが、指定したサービスのみを開始します。 すべてサービスが停止した、個別にではなく各サービスが停止するときに、サービスのデストラクターは一緒に実行されます。  
  
> [!NOTE]
>  基底クラスのコンス トラクターをオーバーライドする場合は、派生クラスのコンス トラクターで明示的に呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoLog : bool with get, set" Usage="System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログで、Start、Stop、Pause、Continue の各コマンドをレポートするかどうかを示します。</summary>
        <value>イベント ログで情報をレポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`true`サービスの起動、停止、一時停止、状態変更情報とコマンドの失敗を報告、アプリケーション イベント ログを使用し、サービスにイベントを続行するように指示します。 ログのサービスの名前が使用される<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>します。  
  
 アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`と手順については、コマンド処理メソッド内での書き込み<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>適切なログを投稿します。  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>、ソース文字列、イベント ログを提供する必要があります前に設定する、サービス、イベント ログへの書き込みを試みます。 ソース名を設定する前に、イベント ログにアクセスしようとして例外をスローします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandlePowerEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスで、コンピューターの電源ステータスの変更の通知を処理できるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> クラスで示されたコンピューターの電源ステータスの変更をサービスで処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、コンピューターの電源状態の変更では、サービス コントロール マネージャー (SCM) を確認します、サービスがの値を使用して、電源イベント コマンドを受け入れるかどうか<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>します。  
  
 場合<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>は`true`、コマンドは、サービスに渡されると、<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>定義されている場合、メソッドが呼び出されます。 場合<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>は実装されていません、SCM が空の基底クラスから電源イベントを処理する、派生クラスで<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスの開始後にこのプロパティが変更されています。</exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandleSessionChangeEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ターミナル サーバー セッションから受信したセッション変更イベントをサービスで処理できるかどうかを示す値を取得または設定します。</summary>
        <value>ターミナル サーバーのセッション変更イベントをサービスで処理できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">サービスの開始後にこのプロパティが変更されています。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanPauseAndContinue : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスを一時中断および再開できるかどうかを示す値を取得または設定します。</summary>
        <value>サービスを一時中断できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値を設定、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>サービスのコンス トラクターでプロパティ。  
  
 サービスを一時停止すると、それが何を停止します。 続行すると、サービス (またはサービス コントロール マネージャーからプログラムを使用)、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>を実行します。  
  
 一時停止要求をサービスに送信すると、システム リソースを節約できます。 一時停止は、すべてのシステム リソースを解放しないことがありますが、停止します。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>よりも少ないの処理を実行する多くの場合、実装は<xref:System.ServiceProcess.ServiceBase.OnStop%2A>と<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。  
  
 ときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`true`、オーバーライド<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>サービス コントロール マネージャー (SCM) は、サービスを一時停止または続行要求を通過するときに発生する処理を指定します。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 元に戻すで処理するために実装<xref:System.ServiceProcess.ServiceBase.OnPause%2A>します。  
  
 場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、SCM に合格しない一時停止または続行要求は、そのため、サービスに、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません。 SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanShutdown : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムのシャットダウン時に、サービスにそれを通知する必要があるかどうかを示す値を取得または設定します。</summary>
        <value>システムのシャットダウン時にサービスに通知する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>は`true`システムがシャット ダウン時に、サービスに通知します。 シャット ダウン時に、<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>派生クラスで実装されている場合、メソッドが呼び出されます。  
  
> [!NOTE]
>  発生することは、システムにのみ、 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> ; を実行するメソッド、サービスは、それを呼び出すことができますが、これは推奨されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanStop : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスを開始した後に停止できるかどうかを示す値を取得または設定します。</summary>
        <value>サービスを停止でき、<see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> メソッドを呼び出すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 停止がサービスに呼び出されると、サービス コントロール マネージャー (SCM) は、サービスがの値を使用して停止コマンドを受け入れるかどうかを確認<xref:System.ServiceProcess.ServiceBase.CanStop%2A>します。 ほとんどのサービスでの値の<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`がいくつかのオペレーティング システム サービスでは、たとえば、できないようにするユーザーがそれらを停止します。  
  
 場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`、Stop コマンドは、サービスに渡されると、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>定義されている場合、メソッドが呼び出されます。 場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、停止が空の基底クラスを通じてコマンド SCM ハンドル、派生クラスで実装されていない<xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="serviceBase.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.ServiceProcess.ServiceBase" /> で使用されていたリソース (メモリを除く) を解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.ServiceProcess.ServiceBase.Dispose%2A>、派生クラスで (これによってで、<xref:System.ServiceProcess.ServiceBase>クラス)、派生クラスの使用が終了するときにします。 <xref:System.ServiceProcess.ServiceBase.Dispose%2A>メソッドを使用できない状態で、派生クラスのままです。 呼び出した後<xref:System.ServiceProcess.ServiceBase.Dispose%2A>、派生クラスへのすべての参照を解放する必要がありますと<xref:System.ServiceProcess.ServiceBase>が占有されたメモリをガベージ コレクションによってクリアできるようにします。  
  
> [!NOTE]
>  常に呼び出す<xref:System.ServiceProcess.ServiceBase.Dispose%2A>から派生したクラスへの参照を解放する前に<xref:System.ServiceProcess.ServiceBase>します。 それ以外の場合、リソース<xref:System.ServiceProcess.ServiceBase>派生クラスを使用しているがガベージ コレクションは、オブジェクトのデストラクターを呼び出すまで解放しないでください。  
  
 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> プロセスでコードをよく実装される<xref:System.ServiceProcess.ServiceBase.OnPause%2A>への呼び出しと組み合わせた、<xref:System.ServiceProcess.ServiceBase.Dispose%2A>します。 派生クラスで選択した場合は、実装するためによく使用される<xref:System.ServiceProcess.ServiceBase.OnStart%2A>を任意に割り当てる<xref:System.ServiceProcess.ServiceBase.Dispose%2A>リリースします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventLog : System.Diagnostics.EventLog" Usage="System.ServiceProcess.ServiceBase.EventLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Start や Stop などのサービス コマンドの呼び出し通知をアプリケーション イベント ログに書き込むために使用できるイベント ログを取得します。</summary>
        <value>ソースがアプリケーション ログに登録されている <see cref="T:System.Diagnostics.EventLog" /> インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンス トラクターによって初期化、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティを持つインスタンスを<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>と<xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType>プロパティを設定します。 ソースが、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスのログは、コンピューターのアプリケーション ログとします。 これらの値は、自動的に設定され、サービスのコマンドの自動ログ記録は変更できません。  
  
 ときに<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`開始、停止、一時停止、続行、およびカスタム コマンドは、アプリケーション イベント ログに自動的に記録します。 使用することができます、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>ログにも追加のメッセージを記述するプロパティ。 コンポーネントの呼び出し<xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType>これを使用して<xref:System.ServiceProcess.ServiceBase.EventLog%2A>メンバー。  
  
 アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`と手順については、コマンド処理メソッド内での書き込み<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>適切なログを投稿します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int with get, set" Usage="System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスの終了コードを取得または設定します。</summary>
        <value>サービスの終了コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.ServiceProcess.ServiceBase.ExitCode%2A>プロパティをサービス コントロール マネージャーにエラーを示すサービスを停止する前に 0 以外の値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberSignature Language="F#" Value="val mutable MaxNameLength : int" Usage="System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary>サービス名の最大サイズを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ServiceName と DisplayName 両方のサイズは制限がありますサービス クラスのプロパティを設定するときに観察する必要。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberSignature Language="F#" Value="abstract member OnContinue : unit -&gt; unit&#xA;override this.OnContinue : unit -&gt; unit" Usage="serviceBase.OnContinue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> は、サービス コントロール マネージャー (SCM) によって Continue コマンドがサービスに送信されるときに実行されます。 サービスが一時中断してから通常の操作の再開時に実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>へのアプリケーションの応答をミラーリングする<xref:System.ServiceProcess.ServiceBase.OnPause%2A>します。 (いずれかまたはプログラムによって、サービス コンソール)、サービスを続行すると、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>もう一度アクティブな処理を実行し、サービスになります。  
  
 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティは`true`します。  
  
 場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、SCM に合格しない一時停止または続行要求は、そのため、サービスに、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません。 SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberSignature Language="F#" Value="abstract member OnCustomCommand : int -&gt; unit&#xA;override this.OnCustomCommand : int -&gt; unit" Usage="serviceBase.OnCustomCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">サービスに送信されたコマンド メッセージ。</param>
        <summary>派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> は、サービス コントロール マネージャー (SCM) でカスタム コマンドがサービスに渡されるときに、実行されます。 パラメーター値が設定されているコマンドの発生時に実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> 起動、停止、一時停止と継続的なサービス以外の追加機能を指定できます。  
  
 SCM がサービスをサポートするかどうかを確認するカスタム コマンドを調べない、`command`でパラメーターが渡されます。 サービスに直接カスタム コマンドを渡します。 サービスが認識しない場合、`command`パラメーターは何も行いません。  
  
 カスタム コマンドがによって発生した、<xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>内のステートメントを<xref:System.ServiceProcess.ServiceController>コンポーネント。 Switch ステートメントを使用する場合、または.サービスを定義するカスタム コマンドを処理する条件。  
  
 アプリケーションで定義またはで使用できるカスタム コマンドの値のみ<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>128 ~ 255 の範囲は、します。 128 以下の整数は、システム予約値に対応します。  
  
 場合、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>プロパティは`true`、他のすべてのコマンドと同様に、カスタムのコマンドは、メソッドの実行が成功または失敗するかどうかを報告するイベント ログにエントリを書き込みます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberSignature Language="F#" Value="abstract member OnPause : unit -&gt; unit&#xA;override this.OnPause : unit -&gt; unit" Usage="serviceBase.OnPause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、Pause コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。 サービスが一時中断したときに実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceBase.OnPause%2A>サービスが一時停止コマンドを受信するときに発生する処理を指定します。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティは`true`します。  
  
 (いずれかまたはプログラムによって、サービス コンソール)、一時停止したサービスを続行すると、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>処理が実行され、サービスが再度アクティブになります。  
  
 一時停止コマンドには、特定のイベントに対応するため、アプリケーションのみが許可されます。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 実行する処理を定義していないサービスに何もしません。  
  
 一時停止要求をサービスに送信すると、一時停止は、すべてのシステム リソースを解放しない必要があるためにシステム リソースを節約できます。 たとえば、スレッドが停止することができます、スレッドが、開いたままにするのではなく、サービスを一時停止、プロセスによって開かれている場合、サービスを継続する場合に再割り当ての必要があります。 すべてのシステム リソースを解放する一時停止を定義する場合は、停止コマンドと同様に動作します。  
  
 設定<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>に`true`、オーバーライドと<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>SCM がサービスを一時停止または続行要求を通過するときに発生する処理を指定します。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 元に戻すで処理するために実装<xref:System.ServiceProcess.ServiceBase.OnPause%2A>します。  
  
 場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、SCM に合格しない一時停止または続行要求は、そのため、サービスに、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません。 SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="F#" Value="abstract member OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool&#xA;override this.OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool" Usage="serviceBase.OnPowerEvent powerStatus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus">システムからの電源ステータスに関する通知を示す <see cref="T:System.ServiceProcess.PowerBroadcastStatus" />。</param>
        <summary>派生クラスに実装されると、コンピューターの電源ステータスの変更時に実行されます。 これは中断モードのラップトップ コンピューターに適用されるもので、システムのシャットダウンとは異なります。</summary>
        <returns>派生クラスに実装されると、アプリケーションの要求に応じて返される値が決定します。 たとえば、<see langword="QuerySuspend" /> ブロードキャスト ステータスが渡されると、<see langword="false" /> を返すことでアプリケーションでクエリを拒否できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>にシステム イベントが示されているときに発生する処理を指定する、<xref:System.ServiceProcess.PowerBroadcastStatus>列挙ときに発生します - たとえば、コンピューターがサスペンド モードで配置またはバッテリ電源を示します。  
  
 <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>プロパティは`true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit&#xA;override this.OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit" Usage="serviceBase.OnSessionChange changeDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" />
      </Parameters>
      <Docs>
        <param name="changeDescription">変更の種類を識別する構造体。</param>
        <summary>変更イベントがターミナル サーバー セッションから受信された場合に実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定する必要があります、<xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>プロパティを`true`このメソッドの実行を有効にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="serviceBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、システムがシャット ダウンされるときに実行されます。 システムがシャット ダウンする直前に発生する処理を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>システム シャット ダウンするときに発生する処理を指定します。  
  
 このイベントは、コンピューターが電源オフの場合は、オペレーティング システムをシャット ダウン時にのみ発生します。  
  
 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>プロパティは`true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnStart : string[] -&gt; unit&#xA;override this.OnStart : string[] -&gt; unit" Usage="serviceBase.OnStart args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Start コマンドによって渡されたデータ。</param>
        <summary>派生クラスに実装されると、Start コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるとき、またはオペレーティング システムが (自動的に起動するサービスのために) 起動するときに実行されます。 サービスが開始するときに実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスが開始コマンドを受信するときに発生する処理を指定します。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> サービスの動作を指定する方法です。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> データを渡す手段として引数を受け取ることができますが、この使用状況はまれです。  
  
> [!CAUTION]
>  必要がある処理を実行するコンス トラクターを使用しないでください<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。 使用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスのすべての初期化を処理します。 コンス トラクターは、アプリケーションの実行可能ファイルときに呼び出されますが、サービスが実行時ではなく、実行します。 実行可能ファイルを実行する前に<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。 続行すると、たとえば、コンス トラクターは再度呼び出されません SCM は、メモリ内のオブジェクトを既に保持しているためです。 場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>コンス トラクターではなくで割り当てられているリソースを解放<xref:System.ServiceProcess.ServiceBase.OnStart%2A>、必要なリソースを作成できませんが 2 番目に、サービスが呼び出されたときにもう一度です。  
  
 設定してコンピューターを再起動するときに自動的に開始するサービスを設定することができます、 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on に、サービスのインストーラー<xref:System.ServiceProcess.ServiceStartMode.Automatic>します。 このような場合は、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>がシステム起動時に呼び出されます。  
  
 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 派生クラスでオーバーライドされると想定されます。 有効に機能するサービスの<xref:System.ServiceProcess.ServiceBase.OnStart%2A>と<xref:System.ServiceProcess.ServiceBase.OnStop%2A>両方のサービス クラスで実装する必要があります。  
  
 サービスの初期化の引数を処理、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> Main メソッドではなく、メソッド。 引数、`args`パラメーター配列は、サービス コンソールで、サービスのプロパティ ウィンドウで手動で設定することができます。 コンソールで入力した引数は保存されません。コントロール パネルから起動されると、サービスを一時的にサービスに渡さ、れます。 サービスが自動的に起動すると存在する必要があります引数は、サービスのレジストリ キーの ImagePath 文字列値に配置できます (hkey_local_machine \system\currentcontrolset\services\\  *\<サービス名 >*)。 使用して、レジストリから引数を取得することができます、<xref:System.Environment.GetCommandLineArgs%2A>メソッド、たとえば:`string[] imagePathArgs = Environment.GetCommandLineArgs();`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberSignature Language="F#" Value="abstract member OnStop : unit -&gt; unit&#xA;override this.OnStop : unit -&gt; unit" Usage="serviceBase.OnStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスに実装されると、Stop コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。 サービスが実行を停止したときに実行されるアクションを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceProcess.ServiceBase.OnStop%2A>サービスを停止するコマンドを受信するときに発生する処理を指定します。  
  
 値を使用して、SCM は、停止コマンドを受信するときに<xref:System.ServiceProcess.ServiceBase.CanStop%2A>をサービスが停止コマンドを受け入れるかどうかを確認します。 場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`、Stop コマンドは、サービスに渡されると、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>定義されている場合、メソッドが呼び出されます。 場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>が実装されていないサービスでは、SCM は、停止コマンドを処理します。  
  
 場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`false`、SCM Stop コマンドは無視されます。 サービスには渡されません。 Stop コマンドを返し、例外をスローします。  
  
 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 派生クラスでオーバーライドされると想定されます。 有効に機能するサービスの<xref:System.ServiceProcess.ServiceBase.OnStart%2A>と<xref:System.ServiceProcess.ServiceBase.OnStop%2A>両方のサービス クラスで実装する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.RequestAdditionalTime : int -&gt; unit" Usage="serviceBase.RequestAdditionalTime milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">要求する時間 (ミリ秒単位)。</param>
        <summary>保留中の操作について時間の延長を要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A>メソッドが呼び出されるもので、オーバーライドされた<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>追加時間的なマーキングにサービス コントロール マネージャー (SCM) を防ぐために、保留中の操作を要求する方法、応答しないサービス。  保留中の操作が続行、一時停止、開始または停止がない場合、<xref:System.InvalidOperationException>がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスは保留状態ではありません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>サービスの実行可能ファイルのメイン エントリ ポイントを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service">開始するサービスを示す <see cref="T:System.ServiceProcess.ServiceBase" />。</param>
        <summary>サービス コントロール マネージャー (SCM) を使用してサービスの実行可能ファイルを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードを呼び出して、`main()`実行可能ファイル、サービス コントロール マネージャーでサービスを登録するサービスの機能です。 呼び出した後<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>、サービス コントロール マネージャーへの呼び出しで開始コマンドの発行、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスのメソッド。 サービスは、Start コマンドが実行されるまでは開始されません。  
  
 <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>と同様のメソッドが呼び出される<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>Windows フォーム アプリケーションです。  
  
 場合<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`、によって、サービスが指定されている場合、イベント ログにエントリが書き込まれる、`service`パラメーターの起動に失敗します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="service" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase[] -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services">ServiceBase インスタンスの配列。開始するサービスを示します。</param>
        <summary>複数サービスの実行可能ファイルをサービス コントロール マネージャー (SCM) に登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードを呼び出して、`main()`実行可能ファイル、サービス コントロール マネージャーでサービスを登録するサービスの機能です。 呼び出した後<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>、サービス コントロール マネージャーへの呼び出しと、[開始] コマンドの発行、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービス内のメソッド。 開始コマンドが実行されるまで、サービスは開始されません。  
  
 <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>メソッドが呼び出されると同様、 <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> Windows フォーム アプリケーションのメソッド。  
  
 場合<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`配列内のサービスが開始に失敗した場合、イベント ログにエントリが書き込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">開始するサービスが指定されていません。 配列が <see langword="null" /> または空である可能性があります。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceHandle : nativeint" Usage="System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスのサービス コントロール ハンドルを取得します。</summary>
        <value>サービスのサービス コントロール ハンドルを含む <see cref="T:System.IntPtr" /> 構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービス コントロール ハンドルは、サービス コントロール マネージャー (SCM) との通信に使用されます。  ハンドルを使用して、管理されていないを使用して呼び出し元のサービスのサービス コントロール マネージャーの状態情報を更新すること`SetServiceStatus`関数。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードにアクセスします。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberSignature Language="F#" Value="member this.ServiceMainCallback : int * nativeint -&gt; unit" Usage="serviceBase.ServiceMainCallback (argCount, argPointer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" />
        <Parameter Name="argPointer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="argCount">引数配列内の引数の数。</param>
        <param name="argPointer">引数配列を指す <see cref="T:System.IntPtr" /> 構造体。</param>
        <summary>コマンド ハンドラーを登録し、サービスを開始します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムでサービスを識別するために使用される短い名前を取得または設定します。</summary>
        <value>サービスの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービス コントロール マネージャーにサービスを識別します。 このプロパティの値は、そのサービスに対して記録されている名前と同じである必要があります、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>対応するインストーラー クラスのプロパティ。 コードでは、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスの通常は設定、`main()`実行可能ファイルの関数。  
  
 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>指定にも使用されて、<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>に関連付けられている、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティ。 これは、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>サービス コマンドの情報をアプリケーション ログに書き込むインスタンスです。  
  
 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>、ソース文字列、イベント ログを提供する必要があります前に設定するサービスは、イベント ログを書き込みます。 スローされる例外が発生したソース名を設定する前にイベント ログにアクセスしようとしています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">サービスが既に開始されています。 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> プロパティは、サービスが開始された後は変更できません。</exception>
        <exception cref="T:System.ArgumentException">指定された名前が、長さ 0 の文字列であるか、または <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /> より長い文字列です。または、指定された名前にスラッシュまたはバック スラッシュ文字が含まれています。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="serviceBase.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サービスの実行を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceBase.Stop%2A>メソッドは、サービスの状態、停止が保留中であることを示すと呼び出しを設定、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>メソッド。  アプリケーションが停止した後、サービスの状態が停止に設定します。 アプリケーションがホステッド サービスの場合は、アプリケーション ドメインがアンロードします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>