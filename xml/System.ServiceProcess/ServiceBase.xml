<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d6cc6133d16271bd4d1423cc08106873390071c" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52217200" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ServiceBase = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Install.UserNTServiceDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4d2e6-101">サービス アプリケーションの一部として存在するサービスの基本クラスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d2e6-101">Provides a base class for a service that will exist as part of a service application.</span>
      </span>
      <span data-ttu-id="4d2e6-102">
        <see cref="T:System.ServiceProcess.ServiceBase" /> は、新しいサービス クラスの作成時に派生される必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d2e6-102">
          <see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-103">派生<xref:System.ServiceProcess.ServiceBase>サービス アプリケーションで、サービス クラスを定義する場合。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-103">Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application.</span></span> <span data-ttu-id="4d2e6-104">有効なサービスのすべての上書き、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>と<xref:System.ServiceProcess.ServiceBase.OnStop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-104">Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods.</span></span> <span data-ttu-id="4d2e6-105">他の機能をオーバーライドできます<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>の特定の動作をサービスの状態の変更に応答します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-105">For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.</span></span>  
  
 <span data-ttu-id="4d2e6-106">サービスは、ユーザー インターフェイスをサポートしていない実行時間の長い実行可能ファイルとユーザーのログオン アカウントで実行します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-106">A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</span></span> <span data-ttu-id="4d2e6-107">サービスは、すべてのユーザー、コンピューターにログオンすることがなく実行できます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-107">The service can run without any user being logged on to the computer.</span></span>  
  
 <span data-ttu-id="4d2e6-108">既定では、サービスは、管理者アカウントと同じではないシステム アカウントで実行します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-108">By default, services run under the System account, which is not the same as the Administrator account.</span></span> <span data-ttu-id="4d2e6-109">システム アカウントの権限を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-109">You cannot change the rights of the System account.</span></span> <span data-ttu-id="4d2e6-110">また、使用することができます、<xref:System.ServiceProcess.ServiceProcessInstaller>サービスを実行するユーザー アカウントを指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-110">Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.</span></span>  
  
 <span data-ttu-id="4d2e6-111">実行可能ファイルは、1 つ以上のサービスを含めることができますが、個別に含める必要があります<xref:System.ServiceProcess.ServiceInstaller>サービスごとにします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-111">An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service.</span></span> <span data-ttu-id="4d2e6-112"><xref:System.ServiceProcess.ServiceInstaller>インスタンス システム サービスに登録します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-112">The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system.</span></span> <span data-ttu-id="4d2e6-113">インストーラーは、各サービスをサービスのコマンドを記録するために使用できるイベント ログを関連付けます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-113">The installer also associates each service with an event log that you can use to record service commands.</span></span> <span data-ttu-id="4d2e6-114">`main()`実行可能ファイルで関数を定義するサービスを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-114">The `main()` function in the executable defines which services should run.</span></span> <span data-ttu-id="4d2e6-115">サービスの現在の作業ディレクトリは、実行可能ファイルが配置されているディレクトリではなく、システム ディレクトリです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-115">The current working directory of the service is the system directory, not the directory in which the executable is located.</span></span>  
  
 <span data-ttu-id="4d2e6-116">サービスを開始すると、システムは、実行可能ファイルを検索され、実行、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>実行可能ファイル内に含まれる、そのサービスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-116">When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable.</span></span> <span data-ttu-id="4d2e6-117">ただし、サービスを実行してない実行可能ファイルを実行すると同じです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-117">However, running the service is not the same as running the executable.</span></span> <span data-ttu-id="4d2e6-118">実行可能ファイルは、サービスのみを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-118">The executable only loads the service.</span></span> <span data-ttu-id="4d2e6-119">サービス コントロール マネージャーから、(たとえば、開始および停止)、サービスがアクセスします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-119">The service is accessed (for example, started and stopped) through the Service Control Manager.</span></span>  
  
 <span data-ttu-id="4d2e6-120">実行可能ファイルの呼び出し、<xref:System.ServiceProcess.ServiceBase>派生したクラスのコンス トラクターの最初の時間がサービスの開始を呼び出すことです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-120">The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service.</span></span> <span data-ttu-id="4d2e6-121"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>コンス トラクターの実行直後に、コマンド処理メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-121">The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes.</span></span> <span data-ttu-id="4d2e6-122">によって実行されるコンス トラクターによって実行される処理を分離する必要があるため、コンス トラクターは最初に、サービスが読み込まれた後にもう一度実行されません<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-122">The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="4d2e6-123">すべてのリソースを解放することができますを<xref:System.ServiceProcess.ServiceBase.OnStop%2A>で作成する必要があります<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-123">Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="4d2e6-124">コンス トラクターでリソースを作成することを防止、サービスが後にもう一度開始する場合に正しく作成されている<xref:System.ServiceProcess.ServiceBase.OnStop%2A>リソースがリリースされました。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-124">Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.</span></span>  
  
 <span data-ttu-id="4d2e6-125">サービス コントロール マネージャー (SCM) は、サービスと対話する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-125">The Service Control Manager (SCM) provides a way to interact with the service.</span></span> <span data-ttu-id="4d2e6-126">SCM を使用すると、開始、停止、一時停止、続行、およびカスタム コマンドをサービスに渡します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-126">You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</span></span> <span data-ttu-id="4d2e6-127">SCM の値を使用して<xref:System.ServiceProcess.ServiceBase.CanStop%2A>と<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>サービスが停止を受け入れるかどうかを確認するのには、一時停止、またはコマンドを続行します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-127">The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands.</span></span> <span data-ttu-id="4d2e6-128">停止、一時停止、および続行は SCM のコンテキスト メニューのみの場合に有効になっている、対応するプロパティ<xref:System.ServiceProcess.ServiceBase.CanStop%2A>または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`true`サービス クラスにします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-128">Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class.</span></span> <span data-ttu-id="4d2e6-129">コマンドがサービスに渡された有効な場合、および<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-129">If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called.</span></span> <span data-ttu-id="4d2e6-130">場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>、または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、対応するコマンド処理メソッド (など<xref:System.ServiceProcess.ServiceBase.OnStop%2A>) は処理されず、メソッドを実装している場合でもです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-130">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.</span></span>  
  
 <span data-ttu-id="4d2e6-131">使用することができます、<xref:System.ServiceProcess.ServiceController>どのような SCM をプログラムで実行するためには、ユーザー インターフェイスを使用します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-131">You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface.</span></span> <span data-ttu-id="4d2e6-132">コンソールで使用できるタスクを自動化できます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-132">You can automate the tasks available in the console.</span></span> <span data-ttu-id="4d2e6-133">場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>、または<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`true`が対応するコマンド処理メソッドを実装していない (など<xref:System.ServiceProcess.ServiceBase.OnStop%2A>)、システムが例外をスローし、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-133">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.</span></span>  
  
 <span data-ttu-id="4d2e6-134">実装する必要はありません<xref:System.ServiceProcess.ServiceBase.OnStart%2A>、 <xref:System.ServiceProcess.ServiceBase.OnStop%2A>、またはその他の方法で<xref:System.ServiceProcess.ServiceBase>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-134">You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="4d2e6-135">ただし、サービスの動作は、「<xref:System.ServiceProcess.ServiceBase.OnStart%2A>ので少なくとも、このメンバーをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-135">However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden.</span></span> <span data-ttu-id="4d2e6-136">`main()`実行可能ファイルの関数は、実行可能ファイル、サービス コントロール マネージャーでサービスを呼び出すことによって登録、<xref:System.ServiceProcess.ServiceBase.Run%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-136">The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method.</span></span> <span data-ttu-id="4d2e6-137"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>のプロパティ、<xref:System.ServiceProcess.ServiceBase>オブジェクトに渡される、<xref:System.ServiceProcess.ServiceBase.Run%2A>メソッドに一致する必要があります、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>そのサービスのサービスのインストーラーのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-137">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.</span></span>  
  
 <span data-ttu-id="4d2e6-138">使用することができます`InstallUtil.exe`サービス、システムをインストールします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-138">You can use `InstallUtil.exe` to install services on your system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d2e6-139">サービスの呼び出しが、どちらの通知を受け取るアプリケーション イベント ログ以外のログを指定することができます、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>も<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティは、カスタムのログに書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-139">You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log.</span></span> <span data-ttu-id="4d2e6-140">設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`自動ログ記録を使用したくない場合。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-140">Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-141">
            <see cref="T:System.ServiceProcess.ServiceBase" /> クラスの新しいインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-141">Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-142">インスタンスを作成しないでください、<xref:System.ServiceProcess.ServiceBase>クラス。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-142">Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class.</span></span> <span data-ttu-id="4d2e6-143">派生させる代わりに、<xref:System.ServiceProcess.ServiceBase>および派生クラスをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-143">Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class.</span></span> <span data-ttu-id="4d2e6-144">最小値から継承されたクラスのコンス トラクターを実装する必要があります<xref:System.ServiceProcess.ServiceBase>を設定するには、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>コンポーネントにします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-144">The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component.</span></span> <span data-ttu-id="4d2e6-145">その他の処理は、コンス トラクターで具体的には必要ありません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-145">No other processing is specifically required in the constructor.</span></span> <span data-ttu-id="4d2e6-146">ほとんどの初期化を処理する必要があります<xref:System.ServiceProcess.ServiceBase.OnStart%2A>コンス トラクターではなく。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-146">You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor.</span></span> <span data-ttu-id="4d2e6-147">それが停止した後にサービスを再起動すると、オブジェクトは再初期化する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-147">Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</span></span>  
  
 <span data-ttu-id="4d2e6-148">派生クラスでコンス トラクターをオーバーライドする場合は、コードで基底クラスのコンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-148">If you override the constructor in your derived class, call the base class constructor in your code.</span></span>  
  
 <span data-ttu-id="4d2e6-149"><xref:System.ServiceProcess.ServiceBase>コンス トラクターのセット<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-149">The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`.</span></span> <span data-ttu-id="4d2e6-150">サービス コントロール マネージャー (SCM) から、サービスに対する呼び出しを自動的にログオンしない場合は、設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-150">If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.</span></span>  
  
 <span data-ttu-id="4d2e6-151">実行可能ファイルに 1 つのサービスが含まれている場合、システムは、開始は、SCM からを選択し、Stop が呼び出された場合、デストラクターが実行されるサービスのコンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-151">If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</span></span>  
  
 <span data-ttu-id="4d2e6-152">実行可能ファイルに複数のサービスが含まれている場合、実行可能ファイルのすべてのサービスに対して呼び出されるコンス トラクターは、1 つのサービスの開始を呼び出すとが、指定したサービスのみを開始します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-152">If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</span></span> <span data-ttu-id="4d2e6-153">すべてサービスが停止した、個別にではなく各サービスが停止するときに、サービスのデストラクターは一緒に実行されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-153">Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d2e6-154">基底クラスのコンス トラクターをオーバーライドする場合は、派生クラスのコンス トラクターで明示的に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-154">If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoLog : bool with get, set" Usage="System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-155">イベント ログで、Start、Stop、Pause、Continue の各コマンドをレポートするかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-155">Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-156">イベント ログで情報をレポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-156">
              <see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-157">設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`true`サービスの起動、停止、一時停止、状態変更情報とコマンドの失敗を報告、アプリケーション イベント ログを使用し、サービスにイベントを続行するように指示します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-157">Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</span></span> <span data-ttu-id="4d2e6-158">ログのサービスの名前が使用される<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-158">The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4d2e6-159">アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`と手順については、コマンド処理メソッド内での書き込み<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>適切なログを投稿します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-159">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d2e6-160"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>、ソース文字列、イベント ログを提供する必要があります前に設定する、サービス、イベント ログへの書き込みを試みます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-160">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</span></span> <span data-ttu-id="4d2e6-161">ソース名を設定する前に、イベント ログにアクセスしようとして例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-161">Trying to access the event log before the source name is set throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandlePowerEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-162">サービスで、コンピューターの電源ステータスの変更の通知を処理できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-162">Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-163">
            <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> クラスで示されたコンピューターの電源ステータスの変更をサービスで処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-163">
              <see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-164">ときに、コンピューターの電源状態の変更では、サービス コントロール マネージャー (SCM) を確認します、サービスがの値を使用して、電源イベント コマンドを受け入れるかどうか<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-164">When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span></span>  
  
 <span data-ttu-id="4d2e6-165">場合<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>は`true`、コマンドは、サービスに渡されると、<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>定義されている場合、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-165">If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined.</span></span> <span data-ttu-id="4d2e6-166">場合<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>は実装されていません、SCM が空の基底クラスから電源イベントを処理する、派生クラスで<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-166">If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-167">サービスの開始後にこのプロパティが変更されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-167">This property is modified after the service was started.</span>
          </span>
        </exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandleSessionChangeEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-168">ターミナル サーバー セッションから受信したセッション変更イベントをサービスで処理できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-168">Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-169">ターミナル サーバーのセッション変更イベントをサービスで処理できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-169">
              <see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-170">サービスの開始後にこのプロパティが変更されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-170">This property is modified after the service was started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanPauseAndContinue : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-171">サービスを一時中断および再開できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-171">Gets or sets a value indicating whether the service can be paused and resumed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-172">サービスを一時中断できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-172">
              <see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-173">値を設定、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>サービスのコンス トラクターでプロパティ。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-173">Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.</span></span>  
  
 <span data-ttu-id="4d2e6-174">サービスを一時停止すると、それが何を停止します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-174">When a service is paused, it halts what it is doing.</span></span> <span data-ttu-id="4d2e6-175">続行すると、サービス (またはサービス コントロール マネージャーからプログラムを使用)、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>を実行します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-175">When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.</span></span>  
  
 <span data-ttu-id="4d2e6-176">一時停止要求をサービスに送信すると、システム リソースを節約できます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-176">Sending a Pause request to the service can conserve system resources.</span></span> <span data-ttu-id="4d2e6-177">一時停止は、すべてのシステム リソースを解放しないことがありますが、停止します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-177">Pause may not release all system resources, but Stop does.</span></span> <span data-ttu-id="4d2e6-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>よりも少ないの処理を実行する多くの場合、実装は<xref:System.ServiceProcess.ServiceBase.OnStop%2A>と<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span>  
  
 <span data-ttu-id="4d2e6-179">ときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`true`、オーバーライド<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>サービス コントロール マネージャー (SCM) は、サービスを一時停止または続行要求を通過するときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-179">When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="4d2e6-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 元に戻すで処理するために実装<xref:System.ServiceProcess.ServiceBase.OnPause%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="4d2e6-181">場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、SCM に合格しない一時停止または続行要求は、そのため、サービスに、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-181">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="4d2e6-182">SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-182">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-183">サービスが既に開始されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-183">The service has already been started.</span>
          </span>
          <span data-ttu-id="4d2e6-184">
            <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> プロパティは、サービスが開始された後は変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-184">The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanShutdown : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-185">システムのシャットダウン時に、サービスにそれを通知する必要があるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-185">Gets or sets a value indicating whether the service should be notified when the system is shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-186">システムのシャットダウン時にサービスに通知する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-186">
              <see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4d2e6-187">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-187">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-188">場合<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>は`true`システムがシャット ダウン時に、サービスに通知します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-188">If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down.</span></span> <span data-ttu-id="4d2e6-189">シャット ダウン時に、<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>派生クラスで実装されている場合、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-189">At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d2e6-190">発生することは、システムにのみ、 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> ; を実行するメソッド、サービスは、それを呼び出すことができますが、これは推奨されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-190">Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-191">サービスが既に開始されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-191">The service has already been started.</span>
          </span>
          <span data-ttu-id="4d2e6-192">
            <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> プロパティは、サービスが開始された後は変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-192">The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanStop : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-193">サービスを開始した後に停止できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-193">Gets or sets a value indicating whether the service can be stopped once it has started.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-194">サービスを停止でき、<see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> メソッドを呼び出すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-194">
              <see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-195">停止がサービスに呼び出されると、サービス コントロール マネージャー (SCM) は、サービスがの値を使用して停止コマンドを受け入れるかどうかを確認<xref:System.ServiceProcess.ServiceBase.CanStop%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-195">When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span></span> <span data-ttu-id="4d2e6-196">ほとんどのサービスでの値の<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`がいくつかのオペレーティング システム サービスでは、たとえば、できないようにするユーザーがそれらを停止します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-196">For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.</span></span>  
  
 <span data-ttu-id="4d2e6-197">場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`、Stop コマンドは、サービスに渡されると、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>定義されている場合、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-197">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="4d2e6-198">場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、停止が空の基底クラスを通じてコマンド SCM ハンドル、派生クラスで実装されていない<xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-198">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-199">サービスが既に開始されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-199">The service has already been started.</span>
          </span>
          <span data-ttu-id="4d2e6-200">
            <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> プロパティは、サービスが開始された後は変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-200">The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="serviceBase.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="4d2e6-201">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-201">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-202">
            <see cref="T:System.ServiceProcess.ServiceBase" /> で使用されていたリソース (メモリを除く) を解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-202">Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-203">呼び出す<xref:System.ServiceProcess.ServiceBase.Dispose%2A>、派生クラスで (これによってで、<xref:System.ServiceProcess.ServiceBase>クラス)、派生クラスの使用が終了するときにします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-203">Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class.</span></span> <span data-ttu-id="4d2e6-204"><xref:System.ServiceProcess.ServiceBase.Dispose%2A>メソッドを使用できない状態で、派生クラスのままです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-204">The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state.</span></span> <span data-ttu-id="4d2e6-205">呼び出した後<xref:System.ServiceProcess.ServiceBase.Dispose%2A>、派生クラスへのすべての参照を解放する必要がありますと<xref:System.ServiceProcess.ServiceBase>が占有されたメモリをガベージ コレクションによってクリアできるようにします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-205">After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d2e6-206">常に呼び出す<xref:System.ServiceProcess.ServiceBase.Dispose%2A>から派生したクラスへの参照を解放する前に<xref:System.ServiceProcess.ServiceBase>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-206">Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="4d2e6-207">それ以外の場合、リソース<xref:System.ServiceProcess.ServiceBase>派生クラスを使用しているがガベージ コレクションは、オブジェクトのデストラクターを呼び出すまで解放しないでください。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-207">Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</span></span>  
  
 <span data-ttu-id="4d2e6-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> プロセスでコードをよく実装される<xref:System.ServiceProcess.ServiceBase.OnPause%2A>への呼び出しと組み合わせた、<xref:System.ServiceProcess.ServiceBase.Dispose%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span></span> <span data-ttu-id="4d2e6-209">派生クラスで選択した場合は、実装するためによく使用される<xref:System.ServiceProcess.ServiceBase.OnStart%2A>を任意に割り当てる<xref:System.ServiceProcess.ServiceBase.Dispose%2A>リリースします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-209">If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventLog : System.Diagnostics.EventLog" Usage="System.ServiceProcess.ServiceBase.EventLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-210">Start や Stop などのサービス コマンドの呼び出し通知をアプリケーション イベント ログに書き込むために使用できるイベント ログを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-210">Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-211">ソースがアプリケーション ログに登録されている <see cref="T:System.Diagnostics.EventLog" /> インスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-211">An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-212">コンス トラクターによって初期化、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティを持つインスタンスを<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>と<xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType>プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-212">The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> properties set.</span></span> <span data-ttu-id="4d2e6-213">ソースが、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスのログは、コンピューターのアプリケーション ログとします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-213">The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log.</span></span> <span data-ttu-id="4d2e6-214">これらの値は、自動的に設定され、サービスのコマンドの自動ログ記録は変更できません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-214">These values are set automatically and cannot be changed for automatic logging of service commands.</span></span>  
  
 <span data-ttu-id="4d2e6-215">ときに<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`開始、停止、一時停止、続行、およびカスタム コマンドは、アプリケーション イベント ログに自動的に記録します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-215">When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</span></span> <span data-ttu-id="4d2e6-216">使用することができます、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>ログにも追加のメッセージを記述するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-216">You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well.</span></span> <span data-ttu-id="4d2e6-217">コンポーネントの呼び出し<xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType>これを使用して<xref:System.ServiceProcess.ServiceBase.EventLog%2A>メンバー。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-217">The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.</span></span>  
  
 <span data-ttu-id="4d2e6-218">アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`と手順については、コマンド処理メソッド内での書き込み<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>適切なログを投稿します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-218">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int with get, set" Usage="System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-219">サービスの終了コードを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-219">Gets or sets the exit code for the service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-220">サービスの終了コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-220">The exit code for the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-221">設定、<xref:System.ServiceProcess.ServiceBase.ExitCode%2A>プロパティをサービス コントロール マネージャーにエラーを示すサービスを停止する前に 0 以外の値。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-221">Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberSignature Language="F#" Value="val mutable MaxNameLength : int" Usage="System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-222">サービス名の最大サイズを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-222">Indicates the maximum size for a service name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-223">ServiceName と DisplayName 両方のサイズは制限がありますサービス クラスのプロパティを設定するときに観察する必要。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-223">ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberSignature Language="F#" Value="abstract member OnContinue : unit -&gt; unit&#xA;override this.OnContinue : unit -&gt; unit" Usage="serviceBase.OnContinue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-224">派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> は、サービス コントロール マネージャー (SCM) によって Continue コマンドがサービスに送信されるときに実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-224">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</span>
          </span>
          <span data-ttu-id="4d2e6-225">サービスが一時中断してから通常の操作の再開時に実行されるアクションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-225">Specifies actions to take when a service resumes normal functioning after being paused.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-226">実装<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>へのアプリケーションの応答をミラーリングする<xref:System.ServiceProcess.ServiceBase.OnPause%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-226">Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span> <span data-ttu-id="4d2e6-227">(いずれかまたはプログラムによって、サービス コンソール)、サービスを続行すると、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>もう一度アクティブな処理を実行し、サービスになります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-227">When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="4d2e6-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="4d2e6-229">場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、SCM に合格しない一時停止または続行要求は、そのため、サービスに、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-229">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="4d2e6-230">SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-230">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberSignature Language="F#" Value="abstract member OnCustomCommand : int -&gt; unit&#xA;override this.OnCustomCommand : int -&gt; unit" Usage="serviceBase.OnCustomCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="4d2e6-231">サービスに送信されたコマンド メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-231">The command message sent to the service.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-232">派生クラスに実装されると、<see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> は、サービス コントロール マネージャー (SCM) でカスタム コマンドがサービスに渡されるときに、実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-232">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service.</span>
          </span>
          <span data-ttu-id="4d2e6-233">パラメーター値が設定されているコマンドの発生時に実行されるアクションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-233">Specifies actions to take when a command with the specified parameter value occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> 起動、停止、一時停止と継続的なサービス以外の追加機能を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</span></span>  
  
 <span data-ttu-id="4d2e6-235">SCM がサービスをサポートするかどうかを確認するカスタム コマンドを調べない、`command`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-235">The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in.</span></span> <span data-ttu-id="4d2e6-236">サービスに直接カスタム コマンドを渡します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-236">It passes the custom command directly to the service.</span></span> <span data-ttu-id="4d2e6-237">サービスが認識しない場合、`command`パラメーターは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-237">If the service does not recognize the `command` parameter, it does nothing.</span></span>  
  
 <span data-ttu-id="4d2e6-238">カスタム コマンドがによって発生した、<xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>内のステートメントを<xref:System.ServiceProcess.ServiceController>コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-238">Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component.</span></span> <span data-ttu-id="4d2e6-239">Switch ステートメントを使用する場合、または.サービスを定義するカスタム コマンドを処理する条件。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-239">Use a switch statement or if..then condition to handle the custom commands you define on your service.</span></span>  
  
 <span data-ttu-id="4d2e6-240">アプリケーションで定義またはで使用できるカスタム コマンドの値のみ<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>128 ~ 255 の範囲は、します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-240">The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255.</span></span> <span data-ttu-id="4d2e6-241">128 以下の整数は、システム予約値に対応します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-241">Integers below 128 correspond to system-reserved values.</span></span>  
  
 <span data-ttu-id="4d2e6-242">場合、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>プロパティは`true`、他のすべてのコマンドと同様に、カスタムのコマンドは、メソッドの実行が成功または失敗するかどうかを報告するイベント ログにエントリを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-242">If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberSignature Language="F#" Value="abstract member OnPause : unit -&gt; unit&#xA;override this.OnPause : unit -&gt; unit" Usage="serviceBase.OnPause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-243">派生クラスに実装されると、Pause コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-243">When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</span>
          </span>
          <span data-ttu-id="4d2e6-244">サービスが一時中断したときに実行されるアクションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-244">Specifies actions to take when a service pauses.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-245">使用<xref:System.ServiceProcess.ServiceBase.OnPause%2A>サービスが一時停止コマンドを受信するときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-245">Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command.</span></span> <span data-ttu-id="4d2e6-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="4d2e6-247">(いずれかまたはプログラムによって、サービス コンソール)、一時停止したサービスを続行すると、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>処理が実行され、サービスが再度アクティブになります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-247">When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="4d2e6-248">一時停止コマンドには、特定のイベントに対応するため、アプリケーションのみが許可されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-248">The Pause command only allows your application to react to a specific event.</span></span> <span data-ttu-id="4d2e6-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 実行する処理を定義していないサービスに何もしません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.</span></span>  
  
 <span data-ttu-id="4d2e6-250">一時停止要求をサービスに送信すると、一時停止は、すべてのシステム リソースを解放しない必要があるためにシステム リソースを節約できます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-250">Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</span></span> <span data-ttu-id="4d2e6-251">たとえば、スレッドが停止することができます、スレッドが、開いたままにするのではなく、サービスを一時停止、プロセスによって開かれている場合、サービスを継続する場合に再割り当ての必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-251">For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</span></span> <span data-ttu-id="4d2e6-252">すべてのシステム リソースを解放する一時停止を定義する場合は、停止コマンドと同様に動作します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-252">If you define Pause to release all system resources, it behaves like a Stop command.</span></span>  
  
 <span data-ttu-id="4d2e6-253">設定<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>に`true`、オーバーライドと<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>SCM がサービスを一時停止または続行要求を通過するときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-253">Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="4d2e6-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 元に戻すで処理するために実装<xref:System.ServiceProcess.ServiceBase.OnPause%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="4d2e6-255">場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`、SCM に合格しない一時停止または続行要求は、そのため、サービスに、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-255">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented.</span></span> <span data-ttu-id="4d2e6-256">SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-256">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="F#" Value="abstract member OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool&#xA;override this.OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool" Usage="serviceBase.OnPowerEvent powerStatus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus">
          <span data-ttu-id="4d2e6-257">システムからの電源ステータスに関する通知を示す <see cref="T:System.ServiceProcess.PowerBroadcastStatus" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-257">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-258">派生クラスに実装されると、コンピューターの電源ステータスの変更時に実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-258">When implemented in a derived class, executes when the computer's power status has changed.</span>
          </span>
          <span data-ttu-id="4d2e6-259">これは中断モードのラップトップ コンピューターに適用されるもので、システムのシャットダウンとは異なります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-259">This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d2e6-260">派生クラスに実装されると、アプリケーションの要求に応じて返される値が決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-260">When implemented in a derived class, the needs of your application determine what value to return.</span>
          </span>
          <span data-ttu-id="4d2e6-261">たとえば、<see langword="QuerySuspend" /> ブロードキャスト ステータスが渡されると、<see langword="false" /> を返すことでアプリケーションでクエリを拒否できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-261">For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-262">使用<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>にシステム イベントが示されているときに発生する処理を指定する、<xref:System.ServiceProcess.PowerBroadcastStatus>列挙ときに発生します - たとえば、コンピューターがサスペンド モードで配置またはバッテリ電源を示します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-262">Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</span></span>  
  
 <span data-ttu-id="4d2e6-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit&#xA;override this.OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit" Usage="serviceBase.OnSessionChange changeDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" />
      </Parameters>
      <Docs>
        <param name="changeDescription">
          <span data-ttu-id="4d2e6-264">変更の種類を識別する構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-264">A structure that identifies the change type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-265">変更イベントがターミナル サーバー セッションから受信された場合に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-265">Executes when a change event is received from a Terminal Server session.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-266">設定する必要があります、<xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>プロパティを`true`このメソッドの実行を有効にします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-266">You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="serviceBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-267">派生クラスに実装されると、システムがシャット ダウンされるときに実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-267">When implemented in a derived class, executes when the system is shutting down.</span>
          </span>
          <span data-ttu-id="4d2e6-268">システムがシャット ダウンする直前に発生する処理を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-268">Specifies what should occur immediately prior to the system shutting down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-269">使用<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>システム シャット ダウンするときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-269">Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.</span></span>  
  
 <span data-ttu-id="4d2e6-270">このイベントは、コンピューターが電源オフの場合は、オペレーティング システムをシャット ダウン時にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-270">This event occurs only when the operating system is shut down, not when the computer is turned off.</span></span>  
  
 <span data-ttu-id="4d2e6-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> オーバーライドする場合が想定されて、<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnStart : string[] -&gt; unit&#xA;override this.OnStart : string[] -&gt; unit" Usage="serviceBase.OnStart args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="4d2e6-272">Start コマンドによって渡されたデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-272">Data passed by the start command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-273">派生クラスに実装されると、Start コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるとき、またはオペレーティング システムが (自動的に起動するサービスのために) 起動するときに実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-273">When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</span>
          </span>
          <span data-ttu-id="4d2e6-274">サービスが開始するときに実行されるアクションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-274">Specifies actions to take when the service starts.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-275">使用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスが開始コマンドを受信するときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-275">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command.</span></span> <span data-ttu-id="4d2e6-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> サービスの動作を指定する方法です。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service.</span></span> <span data-ttu-id="4d2e6-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> データを渡す手段として引数を受け取ることができますが、この使用状況はまれです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="4d2e6-278">必要がある処理を実行するコンス トラクターを使用しないでください<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-278">Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="4d2e6-279">使用<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスのすべての初期化を処理します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-279">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service.</span></span> <span data-ttu-id="4d2e6-280">コンス トラクターは、アプリケーションの実行可能ファイルときに呼び出されますが、サービスが実行時ではなく、実行します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-280">The constructor is called when the application's executable runs, not when the service runs.</span></span> <span data-ttu-id="4d2e6-281">実行可能ファイルを実行する前に<xref:System.ServiceProcess.ServiceBase.OnStart%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-281">The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="4d2e6-282">続行すると、たとえば、コンス トラクターは再度呼び出されません SCM は、メモリ内のオブジェクトを既に保持しているためです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-282">When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</span></span> <span data-ttu-id="4d2e6-283">場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>コンス トラクターではなくで割り当てられているリソースを解放<xref:System.ServiceProcess.ServiceBase.OnStart%2A>、必要なリソースを作成できませんが 2 番目に、サービスが呼び出されたときにもう一度です。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-283">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.</span></span>  
  
 <span data-ttu-id="4d2e6-284">設定してコンピューターを再起動するときに自動的に開始するサービスを設定することができます、 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on に、サービスのインストーラー<xref:System.ServiceProcess.ServiceStartMode.Automatic>します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-284">Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="4d2e6-285">このような場合は、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>がシステム起動時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-285">In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.</span></span>  
  
 <span data-ttu-id="4d2e6-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 派生クラスでオーバーライドされると想定されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="4d2e6-287">有効に機能するサービスの<xref:System.ServiceProcess.ServiceBase.OnStart%2A>と<xref:System.ServiceProcess.ServiceBase.OnStop%2A>両方のサービス クラスで実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-287">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 <span data-ttu-id="4d2e6-288">サービスの初期化の引数を処理、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> Main メソッドではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-288">Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method.</span></span> <span data-ttu-id="4d2e6-289">引数、`args`パラメーター配列は、サービス コンソールで、サービスのプロパティ ウィンドウで手動で設定することができます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-289">The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console.</span></span> <span data-ttu-id="4d2e6-290">コンソールで入力した引数は保存されません。コントロール パネルから起動されると、サービスを一時的にサービスに渡さ、れます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-290">The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</span></span> <span data-ttu-id="4d2e6-291">サービスが自動的に起動すると存在する必要があります引数は、サービスのレジストリ キーの ImagePath 文字列値に配置できます (hkey_local_machine \system\currentcontrolset\services\\  *\<サービス名 >*)。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-291">Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name>*).</span></span> <span data-ttu-id="4d2e6-292">使用して、レジストリから引数を取得することができます、<xref:System.Environment.GetCommandLineArgs%2A>メソッド、たとえば:`string[] imagePathArgs = Environment.GetCommandLineArgs();`します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-292">You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberSignature Language="F#" Value="abstract member OnStop : unit -&gt; unit&#xA;override this.OnStop : unit -&gt; unit" Usage="serviceBase.OnStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-293">派生クラスに実装されると、Stop コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-293">When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</span>
          </span>
          <span data-ttu-id="4d2e6-294">サービスが実行を停止したときに実行されるアクションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-294">Specifies actions to take when a service stops running.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-295">使用<xref:System.ServiceProcess.ServiceBase.OnStop%2A>サービスを停止するコマンドを受信するときに発生する処理を指定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-295">Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.</span></span>  
  
 <span data-ttu-id="4d2e6-296">値を使用して、SCM は、停止コマンドを受信するときに<xref:System.ServiceProcess.ServiceBase.CanStop%2A>をサービスが停止コマンドを受け入れるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-296">When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands.</span></span> <span data-ttu-id="4d2e6-297">場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`、Stop コマンドは、サービスに渡されると、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>定義されている場合、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-297">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="4d2e6-298">場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>が実装されていないサービスでは、SCM は、停止コマンドを処理します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-298">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.</span></span>  
  
 <span data-ttu-id="4d2e6-299">場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`false`、SCM Stop コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-299">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command.</span></span> <span data-ttu-id="4d2e6-300">サービスには渡されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-300">It is not passed to the service.</span></span> <span data-ttu-id="4d2e6-301">Stop コマンドを返し、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-301">The Stop command returns and throws an exception.</span></span>  
  
 <span data-ttu-id="4d2e6-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> 派生クラスでオーバーライドされると想定されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="4d2e6-303">有効に機能するサービスの<xref:System.ServiceProcess.ServiceBase.OnStart%2A>と<xref:System.ServiceProcess.ServiceBase.OnStop%2A>両方のサービス クラスで実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-303">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.RequestAdditionalTime : int -&gt; unit" Usage="serviceBase.RequestAdditionalTime milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="4d2e6-304">要求する時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-304">The requested time in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-305">保留中の操作について時間の延長を要求します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-305">Requests additional time for a pending operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-306"><xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A>メソッドが呼び出されるもので、オーバーライドされた<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>追加時間的なマーキングにサービス コントロール マネージャー (SCM) を防ぐために、保留中の操作を要求する方法、応答しないサービス。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-306">The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</span></span>  <span data-ttu-id="4d2e6-307">保留中の操作が続行、一時停止、開始または停止がない場合、<xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-307">If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-308">サービスは保留状態ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-308">The service is not in a pending state.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-309">サービスの実行可能ファイルのメイン エントリ ポイントを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-309">Provides the main entry point for a service executable.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service">
          <span data-ttu-id="4d2e6-310">開始するサービスを示す <see cref="T:System.ServiceProcess.ServiceBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-310">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-311">サービス コントロール マネージャー (SCM) を使用してサービスの実行可能ファイルを登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-311">Registers the executable for a service with the Service Control Manager (SCM).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-312">このオーバー ロードを呼び出して、`main()`実行可能ファイル、サービス コントロール マネージャーでサービスを登録するサービスの機能です。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-312">Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager.</span></span> <span data-ttu-id="4d2e6-313">呼び出した後<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>、サービス コントロール マネージャーへの呼び出しで開始コマンドの発行、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-313">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service.</span></span> <span data-ttu-id="4d2e6-314">サービスは、Start コマンドが実行されるまでは開始されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-314">The service is not started until the Start command is executed.</span></span>  
  
 <span data-ttu-id="4d2e6-315"><xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>と同様のメソッドが呼び出される<xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType>Windows フォーム アプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-315">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="4d2e6-316">場合<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`、によって、サービスが指定されている場合、イベント ログにエントリが書き込まれる、`service`パラメーターの起動に失敗します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-316">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d2e6-317">
            <paramref name="service" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-317">
              <paramref name="service" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase[] -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services">
          <span data-ttu-id="4d2e6-318">ServiceBase インスタンスの配列。開始するサービスを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-318">An array of ServiceBase instances, which indicate services to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-319">複数サービスの実行可能ファイルをサービス コントロール マネージャー (SCM) に登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-319">Registers the executable for multiple services with the Service Control Manager (SCM).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-320">このオーバー ロードを呼び出して、`main()`実行可能ファイル、サービス コントロール マネージャーでサービスを登録するサービスの機能です。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-320">Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager.</span></span> <span data-ttu-id="4d2e6-321">呼び出した後<xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>、サービス コントロール マネージャーへの呼び出しと、[開始] コマンドの発行、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービス内のメソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-321">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services.</span></span> <span data-ttu-id="4d2e6-322">開始コマンドが実行されるまで、サービスは開始されません。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-322">The services are not started until the Start commands are executed.</span></span>  
  
 <span data-ttu-id="4d2e6-323"><xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>メソッドが呼び出されると同様、 <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> Windows フォーム アプリケーションのメソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-323">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> method for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="4d2e6-324">場合<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`配列内のサービスが開始に失敗した場合、イベント ログにエントリが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-324">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d2e6-325">開始するサービスが指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-325">You did not supply a service to start.</span>
          </span>
          <span data-ttu-id="4d2e6-326">配列が <see langword="null" /> または空である可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-326">The array might be <see langword="null" /> or empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceHandle : nativeint" Usage="System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-327">サービスのサービス コントロール ハンドルを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-327">Gets the service control handle for the service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-328">サービスのサービス コントロール ハンドルを含む <see cref="T:System.IntPtr" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-328">An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-329">サービス コントロール ハンドルは、サービス コントロール マネージャー (SCM) との通信に使用されます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-329">The service control handle is used to communicate with the Service Control Manager (SCM).</span></span>  <span data-ttu-id="4d2e6-330">ハンドルを使用して、管理されていないを使用して呼び出し元のサービスのサービス コントロール マネージャーの状態情報を更新すること`SetServiceStatus`関数。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-330">The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="4d2e6-331">アンマネージ コードにアクセスします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-331">for access to unmanaged code.</span>
          </span>
          <span data-ttu-id="4d2e6-332">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-332">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberSignature Language="F#" Value="member this.ServiceMainCallback : int * nativeint -&gt; unit" Usage="serviceBase.ServiceMainCallback (argCount, argPointer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" />
        <Parameter Name="argPointer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="argCount">
          <span data-ttu-id="4d2e6-333">引数配列内の引数の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-333">The number of arguments in the argument array.</span>
          </span>
        </param>
        <param name="argPointer">
          <span data-ttu-id="4d2e6-334">引数配列を指す <see cref="T:System.IntPtr" /> 構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-334">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d2e6-335">コマンド ハンドラーを登録し、サービスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-335">Registers the command handler and starts the service.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-336">システムでサービスを識別するために使用される短い名前を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-336">Gets or sets the short name used to identify the service to the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d2e6-337">サービスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-337">The name of the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-338"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービス コントロール マネージャーにサービスを識別します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-338">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager.</span></span> <span data-ttu-id="4d2e6-339">このプロパティの値は、そのサービスに対して記録されている名前と同じである必要があります、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>対応するインストーラー クラスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-339">The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property of the corresponding installer class.</span></span> <span data-ttu-id="4d2e6-340">コードでは、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A>サービスの通常は設定、`main()`実行可能ファイルの関数。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-340">In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.</span></span>  
  
 <span data-ttu-id="4d2e6-341"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>指定にも使用されて、<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>に関連付けられている、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-341">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property.</span></span> <span data-ttu-id="4d2e6-342">これは、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>サービス コマンドの情報をアプリケーション ログに書き込むインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-342">This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.</span></span>  
  
 <span data-ttu-id="4d2e6-343"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>、ソース文字列、イベント ログを提供する必要があります前に設定するサービスは、イベント ログを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-343">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log.</span></span> <span data-ttu-id="4d2e6-344">スローされる例外が発生したソース名を設定する前にイベント ログにアクセスしようとしています。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-344">Trying to access the event log before the source name is set causes an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4d2e6-345">サービスが既に開始されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-345">The service has already been started.</span>
          </span>
          <span data-ttu-id="4d2e6-346">
            <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> プロパティは、サービスが開始された後は変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-346">The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d2e6-347">指定された名前が、長さ 0 の文字列であるか、または <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /> より長い文字列です。または、指定された名前にスラッシュまたはバック スラッシュ文字が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-347">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</span>
          </span>
        </exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="serviceBase.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d2e6-348">サービスの実行を停止します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d2e6-348">Stops the executing service.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d2e6-349"><xref:System.ServiceProcess.ServiceBase.Stop%2A>メソッドは、サービスの状態、停止が保留中であることを示すと呼び出しを設定、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-349">The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.</span></span>  <span data-ttu-id="4d2e6-350">アプリケーションが停止した後、サービスの状態が停止に設定します。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-350">After the application is stopped, the service state is set to stopped.</span></span> <span data-ttu-id="4d2e6-351">アプリケーションがホステッド サービスの場合は、アプリケーション ドメインがアンロードします。</span><span class="sxs-lookup"><span data-stu-id="4d2e6-351">If the application is a hosted service, the application domain is unloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>