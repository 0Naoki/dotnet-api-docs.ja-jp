<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServiceBase.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d659a5675f8e308404ab56d663607e4230bf1530.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d659a5675f8e308404ab56d663607e4230bf1530</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceBase">
          <source>Provides a base class for a service that will exist as part of a service application.</source>
          <target state="translated">サービス アプリケーションの一部として存在するサービスの基本クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceBase">
          <source><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> must be derived from when creating a new service class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> は、新しいサービス クラスの作成時に派生される必要があります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Derive from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> when defining your service class in a service application.</source>
          <target state="translated">派生<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>サービス アプリケーションで、サービス クラスを定義するときにします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Any useful service overrides the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods.</source>
          <target state="translated">有効なサービスの上書き、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>For additional functionality, you can override <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> with specific behavior in response to changes in the service state.</source>
          <target state="translated">オーバーライドすることができます、追加の機能の<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>の特定の動作をサービスの状態の変更に応答します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</source>
          <target state="translated">サービスは、実行時間の長い実行可能ファイル、ユーザー インターフェイスをサポートしていないとユーザーのログオン アカウントで実行します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The service can run without any user being logged on to the computer.</source>
          <target state="translated">サービスは、すべてのユーザーがコンピューターにログオンすることがなく実行できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>By default, services run under the System account, which is not the same as the Administrator account.</source>
          <target state="translated">既定では、サービスは、管理者アカウントと同じではないシステム アカウントで実行します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You cannot change the rights of the System account.</source>
          <target state="translated">システム アカウントの権限を変更することはできません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Alternatively, you can use a <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> to specify a user account under which the service will run.</source>
          <target state="translated">また、使用することができます、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph>サービスを実行するユーザー アカウントを指定します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>An executable can contain more than one service but must contain a separate <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> for each service.</source>
          <target state="translated">実行可能ファイルは 1 つ以上のサービスを含めることができますが、個別に含める必要があります<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>サービスごとにします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance registers the service with the system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>インスタンスをシステム サービスに登録します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The installer also associates each service with an event log that you can use to record service commands.</source>
          <target state="translated">また、インストーラーは、サービスのコマンドを記録する使用できるイベント ログを含む各サービスを関連付けます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">`main()`</ph> function in the executable defines which services should run.</source>
          <target state="translated"><ph id="ph1">`main()`</ph>実行可能ファイル内の関数を定義するサービスを実行する必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The current working directory of the service is the system directory, not the directory in which the executable is located.</source>
          <target state="translated">サービスの現在の作業ディレクトリは、実行可能ファイルが配置されているディレクトリではなく、システム ディレクトリです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>When you start a service, the system locates the executable and runs the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method for that service, contained within the executable.</source>
          <target state="translated">システムが実行可能ファイルを検索し、実行されるサービスを開始するときに、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>実行可能ファイル内に含まれる、そのサービスのメソッドです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>However, running the service is not the same as running the executable.</source>
          <target state="translated">ただし、サービスを実行してはいない実行可能ファイルを実行すると同じです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The executable only loads the service.</source>
          <target state="translated">実行可能ファイルは、サービスのみを読み込みます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The service is accessed (for example, started and stopped) through the Service Control Manager.</source>
          <target state="translated">サービス コントロール マネージャーから、(たとえば、開始および停止) サービスがアクセスします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The executable calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> derived class's constructor the first time you call Start on the service.</source>
          <target state="translated">実行可能ファイルが、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>派生したクラスの 1 つ目のコンス トラクターを使うとき、サービスの開始。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> command-handling method is called immediately after the constructor executes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>コンス トラクターの実行直後に、コマンドの処理メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">によって実行されるコンス トラクターによって実行される処理を分離する必要があるために、サービスが読み込まれると、最初の時間後にもう一度コンス トラクターが実行されません<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Any resources that can be released by <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should be created in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">すべてのリソースを解放することができますを<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>で作成する必要があります<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Creating resources in the constructor prevents them from being created properly if the service is started again after <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> has released the resources.</source>
          <target state="translated">コンス トラクターでリソースを作成することを防止されて適切に作成された場合は、サービスの開始後にもう一度<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>がリソースを解放します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The Service Control Manager (SCM) provides a way to interact with the service.</source>
          <target state="translated">サービス コントロール マネージャー (SCM) は、サービスと対話する方法を提供します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</source>
          <target state="translated">SCM を使用して、サービスを開始、停止、一時停止、続行、またはカスタムのコマンドを渡すことができます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The SCM uses the values of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to determine whether the service accepts Stop, Pause, or Continue commands.</source>
          <target state="translated">SCM の値を使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>サービスが停止を受け入れるかどうかを判断するのには、一時停止、またはコマンドを続行します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph3">`true`</ph> in the service class.</source>
          <target state="translated">SCM のコンテキスト メニュー場合にのみで有効にし、停止、一時停止、続行、対応するプロパティ<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph3">`true`</ph>サービス クラスにします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>If enabled, the command is passed to the service, and <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is called.</source>
          <target state="translated">コマンドが、サービスに渡される有効な場合、および<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>、または<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>, the corresponding command-handling method (such as <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) will not be processed, even if you have implemented the method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>、または<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph4">`false`</ph>、対応するコマンドの処理メソッド (など<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) は処理されません、メソッドを実装している場合でもです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> class to do programmatically what the SCM does using a user interface.</source>
          <target state="translated">使用することができます、 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> SCM はどのようなプログラムで実行するクラスはユーザー インターフェイスを使用します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can automate the tasks available in the console.</source>
          <target state="translated">コンソールで利用可能なタスクを自動化できます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`true`</ph> but you have not implemented a corresponding command-handling method (such as <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) the system throws an exception and ignores the command.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>、または<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph4">`true`</ph>対応するコマンドの処理メソッドを実装していない (など<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>)、システムが例外をスローし、コマンドは無視されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You do not have to implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, or any other method in <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
          <target state="translated">実装する必要はありません<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>、またはその他の方法で<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>However, the service's behavior is described in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, so at minimum, this member should be overridden.</source>
          <target state="translated">ただし、サービスの動作は、「<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>ので少なくとも、このメンバーをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">`main()`</ph> function of the executable registers the service in the executable with the Service Control Manager by calling the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`main()`</ph>実行可能ファイルの関数は、呼び出すことによって、サービス コントロール マネージャーでの実行可能ファイルで、サービスを登録、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> object passed to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method must match the <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property of the service installer for that service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>オブジェクトに渡される、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph>メソッドに一致する必要があります、<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph>そのサービスのサービスのインストーラーのプロパティです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can use <ph id="ph1">`InstallUtil.exe`</ph> to install services on your system.</source>
          <target state="translated">使用することができます<ph id="ph1">`InstallUtil.exe`</ph>システムにサービスをインストールします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>You can specify a log other than the Application event log to receive notification of service calls, but neither the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> nor the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property can write to a custom log.</source>
          <target state="translated">サービスの呼び出しが、どちらの通知を受け取るアプリケーション イベント ログ以外のログを指定することができます、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>も<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>プロパティは、カスタムのログに書き込むことができます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceBase">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> if you do not want to use automatic logging.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>に<ph id="ph2">`false`</ph>自動ログ記録を使用したくない場合。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Do not create an instance of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.</source>
          <target state="translated">インスタンスを作成しない、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Instead, derive from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and instantiate your derived class.</source>
          <target state="translated">派生して代わりに、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>および派生クラスをインスタンス化します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>The minimum you need to implement in the constructor for a class inherited from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> is to set the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> on your component.</source>
          <target state="translated">最小値から継承されたクラスのコンス トラクターで実装する必要があります<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>を設定するには、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>コンポーネントでします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>No other processing is specifically required in the constructor.</source>
          <target state="translated">他の処理は、コンス トラクターで具体的には必要ありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>You should handle most initialization in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> rather than in the constructor.</source>
          <target state="translated">ほとんどの初期化を処理する必要があります<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>コンス トラクターではなくです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</source>
          <target state="translated">それ以外の場合、オブジェクトは再初期化が停止した後にサービスを再起動すると保証はありません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If you override the constructor in your derived class, call the base class constructor in your code.</source>
          <target state="translated">派生クラスでコンス トラクターをオーバーライドする場合は、コードで基本クラス コンス トラクターを呼び出します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> constructor sets <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>コンス トラクター セット<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>に<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">自動的に呼び出しをログにサービスにサービス コントロール マネージャー (SCM) からたくない場合は、設定<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>に<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</source>
          <target state="translated">実行可能ファイルに 1 つのサービスが含まれている場合、システムは、開始が scm でが選択されているし、Stop が呼び出された場合にデストラクターを実行時に、サービスのコンス トラクターを呼び出します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</source>
          <target state="translated">実行可能ファイルに複数のサービスが含まれている場合、実行可能ファイルのすべてのサービスに対して呼び出されるコンス トラクターは、1 つのサービスの開始を呼び出すとが、指定したサービスのみが開始します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</source>
          <target state="translated">サービスのデストラクターは、サービスをすべて停止している個別ではなく各サービスが停止しているときに一緒に実行されます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.#ctor">
          <source>If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</source>
          <target state="translated">基底クラス コンス トラクターをオーバーライドする場合は、派生クラスのコンス トラクターで明示的に呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</source>
          <target state="translated">イベント ログで、Start、Stop、Pause、Continue の各コマンドをレポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report information in the event log; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">イベント ログで情報をレポートする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`true`</ph> instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>に<ph id="ph2">`true`</ph>サービスの開始、停止、一時停止、状態変更情報だけでなく、コマンドの失敗を報告する、アプリケーション イベント ログを使用してサービスにイベントを続行するように指示します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>The name of the service is used as the log's <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">サービスの名前は、ログのとして使用<ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>To report information to a custom event log rather than the Application log, set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> and write instructions within the command-handling methods <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.</source>
          <target state="translated">アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>に<ph id="ph2">`false`</ph>とコマンドの処理メソッド内の指示に書き込み<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>、または<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>適切なログを送信します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>、イベント ログのソース文字列を指定する必要があります前に設定する、サービス、イベント ログへの書き込みを試みます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.AutoLog">
          <source>Trying to access the event log before the source name is set throws an exception.</source>
          <target state="translated">ソース名を設定する前に、イベント ログにアクセスしようとしています。 には、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</source>
          <target state="translated">サービスで、コンピューターの電源ステータスの変更の通知を処理できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service handles the computer power status changes indicated in the <ph id="ph2">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph> class, otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph> クラスで示されたコンピューターの電源ステータスの変更をサービスで処理する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>.</source>
          <target state="translated">ときに、コンピューターの電源状態の変更では、サービス コントロール マネージャー (SCM) を確認、サービスが電源イベントを使用してコマンドの値を受け入れるかどうか<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the command is passed to the service and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> method is called if defined.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>は<ph id="ph2">`true`</ph>、コマンドは、サービスに渡されると、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph>定義されている場合、メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is not implemented in the derived class, the SCM handles the power event through the empty base class <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph>は実装されていません SCM が空の基底クラスを通じた電源イベントを処理、派生クラスで<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <source>This property is modified after the service was started.</source>
          <target state="translated">サービスの開始後にこのプロパティが変更されています。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <source>Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</source>
          <target state="translated">ターミナル サーバー セッションから受信したセッション変更イベントをサービスで処理できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service can handle Terminal Server session change events; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ターミナル サーバーのセッション変更イベントをサービスで処理できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <source>This property is modified after the service was started.</source>
          <target state="translated">サービスの開始後にこのプロパティが変更されています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Gets or sets a value indicating whether the service can be paused and resumed.</source>
          <target state="translated">サービスを一時中断および再開できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service can be paused; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">サービスを一時中断できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Set the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property in the constructor for the service.</source>
          <target state="translated">値を設定、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>サービスのコンス トラクター内のプロパティです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>When a service is paused, it halts what it is doing.</source>
          <target state="translated">サービスが一時停止しているときに、それが何を停止します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>When you continue the service (either through the Service Control Manager or programmatically), <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> runs.</source>
          <target state="translated">(いずれかのサービス コントロール マネージャーを使用またはプログラムによって)、サービスを続行すると<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>を実行します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Sending a Pause request to the service can conserve system resources.</source>
          <target state="translated">サービスを一時停止要求を送信すると、システム リソースを節約できます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>Pause may not release all system resources, but Stop does.</source>
          <target state="translated">一時停止は、すべてのシステム リソースを解放できないことがありますが、停止します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> are often implemented to perform less processing than <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> および<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>よりも少ない処理を実行する多くの場合、実装は<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>When <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`true`</ph>, override <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph2">`true`</ph>、オーバーライド<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>サービス コントロール マネージャー (SCM) は、サービスに、一時停止または続行要求を通過するときに発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> 処理を元に戻すに実装する必要があります<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph2">`false`</ph>SCM は一時停止を通過しません、またはサービスにため続行を要求、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>実装されている場合でも、メソッドは呼び出されません。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">SCM で、<ph id="ph1">`Pause`</ph>と<ph id="ph2">`Continue`</ph>コントロールが無効になっているときに<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>The service has already been started.</source>
          <target state="translated">サービスが既に開始されています。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /&gt;</ph> プロパティは、サービスが開始された後は変更できません。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>Gets or sets a value indicating whether the service should be notified when the system is shutting down.</source>
          <target state="translated">システムのシャットダウン時に、サービスにそれを通知する必要があるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service should be notified when the system is shutting down; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">システムのシャットダウン時にサービスに通知する必要がある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the service is notified when the system is shutting down.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>は<ph id="ph2">`true`</ph>サービスは、システムのシャット ダウンするときに通知します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>At shutdown, the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method is called if it has been implemented in your derived class.</source>
          <target state="translated">シャット ダウン時に、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph>派生クラスで実装されている場合、メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>Only the system should cause the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method to execute; the service can call it, but this is not recommended.</source>
          <target state="translated">システムのみの原因には、 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> ; を実行する方法、サービスを呼び出すことができますが、これは推奨されません。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>The service has already been started.</source>
          <target state="translated">サービスが既に開始されています。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /&gt;</ph> プロパティは、サービスが開始された後は変更できません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>Gets or sets a value indicating whether the service can be stopped once it has started.</source>
          <target state="translated">サービスを開始した後に停止できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the service can be stopped and the <ph id="ph2">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnStop" /&gt;</ph> method called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">サービスを停止でき、<ph id="ph2">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnStop" /&gt;</ph> メソッドを呼び出すことができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>.</source>
          <target state="translated">サービス停止が呼び出されると、サービス コントロール マネージャー (SCM) は、サービスが停止の値を使用してコマンドを受け入れるかどうかを確認<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>For most services, the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, but some operating system services, for example, do not allow the user to stop them.</source>
          <target state="translated">ほとんどのサービスの値<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>は<ph id="ph2">`true`</ph>、一部のオペレーティング システム サービスなど、見えないようにユーザーに通知を停止します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the Stop command is passed to the service and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>は<ph id="ph2">`true`</ph>、Stop コマンドは、サービスに渡されると、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>が定義されている場合、メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>、停止が空の基底クラスを通じてコマンド SCM ハンドル、派生クラスで実装されていません<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>The service has already been started.</source>
          <target state="translated">サービスが既に開始されています。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.CanStop">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanStop" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.CanStop" /&gt;</ph> プロパティは、サービスが開始された後は変更できません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Disposes of the resources (other than memory) used by the <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> で使用されていたリソース (メモリを除く) を解放します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> in your derived class (and through it, in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class) when you are finished using the derived class.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>、派生クラスで (これによって内、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>クラス)、派生クラスの使用が終了したときにします。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> method leaves the derived class in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>メソッドを使用できない状態で、派生クラスのままにします。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>After calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>, you must release all references to the derived class and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> so the memory they were occupying can be reclaimed by garbage collection.</source>
          <target state="translated">呼び出した後<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>、派生クラスへのすべての参照を解放する必要がありますと<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>が占有されたメモリをガベージ コレクションによって再要求できるようにします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Always call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> before you release your last reference to the class derived from <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
          <target state="translated">常に呼び出す<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>から派生したクラスへの参照を解放する前に<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>Otherwise, the resources <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</source>
          <target state="translated">それ以外の場合、リソース<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>派生クラスを使用しているがガベージ コレクションは、オブジェクトのデストラクターを呼び出すまで解放されないためです。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is often implemented to process the code in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, combined with a call to <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> 内のコードを処理するために実装が多くの場合、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>への呼び出しと組み合わせた<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <source>If you choose to do this in your derived class, it is customary to implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to allocate whatever <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> released.</source>
          <target state="translated">これを行うには、派生クラスでを選択する場合を実装する一般的な<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>を自由に割り当てる<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>解放します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</source>
          <target state="translated">Start や Stop などのサービス コマンドの呼び出し通知をアプリケーション イベント ログに書き込むために使用できるイベント ログを取得します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>An <ph id="ph1">&lt;see cref="T:System.Diagnostics.EventLog" /&gt;</ph> instance whose source is registered to the Application log.</source>
          <target state="translated">ソースがアプリケーション ログに登録されている <ph id="ph1">&lt;see cref="T:System.Diagnostics.EventLog" /&gt;</ph> インスタンス。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to an instance with the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType&gt;</ph> properties set.</source>
          <target state="translated">コンス トラクターは、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>プロパティを持つインスタンスを<ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType&gt;</ph>プロパティを設定します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>The source is the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service, and the log is the computer's Application log.</source>
          <target state="translated">ソースは、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>サービスのログで、コンピューターのアプリケーション ログに記録します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>These values are set automatically and cannot be changed for automatic logging of service commands.</source>
          <target state="translated">これらの値は、自動的に設定し、ログ サービス コマンドの自動記録は変更できません。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>When <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>は<ph id="ph2">`true`</ph>開始、停止、一時停止、続行、およびカスタムのコマンドは、アプリケーション イベント ログに自動的に記録します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to write additional messages to that log as well.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>プロパティが追加のメッセージをログに書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>The component calls <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType&gt;</ph> using this <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> member.</source>
          <target state="translated">コンポーネントの呼び出し<ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType&gt;</ph>これを使用して<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.EventLog">
          <source>To report information to a custom event log rather than the Application log, set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> and write instructions within the command-handling methods <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.</source>
          <target state="translated">アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>に<ph id="ph2">`false`</ph>とコマンドの処理メソッド内の指示に書き込み<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>、または<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>適切なログを送信します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ExitCode">
          <source>Gets or sets the exit code for the service.</source>
          <target state="translated">サービスの終了コードを取得または設定します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ExitCode">
          <source>The exit code for the service.</source>
          <target state="translated">サービスの終了コード。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ExitCode">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ExitCode%2A&gt;</ph> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ExitCode%2A&gt;</ph>プロパティをサービス コントロール マネージャーにエラーを示すためにサービスを停止する前に 0 以外の値にします。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="F:System.ServiceProcess.ServiceBase.MaxNameLength">
          <source>Indicates the maximum size for a service name.</source>
          <target state="translated">サービス名の最大サイズを示します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ServiceProcess.ServiceBase.MaxNameLength">
          <source>ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</source>
          <target state="translated">ServiceName および DisplayName 両方に、サービス クラスでプロパティを設定するときに従う必要がありますをサイズ制限があります。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>When implemented in a derived class, <ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /&gt;</ph> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</source>
          <target state="translated">派生クラスに実装されると、<ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /&gt;</ph> は、サービス コントロール マネージャー (SCM) によって Continue コマンドがサービスに送信されるときに実行されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>Specifies actions to take when a service resumes normal functioning after being paused.</source>
          <target state="translated">サービスが一時中断してから通常の操作の再開時に実行されるアクションを指定します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to mirror your application's response to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
          <target state="translated">実装<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>へのアプリケーションの応答のミラーに<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>When you continue the service (either through the Services console or programmatically), the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing runs, and the service becomes active again.</source>
          <target state="translated">(いずれかのサービス コンソールを使用またはプログラムによって)、サービスを続行すると、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>処理を実行して、サービス再びアクティブになった。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> オーバーライドするときに期待どおり、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>プロパティは<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph2">`false`</ph>SCM は一時停止を通過しません、またはサービスにため続行を要求、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>実装されている場合でも、メソッドは呼び出されません。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnContinue">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">SCM で、<ph id="ph1">`Pause`</ph>と<ph id="ph2">`Continue`</ph>コントロールが無効になっているときに<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>The command message sent to the service.</source>
          <target state="translated">サービスに送信されたコマンド メッセージ。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>When implemented in a derived class, <ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /&gt;</ph> executes when the Service Control Manager (SCM) passes a custom command to the service.</source>
          <target state="translated">派生クラスに実装されると、<ph id="ph1">&lt;see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /&gt;</ph> は、サービス コントロール マネージャー (SCM) でカスタム コマンドがサービスに渡されるときに、実行されます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Specifies actions to take when a command with the specified parameter value occurs.</source>
          <target state="translated">パラメーター値が設定されているコマンドの発生時に実行されるアクションを指定します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> 起動、停止、一時停止と継続的なサービス以外の追加の機能を指定します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>The SCM does not examine the custom command to verify whether the service supports the <ph id="ph1">`command`</ph> parameter passed in.</source>
          <target state="translated">SCM では、サービスをサポートしているかどうかを確認するカスタム コマンドについては検査しません、<ph id="ph1">`command`</ph>でパラメーターに渡されます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>It passes the custom command directly to the service.</source>
          <target state="translated">サービスに直接カスタム コマンドを渡します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>If the service does not recognize the <ph id="ph1">`command`</ph> parameter, it does nothing.</source>
          <target state="translated">サービスで認識されない場合、<ph id="ph1">`command`</ph>パラメーター、何もしません。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Custom commands are raised by an <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A&gt;</ph> statement in a <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component.</source>
          <target state="translated">カスタムのコマンドはによって発生させ、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A&gt;</ph>内のステートメント、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph>コンポーネントです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Use a switch statement or if..then condition to handle the custom commands you define on your service.</source>
          <target state="translated">Switch ステートメントを使用する場合、または.サービスで定義するカスタム コマンドを処理する条件です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>The only values for a custom command that you can define in your application or use in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> are those between 128 and 255.</source>
          <target state="translated">アプリケーションで定義したりで使用できるカスタム コマンドの値のみ<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph>128 ~ 255 の範囲とは。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>Integers below 128 correspond to system-reserved values.</source>
          <target state="translated">128 未満の整数は、システム予約値に対応します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>プロパティは<ph id="ph2">`true`</ph>、他のすべてのコマンドと同様に、カスタムのコマンドは、メソッドの実行が成功または失敗するかどうかを報告するイベント ログにエントリを書き込みます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</source>
          <target state="translated">派生クラスに実装されると、Pause コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Specifies actions to take when a service pauses.</source>
          <target state="translated">サービスが一時中断したときに実行されるアクションを指定します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> to specify the processing that occurs when the service receives a Pause command.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>サービスが一時停止コマンドを受け取るときに発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> オーバーライドするときに期待どおり、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>プロパティは<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>When you continue a paused service (either through the Services console or programmatically), the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing is run, and the service becomes active again.</source>
          <target state="translated">(いずれかのサービス コンソールを使用またはプログラムによって)、一時停止したサービスを続行すると、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>処理が実行され、サービスが再度アクティブになります。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>The Pause command only allows your application to react to a specific event.</source>
          <target state="translated">一時停止コマンドは、特定のイベントに反応するため、アプリケーションだけを許可します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> does nothing to the service that you do not define it to do.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> 定義していないことを行うには、サービスに何も行いません。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</source>
          <target state="translated">サービスを一時停止要求を送信すると、一時停止は、すべてのシステム リソースを解放しない必要があるためにシステム リソースを節約できます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</source>
          <target state="translated">たとえば、スレッドのスレッドを開いたままでも、許可できますを停止するのではなく、サービスを一時停止、プロセスによって開かれた場合、サービスを継続するには、そのファイルを再割り当てします必要があります。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>If you define Pause to release all system resources, it behaves like a Stop command.</source>
          <target state="translated">すべてのシステム リソースを解放する一時停止を定義する場合、Stop コマンドと同様に動作します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to <ph id="ph2">`true`</ph>, and override <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>に<ph id="ph2">`true`</ph>、オーバーライドと<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>SCM は、サービスに、一時停止または続行要求を通過するときに発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> 処理を元に戻すに実装する必要があります<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if implemented.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph2">`false`</ph>SCM は一時停止を通過しません、またはサービスにため続行を要求、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>実装されている場合でも、メソッドは呼び出されません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPause">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">SCM で、<ph id="ph1">`Pause`</ph>と<ph id="ph2">`Continue`</ph>コントロールが無効になっているときに<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph> that indicates a notification from the system about its power status.</source>
          <target state="translated">システムからの電源ステータスに関する通知を示す <ph id="ph1">&lt;see cref="T:System.ServiceProcess.PowerBroadcastStatus" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>When implemented in a derived class, executes when the computer's power status has changed.</source>
          <target state="translated">派生クラスに実装されると、コンピューターの電源ステータスの変更時に実行されます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</source>
          <target state="translated">これは中断モードのラップトップ コンピューターに適用されるもので、システムのシャットダウンとは異なります。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>When implemented in a derived class, the needs of your application determine what value to return.</source>
          <target state="translated">派生クラスに実装されると、アプリケーションの要求に応じて返される値が決定します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>For example, if a <ph id="ph1">&lt;see langword="QuerySuspend" /&gt;</ph> broadcast status is passed, you could cause your application to reject the query by returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;see langword="QuerySuspend" /&gt;</ph> ブロードキャスト ステータスが渡されると、<ph id="ph2">&lt;see langword="false" /&gt;</ph> を返すことでアプリケーションでクエリを拒否できます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> to specify the processing that occurs when the system event indicated in the <ph id="ph2">&lt;xref:System.ServiceProcess.PowerBroadcastStatus&gt;</ph> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph>でシステム イベントに示されているときに発生する処理を指定する、<ph id="ph2">&lt;xref:System.ServiceProcess.PowerBroadcastStatus&gt;</ph>列挙--などまたはときに発生コンピューター サスペンド モードで配置バッテリ電力を示します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> オーバーライドするときに期待どおり、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>プロパティは<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <source>A structure that identifies the change type.</source>
          <target state="translated">変更の種類を識別する構造体。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <source>Executes when a change event is received from a Terminal Server session.</source>
          <target state="translated">変更イベントがターミナル サーバー セッションから受信された場合に実行します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <source>You must set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A&gt;</ph> property to <ph id="ph2">`true`</ph> to enable the execution of this method.</source>
          <target state="translated">設定する必要があります、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>このメソッドの実行を有効にします。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>When implemented in a derived class, executes when the system is shutting down.</source>
          <target state="translated">派生クラスに実装されると、システムがシャット ダウンされるときに実行されます。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>Specifies what should occur immediately prior to the system shutting down.</source>
          <target state="translated">システムがシャット ダウンする直前に発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> to specify the processing that occurs when the system shuts down.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph>システム シャット ダウンするときに発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source>This event occurs only when the operating system is shut down, not when the computer is turned off.</source>
          <target state="translated">このイベントは、コンピューターが電源オフ時ではなく、オペレーティング システムをシャット ダウン時にのみ発生します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> オーバーライドするときに期待どおり、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>プロパティは<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Data passed by the start command.</source>
          <target state="translated">Start コマンドによって渡されたデータ。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</source>
          <target state="translated">派生クラスに実装されると、Start コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるとき、またはオペレーティング システムが (自動的に起動するサービスのために) 起動するときに実行されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Specifies actions to take when the service starts.</source>
          <target state="translated">サービスが開始するときに実行されるアクションを指定します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to specify the processing that occurs when the service receives a Start command.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>サービス Start コマンドを受信するときに発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is the method in which you specify the behavior of the service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> サービスの動作を指定する方法です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> can take arguments as a way to pass data, but this usage is rare.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> データを渡す方法として、引数を受け取ることができますが、この使用状況はまれです。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Do not use the constructor to perform processing that should be in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">必要がある処理を実行するコンス トラクターを使用しないでください<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to handle all initialization of your service.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>をサービスのすべての初期化を処理します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The constructor is called when the application's executable runs, not when the service runs.</source>
          <target state="translated">コンス トラクターは、アプリケーションの実行可能ファイルときに呼び出されますが、サービスが実行時ではなく、実行します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The executable runs before <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
          <target state="translated">実行可能ファイルを実行する前に<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</source>
          <target state="translated">続行すると、たとえば、ときに、コンス トラクターは再度呼び出されません SCM は、メモリ内のオブジェクトを既に保持しているためです。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> releases resources allocated in the constructor rather than in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, the needed resources would not be created again the second time the service is called.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>コンス トラクターではなくに割り当てられているリソースを解放<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>、必要なリソースを作成できませんが 2 番目に、サービスが呼び出されるときにもう一度です。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Services can be set to start automatically when the computer reboots by setting the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> on the service's installer to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>.</source>
          <target state="translated">設定して、コンピューターを再起動するときに自動的に開始するサービスを設定することができます、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>するために、サービスのインストーラーに<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>In such a situation, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> would be called at system startup.</source>
          <target state="translated">このような状況で、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>がシステムの起動時に呼び出されます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is expected to be overridden in the derived class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> 派生クラスでオーバーライドされると想定されます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>For the service to be useful, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.</source>
          <target state="translated">有効に機能するサービスの<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>両方のサービス クラスで実装する必要があります。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Process initialization arguments for the service in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method, not in the Main method.</source>
          <target state="translated">サービスの初期化の引数を処理、 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> Main メソッドではなく、メソッドです。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The arguments in the <ph id="ph1">`args`</ph> parameter array can be set manually in the properties window for the service in the Services console.</source>
          <target state="translated">引数、<ph id="ph1">`args`</ph>パラメーター配列は、サービス コンソールで、サービスのプロパティ ウィンドウで手動で設定することができます。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</source>
          <target state="translated">コンソールで入力した引数は保存されません。渡すことが、サービスを一時的に、コントロール パネルから、サービスが開始されたときにします。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<ph id="ph1">\\</ph><bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>service name&gt;<ept id="p1">*</ept>).</source>
          <target state="translated">サービスのレジストリ キーの ImagePath 文字列値に、サービスが自動的に開始されて存在する必要がある引数を配置することができます (hkey_local_machine \system\currentcontrolset\services<ph id="ph1">\\</ph><bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>サービス名 &gt;<ept id="p1">*</ept>)。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <source>You can obtain the arguments from the registry using the <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method, for example:  <ph id="ph2">`string[] imagePathArgs = Environment.GetCommandLineArgs();`</ph>.</source>
          <target state="translated">使用して、レジストリから引数を取得することができます、<ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph>例については、メソッド:<ph id="ph2">`string[] imagePathArgs = Environment.GetCommandLineArgs();`</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</source>
          <target state="translated">派生クラスに実装されると、Stop コマンドがサービス コントロール マネージャー (SCM) によってサービスに送信されるときに実行されます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>Specifies actions to take when a service stops running.</source>
          <target state="translated">サービスが実行を停止したときに実行されるアクションを指定します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to specify the processing that occurs when the service receives a Stop command.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>サービスを停止するコマンドを受信するときに発生する処理を指定します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>When the SCM receives a Stop command, it uses the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> to verify whether the service accepts Stop commands.</source>
          <target state="translated">値を使用して、SCM では、Stop コマンドを受信するときに<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>をサービスが停止コマンドを受け入れるかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the Stop command is passed to the service, and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>は<ph id="ph2">`true`</ph>、Stop コマンドは、サービスに渡されると、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>が定義されている場合、メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the service, the SCM handles the Stop command.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>は実装されていませんサービスでは、SCM が Stop コマンドを処理します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM ignores the Stop command.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>は<ph id="ph2">`false`</ph>、SCM Stop コマンドは無視されます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>It is not passed to the service.</source>
          <target state="translated">サービスが渡されない。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>The Stop command returns and throws an exception.</source>
          <target state="translated">Stop コマンドを返し、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is expected to be overridden in the derived class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> 派生クラスでオーバーライドされると想定されます。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.OnStop">
          <source>For the service to be useful, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.</source>
          <target state="translated">有効に機能するサービスの<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>両方のサービス クラスで実装する必要があります。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>The requested time in milliseconds.</source>
          <target state="translated">要求する時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>Requests additional time for a pending operation.</source>
          <target state="translated">保留中の操作について時間の延長を要求します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A&gt;</ph> method is intended to be called by the overridden <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A&gt;</ph>メソッドが呼び出されるもので、オーバーライドされた<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>、または<ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>要求をサービス コントロール マネージャー (SCM) が応答するいないと、サービスをマークすることを防ぐために、保留中の操作の時間を追加する方法です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>If the pending operation is not a continue, pause, start, or stop, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
          <target state="translated">保留中の操作が続行、一時停止、開始または停止がない場合、<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <source>The service is not in a pending state.</source>
          <target state="translated">サービスは保留状態ではありません。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceBase">
          <source>Provides the main entry point for a service executable.</source>
          <target state="translated">サービスの実行可能ファイルのメイン エントリ ポイントを示します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> which indicates a service to start.</source>
          <target state="translated">開始するサービスを示す <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>Registers the executable for a service with the Service Control Manager (SCM).</source>
          <target state="translated">サービス コントロール マネージャー (SCM) を使用してサービスの実行可能ファイルを登録します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>Call this overload in the <ph id="ph1">`main()`</ph> function of the service executable to register the service with the Service Control Manager.</source>
          <target state="translated">このオーバー ロードを呼び出して、<ph id="ph1">`main()`</ph>サービス、サービス コントロール マネージャーに、サービスを登録する実行可能ファイルの関数。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>After you call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29&gt;</ph>, the Service Control Manager issues a Start command, which results in a call to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method in the service.</source>
          <target state="translated">呼び出した後<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29&gt;</ph>、サービス コントロール マネージャーへの呼び出しで結果 Start コマンドを発行する、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>サービスのメソッドです。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>The service is not started until the Start command is executed.</source>
          <target state="translated">開始コマンドが実行されるまで、サービスが開始されていません。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph> method is called in much the same way as <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph> for Windows Forms applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph>メソッドとほぼ同じ方法で呼び出す<ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph>Windows フォーム アプリケーションです。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an entry is written to the event log if the service specified by the <ph id="ph3">`service`</ph> parameter fails to start.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>は<ph id="ph2">`true`</ph>、によって、サービスが指定されている場合、イベント ログにエントリが書き込まれる、<ph id="ph3">`service`</ph>パラメーターの開始に失敗します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
          <source><ph id="ph1">&lt;paramref name="service" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="service" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>An array of ServiceBase instances, which indicate services to start.</source>
          <target state="translated">ServiceBase インスタンスの配列。開始するサービスを示します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>Registers the executable for multiple services with the Service Control Manager (SCM).</source>
          <target state="translated">複数サービスの実行可能ファイルをサービス コントロール マネージャー (SCM) に登録します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>Call this overload in the <ph id="ph1">`main()`</ph> function of the service executable to register the services with the Service Control Manager.</source>
          <target state="translated">このオーバー ロードを呼び出して、<ph id="ph1">`main()`</ph>サービス、サービス コントロール マネージャーに、サービスを登録する実行可能ファイルの関数。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>After you call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29&gt;</ph>, the Service Control Manager issues Start commands, which result in calls to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> methods in the services.</source>
          <target state="translated">呼び出した後<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29&gt;</ph>、サービス コントロール マネージャーへの呼び出しと、[開始] コマンドの発行、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>サービス内のメソッドです。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>The services are not started until the Start commands are executed.</source>
          <target state="translated">Start コマンドが実行されるまで、サービスは開始されません。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph> method is called in much the same way as the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph> method for Windows Forms applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType&gt;</ph>とほぼ同じ方法でメソッドが呼び出される、 <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType&gt;</ph> Windows フォーム アプリケーションのメソッドです。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an entry is written to the event log if any service in the array fails to start.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph>は<ph id="ph2">`true`</ph>配列内のサービスが開始に失敗した場合、イベント ログにエントリが書き込まれます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>You did not supply a service to start.</source>
          <target state="translated">開始するサービスが指定されていません。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
          <source>The array might be <ph id="ph1">&lt;see langword="null" /&gt;</ph> or empty.</source>
          <target state="translated">配列が <ph id="ph1">&lt;see langword="null" /&gt;</ph> または空である可能性があります。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>Gets the service control handle for the service.</source>
          <target state="translated">サービスのサービス コントロール ハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> structure that contains the service control handle for the service.</source>
          <target state="translated">サービスのサービス コントロール ハンドルを含む <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>The service control handle is used to communicate with the Service Control Manager (SCM).</source>
          <target state="translated">サービス コントロール ハンドルは、サービス コントロール マネージャー (SCM) との通信に使用されます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>The handle can be used to update the service control manager's status information for the calling service using the unmanaged <ph id="ph1">`SetServiceStatus`</ph> function.</source>
          <target state="translated">ハンドルを使用して、アンマネージを使用して、呼び出し側サービスのサービス コントロール マネージャーの状態情報を更新すること<ph id="ph1">`SetServiceStatus`</ph>関数。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>for access to unmanaged code.</source>
          <target state="translated">アンマネージ コードにアクセスします。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <source>The number of arguments in the argument array.</source>
          <target state="translated">引数配列内の引数の数。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> structure that points to an array of arguments.</source>
          <target state="translated">引数配列を指す <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <source>Registers the command handler and starts the service.</source>
          <target state="translated">コマンド ハンドラーを登録し、サービスを開始します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>Gets or sets the short name used to identify the service to the system.</source>
          <target state="translated">システムでサービスを識別するために使用される短い名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The name of the service.</source>
          <target state="translated">サービスの名前。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> identifies the service to the Service Control Manager.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>サービス コントロール マネージャーにサービスを識別します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The value of this property must be identical to the name recorded for the service in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property of the corresponding installer class.</source>
          <target state="translated">このプロパティの値は、そのサービスに対して記録された名前と同じにする必要があります、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph>インストーラーの対応するクラスのプロパティです。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>In code, the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service is usually set in the <ph id="ph2">`main()`</ph> function of the executable.</source>
          <target state="translated">コードでは、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>サービスの通常は設定、<ph id="ph2">`main()`</ph>実行可能ファイルの関数。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> is also used to specify the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph> associated with the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>指定にも使用される、<ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType&gt;</ph>に関連付けられている、<ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>This <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> is an instance that writes service command information to the Application log.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph>インスタンス サービス コマンドの情報をアプリケーション ログに書き込みますです。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service writes to the event log.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>、イベント ログのソース文字列を指定する必要があります前に設定する、サービスがイベント ログに書き込みます。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>Trying to access the event log before the source name is set causes an exception to be thrown.</source>
          <target state="translated">スローする例外が発生したソース名を設定する前に、イベント ログにアクセスしようとしています。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The service has already been started.</source>
          <target state="translated">サービスが既に開始されています。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /&gt;</ph> property cannot be changed once the service has started.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /&gt;</ph> プロパティは、サービスが開始された後は変更できません。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceBase.ServiceName">
          <source>The specified name is a zero-length string or is longer than <ph id="ph1">&lt;see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /&gt;</ph>, or the specified name contains forward slash or backslash characters.</source>
          <target state="translated">指定された名前が、長さ 0 の文字列であるか、または <ph id="ph1">&lt;see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /&gt;</ph> より長い文字列です。または、指定された名前にスラッシュまたはバック スラッシュ文字が含まれています。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>Stops the executing service.</source>
          <target state="translated">サービスの実行を停止します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Stop%2A&gt;</ph> method sets the service state to indicate a stop is pending and calls the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Stop%2A&gt;</ph>メソッドは、停止が保留中を示すためにサービスの状態と呼び出しを設定、<ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>After the application is stopped, the service state is set to stopped.</source>
          <target state="translated">アプリケーションが停止したら、サービスの状態が停止に設定します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceBase.Stop">
          <source>If the application is a hosted service, the application domain is unloaded.</source>
          <target state="translated">アプリケーションが、ホステッド サービスの場合は、アプリケーション ドメインがアンロードされます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>