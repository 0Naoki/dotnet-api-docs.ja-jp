<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e6765d4baec8d048456f421424ebdc9a9b90ced" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70564213" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.ServiceProcess.ServiceBase" /> を拡張するクラスをインストールしてサービスを実装します。 このクラスは、サービス アプリケーションのインストール時に、インストール ユーティリティで呼び出されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 は<xref:System.ServiceProcess.ServiceInstaller> 、関連付けられているサービスに固有の機能を持ちます。 このファイルは、サービスに関連付けられているレジストリ値を HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services レジストリキー内のサブキーに書き込むためにインストールユーティリティによって使用されます。 サービスは、このサブキーの中で ServiceName によって識別されます。 サブキーには、サービスが属する実行可能ファイルまたは .dll の名前も含まれます。  
  
 サービスをインストールするには、 <xref:System.Configuration.Install.Installer>クラスを継承するプロジェクトインストーラークラスを作成し、クラスの<xref:System.ComponentModel.RunInstallerAttribute>属性をに`true`設定します。 プロジェクト内で、サービスアプリケーション<xref:System.ServiceProcess.ServiceProcessInstaller>ごとに1つのインスタンスと<xref:System.ServiceProcess.ServiceInstaller> 、アプリケーションの各サービスに1つのインスタンスを作成します。 プロジェクトインストーラークラスコンストラクター内で、インスタンス<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンスを使用してサービスのインストールプロパティを設定し、インスタンスを<xref:System.Configuration.Install.Installer.Installers%2A>コレクションに追加します。  
  
> [!NOTE]
>  インストーラーインスタンスを追加するには、コンストラクターを使用することをお勧めします。ただし、 <xref:System.Configuration.Install.Installer.Installers%2A> <xref:System.ServiceProcess.ServiceInstaller.Install%2A>メソッドのコレクションにを追加する必要がある場合は、 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド内のコレクションに対して同じ追加を実行してください。  
  
 <xref:System.Configuration.Install.Installer>クラスから派生するすべてのクラスについて、 <xref:System.Configuration.Install.Installer.Installers%2A>コレクションの状態は、メソッド<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドで同じである必要があります。 ただし、カスタムインストーラークラスコンストラクターの<xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.Configuration.Install.Installer.Installers%2A>コレクションにインストーラーインスタンスを追加<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>すると、メソッドとメソッドを使用してコレクションのメンテナンスを回避できます。インストールユーティリティが呼び出されると、 <xref:System.ComponentModel.RunInstallerAttribute>属性が検索されます。 属性が`true`の場合、ユーティリティは、プロジェクトインストーラーに関連付けられた<xref:System.Configuration.Install.Installer.Installers%2A>コレクションに追加されたすべてのサービスをインストールします。 <xref:System.ComponentModel.RunInstallerAttribute> が `false` であるか、または存在しない場合、インストールユーティリティはプロジェクトインストーラーを無視します。  
  
 プロジェクト<xref:System.ServiceProcess.ServiceProcessInstaller>インストールクラスに関連付けられているでは<xref:System.ServiceProcess.ServiceInstaller> 、プロジェクト内のすべてのインスタンスに共通の情報がインストールされます。 このサービスにインストールプロジェクト内の他のサービスと分離するものがある場合は、そのサービス固有の情報がこの方法でインストールされます。  
  
> [!NOTE]
>  は、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>から<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 派生し <xref:System.ServiceProcess.ServiceBase> たクラスのと同じであることが重要です。 通常、サービスの<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>プロパティの値は、サービスアプリケーションの実行可能ファイルの Main () 関数内で設定されます。 サービスコントロールマネージャーは、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>プロパティを使用して、この実行可能ファイル内でサービスを検索します。  
  
 プロジェクトインストーラーの<xref:System.Configuration.Install.Installer.Installers%2A>コレクションに追加する<xref:System.ServiceProcess.ServiceInstaller>前または後に、の他のプロパティを変更できます。 たとえば、再起動時に<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>サービスを自動的に開始するようにサービスのを設定したり、サービスを手動で開始するようにユーザーに要求したりすることができます。  
  
 通常、コード<xref:System.ServiceProcess.ServiceInstaller>内でメソッドを呼び出すことはありません。通常は、インストールユーティリティによってのみ呼び出されます。 インストールユーティリティでは、インストール<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>プロセス<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>中にメソッドとメソッドが自動的に呼び出されます。 必要に応じて、以前にインストールされ<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>たすべて<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>のコンポーネントに対して (または) を呼び出すことによって、エラーをバックアップします。  
  
 インストールユーティリティがを<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>呼び出して、オブジェクトを削除します。  
  
 アプリケーションのインストールルーチンは、プロジェクトインストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>を使用して、既にインストールされているコンポーネントに関する情報を自動的に管理します。 この状態情報は<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスとして継続的に更新され、各<xref:System.ServiceProcess.ServiceInstaller>インスタンスはユーティリティによってインストールされます。 通常、コードで状態情報を明示的に変更する必要はありません。  
  
 インストールが実行されると、 <xref:System.Diagnostics.EventLogInstaller> <xref:System.ServiceProcess.ServiceBase>派生クラスに関連付けられているイベントログソースをインストールするためのが自動的に作成されます。 このソースの<xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>プロパティは、コンストラクターによってコンピューターのアプリケーションログに設定されます。 <xref:System.Diagnostics.EventLog.Log%2A> (サービスのと<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>同じ) <xref:System.Diagnostics.EventLog.Source%2A> のを設定すると、が自動的に同じ値に設定されます。 <xref:System.ServiceProcess.ServiceInstaller> インストールが失敗すると、ソースのインストールが以前にインストールされたサービスと共にロールバックされます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドは、サービスが実行されている場合、そのサービスを停止しようとします。 成功したかどうか<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>にかかわらず、に<xref:System.ServiceProcess.ServiceInstaller.Install%2A>よって行われた変更を元に戻します。 イベントログ用に新しいソースが作成された場合は、ソースが削除されます。  
  
   
  
## Examples  
 次の例では、という`MyProjectInstaller`プロジェクトインストーラーを作成します。これは、から<xref:System.Configuration.Install.Installer>継承されます。 "Hello World Service 1" と "Hello World Service 2" という2つのサービスを含むサービス実行可能ファイルがあることを前提としています。 (インストールユーティリティに`MyProjectInstaller`よって呼び出される<xref:System.ServiceProcess.ServiceInstaller> ) のコンストラクター内では、 <xref:System.ServiceProcess.ServiceProcessInstaller>これらのサービスごとにオブジェクトが作成され、実行可能ファイルに対してが作成されます。 インストールユーティリティで有効なインストーラー `MyProjectInstaller` <xref:System.ComponentModel.RunInstallerAttribute>として認識されるようにするに`true`は、属性をに設定します。  
  
 インストーラーが<xref:System.Configuration.Install.Installer.Installers%2A>コレクションに追加される前に、プロセスインストーラーとサービスインストーラーに対してオプションのプロパティが設定されます。 インストールユーティリティがにアクセス`MyProjectInstaller`すると、へ<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>の呼び出し<xref:System.Configuration.Install.Installer.Installers%2A>によってコレクションに追加されたオブジェクトが順にインストールされます。 このプロセスの間、インストーラーは、インストールされているオブジェクトを示す状態情報を保持するため、インストールエラーが発生した場合は、各オブジェクトを順番にバックアップできます。  
  
 通常、プロジェクトインストーラークラスのインスタンスを明示的に作成することはありません。 これを作成して<xref:System.ComponentModel.RunInstallerAttribute>属性を構文に追加しますが、これは実際にクラスを呼び出してインスタンス化するインストールユーティリティです。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceProcess.ServiceInstaller" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスをインストールするには、 <xref:System.Configuration.Install.Installer>クラスを継承するプロジェクトインストーラークラスを作成し、クラスの<xref:System.ComponentModel.RunInstallerAttribute>属性をに`true`設定します。 プロジェクト内で、サービスアプリケーション<xref:System.ServiceProcess.ServiceProcessInstaller>ごとに1つのインスタンスと<xref:System.ServiceProcess.ServiceInstaller> 、アプリケーションの各サービスに1つのインスタンスを作成します。 プロジェクトインストーラークラスコンストラクター内で、インスタンス<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンスを使用してサービスのインストールプロパティを設定し、インスタンスを<xref:System.Configuration.Install.Installer.Installers%2A>コレクションに追加します。  
  
 コンストラクター <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>は、 <xref:System.Diagnostics.EventLog.Log%2A>プロパティがコンピューターの<xref:System.Diagnostics.EventLogInstaller>アプリケーションログに設定されているイベントログソースと、を自動的に生成します。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceInstaller>サービスのと <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 同じになるのを設定すると、イベントログのプロパティは自動的に同じ値に設定されます。 <xref:System.Diagnostics.EventLog.Source%2A> インストールが失敗した場合、ソースは自動的に削除されます。  
  
 コンストラクター <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>は、 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>プロパティをに`ServiceStartMode.Manual`設定して、ユーザーがサービスを開始するように指定します。 プロパティをに`ServiceStartMode.Automatic`リセットすると、コンピューターの再起動時にサービスを開始するように指定できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">コピー元の <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>プロパティを <see cref="T:System.ServiceProcess.ServiceBase" /> のインスタンスからこのインストーラーへコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、コード内で呼び出されることはほとんどありません。 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>は、通常、デザイナーによってのみ呼び出されます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>`component`パラメーターのサービス名<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>を<xref:System.ServiceProcess.ServiceInstaller>インスタンスのに保存します。 (パラメーターは、から<xref:System.ServiceProcess.ServiceBase>派生したクラスのインスタンスである必要があるため、 `component`に<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>はプロパティがあることが保証されています)。  
  
> [!NOTE]
>  Visual Studio デザイナーを使用している場合、このクラスをインストーラーとして指定した`Add Installer`コンポーネントをユーザーがクリックすると、デザイン時にこのメソッドが呼び出されます。 インストーラーは、ライブコンポーネントから実行できるすべての情報を取得し、インストール時に使用するために保存します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このインストーラーに関連付けているコンポーネントが <see cref="T:System.ServiceProcess.ServiceBase" /> から継承されません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>他の自動的に開始されるサービスが実行されるまでサービスの開始を遅延するかどうかを示す値を取得または設定します。</summary>
        <value>サービスの自動開始を遅延する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A>はどのサービスにも適用できますが、サービスの開始モードが<xref:System.ServiceProcess.ServiceStartMode.Automatic>でない限り無視されます。 この設定は、次回システムを再起動したときに有効になります。 サービスコントロールマネージャーは、サービスの特定の開始時刻を保証しません。  
  
 遅延自動開始サービスは、負荷の順序付けグループのメンバーにすることはできませんが、別の自動開始サービスに依存することができます。 アプリケーションが読み込み前に遅延自動開始サービスを呼び出すと、呼び出しは失敗します。  
  
 遅延自動開始をサポートしていないオペレーティングシステムでは、このプロパティを設定しても効果はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスの説明を取得または設定します。</summary>
        <value>サービスの説明。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.Description%2A>プロパティを使用して、インストールされているサービスの目的をユーザーに説明します。 ユーザーは、インストールされているサービスの詳細を表示するアプリケーションで、サービスの説明を表示できます。  
  
 たとえば、Windows XP を使用してサービスの説明を表示するには、サービスコントロールコマンドラインユーティリティ (Sc.exe) を使用するか、または**コンピューターの管理**コンソールの **[サービス]** ノードでサービスの説明を表示します。  
  
   
  
## Examples  
 次のコード例では、新しい Windows サービスアプリケーションのインストールプロパティを設定します。 この例では、表示名と説明と共にサービス名を設定します。 サービスのインストールプロパティを割り当てると、この例では<xref:System.ServiceProcess.ServiceInstaller>オブジェクト<xref:System.Configuration.Install.Installer.Installers%2A>をコレクションに追加します。  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがサービスを識別するための表示名を示します。</summary>
        <value>対話形式のツールで頻繁に使用される、サービスに関連付けられた名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービス<xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>コントロールマネージャーでは、を使用して、ユーザーが判読できるサービスのわかりやすい名前を指定します。 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>はレジストリ値ですが、レジストリキーとしては使用されません。 したがって、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>プロパティ値に対する制限は適用されません。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>は HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services レジストリキーとして使用されるため、制限されます。  
  
 この表示名は、サービスを識別するためにインストールユーティリティによって使用されることはありません。そのため、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>プロパティの場合と同様に、名前の選択には制限はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">インストールに関連付けられているコンテキスト情報を格納する <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>サービス アプリケーション情報をレジストリに書き込んで、サービスをインストールします。 このメソッドは、セットアップ ツールで使用されます。セットアップ ツールは適切なメソッドを自動的に処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、コード<xref:System.ServiceProcess.ServiceInstaller>内でメソッドを呼び出すことはありません。通常は、インストールユーティリティによってのみ呼び出されます。 インストールユーティリティは、インストール時<xref:System.ServiceProcess.ServiceInstaller.Install%2A>に自動的にメソッドを呼び出します。 必要に応じて、例外を生成した<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>オブジェクトに対してを呼び出すことによって、エラーをバックアップします。  
  
 アプリケーションのインストールルーチンは、プロジェクトインストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>を使用して、既にインストールされているコンポーネントに関する情報を自動的に管理します。 この<xref:System.ServiceProcess.ServiceInstaller.Install%2A>状態情報`stateSaver` は、 <xref:System.ServiceProcess.ServiceInstaller> パラメーターとしてに渡され、インスタンスとして継続的に更新され、各インスタンスがユーティリティによってインストールされます。 <xref:System.ServiceProcess.ServiceProcessInstaller> 通常、コードでこの状態情報を明示的に変更する必要はありません。  
  
 プロジェクト<xref:System.ServiceProcess.ServiceProcessInstaller>インストールクラスに関連付けられているでは<xref:System.ServiceProcess.ServiceInstaller> 、プロジェクト内のすべてのインスタンスに共通の情報がインストールされます。 このサービスにインストールプロジェクト内の他のサービスと分離するものがある場合は、そのサービス固有の情報がこの方法でインストールされます。  
  
 サービスをインストールするには、 <xref:System.Configuration.Install.Installer>クラスを継承するプロジェクトインストーラークラスを作成し、クラスの<xref:System.ComponentModel.RunInstallerAttribute>属性をに`true`設定します。 プロジェクト内で、サービスアプリケーション<xref:System.ServiceProcess.ServiceProcessInstaller>ごとに1つのインスタンスと<xref:System.ServiceProcess.ServiceInstaller> 、アプリケーションの各サービスに1つのインスタンスを作成します。 プロジェクトインストーラークラスコンストラクター内で、インスタンス<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンスを使用してサービスのインストールプロパティを設定し、インスタンスを<xref:System.Configuration.Install.Installer.Installers%2A>コレクションに追加します。  
  
> [!NOTE]
>  インストーラーインスタンスを追加するには、コンストラクターを使用することをお勧めします。ただし、 <xref:System.Configuration.Install.Installer.Installers%2A> <xref:System.ServiceProcess.ServiceInstaller.Install%2A>メソッドのコレクションにを追加する必要がある場合は、 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド内のコレクションに対して同じ追加を実行してください。  
  
 <xref:System.Configuration.Install.Installer>クラスから派生するすべてのクラスについて、 <xref:System.Configuration.Install.Installer.Installers%2A>コレクションの状態は、メソッド<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドで同じである必要があります。 ただし、カスタムインストーラークラスコンストラクターの<xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.Configuration.Install.Installer.Installers%2A>コレクションにインストーラーインスタンスを追加<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>すると、メソッドとメソッドを使用してコレクションのメンテナンスを回避できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">セットアップ ツールに、実行可能ファイルの <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> が含まれていません。  
  
または 
アセンブリのファイル名が <see langword="null" /> または空の文字列です。  
  
- または - 
サービス名が無効です。  
  
- または - 
サービス コントロール マネージャーを開くことができませんでした。</exception>
        <exception cref="T:System.ArgumentException">サービスの表示名の長さが 255 文字を超えています。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">サービスへのハンドルが生成できませんでした。  
  
 または  
  
 この名前のサービスは既にインストールされています。</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">現在のインストーラーと比較される <see cref="T:System.Configuration.Install.ComponentInstaller" />。</param>
        <summary>2 つのインストーラーが同じサービスをインストールするかどうかを示します。</summary>
        <returns>両方のインストーラーで <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> を呼び出すと、同じサービスがインストールされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A>たとえば、2つのインストーラーが同じユーザーアカウントで同じサービスをインストールするかどうかを示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">インストールに関連付けられているコンテキスト情報を格納する <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>インストール プロシージャによってレジストリに書き込まれたサービス アプリケーション情報をロールバックします。 このメソッドは、セットアップ ツールで使用されます。セットアップ ツールは適切なメソッドを自動的に処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、コード<xref:System.ServiceProcess.ServiceInstaller>内でメソッドを呼び出すことはありません。通常は、インストールユーティリティによってのみ呼び出されます。 インストールユーティリティでは、インストール<xref:System.ServiceProcess.ServiceInstaller.Install%2A>プロセス中にメソッドが自動的に呼び出されます。 必要に応じて、例外を生成した<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>オブジェクトに対してを呼び出すことによって、エラーをバックアップします。  
  
 アプリケーションのインストールルーチンは、プロジェクトインストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>を使用して、既にインストールされているコンポーネントに関する情報を自動的に管理します。 この<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>状態情報`savedState` は、 <xref:System.ServiceProcess.ServiceInstaller> パラメーターとしてに渡され、インスタンスとして継続的に更新され、各インスタンスがユーティリティによってインストールされます。 <xref:System.ServiceProcess.ServiceProcessInstaller> 通常、コードでこの状態情報を明示的に変更する必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを識別するためにシステムが使用する名前を示します。 このプロパティは、インストールするサービスの <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> と同じにする必要があります。</summary>
        <value>インストールされるサービスの名前。 この値は、インストール ユーティリティがサービスをインストールする前に設定する必要があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 は、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>から<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 派生し <xref:System.ServiceProcess.ServiceBase> たクラスのと同じであることが重要です。 通常、サービスの<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>プロパティの値は、サービスアプリケーションの実行可能ファイルの Main () 関数内で設定されます。 サービスコントロールマネージャーは、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>プロパティを使用して、この実行可能ファイル内でサービスを検索します。  
  
 サービス<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>のインストーラー <xref:System.Diagnostics.EventLog.Source%2A>のを設定すると、関連付けられているイベントログのが同じ値に設定されます。 これにより、サービスは、コンピューター上のアプリケーションログに対するサービスコマンド (開始や停止など) の呼び出しを自動的にログに記録できます。  
  
> [!NOTE]
>  同じ名前のソースがコンピューターに既に存在していても、アプリケーションログ以外のログにある場合は、例外がスローされます。 ソースが存在し、アプリケーションログに関連付けられている場合、そのソースはサービスへのコマンド呼び出しを報告するために使用され、例外はスローされません。  
  
 に<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>を指定`null`したり、長さを0にすることはできません。 最大サイズは256文字です。 また、前方または後方のスラッシュ、'/'、また\\は ' ' を含めることも、10進値32未満の値を持つ ASCII 文字セットの文字を含めることもできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> プロパティが無効です。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを実行するために実行する必要があるサービスを示します。</summary>
        <value>このインストーラーに関連付けられているサービスを実行する前に実行する必要があるサービスの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスを開始する前に、他のサービスの実行を要求することができます。 このプロパティからの情報は、レジストリのキーに書き込まれます。 ユーザー (または自動起動の場合はシステム) がサービスを実行しようとすると、サービスコントロールマネージャー (SCM) は、配列内の各サービスが既に開始されていることを確認します。  
  
 配列内のいずれかのサービスが実行されていない場合、SCM はそれらを起動しようとします。 これには、 `Manual`の<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>サービスも含まれます。  
  
 このサービスが依存しているサービスを開始できない場合、このサービスは開始されません。 システムが起動されない場合、例外はスローされません。これは、システムレベルで例外処理が行われないためです。 サービス開始エラーを処理し、コードにこれを実装する方法を決定します。 通常、サービスの開始に失敗した場合は、起動時にユーザーにダイアログが表示されます。  
  
 サービスが開始されない場合、エントリはアプリケーションイベントログに書き込まれます。  
  
 このサービスが依存しているサービスは、同じ実行可能ファイル内に存在する必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスがいつ、どのように開始されるかを示します。</summary>
        <value>サービスを開始する方法を表す <see cref="T:System.ServiceProcess.ServiceStartMode" />。 既定値は <see langword="Manual" /> です。再起動の後にサービスが自動的に開始されないように指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を設定<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>して、再起動後にサービスが自動的に開始されるようにするか、ユーザーがサービスを手動で開始する必要があるかを指定します。 また、サービスを無効にして、手動またはプログラムによって有効になるまで、開始できないように指定することもできます。  
  
 インストール後に<xref:System.ServiceProcess.ServiceInstaller>プロパティの値を変更することはできません。 を変更<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>するには、サービスをアンインストールしてから再インストールするか、サービスコントロールマネージャーを使用して設定を手動で変更する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">開始モードが、<see cref="T:System.ServiceProcess.ServiceStartMode" /> 列挙体の値ではありません。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">インストールに関連付けられているコンテキスト情報を格納する <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>サービスに関する情報をレジストリから削除して、サービスをアンインストールします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アンインストールを開始する前に、サービスを停止しようとしています。 サービスを停止できない場合、例外はキャッチされず、メソッドはサービスの削除を続行します。  
  
 通常、コード<xref:System.ServiceProcess.ServiceInstaller>内でメソッドを呼び出すことはありません。通常は、インストールユーティリティによってのみ呼び出されます。 Installutil.exe は、サービスのアンインストールとインストールに使用されます。をアンインストールするには、コマンドライン呼び出しでスイッチを実行します。  
  
 アプリケーションのアンインストールルーチンは、プロジェクトインストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>を使用して、アンインストールするコンポーネントに関する情報を自動的に管理します。 この<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>状態情報`savedState` は、 <xref:System.ServiceProcess.ServiceInstaller> パラメーターとしてに渡され、インスタンスとして継続的に更新され、各インスタンスがユーティリティによってインストールされます。 <xref:System.ServiceProcess.ServiceProcessInstaller> 通常、コードでこの状態情報を明示的に変更する必要はありません。  
  
 <xref:System.Configuration.Install.Installer>クラスから派生するすべてのクラスについて、 <xref:System.Configuration.Install.Installer.Installers%2A>コレクションの状態は、メソッド<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドで同じである必要があります。 ただし、カスタムインストーラークラスコンストラクターの<xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.Configuration.Install.Installer.Installers%2A>コレクションにインストーラーインスタンスを追加<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>すると、メソッドとメソッドを使用してコレクションのメンテナンスを回避できます。  
  
 をアンインストールするためのロールバックメカニズムはありません。そのため、1つのサービスのアンインストールに失敗した場合、アンインストールされる他のサービス (通常は同じインストールプロジェクト内) は影響を受けません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">サービス コントロール マネージャーを開くことができませんでした。  
  
 - または -  
  
 サービスへのハンドルを取得できませんでした。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
