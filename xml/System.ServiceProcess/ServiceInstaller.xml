<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b69845d38861eb8bf36caf960b2e2d06cfb6e478" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48717477" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.ServiceProcess.ServiceBase" /> を拡張するクラスをインストールしてサービスを実装します。 このクラスは、サービス アプリケーションのインストール時に、インストール ユーティリティで呼び出されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller>関連付けられているサービスに固有の機能です。 Hkey_local_machine \system\currentcontrolset\services レジストリ キーのサブキーをサービスに関連付けられたレジストリ値を書き込むため、インストール ユーティリティによって使用されます。 サービスは、このサブキー内で識別されます。 サブキーには、実行可能ファイルまたはサービスが属する .dll の名前も含まれています。  
  
 継承されるプロジェクト インストーラー クラスを作成、サービスをインストールする、<xref:System.Configuration.Install.Installer>クラスし、設定、<xref:System.ComponentModel.RunInstallerAttribute>属性をクラス`true`します。 プロジェクト内で 1 つ作成<xref:System.ServiceProcess.ServiceProcessInstaller>サービス アプリケーション、および 1 つごとにインスタンス<xref:System.ServiceProcess.ServiceInstaller>アプリケーション内の各サービスのインスタンス。 クラスのコンス トラクター、プロジェクト インストーラー内でサービスを使用して、インストールのプロパティを設定、<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンス、およびインスタンスの追加、<xref:System.Configuration.Install.Installer.Installers%2A>コレクション。  
  
> [!NOTE]
>  インストーラーのインスタンスを追加するため、コンス トラクターを使用することをお勧めただしに追加する必要がある場合、<xref:System.Configuration.Install.Installer.Installers%2A>内のコレクション、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>メソッドで、コレクションに同じ追加機能を実行してください、<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド。  
  
 すべてのクラスから派生する、<xref:System.Configuration.Install.Installer>クラスの状態、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションが同じである必要があります、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド。 ただし、全体でコレクションのメンテナンスを回避できます、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドにインストーラーのインスタンスを追加する場合、<xref:System.Configuration.Install.Installer.Installers%2A>カスタム インストーラー クラスのコンス トラクター内のコレクション。インストール ユーティリティが呼び出されると、検索、<xref:System.ComponentModel.RunInstallerAttribute>属性。 属性がある場合`true`、ユーティリティに追加されたすべてのサービスのインストール、<xref:System.Configuration.Install.Installer.Installers%2A>プロジェクト インストーラーに関連付けられているコレクション。 場合<xref:System.ComponentModel.RunInstallerAttribute>は`false`か、存在しないか、インストール ユーティリティ プロジェクト インストーラーは無視されます。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>情報に関連付けられた、プロジェクトのインストール クラス インストールすべてに共通する<xref:System.ServiceProcess.ServiceInstaller>プロジェクト内のインスタンス。 このサービスが何もインストール プロジェクトの他のサービスから分離する場合、そのサービスに固有の情報は、このメソッドによってインストールされます。  
  
> [!NOTE]
>  重要ですが、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>と同じで、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>から派生したクラスの<xref:System.ServiceProcess.ServiceBase>します。 値では、通常、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>サービス アプリケーションの実行可能ファイルの Main() 関数内で、サービスのプロパティが設定されています。 サービス コントロール マネージャーを使用して、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>プロパティをこの実行可能ファイル内でサービスを見つけます。  
  
 その他のプロパティを変更することができます、<xref:System.ServiceProcess.ServiceInstaller>前に、または後に追加すること、<xref:System.Configuration.Install.Installer.Installers%2A>プロジェクト インストーラーのコレクション。 たとえば、サービスの<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>の再起動時に自動的にサービスを開始または、ユーザー、サービスを手動で開始する必要がありますに設定することがあります。  
  
 通常がないメソッドを呼び出す、<xref:System.ServiceProcess.ServiceInstaller>は、コード内で一般的に呼び出される、インストール ユーティリティでのみです。 インストール ユーティリティが自動的に呼び出し、<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>と<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>インストール プロセス中にメソッド。 バックアップ実行の障害を必要に応じて、呼び出すことによって<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(または<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) は以前にインストールされたすべてのコンポーネント。  
  
 インストール ユーティリティ呼び出し<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>オブジェクトを削除します。  
  
 アプリケーションのインストールが自動的にプロジェクトのインストーラーを使用して、既にインストールされているコンポーネントに関する情報を保持<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>します。 この状態情報は継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンス、および各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされています。 状態情報を明示的に変更するコードを通常必要はありません。  
  
 自動的に作成し、インストールを実行するときに、<xref:System.Diagnostics.EventLogInstaller>に関連付けられているイベント ログ ソースをインストールする、<xref:System.ServiceProcess.ServiceBase>クラスを派生します。 <xref:System.Diagnostics.EventLog.Log%2A>このソースのプロパティが設定されて、<xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>コンピューターのアプリケーション ログにコンス トラクター。 設定すると、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>の<xref:System.ServiceProcess.ServiceInstaller>(と同じにする必要があります、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>サービスの)、<xref:System.Diagnostics.EventLog.Source%2A>は自動的に同じ値に設定します。 インストール エラーのソースのインストールが以前にインストールされているサービスとは、ロールバックされます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドが実行されている場合、サービスを停止しようとしました。 または、これが成功するかどうか<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>によって行われた変更を元に戻します<xref:System.ServiceProcess.ServiceInstaller.Install%2A>します。 イベントのログ記録を新しいソースを作成した場合、ソースが削除されます。  
  
   
  
## Examples  
 次の例と呼ばれる、プロジェクト インストーラーを作成する`MyProjectInstaller`から継承される<xref:System.Configuration.Install.Installer>します。 「Hello World サービス 1」2 つのサービスを含むサービス実行可能ファイルがあることが前提とし、"2" Hello World のサービス。 コンス トラクター内で`MyProjectInstaller`(これが呼び出す、インストール ユーティリティで)、<xref:System.ServiceProcess.ServiceInstaller>オブジェクトは、これらの各サービス、および作成<xref:System.ServiceProcess.ServiceProcessInstaller>実行可能ファイルが作成されます。 インストール ユーティリティが認識する`MyProjectInstaller`として有効なインストーラー、<xref:System.ComponentModel.RunInstallerAttribute>属性に設定されて`true`します。  
  
 インストーラーに追加する前に、プロセスのインストーラーおよびサービスのインストーラーで省略可能なプロパティが設定されて、<xref:System.Configuration.Install.Installer.Installers%2A>コレクション。 インストール ユーティリティにアクセスするときに`MyProjectInstaller`に追加されたオブジェクト、<xref:System.Configuration.Install.Installer.Installers%2A>を呼び出すことによってコレクション<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>順番でインストールされています。 処理中には、インストーラーは、オブジェクトがインストールされているため、それぞれのバックアップさらに、インストール エラーが発生した場合を示す状態情報を保持します。  
  
 通常、プロジェクト インストーラー クラスのインスタンスを明示的に作成するはできません。 作成し、追加し、は、<xref:System.ComponentModel.RunInstallerAttribute>属性の構文を実際に呼び出すし、そのためインスタンス化のクラスをインストール ユーティリティが。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceProcess.ServiceInstaller" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 継承されるプロジェクト インストーラー クラスを作成、サービスをインストールする、<xref:System.Configuration.Install.Installer>クラスし、設定、<xref:System.ComponentModel.RunInstallerAttribute>属性をクラス`true`します。 プロジェクト内で 1 つ作成<xref:System.ServiceProcess.ServiceProcessInstaller>サービス アプリケーション、および 1 つごとにインスタンス<xref:System.ServiceProcess.ServiceInstaller>アプリケーション内の各サービスのインスタンス。 クラスのコンス トラクター、プロジェクト インストーラー内でサービスを使用して、インストールのプロパティを設定、<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンス、およびインスタンスの追加、<xref:System.Configuration.Install.Installer.Installers%2A>コレクション。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>コンス トラクターは、イベント ログを自動的に生成されますがソース<xref:System.Diagnostics.EventLog.Log%2A>プロパティが、コンピューターのアプリケーション ログ、および<xref:System.Diagnostics.EventLogInstaller>します。 設定すると、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>の<xref:System.ServiceProcess.ServiceInstaller>と同じにする必要があります、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 、サービスの<xref:System.Diagnostics.EventLog.Source%2A>イベント ログのプロパティが自動的に同じ値に設定します。 インストールの失敗した場合、ソースが自動的に削除されます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>コンス トラクターのセット、<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>プロパティを`ServiceStartMode.Manual`をユーザーがサービスを開始することを指定します。 プロパティをリセットできます`ServiceStartMode.Automatic`コンピューターが再起動したら、サービスを開始するかを指定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">コピー元の <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>プロパティを <see cref="T:System.ServiceProcess.ServiceBase" /> のインスタンスからこのインストーラーへコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コード内で、このメソッドを呼び出すことはほとんどありませんが。 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 通常、デザイナーによってのみ呼び出されます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> サービスの名前を保存、`component`パラメーターを<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>の<xref:System.ServiceProcess.ServiceInstaller>インスタンス。 (パラメーターから派生したクラスのインスタンスである必要がありますので<xref:System.ServiceProcess.ServiceBase>、`component`させることが保証されます、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>プロパティです)。  
  
> [!NOTE]
>  Visual Studio デザイナーを使用している場合、ユーザーがクリックすると、デザイン時にこのメソッドが呼び出されます。`Add Installer`コンポーネント インストーラーとしてこのクラスを指定します。 インストーラーは、すべての情報をライブのコンポーネントから、インストール時に使用するため保存します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このインストーラーに関連付けているコンポーネントが <see cref="T:System.ServiceProcess.ServiceBase" /> から継承されません。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>他の自動的に開始されるサービスが実行されるまでサービスの開始を遅延するかどうかを示す値を取得または設定します。</summary>
        <value>サービスの自動開始を遅延する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A>プロパティは、任意のサービスに適用されることができますが、サービスの開始モードがない限りは無視されます<xref:System.ServiceProcess.ServiceStartMode.Automatic>します。 設定は、次に、システムが再起動したときに有効にします。 サービス コントロール マネージャーでは、サービスの特定の開始時間は保証されません。  
  
 遅延自動起動サービスが読み込み順序、グループのメンバーにすることはできませんが、別の自動開始サービスに依存できます。 アプリケーションで読み込まれる前に遅延自動起動サービスを呼び出す場合、呼び出しが失敗します。  
  
 遅延自動起動をサポートしないオペレーティング システムでは、このプロパティの設定による影響はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスの説明を取得または設定します。</summary>
        <value>サービスの説明。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.ServiceProcess.ServiceInstaller.Description%2A>プロパティをユーザーにインストールされているサービスの目的を説明します。 ユーザーは、インストールされているサービスの詳細を表示するアプリケーションでは、サービスの説明を表示できます。  
  
 たとえば、Windows XP を使用して、サービス コントロール コマンド ライン ユーティリティ (Sc.exe) を使用したサービスの説明を表示する、またはサービスの説明を表示することができます、**サービス**のノード、**コンピュータの管理**コンソール。  
  
   
  
## Examples  
 次のコード例では、新しい Windows サービス アプリケーションのインストールのプロパティを設定します。 例では、表示名と説明と共に、サービス名を設定します。 例のサービスのインストールのプロパティを割り当てたら、<xref:System.ServiceProcess.ServiceInstaller>オブジェクトを<xref:System.Configuration.Install.Installer.Installers%2A>コレクション。  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがサービスを識別するための表示名を示します。</summary>
        <value>対話形式のツールで頻繁に使用される、サービスに関連付けられた名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>は、たとえば、使用、サービスの場合は、ユーザーが判読できるわかりやすい名前を提供するサービス コントロール マネージャーでします。 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>レジストリ値ですが、レジストリ キーとしては使用されません。 そのため、に関する制限事項、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>プロパティの値は適用されません。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 制限されているために、HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services レジストリ キーとして使用されます。  
  
 あると、名の選択に制限はありませんので、サービスを識別するために、インストール ユーティリティで表示名が使用しない、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">インストールに関連付けられているコンテキスト情報を格納する <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>サービス アプリケーション情報をレジストリに書き込んで、サービスをインストールします。 このメソッドは、セットアップ ツールで使用されます。セットアップ ツールは適切なメソッドを自動的に処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常がないメソッドを呼び出す、<xref:System.ServiceProcess.ServiceInstaller>は、コード内で一般的に呼び出される、インストール ユーティリティでのみです。 インストール ユーティリティが自動的に呼び出し、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>インストール中にメソッド。 バックアップ実行の障害を必要に応じて、呼び出すことによって<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>例外を生成するオブジェクト。  
  
 アプリケーションのインストールは既にインストールされて、プロジェクトのインストーラーを使用するコンポーネントを自動的に情報を格納<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>します。 この状態情報が渡される<xref:System.ServiceProcess.ServiceInstaller.Install%2A>として、`stateSaver`パラメーターは継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスと各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされています。 この状態情報を明示的に変更するコードを通常必要はありません。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>情報に関連付けられた、プロジェクトのインストール クラス インストールすべてに共通する<xref:System.ServiceProcess.ServiceInstaller>プロジェクト内のインスタンス。 このサービスが何もインストール プロジェクトの他のサービスから分離する場合、そのサービスに固有の情報は、このメソッドによってインストールされます。  
  
 継承されるプロジェクト インストーラー クラスを作成、サービスをインストールする、<xref:System.Configuration.Install.Installer>クラスし、設定、<xref:System.ComponentModel.RunInstallerAttribute>属性をクラス`true`します。 プロジェクト内で 1 つ作成<xref:System.ServiceProcess.ServiceProcessInstaller>サービス アプリケーション、および 1 つごとにインスタンス<xref:System.ServiceProcess.ServiceInstaller>アプリケーション内の各サービスのインスタンス。 クラスのコンス トラクター、プロジェクト インストーラー内でサービスを使用して、インストールのプロパティを設定、<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンス、およびインスタンスの追加、<xref:System.Configuration.Install.Installer.Installers%2A>コレクション。  
  
> [!NOTE]
>  インストーラーのインスタンスを追加するため、コンス トラクターを使用することをお勧めただしに追加する必要がある場合、<xref:System.Configuration.Install.Installer.Installers%2A>内のコレクション、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>メソッドで、コレクションに同じ追加機能を実行してください、<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド。  
  
 すべてのクラスから派生する、<xref:System.Configuration.Install.Installer>クラスの状態、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションが同じである必要があります、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド。 ただし、全体でコレクションのメンテナンスを回避できます、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドにインストーラーのインスタンスを追加する場合、<xref:System.Configuration.Install.Installer.Installers%2A>カスタム インストーラー クラスのコンス トラクター内のコレクション。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">セットアップ ツールに、実行可能ファイルの <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> が含まれていません。  
  
- または - 
アセンブリのファイル名が <see langword="null" /> または空の文字列です。  
  
- または - 
サービス名が無効です。  
  
- または - 
サービス コントロール マネージャーを開くことができませんでした。</exception>
        <exception cref="T:System.ArgumentException">サービスの表示名の長さが 255 文字を超えています。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">サービスへのハンドルが生成できませんでした。  
  
- または - 
この名前のサービスは既にインストールされています。</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">現在のインストーラーと比較される <see cref="T:System.Configuration.Install.ComponentInstaller" />。</param>
        <summary>2 つのインストーラーが同じサービスをインストールするかどうかを示します。</summary>
        <returns>両方のインストーラーで <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> を呼び出すと、同じサービスがインストールされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> たとえば、2 つのインストーラーは、同じユーザー アカウントで同じサービスをインストールするかどうかにことを示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">インストールに関連付けられているコンテキスト情報を格納する <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>インストール プロシージャによってレジストリに書き込まれたサービス アプリケーション情報をロールバックします。 このメソッドは、セットアップ ツールで使用されます。セットアップ ツールは適切なメソッドを自動的に処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常がないメソッドを呼び出す、<xref:System.ServiceProcess.ServiceInstaller>は、コード内で一般的に呼び出される、インストール ユーティリティでのみです。 インストール ユーティリティが自動的に呼び出し、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>インストール プロセス中にメソッド。 バックアップ実行の障害を必要に応じて、呼び出すことによって<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>例外を生成するオブジェクト。  
  
 アプリケーションのインストールが自動的にプロジェクトのインストーラーを使用して、既にインストールされているコンポーネントに関する情報を保持<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>します。 この状態情報が渡される<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>として、`savedState`パラメーターは継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスと各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされています。 この状態情報を明示的に変更するコードを通常必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを識別するためにシステムが使用する名前を示します。 このプロパティは、インストールするサービスの <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> と同じにする必要があります。</summary>
        <value>インストールされるサービスの名前。 この値は、インストール ユーティリティがサービスをインストールする前に設定する必要があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重要ですが、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>と同じで、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>から派生したクラスの<xref:System.ServiceProcess.ServiceBase>します。 値では、通常、<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>サービス アプリケーションの実行可能ファイルの Main() 関数内で、サービスのプロパティが設定されています。 サービス コントロール マネージャーを使用して、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>プロパティをこの実行可能ファイル内でサービスを見つけます。  
  
 設定すると、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>サービスのインストーラーの<xref:System.Diagnostics.EventLog.Source%2A>関連のイベント ログの同じ値に設定されます。 これにより、コンピューター上のアプリケーション ログにサービスのコマンド (開始、停止) などの呼び出しを自動的にログオンするサービス。  
  
> [!NOTE]
>  アプリケーション ログ以外のログが、コンピューター上に既に同じ名前のソースが存在する場合、例外がスローされます。 ソースが存在し、アプリケーション ログに関連付けられている場合、サービスにコマンドの呼び出しをレポートにそのソースを使用し、例外はスローされません。  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>することはできません`null`か、長さが 0 です。 最大サイズは 256 文字です。 前方または後方のスラッシュを含めることはできません '/' または '\\'、または文字セット 10 進値 32 未満の値の ascii 文字。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> プロパティが無効です。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを実行するために実行する必要があるサービスを示します。</summary>
        <value>このインストーラーに関連付けられているサービスを実行する前に実行する必要があるサービスの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サービスが実行されているは、開始する際に、その他のサービスを要求できます。 このプロパティの情報は、レジストリのキーに書き込まれます。 ユーザー (または、システムを自動起動の場合) は、サービスの実行を試みると、各配列内のサービスが既に開始されているサービス コントロール マネージャー (SCM) を確認します。  
  
 配列内のサービスが、実行されていない場合、SCM を起動しようとします。 これにより、サービスが含まれます。 `Manual`<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>します。  
  
 このサービスが依存している任意のサービスが開始に失敗した場合、このサービスは開始されません。 これを検出するシステム レベルで処理する例外がないために、システムが開始されていない場合、例外はスローされません。 サービスの起動障害を処理し、コードでこれを実装する方法を決定します。 通常、サービスが開始に失敗した場合は、スタートアップ時にダイアログ ボックスが表示されます。  
  
 サービスが起動しない場合は、アプリケーション イベント ログにエントリが書き込まれます。  
  
 このサービスが依存しているサービスは、同じ実行可能ファイルである必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスがいつ、どのように開始されるかを示します。</summary>
        <value>サービスを開始する方法を表す <see cref="T:System.ServiceProcess.ServiceStartMode" />。 既定値は <see langword="Manual" /> です。再起動の後にサービスが自動的に開始されないように指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>サービスが再起動後に自動的に開始するか、ユーザーがサービスを手動で開始する必要がありますを指定します。 サービスも無効にできますを起動できない、手動またはプログラムによってが有効にするまでを指定します。  
  
 変更することはできません<xref:System.ServiceProcess.ServiceInstaller>インストール後にプロパティの値。 変更する、<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>をアンインストールし、サービスを再インストールまたはサービス コントロール マネージャーを使用して設定を手動で変更があるか。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">開始モードが、<see cref="T:System.ServiceProcess.ServiceStartMode" /> 列挙体の値ではありません。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">インストールに関連付けられているコンテキスト情報を格納する <see cref="T:System.Collections.IDictionary" />。</param>
        <summary>サービスに関する情報をレジストリから削除して、サービスをアンインストールします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これをアンインストールする前に、サービスを停止する最初の試みをアンインストールします。 サービスを停止することはできません、例外はキャッチされませんし、メソッドは、サービスの削除を続行します。  
  
 通常がないメソッドを呼び出す、<xref:System.ServiceProcess.ServiceInstaller>は、コード内で一般的に呼び出される、インストール ユーティリティでのみです。 InstallUtil を使ってサービスをアンインストールするとインストールにはアンインストールするには、コマンドラインの呼び出しにスイッチします。  
  
 アプリケーションのアンインストールのルーチンに自動的に、コンポーネントに関する情報を保持プロジェクト インストーラーを使用して、アンインストールされる<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>します。 この状態情報が渡される<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>として、`savedState`パラメーターは継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスと各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされています。 この状態情報を明示的に変更するコードを通常必要はありません。  
  
 すべてのクラスから派生する、<xref:System.Configuration.Install.Installer>クラスの状態、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションが同じである必要があります、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド。 ただし、全体でコレクションのメンテナンスを回避できます、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>と<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドにインストーラーのインスタンスを追加する場合、<xref:System.Configuration.Install.Installer.Installers%2A>カスタム インストーラー クラスのコンス トラクター内のコレクション。  
  
 1 つのサービスをアンインストールできなかった場合、これには影響しません、他のサービス (通常は同じインストール プロジェクト) 内でアンインストールされているためをアンインストールするためのロールバック メカニズムはありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">サービス コントロール マネージャーを開くことができませんでした。  
  
- または - 
サービスへのハンドルを取得できませんでした。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>