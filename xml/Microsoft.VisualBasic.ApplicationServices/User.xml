<Type Name="User" FullName="Microsoft.VisualBasic.ApplicationServices.User">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f13b0cc78a13a6a24c031fc6dfa4c006c336f6e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37714995" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class User" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi User extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.User" />
  <TypeSignature Language="VB.NET" Value="Public Class User" />
  <TypeSignature Language="C++ CLI" Value="public ref class User" />
  <TypeSignature Language="F#" Value="type User = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>現在のユーザーに関する情報にアクセスします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって公開されるメソッドとプロパティ、`My.User`オブジェクトが現在のユーザーに関する情報へのアクセスを提供します。 「現在のユーザー」の意味は、Windows および Web アプリケーション間で若干異なります。 Windows のアプリケーションでは、現在のユーザーは、アプリケーションを実行するユーザーが。 Web アプリケーションでは、現在のユーザーは、アプリケーションにアクセスするユーザーが。  
  
 `My.User`プロパティはへのアクセスを提供することも、<xref:System.Security.Principal.IPrincipal>現在のユーザー。 プリンシパル オブジェクトは、そのユーザーの id や、ユーザーが所属するロールを含め、ユーザーのセキュリティ コンテキストを表します。  
  
 Windows アプリケーションでは、このプロパティは、同じ機能を提供します。、<xref:System.Threading.Thread.CurrentPrincipal%2A>プロパティ。 Web アプリケーションの場合、このプロパティは、同じ機能を提供します、<xref:System.Web.HttpContext.User%2A>によって返されるオブジェクトのプロパティ、<xref:System.Web.HttpContext.Current%2A>プロパティ。  
  
> [!NOTE]
>  上の Windows アプリケーションでは、プロジェクトだけに構築された、 **Windows アプリケーション**テンプレートの初期化、`My.User`既定のオブジェクト。 その他のすべての Windows プロジェクト種類で初期化する必要があります、`My.User`オブジェクトを呼び出すことによって、<xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>メソッドに値を割り当てることによって、明示的に<xref:System.Threading.Thread.CurrentPrincipal%2A>します。  
  
> [!NOTE]
>  `My.User`オブジェクトは、これらのオペレーティング システムでは、ログオン ユーザーの概念をサポートしていないために Windows 95 および Windows 98 で実行する場合、現在の Windows ユーザーに関する情報を報告できません。 使用するカスタム認証を実装する必要があります、`My.User`これらのオペレーティング システム上のオブジェクト。  
  
   
  
## Examples  
 この例では、アプリケーションは Windows またはカスタムの認証を使用してその情報を使用して解析を確認します。、`My.User.Name`プロパティ。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Principal.IPrincipal" />
    <altmember cref="P:System.Threading.Thread.CurrentPrincipal" />
    <altmember cref="P:System.Web.HttpContext.User" />
    <altmember cref="P:System.Web.HttpContext.Current" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public User ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; User();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.User" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって公開されるメソッドとプロパティ、`My.User`オブジェクトが現在のユーザーに関する情報へのアクセスを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロールベースのセキュリティに関する、現在のプリンシパルを取得または設定します。</summary>
        <value>セキュリティ コンテキストを表す <see cref="T:System.Security.Principal.IPrincipal" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定することができます、`My.User.CurrentPrincipal`プロパティを実装するオブジェクトを<xref:System.Security.Principal.IPrincipal>カスタム認証を有効にするインターフェイス。  
  
 ほとんどの種類のプロジェクトでこのプロパティを取得およびスレッドの現在のプリンシパルを設定します。 ASP.NET アプリケーションでこのプロパティを取得および現在の HTTP 要求のユーザー id のセキュリティ情報を設定します。  
  
 これは、高度なメンバーの場合。クリックしない限り、intellisense が表示されない、**すべて**タブ。  
  
## <a name="availability-by-project-type"></a>プロジェクトの種類ごとの可用性  
  
|プロジェクトの種類|使用可能|  
|-|-|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|**はい**|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## Examples  
 この例では、アプリケーションは Windows またはカスタムの認証を使用してその情報を使用して解析を確認します。`My.User.Name`プロパティ。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、プリンシパルを設定するために必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithWindowsUser">
      <MemberSignature Language="C#" Value="public void InitializeWithWindowsUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void InitializeWithWindowsUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeWithWindowsUser ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeWithWindowsUser();" />
      <MemberSignature Language="F#" Value="member this.InitializeWithWindowsUser : unit -&gt; unit" Usage="user.InitializeWithWindowsUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スレッドの現在のプリンシパルを、アプリケーションを起動した Windows ユーザーに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、`My.User.InitializeWithWindowsUser`アプリケーションを開始した Windows ユーザーに、スレッドの現在のプリンシパルを設定します。 Visual Basic アプリケーション モデルは、Windows アプリケーションでは、既定では、起動時にこのメソッドを呼び出します。 このメソッドを明示的に呼び出すことによって、または値を割り当てることで他の種類のプロジェクトで、スレッドの現在のプリンシパルを設定する必要があります<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>します。  
  
 Windows のプロジェクトで、`My.User`オブジェクトは、スレッドの現在のプリンシパルに基づいています。 そのため、このメソッドは情報を変更する`My.User`を返します。 ASP.NET アプリケーションで、`My.User`オブジェクトが現在の HTTP 要求のユーザーの id に基づいており、このメソッドによる影響はありません。  
  
> [!NOTE]
>  実際の動作、`My.User`オブジェクトは、アプリケーションを実行するオペレーティング システムとアプリケーションの種類に依存します。 詳細については、次を参照してください。、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。  
  
 これは、高度なメンバーの場合。クリックしない限り、intellisense が表示されない、**すべて**タブ。  
  
## <a name="availability-by-project-type"></a>プロジェクトの種類ごとの可用性  
  
|プロジェクトの種類|使用可能|  
|-|-|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|**はい**|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="InternalPrincipal">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal InternalPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property InternalPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::Principal::IPrincipal ^ InternalPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InternalPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のユーザーを表すプリンシパル オブジェクトを取得または設定します。</summary>
        <value>現在のユーザーを表す <see cref="T:System.Security.Principal.IPrincipal" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.User>オブジェクト、プロパティをラップします、<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>プロパティ。 さまざまな動作を提供する派生クラスでこのメソッドをオーバーライドします。 たとえば、<xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=nameWithType>プロパティは、このプロパティをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが認証されているかどうかを示す値を取得します。</summary>
        <value>ユーザーが認証されている場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsAuthenticated`プロパティは、現在のユーザーが認証されているかどうかを決定するコードを使用します。  
  
> [!NOTE]
>  正確な動作`My.User`オブジェクトは、アプリケーションを実行するオペレーティング システムとアプリケーションの種類に依存します。 詳細については、次を参照してください。、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。  
  
## <a name="availability-by-project-type"></a>プロジェクトの種類ごとの可用性  
  
|プロジェクトの種類|使用可能|  
|-|-|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|**はい**|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## Examples  
 この例では、リソースにアクセスする前に、ユーザーが認証されていることを確認します。  
  
 [!code-vb[VbVbalrMyUser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsInRole">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のユーザーが、指定したロールに属しているかどうかを確認します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(valuetype Microsoft.VisualBasic.ApplicationServices.BuiltInRole role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As BuiltInRole) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(Microsoft::VisualBasic::ApplicationServices::BuiltInRole role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : Microsoft.VisualBasic.ApplicationServices.BuiltInRole -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Parameters>
      <Docs>
        <param name="role">メンバーシップの確認対象となる組み込みの Windows ロール。</param>
        <summary>現在のユーザーが、指定したロールに属しているかどうかを確認します。</summary>
        <returns>現在のユーザーが指定されたロールのメンバーである場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsInRole`メソッドは、現在のユーザーが指定されたロールのメンバーであるかを決定するコードを使用します。  
  
 オーバー ロード、 `My.User.IsInRole` 、文字列を受け取るメソッドに簡単にアクセスを提供する、<xref:System.Security.Principal.IPrincipal.IsInRole%2A>メソッドの現在のプリンシパル。  
  
 オーバー ロード、`My.User.IsInRole`を受け取るメソッドを`BuiltInRole`現在のプリンシパルによって、異なる動作を列挙します。 Windows ユーザーのプリンシパルである場合 (<xref:System.Security.Principal.WindowsPrincipal>)、この関数に変換します`role`を等価<xref:System.Security.Principal.WindowsBuiltInRole>列挙し、呼び出しの結果を返します<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>します。 この関数が列挙値の名前を渡す、現在のプリンシパルがその他のすべてのプリンシパルの場合は、`role`するプリンシパルの<xref:System.Security.Principal.IPrincipal.IsInRole%2A>メソッド。  
  
> [!NOTE]
>  実際の動作、`My.User`オブジェクトは、アプリケーションを実行するオペレーティング システムとアプリケーションの種類に依存します。 詳細については、次を参照してください。、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。  
  
## <a name="availability-by-project-type"></a>プロジェクトの種類ごとの可用性  
  
|プロジェクトの種類|使用可能|  
|-|-|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|**はい**|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## Examples  
 この例では、ユーザーのリソースにアクセスする前に管理者がいるを確認します。  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (string role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(System::String ^ role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : string -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="role">メンバーシップを確認する対象のロールの名前。</param>
        <summary>現在のユーザーが、指定したロールに属しているかどうかを確認します。</summary>
        <returns>現在のユーザーが指定されたロールのメンバーである場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.User.IsInRole`メソッドは、現在のユーザーが指定されたロールのメンバーであるかを決定するコードを使用します。  
  
 オーバー ロード、 `My.User.IsInRole` 、文字列を受け取るメソッドに簡単にアクセスを提供する、<xref:System.Security.Principal.IPrincipal.IsInRole%2A>メソッドの現在のプリンシパル。  
  
 オーバー ロード、`My.User.IsInRole`を受け取るメソッドを`BuiltInRole`現在のプリンシパルによって、異なる動作を列挙します。 Windows ユーザーのプリンシパルである場合 (<xref:System.Security.Principal.WindowsPrincipal>)、この関数に変換します`role`を等価<xref:System.Security.Principal.WindowsBuiltInRole>列挙し、呼び出しの結果を返します<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>します。 この関数が列挙値の名前を渡す、現在のプリンシパルがその他のすべてのプリンシパルの場合は、`role`するプリンシパルの<xref:System.Security.Principal.IPrincipal.IsInRole%2A>メソッド。  
  
> [!NOTE]
>  実際の動作、`My.User`オブジェクトは、アプリケーションを実行するオペレーティング システムとアプリケーションの種類に依存します。 詳細については、次を参照してください。、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。  
  
## <a name="availability-by-project-type"></a>プロジェクトの種類ごとの可用性  
  
|プロジェクトの種類|使用可能|  
|-|-|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|**はい**|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## Examples  
 この例では、ユーザーのリソースにアクセスする前に管理者がいるを確認します。  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のユーザーの名前を取得します。</summary>
        <value>
          <see langword="String" />。 現在のユーザーの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、`My.User`オブジェクトは、現在のユーザーに関する情報を取得します。  
  
 ユーザーを認証するプリンシパルは、ユーザー名の形式も制御します。 既定では、アプリケーションで Windows 認証を使用して、ユーザー名が domain \username の形式。 プリンシパルのカスタム実装は、同じ形式を必ずしも使用しません。  
  
> [!NOTE]
>  `My.User.Name`プロパティは、これらのオペレーティング システムは、ユーザー名を認識しないため、Windows 95 および Windows 98 で実行する場合、空の文字列を返します。  
  
> [!NOTE]
>  実際の動作、`My.User`オブジェクトは、アプリケーションを実行するオペレーティング システムとアプリケーションの種類に依存します。 詳細については、次を参照してください。、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。  
  
## <a name="availability-by-project-type"></a>プロジェクトの種類ごとの可用性  
  
|プロジェクトの種類|使用可能|  
|-|-|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|**はい**|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## Examples  
 この例では、アプリケーションは Windows またはカスタムの認証を使用してその情報を使用して解析を確認します。、`My.User.Name`プロパティ。  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
  </Members>
</Type>