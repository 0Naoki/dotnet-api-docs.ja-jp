<Type Name="Style" FullName="System.Windows.Style">
  <TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.ISealable, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.ISealable, class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope, IQueryAmbient, ISealable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::ISealable, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope, System::Windows::Markup::IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.ISealable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97b7b-101">型のインスタンスの間でプロパティ、リソース、およびイベント ハンドラーを共有できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97b7b-101">Enables the sharing of properties, resources, and event handlers between instances of a type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-102">設定することができます、<xref:System.Windows.Style>から派生した任意の要素で<xref:System.Windows.FrameworkElement>または<xref:System.Windows.FrameworkContentElement>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-102">You can set a <xref:System.Windows.Style> on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="97b7b-103">スタイルが最もよく内にリソースとして宣言されている、<xref:System.Windows.Application.Resources%2A>セクションです。</span><span class="sxs-lookup"><span data-stu-id="97b7b-103">A style is most commonly declared as a resource inside the <xref:System.Windows.Application.Resources%2A> section.</span></span> <span data-ttu-id="97b7b-104">スタイルは、リソースであるため、すべてのリソースに適用されるスコープの規則に従いますスタイルを適用できるに影響を宣言する場合は。</span><span class="sxs-lookup"><span data-stu-id="97b7b-104">Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</span></span> <span data-ttu-id="97b7b-105">アプリケーション定義のルート要素にスタイルを宣言するインスタンスの場合は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ファイル、スタイルは、アプリケーションのどこでも使用できます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-105">If, for instance, you declare the style in the root element of your application definition [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file, the style can be used anywhere in your application.</span></span> <span data-ttu-id="97b7b-106">ナビゲーション アプリケーションを作成するし、スタイルのアプリケーションのいずれかで宣言[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]をでのみファイル、スタイルが使用できる[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ファイル。</span><span class="sxs-lookup"><span data-stu-id="97b7b-106">If you are creating a navigation application and declare the style in one of the application's [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] files, the style can be used only in that [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span> <span data-ttu-id="97b7b-107">リソースのルールのスコープの詳細については、次を参照してください。 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-107">For more information on scoping rules for resources, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="97b7b-108">Style 宣言から成る、<xref:System.Windows.Style>を 1 つまたは複数のコレクションを含むオブジェクト<xref:System.Windows.Setter>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-108">The style declaration consists of a <xref:System.Windows.Style> object that contains a collection of one or more <xref:System.Windows.Setter> objects.</span></span> <span data-ttu-id="97b7b-109">各<xref:System.Windows.Setter>から成る、<xref:System.Windows.Setter.Property%2A>と<xref:System.Windows.Setter.Value%2A>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-109">Each <xref:System.Windows.Setter> consists of a <xref:System.Windows.Setter.Property%2A> and a <xref:System.Windows.Setter.Value%2A>.</span></span> <span data-ttu-id="97b7b-110">プロパティは、要素のスタイルのプロパティの名前に適用します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-110">The property is the name of the property of the element the style is to apply to.</span></span> <span data-ttu-id="97b7b-111">スタイルがリソースとして宣言されると、後に、他のリソースと同じように、参照できます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-111">After the style is declared as a resource, it can then be referenced just like any other resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97b7b-112">同じ set アクセス操作子コレクションの 1 つ以上の set アクセス操作子があるかどうか<xref:System.Windows.Setter.Property%2A>プロパティ値、宣言されている set アクセス操作子が最終が使用されます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-112">If there is more than one setter in the setter collection with the same <xref:System.Windows.Setter.Property%2A> property value, the setter that is declared last is used.</span></span> <span data-ttu-id="97b7b-113">同様と設定した場合、同じプロパティ値をスタイルで要素に直接、直接要素で設定された値が優先されます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-113">Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</span></span>  
  
 <span data-ttu-id="97b7b-114">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]スタイルとテンプレートのモデルでは、メンテナンスとプレゼンテーションとロジックの分離を参照して共有します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-114">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</span></span> <span data-ttu-id="97b7b-115">スタイルとテンプレートのモデルにはカスタマイズするための機能のセットが含まれています、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-115">The styling and templating model includes a suite of features that enable you to customize your [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="97b7b-116">この一連機能にはが含まれています、<xref:System.Windows.Style>だけでなく、次のクラスします。</span><span class="sxs-lookup"><span data-stu-id="97b7b-116">This suite of features includes the <xref:System.Windows.Style> class as well as the following:</span></span>  
  
-   <xref:System.Windows.Trigger>  
  
-   <span data-ttu-id="97b7b-117"><xref:System.Windows.EventTrigger> および <xref:System.Windows.Media.Animation.Storyboard></span><span class="sxs-lookup"><span data-stu-id="97b7b-117"><xref:System.Windows.EventTrigger> and <xref:System.Windows.Media.Animation.Storyboard></span></span>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 <span data-ttu-id="97b7b-118">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="97b7b-118">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97b7b-119">次の例は、スタイルの宣言に影響を与える、<xref:System.Windows.Controls.Control.Background%2A>のプロパティ、<xref:System.Windows.Controls.Control>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-119">The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]   
  
 <span data-ttu-id="97b7b-120">上記のスタイルを適用するには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="97b7b-120">To apply the above style, do the following:</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
  
 <span data-ttu-id="97b7b-121">使用して、指定された型のすべての要素にスタイルを適用することもできます、<xref:System.Windows.Style.TargetType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97b7b-121">You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property.</span></span> <span data-ttu-id="97b7b-122">ターゲット タイプのスタイルを追加すればに設定するプロパティを完全に修飾する必要が不要になった、`ClassName.PropertyName`構文です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-122">Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax.</span></span> <span data-ttu-id="97b7b-123">次の例では、適用されるたびにスタイル<xref:System.Windows.Controls.TextBlock>要素。</span><span class="sxs-lookup"><span data-stu-id="97b7b-123">The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
> [!NOTE]
>  <span data-ttu-id="97b7b-124">多く[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]コントロールは、他の組み合わせで構成されます[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]型のすべてのコントロールに適用するスタイルを作成するためのコントロールは、広い範囲に影響を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-124">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="97b7b-125">インスタンスを対象とするスタイルを作成する場合、<xref:System.Windows.Controls.TextBlock>コントロールで、 <xref:System.Windows.Controls.Canvas>、スタイルをすべて適用<xref:System.Windows.Controls.TextBlock>、キャンバス内のコントロール場合でも、<xref:System.Windows.Controls.TextBlock>など、他のコントロールの一部である、<xref:System.Windows.Controls.ListBox>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-125">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.</span></span>  
  
 <span data-ttu-id="97b7b-126">拡張または定義済みのスタイルを継承する方法については、次を参照してください。、<xref:System.Windows.Style.BasedOn%2A>ページ。</span><span class="sxs-lookup"><span data-stu-id="97b7b-126">For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97b7b-127"><see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-127">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97b7b-128"><see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-128">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-129">このコンス トラクターの呼び出しの遅延検証を必要と<xref:System.Windows.Style.TargetType%2A>と<xref:System.Windows.Style.BasedOn%2A>型のスタイルを設定します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-129">This constructor call requires delayed validation of <xref:System.Windows.Style.TargetType%2A> and <xref:System.Windows.Style.BasedOn%2A> style type.</span></span> <span data-ttu-id="97b7b-130">これはパーサーのコンテキスト外に使用する場合の動作は定義されません。</span><span class="sxs-lookup"><span data-stu-id="97b7b-130">If this is used outside the context of the parser, behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="97b7b-131">スタイルの適用対象の型。</span><span class="sxs-lookup"><span data-stu-id="97b7b-131">The type to which the style will apply.</span></span></param>
        <summary><span data-ttu-id="97b7b-132">指定した <see cref="T:System.Windows.Style" /> で使用する <see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-132">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type, basedOn As Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType, System::Windows::Style ^ basedOn);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="97b7b-133">スタイルの適用対象の型。</span><span class="sxs-lookup"><span data-stu-id="97b7b-133">The type to which the style will apply.</span></span></param>
        <param name="basedOn"><span data-ttu-id="97b7b-134">このスタイルの基になるスタイル。</span><span class="sxs-lookup"><span data-stu-id="97b7b-134">The style to base this style on.</span></span></param>
        <summary><span data-ttu-id="97b7b-135">指定した <see cref="T:System.Windows.Style" /> で使用する、指定した <see cref="T:System.Type" /> に基づいた <see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-135">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" /> and based on the specified <see cref="T:System.Windows.Style" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property BasedOn As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ BasedOn { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97b7b-136">現在のスタイルの基になる定義済みのスタイルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-136">Gets or sets a defined style that is the basis of the current style.</span></span></summary>
        <value><span data-ttu-id="97b7b-137">現在のスタイルの基になる定義済みのスタイル。</span><span class="sxs-lookup"><span data-stu-id="97b7b-137">A defined style that is the basis of the current style.</span></span> <span data-ttu-id="97b7b-138">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-138">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-139">各スタイルのみをサポートしている 1 つ<xref:System.Windows.Style.BasedOn%2A>値。</span><span class="sxs-lookup"><span data-stu-id="97b7b-139">Each style only supports one <xref:System.Windows.Style.BasedOn%2A> value.</span></span>  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="97b7b-140">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="97b7b-140">XAML Attribute Usage</span></span>  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## <a name="xaml-values"></a><span data-ttu-id="97b7b-141">XAML 値</span><span class="sxs-lookup"><span data-stu-id="97b7b-141">XAML Values</span></span>  
 <span data-ttu-id="97b7b-142">*myStyle*</span><span class="sxs-lookup"><span data-stu-id="97b7b-142">*myStyle*</span></span>  
 <span data-ttu-id="97b7b-143">既存のスタイル。</span><span class="sxs-lookup"><span data-stu-id="97b7b-143">An existing style.</span></span> <span data-ttu-id="97b7b-144">通常、使用して、[マークアップ拡張機能と WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)に既存のスタイルを参照してください。</span><span class="sxs-lookup"><span data-stu-id="97b7b-144">Typically, you use the [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md) to refer to an existing style.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97b7b-145">いくつかの方法でスタイルを[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]拡張または継承されたことができます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-145">There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] can be extended or inherited.</span></span> <span data-ttu-id="97b7b-146">スタイルは、このプロパティを介して他のスタイルに基づいていることができます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-146">Styles can be based on other styles through this property.</span></span> <span data-ttu-id="97b7b-147">このプロパティを使用するときに、新しいスタイルは、新しいスタイルで明示的に再定義しないする元のスタイルの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-147">When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</span></span> <span data-ttu-id="97b7b-148">次の例では、`Style2`継承、<xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType>の値`Yellow`、し、追加、<xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType>の値`Blue`です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-148">In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> value of `Blue`.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]   
  
 <span data-ttu-id="97b7b-149">同様に、スタイルに基づいて、既存のスタイル[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]要素は、新しいスタイルがのスタイルをに基づいて次の例のように、<xref:System.Windows.Controls.TextBlock>要素。</span><span class="sxs-lookup"><span data-stu-id="97b7b-149">Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]   
  
> [!NOTE]
>  <span data-ttu-id="97b7b-150">使用するスタイルを作成する場合、<xref:System.Windows.Style.TargetType%2A>プロパティと、別のスタイルをベースも定義、<xref:System.Windows.Style.TargetType%2A>プロパティ、派生したスタイルの対象の型と同じである必要があります、または基準スタイルの型から派生します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-150">If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.</span></span>  
  
 <span data-ttu-id="97b7b-151">特定の種類に対して定義されているスタイルは、次の例のように、その他のスタイルにも基づいてことができます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-151">Styles defined for specific types can also be based on other styles, as in the following example.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97b7b-152">この <see cref="T:System.Windows.Style" /> のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-152">Returns the hash code for this <see cref="T:System.Windows.Style" />.</span></span></summary>
        <returns><span data-ttu-id="97b7b-153">この <see cref="T:System.Windows.Style" /> のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="97b7b-153">The hash code for this <see cref="T:System.Windows.Style" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97b7b-154">スタイルが読み取り専用で変更できないかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-154">Gets a value that indicates whether the style is read-only and cannot be changed.</span></span></summary>
        <value>
          <span data-ttu-id="97b7b-155">スタイルがシールされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97b7b-155"><see langword="true" /> if the style is sealed; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-156">別のスタイルの基になるとき、または最初に適用された場合に、スタイルはシールされています。</span><span class="sxs-lookup"><span data-stu-id="97b7b-156">A style is sealed when another style is based on it or when it is applied for the first time.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97b7b-157">登録する名前。</span><span class="sxs-lookup"><span data-stu-id="97b7b-157">The name to register.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="97b7b-158">指定した <c>name</c> に対応付けるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-158">The object to map to the specified <c>name</c>.</span></span></param>
        <summary><span data-ttu-id="97b7b-159">現在の名前スコープに新しい名前とオブジェクトのペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-159">Registers a new name-object pair in the current namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97b7b-160">このスタイルのスコープ内で使用できるリソースのコレクションを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-160">Gets or sets the collection of resources that can be used within the scope of this style.</span></span></summary>
        <value><span data-ttu-id="97b7b-161">このスタイルのスコープ内で使用できるリソース。</span><span class="sxs-lookup"><span data-stu-id="97b7b-161">The resources that can be used within the scope of this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="97b7b-162">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="97b7b-162">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
- or -   
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="97b7b-163">XAML 値</span><span class="sxs-lookup"><span data-stu-id="97b7b-163">XAML Values</span></span>  
 <span data-ttu-id="97b7b-164">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="97b7b-164">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="97b7b-165">1 つまたは複数のリソース要素です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-165">One or more resource elements.</span></span> <span data-ttu-id="97b7b-166">いずれかで後で参照されている[StaticResource マークアップ拡張機能](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)または[DynamicResource マークアップ拡張機能](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)構文[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、リソース要素があります、`x:Key`属性。</span><span class="sxs-lookup"><span data-stu-id="97b7b-166">To be referenced later in either [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.</span></span>  
  
 <span data-ttu-id="97b7b-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span><span class="sxs-lookup"><span data-stu-id="97b7b-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span></span>  
 <span data-ttu-id="97b7b-168">外部ディクショナリ ソース。</span><span class="sxs-lookup"><span data-stu-id="97b7b-168">An external dictionary source.</span></span> <span data-ttu-id="97b7b-169">詳細については、「[リソース ディクショナリのトピックとマージ](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-169">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seal ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seal();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97b7b-170">このスタイルとすべてのファクトリおよびトリガーを変更できないようにロックします。</span><span class="sxs-lookup"><span data-stu-id="97b7b-170">Locks this style and all factories and triggers so they cannot be changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97b7b-171"><see cref="T:System.Windows.Setter" /> オブジェクトと <see cref="T:System.Windows.EventSetter" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-171">Gets a collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span></summary>
        <value><span data-ttu-id="97b7b-172"><see cref="T:System.Windows.Setter" /> オブジェクトと <see cref="T:System.Windows.EventSetter" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="97b7b-172">A collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span> <span data-ttu-id="97b7b-173">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="97b7b-173">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-174"><xref:System.Windows.Style.Setters%2A>のプロパティ、<xref:System.Windows.Style>オブジェクトがオブジェクトに割り当てることののみで構成できます<xref:System.Windows.SetterBase>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-174">The <xref:System.Windows.Style.Setters%2A> property of a <xref:System.Windows.Style> object can consist only of objects assignable to <xref:System.Windows.SetterBase>.</span></span> <span data-ttu-id="97b7b-175">追加する、<xref:System.Windows.SetterBase>に子、<xref:System.Windows.Style>オブジェクトが暗黙的に追加して、<xref:System.Windows.SetterBaseCollection>の<xref:System.Windows.Style>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-175">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span>  
  
 <span data-ttu-id="97b7b-176">明示的にプロパティ要素の使用の<xref:System.Windows.Style.Setters%2A>も比較的一般的です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-176">An explicit property element usage  for <xref:System.Windows.Style.Setters%2A> is also relatively common.</span></span> <span data-ttu-id="97b7b-177">これは、マークアップ スタイルの判断に役立つ場合がありますを区別<xref:System.Windows.Style.Setters%2A>から<xref:System.Windows.Style.Resources%2A>と<xref:System.Windows.Style.Triggers%2A>複雑なスタイル内の項目。</span><span class="sxs-lookup"><span data-stu-id="97b7b-177">This is a markup style decision that can sometimes help distinguish <xref:System.Windows.Style.Setters%2A> from <xref:System.Windows.Style.Resources%2A> and <xref:System.Windows.Style.Triggers%2A> items in a complex style.</span></span> <span data-ttu-id="97b7b-178">例:</span><span class="sxs-lookup"><span data-stu-id="97b7b-178">For example:</span></span>  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="97b7b-179">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="97b7b-179">XAML Property Element Usage</span></span>  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a><span data-ttu-id="97b7b-180">XAML 値</span><span class="sxs-lookup"><span data-stu-id="97b7b-180">XAML Values</span></span>  
 <span data-ttu-id="97b7b-181">*oneOrMoreSetters*</span><span class="sxs-lookup"><span data-stu-id="97b7b-181">*oneOrMoreSetters*</span></span>  
 <span data-ttu-id="97b7b-182">1 つまたは複数<xref:System.Windows.Setter>または<xref:System.Windows.EventSetter>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-182">One or more <xref:System.Windows.Setter> or <xref:System.Windows.EventSetter> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97b7b-183">次の例では、このプロパティを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-183">The following example shows how to use this property.</span></span>  
  
 [!code-csharp[listboxitemstyle#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 <span data-ttu-id="97b7b-184">追加する、<xref:System.Windows.SetterBase>に子、<xref:System.Windows.Style>オブジェクトが暗黙的に追加して、<xref:System.Windows.SetterBaseCollection>の<xref:System.Windows.Style>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-184">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span> <span data-ttu-id="97b7b-185">次<xref:System.Windows.EventSetter>に暗黙的に追加されて、<xref:System.Windows.SetterBaseCollection>スタイルの。</span><span class="sxs-lookup"><span data-stu-id="97b7b-185">The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:</span></span>  
  
 [!code-xaml[eventovwsupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.CanSeal">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.CanSeal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.CanSeal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#CanSeal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CanSeal As Boolean Implements ISealable.CanSeal" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.CanSeal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.IsSealed">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#IsSealed" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSealed As Boolean Implements ISealable.IsSealed" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.Seal">
      <MemberSignature Language="C#" Value="void ISealable.Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.ISealable.Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#ISealable#Seal" />
      <MemberSignature Language="VB.NET" Value="Sub Seal () Implements ISealable.Seal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.ISealable.Seal() = System::Windows::ISealable::Seal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="97b7b-186">追加する子オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-186">The child object to add.</span></span></param>
        <summary><span data-ttu-id="97b7b-187">子オブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-187">Adds a child object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-188">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-188">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="97b7b-189">これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-189">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="97b7b-190">オブジェクトに追加するテキスト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-190">The text to add to the object.</span></span></param>
        <summary><span data-ttu-id="97b7b-191">オブジェクトにノードのテキスト コンテンツを追加します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-191">Adds the text content of a node to the object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-192">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-192">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="97b7b-193">これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-193">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindName (name As String) As Object Implements INameScope.FindName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Windows.Markup.INameScope.FindName(System::String ^ name) = System::Windows::Markup::INameScope::FindName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.FindName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97b7b-194">要求されたオブジェクトの名前の識別子。</span><span class="sxs-lookup"><span data-stu-id="97b7b-194">The name identifier for the object being requested.</span></span></param>
        <summary><span data-ttu-id="97b7b-195">指定された識別名を持つオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-195">Returns an object that has the provided identifying name.</span></span></summary>
        <returns><span data-ttu-id="97b7b-196">見つかった場合はオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97b7b-196">The object, if found.</span></span> <span data-ttu-id="97b7b-197">その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-197">Returns <see langword="null" /> if no object of that name was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-198">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-198">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="97b7b-199">これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.INameScope> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-199">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.INameScope> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="97b7b-200">要求されたアンビエント プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="97b7b-200">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="97b7b-201">指定されたアンビエント プロパティを現在のスコープで使用できるかどうかを照会します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-201">Queries whether a specified ambient property is available in the current scope.</span></span></summary>
        <returns>
          <span data-ttu-id="97b7b-202">要求されたアンビエント プロパティを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97b7b-202"><see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97b7b-203">このスタイルの対象となる型を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-203">Gets or sets the type for which this style is intended.</span></span></summary>
        <value><span data-ttu-id="97b7b-204">このスタイルの対象の型。</span><span class="sxs-lookup"><span data-stu-id="97b7b-204">The target type for this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-205">派生した任意の要素のスタイルを設定することができます<xref:System.Windows.FrameworkElement>または<xref:System.Windows.FrameworkContentElement>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-205">You can set a style on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="97b7b-206">したがって、対象の型は、それらの要素のいずれかのことはできます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-206">Therefore, your target type can be any of those elements.</span></span> <span data-ttu-id="97b7b-207">ただし、使用するスタイルを作成する場合、<xref:System.Windows.Style.TargetType%2A>プロパティと、別のスタイルをベースも定義、<xref:System.Windows.Style.TargetType%2A>プロパティ、派生したスタイルの対象の型と同じである必要があります、または基本スタイルの対象の型から派生します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-207">However, if you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</span></span>  
  
 <span data-ttu-id="97b7b-208">指定しない場合、<xref:System.Windows.Style.TargetType%2A>を指定する必要があります、`x:Key`の<xref:System.Windows.Style>しても、スタイルのクラス名のプロパティを修飾します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-208">If you do not specify a <xref:System.Windows.Style.TargetType%2A>, then you must specify an `x:Key` for your <xref:System.Windows.Style> and also qualify the properties in your style with a class name.</span></span>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="97b7b-209">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="97b7b-209">XAML Attribute Usage</span></span>  
  
```  
<object  TargetType="{x:Type typeName}"/>  
-or-  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a><span data-ttu-id="97b7b-210">XAML 値</span><span class="sxs-lookup"><span data-stu-id="97b7b-210">XAML Values</span></span>  
 `{x:Type ...}`  
 <span data-ttu-id="97b7b-211">[X:type マークアップ拡張機能](~/docs/framework/xaml-services/x-type-markup-extension.md)マークアップ拡張機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-211">An [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md) markup extension usage.</span></span>  
  
 <span data-ttu-id="97b7b-212">*typeName*</span><span class="sxs-lookup"><span data-stu-id="97b7b-212">*typeName*</span></span>  
 <span data-ttu-id="97b7b-213">クラスの型名。</span><span class="sxs-lookup"><span data-stu-id="97b7b-213">The type name of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97b7b-214">次の例のすべてのインスタンスに適用されるスタイルの定義、<xref:System.Windows.Controls.TextBlock>要素。</span><span class="sxs-lookup"><span data-stu-id="97b7b-214">The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
 <span data-ttu-id="97b7b-215">設定、<xref:System.Windows.Style.TargetType%2A>プロパティを<xref:System.Windows.Controls.TextBlock>設定がない型を`x:Key`が暗黙的に設定、`x:Key`に`{x:Type TextBlock}`です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-215">Setting the <xref:System.Windows.Style.TargetType%2A> property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`.</span></span> <span data-ttu-id="97b7b-216">つまり、上記を提供する場合<xref:System.Windows.Style>、`x:Key`の以外の任意の値`{x:Type TextBlock}`、<xref:System.Windows.Style>すべてには適用されません<xref:System.Windows.Controls.TextBlock>要素に自動的にします。</span><span class="sxs-lookup"><span data-stu-id="97b7b-216">This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically.</span></span> <span data-ttu-id="97b7b-217">代わりに、スタイルを適用する必要があります、<xref:System.Windows.Controls.TextBlock>要素に明示的にします。</span><span class="sxs-lookup"><span data-stu-id="97b7b-217">Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.</span></span>  
  
 <span data-ttu-id="97b7b-218">多く[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]コントロールは、他の組み合わせで構成されます[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]型のすべてのコントロールに適用するスタイルを作成するためのコントロールは、広い範囲に影響を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97b7b-218">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="97b7b-219">インスタンスを対象とするスタイルを作成する場合、<xref:System.Windows.Controls.TextBox>コントロールで、 <xref:System.Windows.Controls.Canvas>、スタイルをすべて適用<xref:System.Windows.Controls.TextBox>、キャンバス内のコントロール場合でも、<xref:System.Windows.Controls.TextBox>など、他のコントロールの一部である、<xref:System.Windows.Controls.ComboBox>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-219">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97b7b-220">指定した条件に基づいてプロパティ値を適用する、<see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-220">Gets a collection of <see cref="T:System.Windows.TriggerBase" /> objects that apply property values based on specified conditions.</span></span></summary>
        <value><span data-ttu-id="97b7b-221"><see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="97b7b-221">A collection of <see cref="T:System.Windows.TriggerBase" /> objects.</span></span> <span data-ttu-id="97b7b-222">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="97b7b-222">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-223">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]スタイルとテンプレートのモデルでは、内でトリガーを指定することができます、<xref:System.Windows.Style>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-223">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styling and templating model enables you to specify triggers within your <xref:System.Windows.Style>.</span></span> <span data-ttu-id="97b7b-224">トリガーを有効にするときに特定の変更を適用するオブジェクトは、基本的には、条件 (特定のプロパティの値に変わったらなど`true`、イベント発生時または) がなければです。</span><span class="sxs-lookup"><span data-stu-id="97b7b-224">Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="97b7b-225">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="97b7b-225">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="97b7b-226">XAML 値</span><span class="sxs-lookup"><span data-stu-id="97b7b-226">XAML Values</span></span>  
 <span data-ttu-id="97b7b-227">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="97b7b-227">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="97b7b-228">派生するクラスは、0 個以上のオブジェクトの要素<xref:System.Windows.TriggerBase>です。</span><span class="sxs-lookup"><span data-stu-id="97b7b-228">Zero or more object elements that are classes deriving from <xref:System.Windows.TriggerBase>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97b7b-229">次の例は、名前付き<xref:System.Windows.Style>できる<xref:System.Windows.Controls.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97b7b-229">The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls.</span></span> <span data-ttu-id="97b7b-230"><xref:System.Windows.Style>定義、<xref:System.Windows.Trigger>要素を変更する、<xref:System.Windows.Controls.Control.Foreground%2A>ボタンのプロパティと、<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-230">The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.</span></span>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.UnregisterName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97b7b-231">削除するマッピングの名前。</span><span class="sxs-lookup"><span data-stu-id="97b7b-231">The name of the mapping to remove.</span></span></param>
        <summary><span data-ttu-id="97b7b-232">名前スコープから名前オブジェクトのマッピングを削除します。</span><span class="sxs-lookup"><span data-stu-id="97b7b-232">Removes a name-object mapping from the namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>