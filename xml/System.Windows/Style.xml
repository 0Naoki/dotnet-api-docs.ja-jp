<Type Name="Style" FullName="System.Windows.Style">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b90410be2bfcdb901d1e9a88fb45e1130df2599" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70450738" /></Metadata><TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope, IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type Style = class&#xA;    inherit DispatcherObject&#xA;    interface INameScope&#xA;    interface IAddChild&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8eebf-101">型のインスタンスの間でプロパティ、リソース、およびイベント ハンドラーを共有できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8eebf-101">Enables the sharing of properties, resources, and event handlers between instances of a type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-102">は、 <xref:System.Windows.Style>または<xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>から派生した任意の要素に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-102">You can set a <xref:System.Windows.Style> on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="8eebf-103">スタイルは、通常、セクション内の<xref:System.Windows.Application.Resources%2A>リソースとして宣言されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-103">A style is most commonly declared as a resource inside the <xref:System.Windows.Application.Resources%2A> section.</span></span> <span data-ttu-id="8eebf-104">スタイルはリソースであるため、すべてのリソースに適用されるのと同じスコープ規則に従います。そのため、スタイルを宣言すると、適用できる場所が影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-104">Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</span></span> <span data-ttu-id="8eebf-105">たとえば、アプリケーション定義[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ファイルのルート要素でスタイルを宣言すると、そのスタイルはアプリケーション内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-105">If, for instance, you declare the style in the root element of your application definition [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file, the style can be used anywhere in your application.</span></span> <span data-ttu-id="8eebf-106">ナビゲーションアプリケーションを作成し、いずれかのアプリケーションの[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ファイルでスタイルを宣言する場合は、その[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ファイルでのみスタイルを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-106">If you are creating a navigation application and declare the style in one of the application's [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] files, the style can be used only in that [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span> <span data-ttu-id="8eebf-107">リソースのスコープルールの詳細については、「 [XAML resources](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8eebf-107">For more information on scoping rules for resources, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="8eebf-108">スタイル宣言は、1つ<xref:System.Windows.Style> <xref:System.Windows.Setter>以上のオブジェクトのコレクションを含むオブジェクトで構成されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-108">The style declaration consists of a <xref:System.Windows.Style> object that contains a collection of one or more <xref:System.Windows.Setter> objects.</span></span> <span data-ttu-id="8eebf-109">各<xref:System.Windows.Setter>は<xref:System.Windows.Setter.Property%2A> 、と <xref:System.Windows.Setter.Value%2A> で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-109">Each <xref:System.Windows.Setter> consists of a <xref:System.Windows.Setter.Property%2A> and a <xref:System.Windows.Setter.Value%2A>.</span></span> <span data-ttu-id="8eebf-110">プロパティは、スタイルが適用される要素のプロパティの名前です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-110">The property is the name of the property of the element the style is to apply to.</span></span> <span data-ttu-id="8eebf-111">スタイルがリソースとして宣言された後は、他のリソースと同じように参照できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-111">After the style is declared as a resource, it can then be referenced just like any other resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8eebf-112">Setter コレクション内に同じ<xref:System.Windows.Setter.Property%2A>プロパティ値を持つ setter が複数ある場合は、last と宣言された setter が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-112">If there is more than one setter in the setter collection with the same <xref:System.Windows.Setter.Property%2A> property value, the setter that is declared last is used.</span></span> <span data-ttu-id="8eebf-113">同様に、スタイルと要素で同じプロパティの値を直接設定した場合は、要素に直接設定された値が優先されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-113">Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</span></span>  
  
 <span data-ttu-id="8eebf-114">スタイル[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]とテンプレートモデルを使用すると、外観の保守と共有、およびプレゼンテーションとロジックの分離が可能になります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-114">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</span></span> <span data-ttu-id="8eebf-115">スタイルとテンプレートモデルには、をカスタマイズ[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]できるようにする一連の機能が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8eebf-115">The styling and templating model includes a suite of features that enable you to customize your [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="8eebf-116">この一連の機能には<xref:System.Windows.Style> 、クラスだけでなく、次のものが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-116">This suite of features includes the <xref:System.Windows.Style> class as well as the following:</span></span>  
  
-   <xref:System.Windows.Trigger>  
  
-   <span data-ttu-id="8eebf-117"><xref:System.Windows.EventTrigger> および <xref:System.Windows.Media.Animation.Storyboard></span><span class="sxs-lookup"><span data-stu-id="8eebf-117"><xref:System.Windows.EventTrigger> and <xref:System.Windows.Media.Animation.Storyboard></span></span>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 <span data-ttu-id="8eebf-118">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="8eebf-118">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eebf-119">次の例は、 <xref:System.Windows.Controls.Control.Background%2A> <xref:System.Windows.Controls.Control>のプロパティに影響を与えるスタイル宣言を示しています。</span><span class="sxs-lookup"><span data-stu-id="8eebf-119">The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]   
  
 <span data-ttu-id="8eebf-120">上記のスタイルを適用するには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-120">To apply the above style, do the following:</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
  
 <span data-ttu-id="8eebf-121">また、 <xref:System.Windows.Style.TargetType%2A>プロパティを使用して、指定した型のすべての要素にスタイルを適用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-121">You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property.</span></span> <span data-ttu-id="8eebf-122">スタイルにターゲット型を追加すると、設定するプロパティを`ClassName.PropertyName`構文で完全修飾する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-122">Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax.</span></span> <span data-ttu-id="8eebf-123">次の例では、すべて<xref:System.Windows.Controls.TextBlock>の要素に適用されるスタイルを定義します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-123">The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
> [!NOTE]
>  <span data-ttu-id="8eebf-124">多く[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]のコントロールは、他[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]のコントロールの組み合わせで構成されているため、型のすべてのコントロールに適用されるスタイルを作成することで、広範な影響を与えることができます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-124">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="8eebf-125"><xref:System.Windows.Controls.TextBlock>たとえば、 <xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Controls.ListBox>内のコントロールを対象とするスタイルを作成した場合、がなどの別のコントロールの一部であっても、スタイルはキャンバス内のすべてのコントロールに適用されます。 <xref:System.Windows.Controls.Canvas></span><span class="sxs-lookup"><span data-stu-id="8eebf-125">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.</span></span>  
  
 <span data-ttu-id="8eebf-126">定義済みのスタイルを拡張または継承する方法については<xref:System.Windows.Style.BasedOn%2A> 、「」ページを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8eebf-126">For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248"><span data-ttu-id="8eebf-127">x:Key 属性</span><span class="sxs-lookup"><span data-stu-id="8eebf-127">x:Key Attribute</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e0e0ce6f-e873-49c7-8ad7-8b840eb353ec"><span data-ttu-id="8eebf-128">x:Type マークアップ拡張機能</span><span class="sxs-lookup"><span data-stu-id="8eebf-128">x:Type Markup Extension</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8eebf-129">スタイルとテンプレートのサンプルの概要</span><span class="sxs-lookup"><span data-stu-id="8eebf-129">Introduction to Styling and Templating Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8eebf-130"><see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-130">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8eebf-131"><see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-131">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-132">このコンストラクター呼び出しでは、および<xref:System.Windows.Style.TargetType%2A> <xref:System.Windows.Style.BasedOn%2A>スタイル型の遅延検証が必要です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-132">This constructor call requires delayed validation of <xref:System.Windows.Style.TargetType%2A> and <xref:System.Windows.Style.BasedOn%2A> style type.</span></span> <span data-ttu-id="8eebf-133">このがパーサーのコンテキスト外で使用されている場合、動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="8eebf-133">If this is used outside the context of the parser, behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Style : Type -&gt; System.Windows.Style" Usage="new System.Windows.Style targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="8eebf-134">スタイルの適用対象の型。</span><span class="sxs-lookup"><span data-stu-id="8eebf-134">The type to which the style will apply.</span></span></param>
        <summary><span data-ttu-id="8eebf-135">指定した <see cref="T:System.Windows.Style" /> で使用する <see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-135">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type, basedOn As Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType, System::Windows::Style ^ basedOn);" />
      <MemberSignature Language="F#" Value="new System.Windows.Style : Type * System.Windows.Style -&gt; System.Windows.Style" Usage="new System.Windows.Style (targetType, basedOn)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="8eebf-136">スタイルの適用対象の型。</span><span class="sxs-lookup"><span data-stu-id="8eebf-136">The type to which the style will apply.</span></span></param>
        <param name="basedOn"><span data-ttu-id="8eebf-137">このスタイルの基になるスタイル。</span><span class="sxs-lookup"><span data-stu-id="8eebf-137">The style to base this style on.</span></span></param>
        <summary><span data-ttu-id="8eebf-138">指定した <see cref="T:System.Windows.Style" /> で使用する、指定した <see cref="T:System.Type" /> に基づいた <see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-138">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" /> and based on the specified <see cref="T:System.Windows.Style" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property BasedOn As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ BasedOn { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BasedOn : System.Windows.Style with get, set" Usage="System.Windows.Style.BasedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8eebf-139">現在のスタイルの基になる定義済みのスタイルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-139">Gets or sets a defined style that is the basis of the current style.</span></span></summary>
        <value><span data-ttu-id="8eebf-140">現在のスタイルの基になる定義済みのスタイル。</span><span class="sxs-lookup"><span data-stu-id="8eebf-140">A defined style that is the basis of the current style.</span></span> <span data-ttu-id="8eebf-141">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-141">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-142">各スタイルでサポートさ<xref:System.Windows.Style.BasedOn%2A>れる値は1つだけです。</span><span class="sxs-lookup"><span data-stu-id="8eebf-142">Each style only supports one <xref:System.Windows.Style.BasedOn%2A> value.</span></span>  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8eebf-143">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="8eebf-143">XAML Attribute Usage</span></span>  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8eebf-144">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8eebf-144">XAML Values</span></span>  
 <span data-ttu-id="8eebf-145">*myStyle*</span><span class="sxs-lookup"><span data-stu-id="8eebf-145">*myStyle*</span></span>  
 <span data-ttu-id="8eebf-146">既存のスタイル。</span><span class="sxs-lookup"><span data-stu-id="8eebf-146">An existing style.</span></span> <span data-ttu-id="8eebf-147">通常、既存のスタイルを参照するには、[マークアップ拡張機能と WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)を使用します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-147">Typically, you use the [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md) to refer to an existing style.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eebf-148">のスタイルは、いくつかの[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]方法で拡張または継承できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-148">There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] can be extended or inherited.</span></span> <span data-ttu-id="8eebf-149">スタイルは、このプロパティを使用して他のスタイルに基づくことができます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-149">Styles can be based on other styles through this property.</span></span> <span data-ttu-id="8eebf-150">このプロパティを使用すると、新しいスタイルでは、新しいスタイルで明示的に再定義されていない元のスタイルの値が継承されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-150">When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</span></span> <span data-ttu-id="8eebf-151">次の例では`Style2` 、は<xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType>の`Yellow`値を継承し、 <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType>値`Blue`をに追加します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-151">In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> value of `Blue`.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]   
  
 <span data-ttu-id="8eebf-152">同様に、次の例に示すように、スタイル[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]は既存の要素のスタイルに基づいて作成できます。この例では、 <xref:System.Windows.Controls.TextBlock>新しいスタイルは要素のスタイルに基づいています。</span><span class="sxs-lookup"><span data-stu-id="8eebf-152">Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]   
  
> [!NOTE]
>  <span data-ttu-id="8eebf-153"><xref:System.Windows.Style.TargetType%2A>プロパティを使用してスタイルを作成し、プロパティを<xref:System.Windows.Style.TargetType%2A>定義する別のスタイルに基づいて作成する場合、派生スタイルのターゲット型はと同じであるか、または基本スタイルの型から派生している必要があります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-153">If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.</span></span>  
  
 <span data-ttu-id="8eebf-154">次の例に示すように、特定の型に対して定義されているスタイルは、他のスタイルに基づくこともできます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-154">Styles defined for specific types can also be based on other styles, as in the following example.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]   
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8eebf-155">スタイルとテンプレートのサンプルの概要</span><span class="sxs-lookup"><span data-stu-id="8eebf-155">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="style.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8eebf-156">この <see cref="T:System.Windows.Style" /> のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-156">Returns the hash code for this <see cref="T:System.Windows.Style" />.</span></span></summary>
        <returns><span data-ttu-id="8eebf-157">この <see cref="T:System.Windows.Style" /> のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="8eebf-157">The hash code for this <see cref="T:System.Windows.Style" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.Style.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.ISealable.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8eebf-158">スタイルが読み取り専用で変更できないかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-158">Gets a value that indicates whether the style is read-only and cannot be changed.</span></span></summary>
        <value><span data-ttu-id="8eebf-159">スタイルがシールされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8eebf-159"><see langword="true" /> if the style is sealed; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-160">スタイルは、別のスタイルがベースになっている場合や、初めて適用された場合にシールされます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-160">A style is sealed when another style is based on it or when it is applied for the first time.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit&#xA;override this.RegisterName : string * obj -&gt; unit" Usage="style.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8eebf-161">登録する名前。</span><span class="sxs-lookup"><span data-stu-id="8eebf-161">The name to register.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="8eebf-162">指定した <paramref name="name" /> に対応付けるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8eebf-162">The object to map to the specified <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="8eebf-163">現在の名前スコープに新しい名前とオブジェクトのペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-163">Registers a new name-object pair in the current namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.Style.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8eebf-164">このスタイルのスコープ内で使用できるリソースのコレクションを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-164">Gets or sets the collection of resources that can be used within the scope of this style.</span></span></summary>
        <value><span data-ttu-id="8eebf-165">このスタイルのスコープ内で使用できるリソース。</span><span class="sxs-lookup"><span data-stu-id="8eebf-165">The resources that can be used within the scope of this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8eebf-166">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="8eebf-166">XAML Property Element Usage</span></span>  
  
```xaml
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>
```

<span data-ttu-id="8eebf-167">または</span><span class="sxs-lookup"><span data-stu-id="8eebf-167">-or-</span></span>

```xaml
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```

<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8eebf-168">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8eebf-168">XAML Values</span></span>  
 <span data-ttu-id="8eebf-169">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="8eebf-169">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="8eebf-170">1つまたは複数のリソース要素。</span><span class="sxs-lookup"><span data-stu-id="8eebf-170">One or more resource elements.</span></span> <span data-ttu-id="8eebf-171">後で[StaticResource Markup extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)または[dynamicresource Markup extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)構文[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]のいずれかで参照するには、リソース要素`x:Key`に属性が必要です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-171">To be referenced later in either [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.</span></span>  
  
 <span data-ttu-id="8eebf-172">\<ResourceDictionary ソース = " *Externaldictionarysource*"/></span><span class="sxs-lookup"><span data-stu-id="8eebf-172">\<ResourceDictionary Source=" *externalDictionarySource*"/></span></span>  
 <span data-ttu-id="8eebf-173">外部ディクショナリのソース。</span><span class="sxs-lookup"><span data-stu-id="8eebf-173">An external dictionary source.</span></span> <span data-ttu-id="8eebf-174">詳細については、「マージされた[リソースディクショナリ](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8eebf-174">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seal ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seal();" />
      <MemberSignature Language="F#" Value="member this.Seal : unit -&gt; unit" Usage="style.Seal " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.ISealable.Seal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8eebf-175">このスタイルとすべてのファクトリおよびトリガーを変更できないようにロックします。</span><span class="sxs-lookup"><span data-stu-id="8eebf-175">Locks this style and all factories and triggers so they cannot be changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Style.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8eebf-176"><see cref="T:System.Windows.Setter" /> オブジェクトと <see cref="T:System.Windows.EventSetter" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-176">Gets a collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span></summary>
        <value><span data-ttu-id="8eebf-177"><see cref="T:System.Windows.Setter" /> オブジェクトと <see cref="T:System.Windows.EventSetter" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="8eebf-177">A collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span> <span data-ttu-id="8eebf-178">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="8eebf-178">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-179">オブジェクトのプロパティは、 <xref:System.Windows.Style.Setters%2A>に<xref:System.Windows.SetterBase>割り当て可能なオブジェクトのみで構成できます。 <xref:System.Windows.Style></span><span class="sxs-lookup"><span data-stu-id="8eebf-179">The <xref:System.Windows.Style.Setters%2A> property of a <xref:System.Windows.Style> object can consist only of objects assignable to <xref:System.Windows.SetterBase>.</span></span> <span data-ttu-id="8eebf-180">オブジェクトに子を<xref:System.Windows.SetterBase>追加すると、 <xref:System.Windows.SetterBaseCollection> <xref:System.Windows.Style>オブジェクトのに暗黙的に子が追加されます。 <xref:System.Windows.Style></span><span class="sxs-lookup"><span data-stu-id="8eebf-180">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span>  
  
 <span data-ttu-id="8eebf-181">の明示的なプロパティ要素<xref:System.Windows.Style.Setters%2A>の使用も、比較的一般的です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-181">An explicit property element usage  for <xref:System.Windows.Style.Setters%2A> is also relatively common.</span></span> <span data-ttu-id="8eebf-182">これは、複雑なスタイルの項目と<xref:System.Windows.Style.Setters%2A> <xref:System.Windows.Style.Triggers%2A>項目を<xref:System.Windows.Style.Resources%2A>区別するために役立つ場合があるマークアップスタイルの決定です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-182">This is a markup style decision that can sometimes help distinguish <xref:System.Windows.Style.Setters%2A> from <xref:System.Windows.Style.Resources%2A> and <xref:System.Windows.Style.Triggers%2A> items in a complex style.</span></span> <span data-ttu-id="8eebf-183">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-183">For example:</span></span>  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8eebf-184">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="8eebf-184">XAML Property Element Usage</span></span>  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8eebf-185">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8eebf-185">XAML Values</span></span>  
 <span data-ttu-id="8eebf-186">*Oneororg Setter*</span><span class="sxs-lookup"><span data-stu-id="8eebf-186">*oneOrMoreSetters*</span></span>  
 <span data-ttu-id="8eebf-187">1つ以上の<xref:System.Windows.EventSetter>オブジェクトまたはオブジェクト。 <xref:System.Windows.Setter></span><span class="sxs-lookup"><span data-stu-id="8eebf-187">One or more <xref:System.Windows.Setter> or <xref:System.Windows.EventSetter> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eebf-188">このプロパティを使用する方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-188">The following example shows how to use this property.</span></span>  
  
 [!code-csharp[listboxitemstyle#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 <span data-ttu-id="8eebf-189">オブジェクトに子を<xref:System.Windows.SetterBase>追加すると、 <xref:System.Windows.SetterBaseCollection> <xref:System.Windows.Style>オブジェクトのに暗黙的に子が追加されます。 <xref:System.Windows.Style></span><span class="sxs-lookup"><span data-stu-id="8eebf-189">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span> <span data-ttu-id="8eebf-190">次<xref:System.Windows.EventSetter>のは、スタイル<xref:System.Windows.SetterBaseCollection>のに暗黙的に追加されます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-190">The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:</span></span>  
  
 [!code-xaml[eventovwsupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8eebf-191">スタイルとテンプレートのサンプルの概要</span><span class="sxs-lookup"><span data-stu-id="8eebf-191">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.CanSeal">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.CanSeal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.CanSeal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#CanSeal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CanSeal As Boolean Implements ISealable.CanSeal" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Windows::ISealable::CanSeal { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.ISealable.CanSeal" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.ISealable.CanSeal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.IsSealed">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#IsSealed" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSealed As Boolean Implements ISealable.IsSealed" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Windows::ISealable::IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.ISealable.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.ISealable.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.Seal">
      <MemberSignature Language="C#" Value="void ISealable.Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.ISealable.Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#ISealable#Seal" />
      <MemberSignature Language="VB.NET" Value="Sub Seal () Implements ISealable.Seal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.ISealable.Seal() = System::Windows::ISealable::Seal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.ISealable.Seal</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8eebf-192">追加する子オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8eebf-192">The child object to add.</span></span></param>
        <summary><span data-ttu-id="8eebf-193">子オブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-193">Adds a child object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-194">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-194">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8eebf-195">これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-195">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="8eebf-196">オブジェクトに追加するテキスト。</span><span class="sxs-lookup"><span data-stu-id="8eebf-196">The text to add to the object.</span></span></param>
        <summary><span data-ttu-id="8eebf-197">オブジェクトにノードのテキスト コンテンツを追加します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-197">Adds the text content of a node to the object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-198">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-198">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8eebf-199">これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-199">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindName (name As String) As Object Implements INameScope.FindName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Windows.Markup.INameScope.FindName(System::String ^ name) = System::Windows::Markup::INameScope::FindName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.FindName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8eebf-200">要求されているオブジェクトの名前識別子。</span><span class="sxs-lookup"><span data-stu-id="8eebf-200">The name identifier for the object being requested.</span></span></param>
        <summary><span data-ttu-id="8eebf-201">指定された識別名を持つオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-201">Returns an object that has the provided identifying name.</span></span></summary>
        <returns><span data-ttu-id="8eebf-202">見つかった場合はオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8eebf-202">The object, if found.</span></span> <span data-ttu-id="8eebf-203">その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-203">Returns <see langword="null" /> if no object of that name was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-204">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="8eebf-204">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8eebf-205">これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.INameScope> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-205">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.INameScope> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8eebf-206">要求されたアンビエント プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="8eebf-206">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="8eebf-207">指定されたアンビエント プロパティを現在のスコープで使用できるかどうかを照会します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-207">Queries whether a specified ambient property is available in the current scope.</span></span></summary>
        <returns><span data-ttu-id="8eebf-208">要求されたアンビエント プロパティを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8eebf-208"><see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Style.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8eebf-209">このスタイルの対象となる型を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-209">Gets or sets the type for which this style is intended.</span></span></summary>
        <value><span data-ttu-id="8eebf-210">このスタイルの対象の型。</span><span class="sxs-lookup"><span data-stu-id="8eebf-210">The target type for this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-211">または<xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>から派生した任意の要素にスタイルを設定できます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-211">You can set a style on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="8eebf-212">したがって、対象の型は、これらの要素のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-212">Therefore, your target type can be any of those elements.</span></span> <span data-ttu-id="8eebf-213">ただし、 <xref:System.Windows.Style.TargetType%2A>プロパティを使用してスタイルを作成し、プロパティを<xref:System.Windows.Style.TargetType%2A>定義する別のスタイルに基づいて作成する場合、派生スタイルのターゲット型はと同じであるか、または基本スタイルのターゲット型から派生している必要があります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-213">However, if you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</span></span>  
  
 <span data-ttu-id="8eebf-214">を指定<xref:System.Windows.Style.TargetType%2A>しない場合は、にを`x:Key`指定<xref:System.Windows.Style>し、スタイルのプロパティをクラス名で修飾する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-214">If you do not specify a <xref:System.Windows.Style.TargetType%2A>, then you must specify an `x:Key` for your <xref:System.Windows.Style> and also qualify the properties in your style with a class name.</span></span>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8eebf-215">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="8eebf-215">XAML Attribute Usage</span></span>  
  
```  
<object  TargetType="{x:Type typeName}"/>  
-or-  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8eebf-216">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8eebf-216">XAML Values</span></span>  
 `{x:Type ...}`  
 <span data-ttu-id="8eebf-217">[X:Type マークアップ拡張](~/docs/framework/xaml-services/x-type-markup-extension.md)機能の拡張機能の使用。</span><span class="sxs-lookup"><span data-stu-id="8eebf-217">An [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md) markup extension usage.</span></span>  
  
 <span data-ttu-id="8eebf-218">*typeName*</span><span class="sxs-lookup"><span data-stu-id="8eebf-218">*typeName*</span></span>  
 <span data-ttu-id="8eebf-219">クラスの型名。</span><span class="sxs-lookup"><span data-stu-id="8eebf-219">The type name of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eebf-220">次の例では、 <xref:System.Windows.Controls.TextBlock>要素のすべてのインスタンスに適用されるスタイルを定義します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-220">The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
 <span data-ttu-id="8eebf-221"><xref:System.Windows.Controls.TextBlock> `x:Key` を設定 `x:Key` せずに`{x:Type TextBlock}`プロパティを型に設定すると、が暗黙的にに設定されます。 <xref:System.Windows.Style.TargetType%2A></span><span class="sxs-lookup"><span data-stu-id="8eebf-221">Setting the <xref:System.Windows.Style.TargetType%2A> property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`.</span></span> <span data-ttu-id="8eebf-222">これはまた<xref:System.Windows.Style> 、上記`x:Key`の値に以外`{x:Type TextBlock}`の値を指定すると、が<xref:System.Windows.Style>すべて<xref:System.Windows.Controls.TextBlock>の要素に自動的に適用されないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-222">This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically.</span></span> <span data-ttu-id="8eebf-223">代わりに、スタイルを<xref:System.Windows.Controls.TextBlock>要素に明示的に適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8eebf-223">Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.</span></span>  
  
 <span data-ttu-id="8eebf-224">多く[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]のコントロールは、他[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]のコントロールの組み合わせで構成されているため、型のすべてのコントロールに適用されるスタイルを作成することで、広範な影響を与えることができます。</span><span class="sxs-lookup"><span data-stu-id="8eebf-224">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="8eebf-225"><xref:System.Windows.Controls.TextBox>たとえば、 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.ComboBox>内のコントロールを対象とするスタイルを作成した場合、がなどの別のコントロールの一部であっても、スタイルはキャンバス内のすべてのコントロールに適用されます。 <xref:System.Windows.Controls.Canvas></span><span class="sxs-lookup"><span data-stu-id="8eebf-225">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8eebf-226">スタイルとテンプレートのサンプルの概要</span><span class="sxs-lookup"><span data-stu-id="8eebf-226">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Style.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8eebf-227">指定した条件に基づいてプロパティ値を適用する、<see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-227">Gets a collection of <see cref="T:System.Windows.TriggerBase" /> objects that apply property values based on specified conditions.</span></span></summary>
        <value><span data-ttu-id="8eebf-228"><see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="8eebf-228">A collection of <see cref="T:System.Windows.TriggerBase" /> objects.</span></span> <span data-ttu-id="8eebf-229">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="8eebf-229">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8eebf-230">スタイルとテンプレートモデルを使用すると、 <xref:System.Windows.Style>内でトリガーを指定できます。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</span><span class="sxs-lookup"><span data-stu-id="8eebf-230">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styling and templating model enables you to specify triggers within your <xref:System.Windows.Style>.</span></span> <span data-ttu-id="8eebf-231">基本的に、トリガーとは、特定の条件 (特定のプロパティ値`true`が発生したとき、イベントが発生したときなど) が満たされたときに変更を適用できるようにするオブジェクトのことです。</span><span class="sxs-lookup"><span data-stu-id="8eebf-231">Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8eebf-232">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="8eebf-232">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8eebf-233">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8eebf-233">XAML Values</span></span>  
 <span data-ttu-id="8eebf-234">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="8eebf-234">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="8eebf-235">から派生するクラスである0個以上の<xref:System.Windows.TriggerBase>オブジェクト要素。</span><span class="sxs-lookup"><span data-stu-id="8eebf-235">Zero or more object elements that are classes deriving from <xref:System.Windows.TriggerBase>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8eebf-236">次の例は、 <xref:System.Windows.Style> <xref:System.Windows.Controls.Button>コントロールで使用できるという名前のを示しています。</span><span class="sxs-lookup"><span data-stu-id="8eebf-236">The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls.</span></span> <span data-ttu-id="8eebf-237">は<xref:System.Windows.Style> 、 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>プロパティ<xref:System.Windows.Trigger> <xref:System.Windows.Controls.Control.Foreground%2A>がの `true` 場合に、ボタンのプロパティを変更する要素を定義します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-237">The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.</span></span>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8eebf-238">スタイルとテンプレートのサンプルの概要</span><span class="sxs-lookup"><span data-stu-id="8eebf-238">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit&#xA;override this.UnregisterName : string -&gt; unit" Usage="style.UnregisterName name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.UnregisterName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8eebf-239">削除するマッピングの名前。</span><span class="sxs-lookup"><span data-stu-id="8eebf-239">The name of the mapping to remove.</span></span></param>
        <summary><span data-ttu-id="8eebf-240">名前スコープから名前オブジェクトのマッピングを削除します。</span><span class="sxs-lookup"><span data-stu-id="8eebf-240">Removes a name-object mapping from the namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
