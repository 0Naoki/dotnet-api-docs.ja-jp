<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37e7aed83bb8605e1fc6521bbaffa487694de176" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461201" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements. This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> WPF フレームワーク レベルの要素のクラスと、WPF コア レベルのセット間の接続ポイントは、<xref:System.Windows.UIElement>プレゼンテーション サービス。 これらの概念の詳細については、次を参照してください。 [WPF アーキテクチャ](~/docs/framework/wpf/advanced/wpf-architecture.md)です。  
  
 <xref:System.Windows.FrameworkElement> 拡張<xref:System.Windows.UIElement>し、次の機能を追加します。  
  
-   **レイアウト システム定義**:<xref:System.Windows.FrameworkElement>特定の仮想メンバーとして定義されたメソッドの特定の WPF フレームワーク レベルの実装を提供<xref:System.Windows.UIElement>です。 特に、<xref:System.Windows.FrameworkElement>特定 WPF コア レベルのレイアウトの上書きが封印を示し、代わりに派生クラスの WPF フレームワーク レベルの同等を代わりにオーバーライドする必要があります。 たとえば、<xref:System.Windows.FrameworkElement>シール<xref:System.Windows.UIElement.ArrangeCore%2A>提供<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>です。 これらの変更は、WPF フレームワーク レベルでがあることの完全な配置システムでいずれかを表示できるという事実を反映<xref:System.Windows.FrameworkElement>クラスを派生します。 WPF で構造体、一般的なは、特定のレベルのメンバーをコア[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]ベース レイアウト ソリューションの場所は、レイアウト システムの実際のエンジンが定義されていません。 詳細については、次を参照してください。[レイアウト](~/docs/framework/wpf/advanced/layout.md)です。  
  
-   **論理ツリー:** 全般的な[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プログラミング モデルがされている要素のツリーとして表現されて多くの場合。 論理ツリーとして要素のツリーを表現して、サポートの実装はマークアップでそのツリーを定義するのに付属しているのサポート、<xref:System.Windows.FrameworkElement>レベル。 注ただしその<xref:System.Windows.FrameworkElement>意図的に、コンテンツ モデルを一切定義しませんし、派生クラスには、その責任のままにします。 詳細については、「[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。  
  
-   **オブジェクトの有効期間イベント:** 要素が初期化される場合を把握すると便利です (コンス トラクターが呼び出されます) または論理ツリーに要素が最初に読み込まれるときにします。 <xref:System.Windows.FrameworkElement> 分離コードが関係する操作子要素の追加などの要素に役立ちますフックを提供するオブジェクトの有効期間に関連するいくつかのイベントを定義します。 詳細については、次を参照してください。[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)です。  
  
-   **データ バインディング、および動的リソース参照のサポート:** によってデータのバインドとリソースのプロパティ レベルのサポートは実装されて、<xref:System.Windows.DependencyProperty>クラスし、プロパティ システムがあるメンバー値を解決する機能に埋め込むとして格納されている、 <xref:System.Windows.Expression> (データのバインドと動的なリソースの両方の基礎となるプログラミング構造) はによって実装<xref:System.Windows.FrameworkElement>です。 詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)と[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
-   **スタイル:** <xref:System.Windows.FrameworkElement>定義、<xref:System.Windows.FrameworkElement.Style%2A>プロパティです。 ただし、<xref:System.Windows.FrameworkElement>されていないテンプレートでサポートを定義またはデコレーターをサポートしません。 これらの機能がなどのコントロール クラスによって導入された<xref:System.Windows.Controls.Control>と<xref:System.Windows.Controls.ContentControl>です。  
  
-   **アニメーションをサポート:** 一部アニメーション サポートは、WPF コア レベルで既に定義されてが<xref:System.Windows.FrameworkElement>これを実装することによって拡張<xref:System.Windows.FrameworkElement.BeginStoryboard%2A>関連メンバーとします。  
  
 クラスの階層からわかるように多く[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]クラスから派生<xref:System.Windows.FrameworkElement>直接または中間の基本クラスのいずれかなど、<xref:System.Windows.Controls.Panel>または<xref:System.Windows.Controls.Control>です。  
  
 使用する場合<xref:System.Windows.FrameworkElement>を基底クラスとして最初既存の派生クラスを確認する場合があります。 <xref:System.Windows.FrameworkElement> 基本的なシナリオの数は、サポートもいくつかの作成に使用する構成要素の意味で"element"ために必要な機能がありません[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]で[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]です。 インスタンス、 <xref:System.Windows.FrameworkElement> ; 任意の場合は true コンテンツ モデルが定義されていません。<xref:System.Windows.FrameworkElement>基底クラスが作成できるプロパティを定義していないよう[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]子要素です。 具体的には、することができますを見て<xref:System.Windows.Controls.Control>と<xref:System.Windows.Controls.ContentControl>です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered height of this element.</summary>
        <value>値としての要素の高さ [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は 0 (ゼロです)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、その他の高さの入力と、レイアウト システムに基づいて計算される値です。 値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど<xref:System.Windows.FrameworkElement.Height%2A>入力の変更の基礎にあります。  
  
 <xref:System.Windows.FrameworkElement.ActualHeight%2A>注意すべき、計算した値には複数存在する可能性がありますか、増分が報告されている結果が変化してさまざまな操作、レイアウト システムでします。 レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。  
  
 このプロパティを設定することはできませんが[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、基にすることができます、<xref:System.Windows.Trigger>スタイルでは、その値にします。  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
   
  
## Examples  
 次の例では、さまざまな高さのプロパティを表示します。  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered width of this element.</summary>
        <value>値としての要素の幅 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は 0 (ゼロです)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、その他の幅の入力と、レイアウト システムに基づいて計算される値です。 値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど<xref:System.Windows.FrameworkElement.Width%2A>入力の変更の基礎にあります。  
  
 <xref:System.Windows.FrameworkElement.ActualWidth%2A>注意すべき、計算した値には複数存在する可能性がありますか、増分が報告されている結果が変化してさまざまな操作、レイアウト システムでします。 レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。  
  
 このプロパティを設定することはできませんが[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、基にすることができます、<xref:System.Windows.Trigger>スタイルでは、その値にします。  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
   
  
## Examples  
 次の例では、さまざまな幅のプロパティを表示します。  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Child element to be added.</param>
        <summary>Adds the provided object to the logical tree of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素の論理上の子要素を表すオブジェクトのコレクションの実装には、このメソッドを使用します。 プロパティの getter または setter、クラス処理を Changed イベント、コンス トラクター、またはコレクション型自体内では、子要素のコレクションのコレクションのメンテナンスを行う可能性があります。  
  
 使用可能な基本コントロール クラスのコンテンツ モデルの適切なものが、制御のシナリオの場合を除きは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。 レベルのサブクラス化を検討してください<xref:System.Windows.Controls.ContentControl>、 <xref:System.Windows.Controls.ItemsControl>、および<xref:System.Windows.Controls.HeaderedItemsControl>です。 これらのクラスを介して専用の論理ツリーの子要素の特定の強制使用したモデルのコンテンツを提供する[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]、その他の機能では通常望ましくのサポートに加えて、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]テンプレートを介してスタイルなどのコントロールです。 使用する方法の詳細についての<xref:System.Windows.FrameworkElement.LogicalChildren%2A>と<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>を参照してください[wpf ツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)です。  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> 別のプロセスによって、論理ツリーが反復処理されているときに呼び出された場合、例外をスローする可能性があります。  
  
   
  
## Examples  
 次の例では、実装、`Child`カスタム プロパティ<xref:System.Windows.FrameworkElement>独自 visual レイヤーの実装を行うことです。 プロパティ set アクセス操作子では、古い値がクラスに固有のビジュアル コレクションと同様に、論理ツリーから削除されている値が変更された場合ように設計されています。 プロパティの値がキャッシュされ、論理ツリーとカスタム ビジュアルのコレクションの両方に、新しい値を追加し、します。  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</summary>
        <returns>
          <see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、要素のビジュアル ツリーが完了したことを保証するには、このメソッドを呼び出すことができます。 この保証のステップのコードは、ツリー内の子要素をチェックする場合は、必要があります。 一般的な要素のロジックを呼び出すアプリケーション内での<xref:System.Windows.FrameworkElement.ApplyTemplate%2A>テンプレートは適用されるため、適切な位置にある要素を有効期間内に自動的に、必要ではありません。  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> メジャーがすべてで呼び出されると、WPF フレームワーク レベルのレイアウト システム渡しです。  
  
 <xref:System.Windows.FrameworkElement> 派生クラスで使用できる、<xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>通知を受ける場合はこのメソッドが明示的に呼び出された場合のまたはレイアウト システム クラス ハンドラー。 <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> テンプレートが完全に生成され、論理ツリーにアタッチされている後に呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはシールされています。 要素のレイアウトの配置パスを具体的には、カスタム要素内のロジックをオーバーライドするために、<xref:System.Windows.FrameworkElement>派生クラスでオーバーライドする必要があります<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</summary>
        <returns>The actual size used.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>コントロールの作成者が、処理の配置パスのレイアウトをカスタマイズするには、このメソッドをオーバーライドする必要があります。実装パターンが呼び出す必要があります<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />各表示されている子要素、およびパスが、最終的な目的として各子要素のサイズ、<paramref name="finalRect" />パラメーター。親要素を呼び出す必要があります<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />、それぞれの子にそれ以外の場合、子要素は表示されません。多くの派生クラスでは、このメソッドの実装を提供します。顕著な: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />、<see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" />と<see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />です。</para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the initialization process for this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 まだ公開または要素ツリーに要素を接続するための方法で調整する場合は、個々 の要素でこのメソッドを呼び出すことができます。 たとえば、独自に作成した新しい<xref:System.Windows.FrameworkElement>、まだ接続していないことを任意の論理ツリーですがします。 または、内の子要素を要素がここでは、論理ツリーは、ウィンドウやアプリケーションのページに接続されていない可能性があります。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>要素の読み込みプロセス中に、要素が初期化される前に行う必要がある特別な処理を提供するには、このメソッドを実装します。(既定値) の基本実装では、初期化を追跡するためのいくつかの内部フラグを設定するため、実装には基底の実装を呼び出す必要があります。1 つの可能な実装では、コンス トラクターで既に有効になっていない、独自のプライベート クラス初期化ルーチンにフックとしてこのメソッドを使用します。基底の実装は例外をスロー<see cref="M:System.Windows.FrameworkElement.BeginInit" />が呼び出された複数の同じ要素の前に<see cref="M:System.Windows.FrameworkElement.EndInit" />呼び出されています。</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Begins the sequence of actions contained in the provided storyboard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <summary>Begins the sequence of actions that are contained in the provided storyboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。 通常、作成、<xref:System.Windows.Media.Animation.Storyboard>または<xref:System.Windows.Media.Animation.BeginStoryboard>マークアップにある要素を配置として、<xref:System.Windows.EventTrigger>要素のコンテンツ。 イベントによってトリガーされると、アニメーションが実行されます。 ほとんどのコントロール要素の<xref:System.Windows.Media.Animation.Storyboard>マークアップで公開されているプロパティでアドレス指定できます。  
  
 署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。 そのため、アニメーションは、1 回の実行後に再開できません。 アニメーションを制御するもある必要があります、ストーリー ボード、 [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)コード内で参照でアクセスできるか。  
  
   
  
## Examples  
 次の例を取得、<xref:System.Windows.Media.Animation.Storyboard>リソースからを実行し、<xref:System.Windows.Media.Animation.Storyboard>内部イベントが処理されるクラスの場合。  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <param name="handoffBehavior">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</param>
        <summary>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。 通常、作成、<xref:System.Windows.Media.Animation.Storyboard>または<xref:System.Windows.Media.Animation.BeginStoryboard>マークアップにある要素を配置として、<xref:System.Windows.EventTrigger>要素のコンテンツ。 イベントによってトリガーされると、アニメーションが実行されます。 ほとんどのコントロール要素の<xref:System.Windows.Media.Animation.Storyboard>マークアップで公開されているプロパティでアドレス指定できます。  
  
 署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。 そのため、アニメーションは、1 回の実行後に再開できません。 アニメーションを制御するもある必要があります、ストーリー ボード、 [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)コード内で参照でアクセスできるか。  
  
 属性としてハンドオフ動作を指定することができます<xref:System.Windows.Media.Animation.BeginStoryboard>です。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトは引き続きシステム リソースが消費されますタイミング システムでは。時計を自動的に削除されません。  
  
 使用して多数の時計を適用するときに、パフォーマンスの問題を回避する<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション オブジェクトのメソッドです。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックが、プロパティから削除します。  
  
-   固有の仕様を削除する<xref:System.Windows.Media.Animation.AnimationClock>にクロックのリストを使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、<xref:System.Windows.Media.Animation.ClockController>を呼び出す、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックできますで制御されることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`です。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>クロックの有効期間が forever の場合、イベントは発生しません。  その場合は、ユーザーを決定する必要がありますを呼び出すときに<xref:System.Windows.Media.Animation.ClockController.Remove%2A>です。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。[アニメーションおよびタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)です。  
  
   
  
## Examples  
 次の例を取得、<xref:System.Windows.Media.Animation.Storyboard>リソースからを実行し、<xref:System.Windows.Media.Animation.Storyboard>内部イベントが処理されるクラスの場合。  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <param name="handoffBehavior">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</param>
        <param name="isControllable">Declares whether the animation is controllable (can be paused) after it is started.</param>
        <summary>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。 通常、作成、<xref:System.Windows.Media.Animation.Storyboard>または<xref:System.Windows.Media.Animation.BeginStoryboard>マークアップにある要素を配置として、<xref:System.Windows.EventTrigger>要素のコンテンツ。 イベントによってトリガーされると、アニメーションが実行されます。 ほとんどのコントロール要素の<xref:System.Windows.Media.Animation.Storyboard>マークアップで公開されているプロパティでアドレス指定できます。  
  
 署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。 そのため、アニメーションは、1 回の実行後に再開できません。 アニメーションを制御するもある必要があります、ストーリー ボード、 [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)コード内で参照でアクセスできるか。  
  
 属性としてハンドオフ動作を指定することができます<xref:System.Windows.Media.Animation.BeginStoryboard>です。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトは引き続きシステム リソースが消費されますタイミング システムでは。時計を自動的に削除されません。  
  
 使用して多数の時計を適用するときに、パフォーマンスの問題を回避する<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション オブジェクトのメソッドです。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。 これにより、すべてのアニメーション クロックが、プロパティから削除します。  
  
-   固有の仕様を削除する<xref:System.Windows.Media.Animation.AnimationClock>にクロックのリストを使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、<xref:System.Windows.Media.Animation.ClockController>を呼び出す、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。 唯一のルート クロックできますで制御されることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`です。 なお、<xref:System.Windows.Media.Animation.Clock.Completed>クロックの有効期間が forever の場合、イベントは発生しません。  その場合は、ユーザーを決定する必要がありますを呼び出すときに<xref:System.Windows.Media.Animation.ClockController.Remove%2A>です。  
  
 これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。[アニメーションおよびタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</summary>
        <value>
          <see cref="T:System.Windows.Data.BindingGroup" />要素に使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Data.BindingGroup>オブジェクトの複数のプロパティの値を検証するために使用できます。 たとえば、アプリケーションがアドレスを入力するように求めるし、その型のオブジェクトが設定されます`Address`、プロパティを持つ`Street`、 `City`、 `ZipCode`、および`Country`値を使用しているユーザー用意されています。 アプリケーションが 4 つを含むパネル<xref:System.Windows.Controls.TextBox>コントロール、それぞれは、オブジェクトのプロパティのいずれかにバインドします。 使用することができます、<xref:System.Windows.Controls.ValidationRule>で、<xref:System.Windows.Data.BindingGroup>を検証する、`Address`オブジェクト。 たとえば、<xref:System.Windows.Controls.ValidationRule>郵便番号が有効、住所の国であることを確認できます。  
  
 子要素を継承、<xref:System.Windows.Data.BindingGroup>だけで、他の継承可能なプロパティと同様に、親要素からです。  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|メタデータ プロパティに設定**は true。**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 次の例は、ユーザーが同じ値に 2 つのオブジェクトのプロパティに設定するかどうかを確認するアプリケーションの一部です。 最初の例では、2 つ作成されます<xref:System.Windows.Controls.TextBox>コントロール、それぞれが別のデータ ソースにバインドされています。 <xref:System.Windows.Controls.StackPanel>が、<xref:System.Windows.Data.BindingGroup>を格納している、 <xref:System.Windows.Controls.ValidationRule> 2 つの文字列が等しいことを確認します。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 次の例は、<xref:System.Windows.Controls.ValidationRule>前の例を使用します。  <xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッド オーバーライドから、ソース オブジェクトを取得する例では、<xref:System.Windows.Data.BindingGroup>し、オブジェクトのプロパティが等しいかどうかを確認します。  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 呼び出す、<xref:System.Windows.Controls.ValidationRule>を呼び出し、<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>メソッドです。  次の例では<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>ボタンのクリック イベントの発生時です。  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attempts to bring this element into view, within any scrollable regions it is contained within.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to bring this element into view, within any scrollable regions it is contained within.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すことにより、<xref:System.Windows.FrameworkElement.RequestBringIntoView>の現在の要素から発生するイベントです。 このイベントで処理できるように、 <xref:System.Windows.Controls.ScrollViewer>、または派生されているかのようなクラス。 想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、<xref:System.Windows.Controls.ScrollViewer>コントロール。 どちらも、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベントも<xref:System.Windows.FrameworkElement.BringIntoView%2A>メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信します。 理由としては、エラーなどで要素の設定を含めることができます<xref:System.Windows.UIElement.Visibility%2A>以外の何らかの値をされている<xref:System.Windows.Visibility.Visible>です。  
  
 指定されていない署名を使用する場合、 `targetRectangle`、全体の要素のサイズし (その<xref:System.Windows.UIElement.RenderSize%2A>) が表示されます。  
  
 このメソッドを呼び出して、可能性のあるを呼び出す<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>要素を含む親スクロール可能な領域にします。 この要素がスクロール可能領域に含まれていない場合、<xref:System.Windows.FrameworkElement.RequestBringIntoView>も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです。  
  
   
  
## Examples  
 実装するたびに応答するアプリケーションのナビゲーション イベントのハンドラーを次の例、[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]フラグメントには移動先が含まれています。 フラグメントを指定、[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]次のシャープ記号 (#)、実装済みの動作により、フレーム内でビューをスクロールする要素とします。 <xref:System.Windows.FrameworkElement.BringIntoView%2A> および<xref:System.Windows.FrameworkElement.RequestBringIntoView>例ではそのスクロール動作を要求します。  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">Specified size of the element that should also be brought into view.</param>
        <summary>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すことにより、<xref:System.Windows.FrameworkElement.RequestBringIntoView>の現在の要素から発生するイベントです。 このイベントで処理できるように、 <xref:System.Windows.Controls.ScrollViewer>、または派生されているかのようなクラス。 想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、<xref:System.Windows.Controls.ScrollViewer>コントロール。 どちらも、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベントも<xref:System.Windows.FrameworkElement.BringIntoView%2A>メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信します。 理由としては、エラーなどで要素の設定を含めることができます<xref:System.Windows.UIElement.Visibility%2A>以外の何らかの値をされている<xref:System.Windows.Visibility.Visible>です。  
  
 指定されていない署名を使用する場合、 `targetRectangle`、全体の要素のサイズし (その<xref:System.Windows.UIElement.RenderSize%2A>) が表示されます。  
  
 このメソッドを呼び出して、可能性のあるを呼び出す<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>要素を含む親スクロール可能な領域にします。 この要素がスクロール可能領域に含まれていない場合、<xref:System.Windows.FrameworkElement.RequestBringIntoView>も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです。  
  
   
  
## Examples  
 次の例では、制約付きのスクロール領域に大きなグラフィックスがします。 ページ上のボタンには、大きな画像の特定の地域にビューをスクロールするハンドラーがあります。  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</summary>
        <value>この要素に割り当てられたコンテキスト メニュー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> 自体は、<xref:System.Windows.FrameworkElement>クラスを派生しの技術的に可能であれば<xref:System.Windows.Controls.ContextMenu>自体が、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティです。 ただし、これがユーザーの混乱を招くコンテキスト メニュー エクスペリエンスを作成し、この方法はお勧めできません。  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs just before any context menu on the element is closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 閉じないようにするには、コンテキスト メニュー、イベントのハンドラーは、処理済みとしてマークします。  
  
 としては、このイベントを使用して、<xref:System.Windows.EventTrigger>スタイルでは、イベントの基になるサービスの定義を参照する必要があります。  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (ために、この使用法が必要でイベントの実装<xref:System.Windows.FrameworkElement>、公開、基になるサービスのイベントがマップされていない、<xref:System.Windows.FrameworkElement.ContextMenuClosing>識別子をトリガーとして使用することができます)。  
  
 <xref:System.Windows.Controls.ContextMenu> 自体は、<xref:System.Windows.FrameworkElement>派生クラスしますが、<xref:System.Windows.FrameworkElement.ContextMenuClosing>イベントは発生しません。 コンテキスト メニューで直接です。 代わりに、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI にコンテキスト メニューを閉じるしようとしたときにだけ発生する要素からイベントが発生します。 ただしこれは<xref:System.Windows.Controls.ContextMenu>自体が、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティ (入れ子になったコンテキスト メニュー)。 この場合、 <xref:System.Windows.Controls.ContextMenu> 、入れ子になった実際に所有して<xref:System.Windows.Controls.ContextMenu>し、入れ子になったコンテキスト メニューをされているイベントのソースと、イベントを発生させる可能性があります。  
  
 <xref:System.Windows.Controls.ContextMenu>クラス自体は、類似のイベントもあります (<xref:System.Windows.Controls.ContextMenu.Closed>) が、<xref:System.Windows.Controls.ContextMenu.Closed>イベントは、ユーザーの操作をキャンセルすることが提供されません。  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|ルーティング方法|バブル|  
|Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   オーバーライド<xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any context menu on the element is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンテキスト メニューを手動で開く、処理済みとして、イベントのハンドラーは、関連するイベントをマークする必要があります。 それ以外の場合の既存の値、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティが自動的にコンテキスト メニューを開き、使用されます。 既定のアクションを効果的に取り消し処理イベントをマークすることとの値にリセットすることにより、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティを開き、新しい<xref:System.Windows.Controls.ContextMenu>です。 ただしはタイミングの問題を認識する必要があります。 コンテキスト メニューを完全に置き換えるために、<xref:System.Windows.FrameworkElement.ContextMenuOpening>ハンドラー、初期のコンテキスト メニューにはできません null/空です。 また、イベントを処理し、新しいコンテキスト メニューを手動で開く必要があります。 詳細については、「[する方法: ContextMenuOpening イベントを処理](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)です。  
  
 このイベントを使用する、<xref:System.Windows.EventTrigger>スタイルでは、基になる添付イベントを参照する必要があります。  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (ために、この使用法が必要でイベントの実装<xref:System.Windows.FrameworkElement>、公開、基になるサービスのイベントがマップされていない、<xref:System.Windows.FrameworkElement.ContextMenuOpening>識別子をトリガーで使用することができます)。  
  
 <xref:System.Windows.Controls.ContextMenu> 自体は、<xref:System.Windows.FrameworkElement>派生クラスには、ソースとして開かれている、コンテキスト メニューからこのイベントは発生しません。 イベントは、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI のコンテキスト メニューを開くしようとしたときにだけ発生する要素から発生します。 ことが<xref:System.Windows.Controls.ContextMenu>自体が、<xref:System.Windows.FrameworkElement.ContextMenu%2A>がプロパティには、このシナリオを避ける必要があります (詳細については、「 <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 <xref:System.Windows.Controls.ContextMenu>クラス自体は、類似のイベントもあります (<xref:System.Windows.Controls.ContextMenu.Opened>) が、<xref:System.Windows.Controls.ContextMenu.Opened>ユーザーの操作をキャンセルする機会を提供しません。  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|ルーティング方法|バブル|  
|Delegate|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   オーバーライド<xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cursor that displays when the mouse pointer is over this element.</summary>
        <value>表示対象のカーソル。 既定値として定義<see langword="null" />この依存関係プロパティごとです。 ただし、実行時における実用的な既定値は、さまざまな要因から取得されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定すると[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロセッサがの型の変換に依存しています、<xref:System.Windows.Input.Cursor>クラス文字列を評価します。 指定された文字列に評価される必要があります、<xref:System.Windows.Input.CursorType>値。 詳細については、「<xref:System.Windows.Input.Cursor>」を参照してください。  
  
 このプロパティによって設定されるカーソルは、マウス ポインターがこの要素上に表示されないかどうかの値に依存しても、<xref:System.Windows.FrameworkElement.ForceCursor%2A>プロパティです。 また、アクティブなドラッグ、マウスのキャプチャ、テキスト コントロール、および、内のモードの編集など、イベント関連の考慮事項も影響を与えますカーソル、このプロパティで指定した値よりも優先順位の高い。  
  
 最終的な既定値にこのプロパティの設定の動作を戻すには、設定`null`もう一度です。  
  
 `null`既定を意味実際的なカーソルの値の決定がここでは遅延し、別の場所から入手してください。 提示された場合、ソースからプログラムで値を使用せず、既定のカーソルが視覚的に以上、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]アプリケーションは矢印になります。 ただし、カーソルの一時的な変更に設定されていない、<xref:System.Windows.FrameworkElement.Cursor%2A>経由で渡されるときに、要素の値。 <xref:System.Windows.FrameworkElement.Cursor%2A>それが実際に設定されている場合、インスタンスのコードや、スタイルを介しての値がプロパティはのみレポート null 以外です。 上にあるマウスが移動するたび、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]アプリケーションが発生し、<xref:System.Windows.UIElement.QueryCursor>イベント。 イベント バブルと経路上の任意の要素、イベントを処理し、このイベントの引数をカーソルの値を設定する機会があります。 これは、ほとんどの場合、視覚的に明らかなカーソルを生成するメカニズムです。 場合、<xref:System.Windows.UIElement.QueryCursor>ハンドラーは、カーソルの結果を返すし、イベントが処理され、引数に変更された値を持つファクトの値よりも優先、<xref:System.Windows.FrameworkElement.Cursor%2A>任意のレベルでは、プロパティしない限り、<xref:System.Windows.FrameworkElement.ForceCursor%2A>が設定されています。  
  
 通常の静的プロパティの値にこのプロパティを設定する場合は、カスタムのカーソルを作成しない、<xref:System.Windows.Input.Cursors>クラスです。 設定<xref:System.Windows.FrameworkElement.Cursor%2A>コードで、次のいずれかが必要です。  
  
-   呼び出す、<xref:System.Windows.Input.Cursor>を取得するコンス トラクター、<xref:System.Windows.Input.Cursor>インスタンス。 両方の署名、<xref:System.Windows.Input.Cursor>ストリームまたはファイルの作成中に応じるために、コンス トラクターを使用して、<xref:System.Windows.Input.Cursor>カーソルのカスタム オブジェクト。  
  
-   使用して、<xref:System.Windows.Input.CursorConverter>クラスとその<xref:System.Windows.Input.CursorConverter.ConvertFrom%2A>メソッドによって、カーソルを指定する<xref:System.Windows.Input.CursorType>、または文字列に評価されることを<xref:System.Windows.Input.CursorType>に戻り値のキャストと<xref:System.Windows.Input.Cursor>です。  
  
 設定、<xref:System.Windows.Input.Cursor>にカスタム値が有効でない部分的に信頼します。 カスタム カーソルの詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
   
  
## Examples  
 次の例では、カーソル グラフィックを意図的に設定する方法を示します。  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data context for an element when it participates in data binding.</summary>
        <value>データ コンテキストとして使用するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *データ コンテキスト*概念により、バインディング、だけでなく、バインディング、パスなどの他の特性に使用されるデータ ソースについて、親要素から情報を継承する要素です。  
  
 直接データ コンテキストを設定することができます、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]オブジェクト、そのオブジェクトのプロパティを評価する、バインディングを使用します。 または、データ コンテキストを設定、<xref:System.Windows.Data.DataSourceProvider>オブジェクト。  
  
 この依存関係プロパティでは、プロパティの値を継承します。 その他の値を使用せずに子要素がある場合<xref:System.Windows.FrameworkElement.DataContext%2A>プロパティ システムは値を設定し、ローカルの値や、スタイルを介して確立、<xref:System.Windows.FrameworkElement.DataContext%2A>割り当てられているこの値を持つ最も近い親要素の値。  
  
 次のプロパティのいずれかを使用する代わりに、<xref:System.Windows.Data.Binding>クラスをバインディング ソースを明示的に指定する: <xref:System.Windows.Data.Binding.ElementName%2A>、 <xref:System.Windows.Data.Binding.Source%2A>、または<xref:System.Windows.Data.Binding.RelativeSource%2A>です。 詳細については、次を参照してください。[する方法: バインド ソースを指定して](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)です。  
  
 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、<xref:System.Windows.FrameworkElement.DataContext%2A>として最も一般的に設定されて、<xref:System.Windows.Data.Binding>宣言します。 プロパティ要素構文または属性の構文のいずれかを使用することができます。 属性構文は、このページの例に示しています。 コードを使用して設定することもできます<xref:System.Windows.FrameworkElement.DataContext%2A>です。  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> 別に 1 つのコンテキストをバインドする場合がありますのシナリオを容易にするために、バインド可能なプロパティです。 ただしにバインドする場合<xref:System.Windows.FrameworkElement.DataContext%2A>、循環バインドの参照を作成しないように注意してください (バインドしないでください、 <xref:System.Windows.FrameworkElement.DataContext%2A> 、それ自体には、プロパティ値の継承の性質を行う、<xref:System.Windows.FrameworkElement.DataContext%2A>プロパティ)。  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>XAML 値  
 *dataContextObject*  
 親要素内のすべてのバインディングのデータ コンテキストとして機能する直接埋め込まれたオブジェクト。 通常、このオブジェクトは、<xref:System.Windows.Data.Binding>別または<xref:System.Windows.Data.BindingBase>クラスを派生します。 または、いずれかの生データ[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]オブジェクトの種類のバインディングは、後で定義されている実際のバインディングをここでは、配置することも対象としています。  
  
 *bindingUsage*  
 適切なデータ コンテキストに評価されるバインディングの使用方法です。 詳細については、「[バインディングのマークアップ拡張機能](~/docs/framework/wpf/advanced/binding-markup-extension.md)」を参照してください。  
  
 *resourceExtension*  
 次のいずれか。 またはします。 この使用法は、リソース内のオブジェクトとして定義されている、生データを参照するときに使用されます。 参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
 *contextResourceKey*  
 内から要求されたオブジェクトのキー識別子、<xref:System.Windows.ResourceDictionary>です。  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 次の例では、バインディング上のデータ コンテキストの動作を示していて、特定のバインドされたプロパティの値を定義する情報を提供します。  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the data context for this element changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ コンテキストおよびデータ バインディングの詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。  
  
> [!IMPORTANT]
>  ときに、<xref:System.Windows.FrameworkElement.DataContext%2A>要素変更では、この要素上のすべてのデータ バインド プロパティ可能性のある影響を受けます。 これは、データ コンテキストを継承するには、論理ツリーで、現在の要素の子要素である任意の要素も、現在の要素自体に適用されます。 このような既存のすべてのバインドは、新しい再解釈する必要があります<xref:System.Windows.FrameworkElement.DataContext%2A>し、バインディングの結果を再評価します。 データ バインディング エンジンは、非確定的なこれらの生成基準とした注文に関する、<xref:System.Windows.FrameworkElement.DataContextChanged>イベント。 イベントの後、または任意の組み合わせで、再評価は、イベントの前に発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</summary>
        <value>スタイルのキー。 テーマ スタイル参照の一部として正常に機能するために、この値は、スタイルを設定するコントロールの <see cref="T:System.Type" /> である必要があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、通常はその直接のプロパティ アクセサーのを通じて設定されません。 この依存関係プロパティの型に固有のメタデータをオーバーライドする代わりに、新規に作成するたびに<xref:System.Windows.FrameworkElement>クラスを派生します。 コントロールを派生するときに呼び出す、<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>メソッドに対して、<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>識別子、コントロールの静的コンス トラクター内で派生したクラス (または同等のクラス初期化) します。  
  
 コントロール通常独自の型にするには、このプロパティの既定値が上書きが場合によってはでしたも使用してテーマ ディクショナリ内のスタイルが存在する基本型です。 これは、基本コントロールのコントロールのテンプレートが完全にその派生したコントロールのビジュアル表現を定義し、どのような追加のメンバーが派生型を公開では、コントロール テンプレートの一部としては、追加の要素は不要な場合のみ実用的です。  
  
 要素またはコントロールは意図的にテーマのスタイルを使用する場合は、設定、<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>プロパティを`true`です。  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 次の例は、「解説」で説明されている依存関係プロパティのメタデータ オーバーライド使用を示しています。 このコードは、カスタム コントロール クラスを定義`NumericUpDown`専用コントロール ライブラリのアセンブリから使用するためのものです。 ここで示した静的コンス トラクターがプライベートの初期化関数を参照、クラス ハンドラーを登録 (別の一般的なコントロールのサブクラス化シナリオ[Handled、クラス処理とルーティング イベントをマークすること](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) し、最後に上書き、<xref:System.Windows.FrameworkElement.DefaultStyleKey%2A>で依存関係プロパティのメタデータ、`NumericUpDown`クラスです。 <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 常に任意いくつかが設定されていないコントロールのスタイルを検索するテーマ スタイル システムが使用されている規則は、目的のキーとして独自の型を返します。 完全なサンプルもそのキーによって参照されている実際のコントロールのテーマのスタイルを定義します。参照してください[NumericUpDown カスタム コントロールのテーマと UI オートメーションのサポート サンプル](http://go.microsoft.com/fwlink/?LinkID=160025)です。  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  
[!code-csharp[CustomControlNumericUpDown#Close](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#close)]
[!code-vb[CustomControlNumericUpDown#Close](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#close)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates that the initialization process for the element is complete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合<xref:System.Windows.FrameworkElement.BeginInit%2A>が既に呼び出されて、基本実装を発生させる、<xref:System.Windows.FrameworkElement.Initialized>イベント。 それ以外の場合<xref:System.Windows.FrameworkElement.BeginInit%2A>も呼び出されなかったかではない可能性があるかどうかを特定<xref:System.Windows.FrameworkElement.BeginInit%2A>、呼び出された<xref:System.Windows.FrameworkElement.Initialized>は発生しません代わりに、例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</exception>
        <block subset="none" type="overrides">
          <para>要素の読み込みプロセス中に、要素の初期化を行うときに行う必要がある特別な処理を提供するには、このメソッドを実装します。(既定値) の基本実装では、初期化を追跡するためのいくつかの内部フラグを設定するため、実装には基底の実装を呼び出す必要があります。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the requested element.</param>
        <summary>Finds an element that has the provided identifier name.</summary>
        <returns>The requested element. This can be <see langword="null" /> if no matching element was found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素に子要素がある場合は、要求された名前を持つ要素を再帰的には、すべて検索は、これらの子要素です。  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> 現在の要素の名前スコープ内で動作します。 詳細については、「 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The key identifier for the requested resource.</param>
        <summary>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</summary>
        <returns>The requested resource. If no resource with the provided key was found, an exception is thrown. An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  見つからないキーのこのメソッドを呼び出すと、例外がスローされます。 呼び出し元に起因する例外を処理しないかどうかは<xref:System.Windows.FrameworkElement.FindResource%2A>、呼び出す<xref:System.Windows.FrameworkElement.TryFindResource%2A>代わりにします。 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 返します`null`要求されたリソースが見つからないし、例外はスローされません。  
  
 呼び出し元の要素で、リソースが見つからない場合論理ツリー内の親要素、検索結果の 次へし、アプリケーション、し、テーマ、最後にシステム リソースです。 この参照方法は、リソースがマークアップで動的リソース参照によって要求された場合に、ツリーを検索する方法と同じです。 リソースの検索の詳細については、次を参照してください。 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
 通常、即座にキャストする、<xref:System.Windows.FrameworkElement.FindResource%2A>に値を返し、プロパティの型を返されるリソース値に設定します。  
  
 リソース キーは必ずしも文字列です。 たとえば、スタイル、テーマのレベルでのコントロールが意図的と適合するため、<xref:System.Type>の管理、およびアプリケーションまたはページのスタイルのコントロールを通常使用してこの同じキー規則。 詳細については、「[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)または[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
   
  
## Examples  
 次の例では、名前付きリソースを取得し、プロパティに値を適切な型にキャストします。  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.  -or-  <paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceKey" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</summary>
        <value>方向そのテキストおよびその他の [!列挙体の値として、親要素内で INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 要素のフロー。 既定値は <see cref="F:System.Windows.FlowDirection.LeftToRight" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依存関係プロパティの使用法を設定、<xref:System.Windows.FrameworkElement.FlowDirection%2A>この要素上です。 プロパティ値の設定の継承により<xref:System.Windows.FrameworkElement.FlowDirection%2A>要素では設定できます可能性のある<xref:System.Windows.FrameworkElement.FlowDirection%2A>設定していないすべての子要素で<xref:System.Windows.FrameworkElement.FlowDirection%2A>ローカルやスタイルなどがその他の手段です。  
  
 このプロパティは自動的に設定されていない、任意のアプリケーションのカルチャの情報の一部として、要素は、必ずしもものではありません、カルチャ情報が含まれる一般的なフローの方向に従うようにコンテンツを含めることがあるためです。 グローバリゼーションの考慮事項の詳細については、次を参照してください。 [WPF のグローバリゼーション](~/docs/framework/wpf/advanced/globalization-for-wpf.md)です。  
  
 このプロパティは、定義されている[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]依存関係プロパティとして機能するように、プロパティ アクセサー。 ただしはも登録ように、接続されているため、添付プロパティとしても機能できます。 添付としての登録は主にするプロパティ値の継承がサポートされているが、プロパティは、実際の添付プロパティとしても使用できます。 添付プロパティの使用は、のみで、フローの方向を設定するオブジェクトが関連、<xref:System.Windows.FrameworkElement>時に、レイアウトを実行する親要素がない自体が、<xref:System.Windows.FrameworkElement>にまだないより直接的に定義されていると`FlowDirection`プロパティ。 (フローの一部のドキュメント クラス<xref:System.Windows.Documents.Block>と<xref:System.Windows.Documents.Inline>が独自に定義`FlowDirection`、し、このプロパティは、フローの方向を設定もできます。 プロパティの値が読み取ら最終的なコンテンツ ホストで添付プロパティの使用を必要とせず。)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
 \<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 このプロパティはないクラスにも設定できます<xref:System.Windows.FrameworkElement>に続いて派生クラス、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]添付プロパティの使用法。  
  
 `<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 このプロパティは、依存関係プロパティとが接続されているプロパティの両方「解説」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</summary>
        <value>フォーカスに適用する目的のスタイル。 依存関係プロパティで宣言されている既定値は、空の静的<see cref="T:System.Windows.Style" />です。 ただし、実行時の有効値は、多くの場合、コントロールのテーマ サポートによって提供されたスタイルです (ただし、常にそうであるとは限りません)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、視覚的な外観に影響を与えますが、状況は報告されません<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>メタデータにします。 これは、視覚的な外観の変更イベント ドリブンなすべての時刻に適用されるおよびしたがっては限らないメタデータに、visual またはレイアウトの情報です。  
  
 概念的には、フォーカスがコントロールに適用される視覚的な動作は、コントロール間で一貫している必要があります。 一貫性を実現するための最もわかりやすい方法では、全体のテーマを作成している場合にのみフォーカス visual スタイルを変更します。 個々 のコントロールのスタイルとテーマの一部ではなくこのプロパティを設定キーボード フォーカスに関するユーザー エクスペリエンスに混乱をこれは、このプロパティの使用目的はありません。 コントロール固有の動作は意図的に一貫したテーマにする場合は、はるかに優れた方法を使用してトリガーのスタイルで入力状態の個々 のプロパティのように<xref:System.Windows.UIElement.IsFocused%2A>または<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>、およびこれを行うことがないです。視覚的に既存のフォーカス visual スタイルに干渉します。 目的で設計の詳細については<xref:System.Windows.FrameworkElement.FocusVisualStyle%2A>と代替プロパティの焦点は、「[コントロール、および FocusVisualStyle でフォーカスのスタイルは](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)します。  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>XAML 値  
 *resourceExtension*  
 次のいずれかの: または。 参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
 *styleResourceKey*  
 要求されているスタイルを識別するキー。 このキーは既存のリソースを<xref:System.Windows.ResourceDictionary>です。  
  
> [!NOTE]
>  プロパティ要素構文は、技術的に可能ですが、推奨されません。 参照してください[インライン スタイルとテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)です。 バインドの参照を使用して、または<xref:System.Windows.Data.Binding>も可能ですが、一般的ではないです。  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</summary>
        <value>
          <see langword="true" /> この要素上でのカーソルの表示を強制的に現在を使用するかどうか<see cref="P:System.Windows.FrameworkElement.Cursor" />(すべての子要素を含む); カーソルの設定をそれ以外の場合<see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合`true`子要素で設定されているカーソル設定よりも優先されます。 そのため、一般にアプリケーション[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]子要素は、カーソルを指定しようとしている場合は特に、ユーザーの混乱する可能性があります。 設定<xref:System.Windows.FrameworkElement.ForceCursor%2A>の方がコントロールのサブクラス化または複合のシナリオに適しています。  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
   
  
## Examples  
 次の例では、カーソルの値を強制します。  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</param>
        <summary>Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</summary>
        <returns>A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値の確認`null`プロパティがアクティブなバインディングを持つかどうかを決定する手法は、します。  
  
 このメソッドは、実際には、利便性のためのラッパー、<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>メソッドです。 <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 現在のインスタンスを渡すと、`dp`パラメーターを<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</param>
        <summary>Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
        <returns>The requested flow direction, as a value of the enumeration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添付プロパティの構文をサポートするためには、このメソッドの主な目的、<xref:System.Windows.FrameworkElement.FlowDirection%2A>プロパティ、したがって、指定された要素を子に許可<xref:System.Windows.FrameworkElement>を親要素内での配置のフローの方向を指定します。 現在の値を取得する<xref:System.Windows.FrameworkElement>、ダイレクトを使用して[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]アクセサー<xref:System.Windows.FrameworkElement.FlowDirection%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">The size of the part of the element that does visual presentation.</param>
        <summary>Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</summary>
        <returns>The clipping geometry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 減算する余白、`layoutSlotSize`レイアウト システムの動作の一部として。  
  
 返される null 参照では、クリップが発生しないことを示します。 既定の実装を常に返します`null`とき<xref:System.Windows.UIElement.ClipToBounds%2A>は`false`します。 このメソッドは<xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>します。 <xref:System.Windows.FrameworkElement>実装を使用して<xref:System.Windows.FrameworkElement.MaxHeight%2A>と<xref:System.Windows.FrameworkElement.MaxWidth%2A>計算にします。 いくつかのサブクラス<xref:System.Windows.FrameworkElement>再度このメソッドをオーバーライドします。 <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>、戻り値を常にオーバーライド`null`のため装飾多くの場合、意図的に通常の範囲外です。 <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> および<xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType>返す`null`場合<xref:System.Windows.UIElement.ClipToBounds%2A>は`false`します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>既定の実装を常に返します<see langword="null" />とき<see cref="P:System.Windows.UIElement.ClipToBounds" />は<see langword="false" />します。上書きは通常、この動作を保持するためが必要場合は、リレーションシップと派生クラスと基底クラスではなく、レイアウト ロジックの目的に応じて、例外です。</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">Name of the child to find.</param>
        <summary>Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>The requested element. May be <see langword="null" /> if no element of the requested name exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テンプレートで[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]自己完結型の名前スコープがあります。 テンプレートは、再利用し、各コントロールの複数のインスタンスがそのテンプレートをインスタンス化時にテンプレートで定義されている任意の名前の一意性が維持できないためにです。 呼び出す、<xref:System.Windows.FrameworkElement.GetTemplateChild%2A>がインスタンス化した後、テンプレートからのオブジェクトへの参照を返します。 使用することはできません、<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>ために、テンプレートから項目を検索するメソッド<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>はで動作しより一般的なスコープとの間の接続がない、<xref:System.Windows.Controls.ControlTemplate>は、クラス自体およびインスタンス化されたテンプレートが適用されます。  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> このメソッドと同じ機能を提供します。 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 代わりにパブリックが保護されている、正しい名前スコープの考慮事項要素およびその中の項目を名前付き検索内でテンプレートにアクセスできるようにするを使用しています。 使用して<xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType>する必要がある場合、親コントロールの外部要素を取得します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an alternative logical parent for this element if there is no visual parent.</summary>
        <returns>Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは<xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>します。 既定値<xref:System.Windows.FrameworkElement>実装、予想される 1 つ visual の親を返しますの結果の取得と同じである、<xref:System.Windows.FrameworkElement.Parent%2A>値。 派生クラスの実装では、別の親リレーションシップを返す場合があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the requested child element in the collection.</param>
        <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</summary>
        <returns>The requested child element. This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement>実装では、唯一の有効なインデックスは 0 です。 コンテンツ モデル<xref:System.Windows.FrameworkElement.GetVisualChild%2A>0 個または 1 つの子要素コレクションではなくをサポートしています。  
  
   
  
## Examples  
 次の例は、カスタムの装飾がで宣言されている値を使用する方法を示しています、<xref:System.Windows.Media.VisualCollection>複数のビジュアルの子を保持します。 これらの値がのオーバーライドから報告された<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>と<xref:System.Windows.FrameworkElement.GetVisualChild%2A>です。  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>この実装は、わかりやすいビジュアル子要素のコレクションを保持しない要素に対してのみです。このようなコレクションがいずれかの要素は、このメソッドをオーバーライドし、その要素でサポートされている子要素のコレクションの同等のインデックスにインデックスをマップする必要があります。0 の範囲内でインデックス<see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" />(マイナス 1) 有効な要素を返す必要があります他のインデックスが範囲外の例外をスローする必要があります。子コレクションをサポートし、上書きを要素型の例は<see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />を 1 つ以上の使用可能な子を返しますが<see cref="T:System.Windows.Controls.Panel" />です。既定の実装で<see cref="T:System.Windows.FrameworkElement" />visual の子を 1 つのみを開始します。値を渡す<paramref name="index" />以外で例外をスローするの 0 個の原因です。デコレーター、装飾、特殊なレンダリングでは、要素などの一般的な要素がいくつかのオーバーライド、 <see cref="T:System.Windows.FrameworkElement" /> (中級者向けの基本クラスから実装) の実装です。コレクションを使用する他のユーザーが、一部の実装はまだ visual の子を 1 つを適用します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the suggested height of the element.</summary>
        <value>要素の高さで、[です。INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は <see cref="F:System.Double.NaN" /> です。 この値は 0.0 以上にする必要があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> 3 つの書き込み可能なプロパティの 1 つ<xref:System.Windows.FrameworkElement>高さ情報を指定します。 その他の 2 つは<xref:System.Windows.FrameworkElement.MinHeight%2A>と<xref:System.Windows.FrameworkElement.MaxHeight%2A>です。 間の競合がある場合これらの値、実際の高さを決定するためのアプリケーションの順序は最初<xref:System.Windows.FrameworkElement.MinHeight%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxHeight%2A>、最後に、境界内にある場合<xref:System.Windows.FrameworkElement.Height%2A>です。  
  
 この要素がその他の要素内の子要素の場合は、値にこのプロパティを設定、本当にのみ推奨される値です。 レイアウト システムだけでなく、親要素の特定のレイアウト ロジックが値として使用 nonbinding 入力レイアウトの処理中にします。 実際には、<xref:System.Windows.FrameworkElement>は、ほとんどの場合; 他の子要素を設定する場合でも、<xref:System.Windows.FrameworkElement.Height%2A>で<xref:System.Windows.Window>です。 (の<xref:System.Windows.Window>、基になるアプリケーション モデルは、Hwnd を作成する基本的なレンダリングの前提条件を確立するときに、値を使用するアプリケーションをホストします)。  
  
 さらに許容される<xref:System.Double>値、このプロパティにすることができますも<xref:System.Double.NaN?displayProperty=nameWithType>します。 これは、コードの自動サイズ変更動作を指定する方法です。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。 自動サイズ変更動作は、要素が利用できる高さいっぱいになることを意味します。 ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のテーマのスタイルを使用して既定値を頻繁に指定します。  
  
 このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。 これに対しての値、<xref:System.Windows.FrameworkElement.ActualHeight%2A>異なる場合があります。 これは、原因が考えられますか静的にレイアウトが何らかの理由により推奨されるサイズを拒否または一時的にします。 プロパティ システムの一連の基準とした、レイアウト システム自体が非同期的にやり取り<xref:System.Windows.FrameworkElement.Height%2A>処理されない可能性がある特定のプロパティの変更をまだサイジングとします。  
  
 値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。 無効な値を設定しようとすると、実行時例外がスローされます。  
  
 だけでなく、検証チェックは、非決定的の上限値にバインドされている<xref:System.Windows.FrameworkElement.Height%2A>レイアウト システムにより強制適用されている (これは非常に大きな数よりも大きい<xref:System.Single.MaxValue?displayProperty=nameWithType>がよりも小さい<xref:System.Double.MaxValue?displayProperty=nameWithType>)。 この上限値を超えた場合は、要素は表示されませんし、例外はスローされません。 設定しない<xref:System.Windows.FrameworkElement.Height%2A>の表示可能な最大サイズは、この非決定的の上限を超える可能性がありますよりも大幅に大きい値にします。  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>XAML 値  
 *double*  
 <xref:System.Double>  
  
 文字列表現を<xref:System.Double>0.0 以上の値。 上限については、「解説」を参照してください。 この値として解釈されます、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。 明示的に、文字列では、小数点を含める必要がありますされません。 値のインスタンス`1`は許容されます。  
  
 *qualifiedDouble*  
 A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。  
  
 `px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px を = =  
  
 `cm` センチメートル; は、します。1cm==(96/2.54) px  
  
 `pt` ポイントです。1pt==(96/72) px  
  
 **Auto**  
 自動サイズ変更を有効にします。 「解説」を参照してください。  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</summary>
        <value>列挙体の値としての水平方向の配置設定。 既定値は <see cref="F:System.Windows.HorizontalAlignment.Stretch" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Windows.FrameworkElement.Height%2A>と<xref:System.Windows.FrameworkElement.Width%2A>要素にプロパティが明示的に設定されている場合、これらの測定値はレイアウト時に高い優先、実行設定の標準的な効果が取り消されます<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>に<xref:System.Windows.HorizontalAlignment.Stretch>です。  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]新機能は、実際には、依存関係プロパティのプロパティ アクセサー。 この特定の依存関係プロパティでは、特にコントロールのサブクラス化された要素で設定が異なります見かけ上の「既定」値がよくあります。 これは、2 つの方法のいずれかで一般的に発生します特定のサブクラスでは、にはその既定値を設定するためのさまざまなメタデータと、依存関係プロパティが再登録。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。 たとえば、明確な「既定」の<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>の<xref:System.Windows.Controls.Label>コントロールになります<xref:System.Windows.HorizontalAlignment.Left>場合でも、<xref:System.Windows.Controls.Label>継承<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>から直接<xref:System.Windows.FrameworkElement>です。 これは、既定のスタイル内でその値がリセットされたため<xref:System.Windows.Controls.Label>スタイルのコントロール テンプレート内で。  
  
 <xref:System.Windows.Controls.Canvas> 使用しません<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>ためのレイアウトを作成するときに<xref:System.Windows.Controls.Canvas>絶対位置に基づきます。  
  
 によって継承と<xref:System.Windows.Controls.Label>派生クラス、または<xref:System.Windows.Controls.Label>にするには、この依存関係プロパティの既定値を再定義<xref:System.Windows.HorizontalAlignment.Left>です。  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</summary>
        <value>列挙体の値。 既定値は <see cref="F:System.Windows.InheritanceBehavior.Default" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素内の特定境界ツリー セット<xref:System.Windows.FrameworkElement.InheritanceBehavior%2A>を意図的に、アプリケーションのリソースを確認するか RelativeSource FindAncestor 参照が現在の要素のクエリを実行するを防ぐには、force リソースの検索に、継承動作のスコープを制限するにはまたは、さらにいずれか。 RelativeSource FindAncestor 参照の場合は、バインディングを使用して、<xref:System.Windows.Data.RelativeSource>を持つその<xref:System.Windows.Data.RelativeSource.Mode%2A>プロパティに設定、<xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType>値。  
  
 派生クラスをこのプロパティを設定する場合は、する必要がありますこれを行う、静的コンス トラクター内またはその他の初期化ルーチンです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized. This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントになります発生するたびに、<xref:System.Windows.FrameworkElement.EndInit%2A>または<xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A>メソッドが呼び出されます。 アプリケーション コードからまたはいずれかのメソッドの呼び出しが同梱されている可能性があります、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]プロセッサの動作時に、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ページを処理します。  
  
 処理するかどうかを選択する<xref:System.Windows.FrameworkElement.Loaded>または<xref:System.Windows.FrameworkElement.Initialized>要件によって異なります。 要素のプロパティを読み取る必要がない場合のプロパティをリセットして、レイアウト情報は必要ありません<xref:System.Windows.FrameworkElement.Initialized>の対象となるイベントの向上があります。 使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合<xref:System.Windows.FrameworkElement.Loaded>の対象となるイベントの向上があります。 必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。 (を確認する必要があります、<xref:System.Windows.FrameworkPropertyMetadata>プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)。  
  
 オブジェクトのイベントのシーケンスに関する詳細については、<xref:System.Windows.FrameworkElement>もいくつかの関連アプリケーションと要素のクラスを参照してください、[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <value>代替の入力メソッドからの入力を解釈する方法を変更する入力スコープ。 既定値は<see langword="null" />(結果はコマンドの既定の処理)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この依存関係プロパティでは、プロパティの値を継承します。 その他の値を使用せずに子要素がある場合<xref:System.Windows.FrameworkElement.InputScope%2A>プロパティ システムは値を設定し、ローカルの値や、スタイルを介して確立、<xref:System.Windows.FrameworkElement.InputScope%2A>割り当てられているこの値を持つ最も近い先祖の要素の値。  
  
 ただし、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文の使用状況が表示されているし、は構文的に許可されているのこのプロパティを設定[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]一般的ではありません。  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</summary>
        <value>
          <see langword="true" /> 要素が、ここに挙げたごとに初期化された場合は [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 処理またはメソッドの呼び出しです。それ以外の場合、<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティがありますも`true`新しい親要素を持つし、そのために再読み込みされたことになるように、この要素が論理ツリー内で移動されたかどうか。  
  
 このプロパティにも使用している場合に便利ですが<xref:System.Windows.FrameworkElement.BeginInit%2A>と<xref:System.Windows.FrameworkElement.EndInit%2A>です。 によって読み込まれる論理ツリー内の要素、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロセッサを初期化する確実に実行されます。 論理ツリーに存在しない要素が初期化されるときに<xref:System.Windows.FrameworkElement.EndInit%2A>と呼びます。 特定の処理がない場合に<xref:System.Windows.FrameworkElement.BeginInit%2A>と<xref:System.Windows.FrameworkElement.EndInit%2A>、コンス トラクターが初期化された結果を返すとすぐにこれは行われます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this element has been loaded for presentation.</summary>
        <value>
          <see langword="true" /> 現在の要素が、要素ツリーにアタッチされている場合<see langword="false" />要素が読み込まれた要素ツリーにアタッチされていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しく構築されたから<xref:System.Windows.FrameworkElement>、このプロパティは、まず`false`、開いたまま`true`に設定されている後`true`コードによって接続されている論理ツリーから要素が、後で削除された場合でも、です。 `true` 状態は、要素が、プレゼンテーション エンジンに読み込まれるときに、一般的なプレゼンテーション ロジックによって設定されます。  
  
 通常、読み込まれた要素は、レンダリングされた、すべてではなく<xref:System.Windows.FrameworkElement>派生クラスは、プレゼンテーション、およびなどの他のプロパティがある<xref:System.Windows.UIElement.Visibility%2A>プレゼンテーションに影響を与えることができます。  
  
   
  
## Examples  
 次の例は、2 つのハンドラーを実装します。 いずれかの処理が、<xref:System.Windows.FrameworkElement.Loaded>イベントの重大度であるため、ページのルート要素が読み込まれることが確実であるため、ルート要素のイベントです。 ユーザー コントロールを呼び出し、その他のハンドラーをフック<xref:System.Windows.FrameworkElement.IsLoaded%2A>されるようにするルート要素には、読み込まれた完全にします。 両方のハンドラーは、子要素に新しいデータを設定する (非表示) 同じ関数を呼び出します。  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets localization/globalization language information that applies to an element.</summary>
        <value>この要素の言語情報。 既定値は、<see cref="T:System.Windows.Markup.XmlLanguage" />でその<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />値、文字列"EN-US"に設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列の形式では、RFC 3066 標準に従います。 たとえば、米国"EN-US"は英語です。 値と形式の詳細については、次を参照してください。<xref:System.Windows.Markup.XmlLanguage>です。  
  
 この依存関係プロパティでは、プロパティの値を継承します。 その他の値を使用せずに子要素がある場合<xref:System.Windows.FrameworkElement.Language%2A>ローカル値またはスタイルを介して確立されると、プロパティのシステム値が設定されますを<xref:System.Windows.FrameworkElement.Language%2A>割り当てられているこの値を持つ最も近い先祖の要素の値。  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 一般的な意味を定義、`xml:lang`属性。 <xref:System.Windows.FrameworkElement.Language%2A> 依存関係プロパティとして、この属性の意味を本質的に公開します。 <xref:System.Windows.FrameworkElement.Language%2A> プログラムで調整されることができます、匹敵する方法でプロパティ システムの値の継承に参加できる方法、`xml:lang`子要素のスコープ内に属性が継承される[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]です。 設定した場合<xref:System.Windows.FrameworkElement.Language%2A>、その値が、`xml:lang`し、以前の値を上書きします。 詳細については、次を参照してください。 [xml:lang XAML での処理](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)です。  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</summary>
        <value>変換で、この要素を使用する必要があります。 既定値は <see cref="P:System.Windows.Media.Transform.Identity" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対照的に<xref:System.Windows.UIElement.RenderTransform%2A>、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>レイアウトの結果に影響されます。  
  
 トランス フォームを設定するには、スケールおよび回転の強力な機能が備わっています。 ただし、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>無視<xref:System.Windows.Media.TranslateTransform>操作します。 これは子要素をレイアウト システムの動作、<xref:System.Windows.FrameworkElement>任意のオフセットがレイアウトにスケールまたは回転した要素の位置および親要素の座標システムへの自動修正します。  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> レイアウト システムで完全パスを必要としないシナリオで起動する場合は、不十分なアプリケーションのパフォーマンスに可能性があります。 適用すると、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>を<xref:System.Windows.Controls.Panel.Children%2A>のコレクション、<xref:System.Windows.Controls.Panel>レイアウト システムによって新しいパスがトリガー、および画面に表示されるすべて remeasured して再配置するオブジェクトを強制的に実行します。 完全なアプリケーションを更新する場合は[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]、この機能は必要なものだけする可能性があります。 ただし、完全な配置パスを使用する必要はありません、使用、<xref:System.Windows.UIElement.RenderTransform%2A>プロパティでは、レイアウト システムを呼び出しませんであるため、通常このシナリオの方が適しています。  
  
 シナリオ例を<xref:System.Windows.FrameworkElement.LayoutTransform%2A>が役に立つを含める: フォーカス、編集の動作などを提供することで (拡大) 要素を拡大/縮小から水平方向の垂直方向に、またはその逆の場合は、メニュー コンポーネントなどの要素を回転します。  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 次の例に適用する方法を示しています、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>要素にします。 インスタンスを作成する例では、<xref:System.Windows.Controls.Button>親内でホストおよび<xref:System.Windows.Controls.Grid>です。 また、使用、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>を適用するプロパティ、<xref:System.Windows.Media.RotateTransform>を<xref:System.Windows.Controls.Button>です。  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the element is laid out, rendered, and ready for interaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> 通常最後のイベント、要素の初期化のシーケンスで発生します。 これが常に発生した後<xref:System.Windows.FrameworkElement.Initialized>です。 処理するかどうかを選択する<xref:System.Windows.FrameworkElement.Loaded>または<xref:System.Windows.FrameworkElement.Initialized>要件によって異なります。 要素のプロパティを読み取る必要がない場合のプロパティをリセットして、レイアウト情報は必要ありません<xref:System.Windows.FrameworkElement.Initialized>の対象となるイベントの向上があります。 使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合<xref:System.Windows.FrameworkElement.Loaded>の対象となるイベントの向上があります。 必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。 (を確認する必要があります、<xref:System.Windows.FrameworkPropertyMetadata>プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)。  
  
 オブジェクトのイベントのシーケンスに関する詳細については、<xref:System.Windows.FrameworkElement>もいくつかの関連アプリケーションと要素のクラスを参照してください、[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)です。  
  
 ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。 ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイルでします。  
  
 <xref:System.Windows.FrameworkElement.Loaded> および<xref:System.Windows.FrameworkElement.Unloaded>両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります。 テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。 したがって<xref:System.Windows.FrameworkElement.Loaded>のみページが最初に読み込まれるときに、ページへの移動を発生すると見なされますことはできません。  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|ルーティング方法|直接|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator for logical child elements of this element.</summary>
        <value>この要素の論理上の子要素に対する列挙子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 使用すると、子要素を反復処理できます。 これは、可能性があります、定義済みの専用のコレクションはありませんが、まだ特に複数の子要素が含まれている要素に便利です<xref:System.Windows.FrameworkContentElement>子要素です。  
  
 使用する方法の詳細についての<xref:System.Windows.FrameworkElement.LogicalChildren%2A>と<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>を参照してください[wpf ツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the outer margin of an element.</summary>
        <value>要素の余白の値を提供します。 既定値は、<see cref="T:System.Windows.Thickness" />すべてのプロパティが 0 (ゼロ)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 余白は、この要素とレイアウトを作成するときに、隣接するその他の要素間の空白、[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]です。 共有要素は、ピア要素 (その他のコレクション内の要素、共通の親コントロールの) などがあります。 または、この要素の親の場合もあります。  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> として設定されている、<xref:System.Windows.Thickness>構造数値としてではなく、余白を非対称的設定できるようにします。 <xref:System.Windows.Thickness>構造体自体には文字列型の変換がサポートされているため、非対称を指定できます<xref:System.Windows.FrameworkElement.Margin%2A>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性構文もします。  
  
 0 以外の余白は要素のレイアウトの<xref:System.Windows.FrameworkElement.ActualWidth%2A>と<xref:System.Windows.FrameworkElement.ActualHeight%2A>です。  
  
 余白は、レイアウトの兄弟要素の追加たとえば、2 つの隣接する要素が隣接する端に 30 の余白がどちらも設定は、60 の単位の間にスペースがあります。  
  
 余白の設定を持つ要素を指定したサイズ制約通常しない<xref:System.Windows.FrameworkElement.Margin%2A>割り当てられた四角形領域が十分な大きさの余白と要素のコンテンツ領域にかどうかはありません。 要素のコンテンツ領域は、代わりにレイアウトの計算時に制限されます。 コンテンツが既に 0 に制約されていますもは余白が制限される場合だけです。  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>XAML 値  
 *左、上、右、下*  
 0 との間の数値と<xref:System.Double.PositiveInfinity>の 4 つの可能なディメンション プロパティを指定する、<xref:System.Windows.Thickness>構造体。  
  
 属性の使用方法も指定すると、対称的、論理的な順序で適用される省略形の値を受け取ります。 たとえば、`Margin="20"`という意味に解釈されます、<xref:System.Windows.Thickness>すべてのプロパティが 20 に設定します。 `Margin="20,50"` という意味に解釈されます、<xref:System.Windows.Thickness>で<xref:System.Windows.Thickness.Left%2A>と<xref:System.Windows.Thickness.Right%2A>を 20 に設定し、<xref:System.Windows.Thickness.Top%2A>と<xref:System.Windows.Thickness.Bottom%2A>は 50 に設定します。  
  
 既定の単位、<xref:System.Windows.Thickness>メジャーが[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]です。 単位の種類の文字列を追加することによって、他の単位を指定することも`cm`、 `in`、または`pt`任意の測定値にします。  
  
 数値として提供される[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性が必要な 10 進数のポイントを指定しない (0 が許容される、0.0 として指定する必要はありません)。 詳細については[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]使用状況を参照してください<xref:System.Windows.Thickness>です。  
  
 *thicknessReference*  
 既存のオブジェクト参照<xref:System.Windows.Thickness>です。 可能性があります、 `}`、または`}`参照します。 詳細については[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]使用状況を参照してください<xref:System.Windows.Thickness>です。  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum height constraint of the element.</summary>
        <value>要素の高さの最大値で、[です。INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は <see cref="F:System.Double.PositiveInfinity" /> です。 この値は、0.0 以上の任意の値を指定できます。 <see cref="F:System.Double.PositiveInfinity" /> でも有効です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>高さ情報を指定します。 その他の 2 つは<xref:System.Windows.FrameworkElement.MinHeight%2A>と<xref:System.Windows.FrameworkElement.Height%2A>です。  実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinHeight%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxHeight%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Height%2A>です。  
  
 値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。 無効な値を設定しようとする場合、実行時に例外がスローされます。  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>XAML 値  
 *double*  
 <xref:System.Double>  
  
 文字列表現を<xref:System.Double>0.0 以上の値。 これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。 明示的に、文字列では、小数点を含める必要がありますされません。 値のインスタンス`1`は許容されます。  
  
 同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて[X:static マークアップ拡張機能](~/docs/framework/xaml-services/x-static-markup-extension.md)かどうかは、値を明示的に設定する必要があります。<xref:System.Double.PositiveInfinity>です。  
  
 *qualifiedDouble*  
 A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。  
  
 `px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px を = =  
  
 `cm` センチメートル; は、します。1cm==(96/2.54) px  
  
 `pt` ポイントです。1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum width constraint of the element.</summary>
        <value>要素の幅の最大値で、[です。INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は <see cref="F:System.Double.PositiveInfinity" /> です。 この値は、0.0 以上の任意の値を指定できます。 <see cref="F:System.Double.PositiveInfinity" /> でも有効です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>幅情報を指定します。 その他の 2 つは<xref:System.Windows.FrameworkElement.MinWidth%2A>と<xref:System.Windows.FrameworkElement.Width%2A>です。 実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinWidth%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxWidth%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Width%2A>です。  
  
 値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。 無効な値を設定しようとすると、実行時例外がスローされます。  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>XAML 値  
 *double*  
 <xref:System.Double>  
  
 文字列表現を<xref:System.Double>0.0 以上の値。 これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。 明示的に、文字列では、小数点を含める必要がありますされません。 値のインスタンス`1`は許容されます。  
  
 同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて[X:static マークアップ拡張機能](~/docs/framework/xaml-services/x-static-markup-extension.md)値に設定する<xref:System.Double.PositiveInfinity>です。  
  
 *qualifiedDouble*  
 A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。  
  
 `px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px を = =  
  
 `cm` センチメートル; は、します。1cm==(96/2.54) px  
  
 `pt` ポイントです。1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that the parent element can give to the child elements.</param>
        <summary>Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>The desired size of this element in layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>WPF コア レベルと WPF フレームワーク レベルのレイアウトの測定の実装に接続します。 <xref:System.Windows.FrameworkElement>実装メソッドをシールします。 WPF フレームワーク レベル上に構築される要素の測定パス レイアウト動作を調整するのには、オーバーライド<xref:System.Windows.FrameworkElement.MeasureOverride%2A>代わりにします。 測定パスを意図的に、WPF フレームワーク レベルのビルドを使用して要素のレイアウトの動作を調整する<xref:System.Windows.FrameworkElement>、オーバーライド<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
        <summary>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</summary>
        <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オーバーライド<xref:System.Windows.FrameworkElement.MeasureOverride%2A>に含まれているように、要素のカスタム レイアウトのサイズ変更動作を実装する、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]レイアウト システムです。 実装は、次の操作を行います。  
  
1.  レイアウト、呼び出しの一部である子の要素の特定のコレクションを反復処理する<xref:System.Windows.UIElement.Measure%2A>各子要素にします。  
  
2.  すぐに<xref:System.Windows.UIElement.DesiredSize%2A>の子で (これには、設定後にプロパティとして<xref:System.Windows.UIElement.Measure%2A>と呼びます)。  
  
3.  子要素の測定に基づく親の net 目的のサイズを計算します。  
  
 戻り値<xref:System.Windows.FrameworkElement.MeasureOverride%2A>メジャーが現在の要素の親要素の入力となる要素の独自必要なサイズにする必要があります。 ページのルート要素に到達するまでは、レイアウト システムでこの同じプロセスが続行されます。  
  
 このプロセス中には、子要素より大規模なに返す場合があります<xref:System.Windows.UIElement.DesiredSize%2A>最初よりもサイズ`availableSize`を子要素がより多くの領域を依頼するかを示します。 これは、何らかのスタックの順序、または任意の数の測定] または [コンテンツの配置のソリューションを確立することによって、親コントロールのサイズを変更して、スクロール可能な領域を導入することにより、独自の実装で処理可能性があります。  
  
> [!IMPORTANT]
>  要素を呼び出す必要があります<xref:System.Windows.UIElement.Measure%2A>でこの処理中にそれぞれの子では、それ以外の場合、子要素は正しくサイズまたはされません配置します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>次のコンパイルされていないコードでは、この実装パターンを示します。<c>VisualChildren</c>独自の要素を定義する必要がありますの子の列挙可能なコレクション プロパティを表します。プロパティは、何かということができます。<c>VisualChildren</c>は、この例の目的のプレース ホルダー名<c>VisualChildren</c>は、[です。INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] によって提供されるように [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、名前付けパターンの一部または. [! code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)][! code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum height constraint of the element.</summary>
        <value>要素の高さの最小値で、[です。INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は 0.0 です。 この値は、0.0 以上の任意の値を指定できます。 ただし、<see cref="F:System.Double.PositiveInfinity" />が有効でもありません<see cref="F:System.Double.NaN" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>高さ情報を指定します。  その他の 2 つは<xref:System.Windows.FrameworkElement.Height%2A>と<xref:System.Windows.FrameworkElement.MaxHeight%2A>です。 実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinHeight%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxHeight%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Height%2A>です。  
  
 値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。 無効な値を設定しようとすると、実行時例外がスローされます。  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>XAML 値  
 *double*  
 <xref:System.Double>  
  
 文字列表現を<xref:System.Double>0.0 以上の値。 これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。 明示的に、文字列では、小数点を含める必要がありますされません。 値のインスタンス`1`は許容されます。  
  
 同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限が適用されます。  
  
 *qualifiedDouble*  
 A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。  
  
 `px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px を = =  
  
 `cm` センチメートル; は、します。1cm==(96/2.54) px  
  
 `pt` ポイントです。1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum width constraint of the element.</summary>
        <value>要素の幅の最小値で、[です。INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は 0.0 です。 この値は、0.0 以上の任意の値を指定できます。 ただし、<see cref="F:System.Double.PositiveInfinity" />が無効でもありません<see cref="F:System.Double.NaN" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>幅情報を指定します。  その他の 2 つは<xref:System.Windows.FrameworkElement.Width%2A>と<xref:System.Windows.FrameworkElement.MaxWidth%2A>です。  実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinWidth%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxWidth%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Width%2A>です。  
  
 値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。 無効な値を設定しようとすると、実行時例外がスローされます。  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>XAML 値  
 *double*  
 <xref:System.Double>  
  
 文字列表現を<xref:System.Double>0.0 以上の値。 これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。 明示的に、文字列では、小数点を含める必要がありますされません。 値のインスタンス`1`は許容されます。  
  
 同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限が適用されます。  
  
 *qualifiedDouble*  
 A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。  
  
 `px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px を = =  
  
 `cm` センチメートル; は、します。1cm==(96/2.54) px  
  
 `pt` ポイントです。1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">The direction that focus is to be moved, as a value of the enumeration.</param>
        <summary>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</summary>
        <returns>Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装をオーバーライド<xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType>メソッドをシールとします。  
  
   
  
## Examples  
 次の例では、いくつかのボタンの入力を処理するハンドラーを実装します。 各ボタンを表すことがある<xref:System.Windows.Input.FocusNavigationDirection>です。 ハンドラーは、現在のキーボード フォーカス、および呼び出しを持つ要素が追跡<xref:System.Windows.FrameworkElement.MoveFocus%2A>、適切なを指定して、その要素に<xref:System.Windows.Input.FocusNavigationDirection>の初期化の構文として、<xref:System.Windows.Input.TraversalRequest>指定されたパラメーターを入力します。  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</summary>
        <value>要素の名前。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの最も一般的な使用法を指定する、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]マークアップの属性と要素の名前。  
  
 このプロパティでは、WPF フレームワーク レベルの便利なプロパティを設定する基本的にでは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)です。  
  
 名は、名前スコープ内で一意でなければなりません。 詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。  
  
 取得する、<xref:System.Windows.FrameworkElement.Name%2A>内の要素を作成する場合はコードは一般的ではありません。 既に適切な参照をコードにある場合だけメソッドを呼び出すことができ、要素のプロパティが参照し、一般的に必要ではない、<xref:System.Windows.FrameworkElement.Name%2A>です。 この例外となる場合、<xref:System.Windows.FrameworkElement.Name%2A>文字列オーバー ロードされたに意味を持ちます内でその名前を表示すると便利である場合[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。 設定、<xref:System.Windows.FrameworkElement.Name%2A>分離コードから場合、元の<xref:System.Windows.FrameworkElement.Name%2A>マークアップから設定されても、推奨されていませんし、読み込み後、プロパティを変更する、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]元のオブジェクト参照は変更されません。 基になる名前スコープは、解析時に明示的に作成された場合にのみ、オブジェクト参照が作成されます。 具体的に呼び出す必要があります<xref:System.Windows.FrameworkElement.RegisterName%2A>を効果的に変更する、<xref:System.Windows.FrameworkElement.Name%2A>既に読み込まれた要素のプロパティです。  
  
 1 つの重要な場合は設定、<xref:System.Windows.FrameworkElement.Name%2A>コードから重要では実行時に参照できるように、に対して ストーリー ボードが要素の実行に名前を登録するときに、します。 名前を登録することができます、前にも必要になるをインスタンス化し、割り当てます、<xref:System.Windows.NameScope>インスタンス。 使用例」を参照してください。 または[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。  
  
 設定<xref:System.Windows.FrameworkElement.Name%2A>コードからは制限されていますが、アプリケーションの場合して要素を取得する<xref:System.Windows.FrameworkElement.Name%2A>が一般的です。 1 つのシナリオは、アプリケーションがここで、アプリケーションにページが再読み込みされ、必ずしもそのページに対して定義されている分離コードが実行時のコードではありませんは、ナビゲーション モデルをサポートするかどうかです。 ユーティリティ メソッド<xref:System.Windows.FrameworkElement.FindName%2A>、これは、<xref:System.Windows.FrameworkElement>で要素を検索できます<xref:System.Windows.FrameworkElement.Name%2A>その要素の論理ツリーで、必要に応じて、ツリーを再帰的を検索します。 使用することができます、<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>の静的メソッド<xref:System.Windows.LogicalTreeHelper>もを取り、<xref:System.Windows.FrameworkElement.Name%2A>文字列を引数として。  
  
 通常使用されるルート要素 (<xref:System.Windows.Window>、<xref:System.Windows.Controls.Page>たとえば) インターフェイスを実装して<xref:System.Windows.Markup.INameScope>です。 名前をそのスコープ内で明確にすることを強制するには、このインターフェイスの実装が予想されます。 このインターフェイスを定義するルート要素は、すべての名前スコープの動作の境界を定義するも、関連する[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]です。  
  
 <xref:System.Windows.FrameworkElement.Name%2A>プロパティは、他のプロセスの識別子としても機能します。 インスタンス、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]オートメーション モデルで使用する<xref:System.Windows.FrameworkElement.Name%2A>クライアントとプロバイダーの AutomationId として。  
  
 使用する文字列値<xref:System.Windows.FrameworkElement.Name%2A>による、基になるようにいくつかの制限がある[X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)によって定義された、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]仕様です。 最も顕著な<xref:System.Windows.FrameworkElement.Name%2A>はアルファベットまたはアンダー スコア文字 (_) で始める必要があるあり、アルファベット、数字、またはアンダー スコアのみを含める必要があります。 詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。  
  
 <xref:System.Windows.FrameworkElement.Name%2A> アニメーション化することはできませんのほとんどの依存関係プロパティの 1 つです (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>は`true`メタデータに) 名前そのものがアニメーションを対象とするために不可欠であるためです。 データ バインディング、<xref:System.Windows.FrameworkElement.Name%2A>技術的に可能ですは、非常に一般的ではないため、データにバインドされた<xref:System.Windows.FrameworkElement.Name%2A>プロパティのメインの意図された目的に使用できません: 分離コードの識別子の接続ポイントを提供します。  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.NameProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 次の例のセット、<xref:System.Windows.FrameworkElement.Name%2A>コードでは、プロパティ、名前に、新しく作成し、登録と<xref:System.Windows.NameScope>を呼び出して<xref:System.Windows.FrameworkElement.RegisterName%2A>です。 ストーリー ボードでは、対象を設定する必要があるために、次に示す手法は、ストーリー ボードのアニメーション化するための要件、 <xref:System.Windows.FrameworkElement.Name%2A>、し、オブジェクト参照の対象となることはできません。  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、既定の実装ではありません。  
  
 テンプレートのテンプレートのプロパティから派生した要素の完成したビジュアル ツリーのセクションでは、<xref:System.Windows.Style>要素に適用されています。 詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスの<see cref="T:System.Windows.FrameworkElement" />可能なシナリオのさまざまな通知としてこのメソッドを使用できます:-要素のビジュアル ツリーの残りの部分を構築するコードの独自の実装を呼び出すことができます。 テンプレートのビジュアル ツリーをテンプレートから得られた名前付きの要素への参照を取得するなど、適用されたことに依存するコードを実行できます。 -テンプレートのビジュアル ツリーが完了した後に存在する意味がないサービスを導入できます。 -には、状態とその他の要因に依存しているテンプレート内の要素のプロパティを設定できます。インスタンスのプロパティの値のみ探索可能な親要素を理解することでもありますクラスが、一般的なテンプレートを使用して、特定の派生です。実装時は、独自の実装前に基本実装を呼び出す常にする必要があります。<see cref="T:System.Windows.FrameworkElement" />自体既定値はありませんが、実装、介在するクラスがあります。 <see cref="T:System.Windows.Controls.Control" />と同様の上書きは、<see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />です。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、既定の実装ではありません。 継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。  
  
 このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。 ここでは、照合イベントは、ルーティングされたイベントです。 On のメソッドの実装パターンでは別のルーティング イベントのルーティング イベントを子要素、必ずしも要素で、実装は、イベント引数のソースを実行する必要があります。 のでハンドラーを呼び出すことによって発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生させる必要がありますいないを再試行してください)。 サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。 イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、既定の実装ではありません。 継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。  
  
 このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。 ここでは、照合イベントは、ルーティングされたイベントです。 On のメソッドの実装パターンでは別のルーティング イベントのルーティング イベントを子要素、必ずしも要素で、実装は、イベント引数のソースを実行する必要があります。 のでハンドラーを呼び出すことによって発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生させる必要がありますいないを再試行してください)。 サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。 イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 その他のとは異なり * ベースの要素によって公開されるメソッド<xref:System.Windows.FrameworkElement.OnGotFocus%2A>が既定の実装です。 具体的には、実装、基本要素の次のレベルで null の実装をオーバーライドするが<xref:System.Windows.UIElement.OnGotFocus%2A>です。 呼び出されると、<xref:System.Windows.FrameworkElement.OnGotFocus%2A>イベントがキーボード フォーカスのため、現在の要素から作成される場合に、この要素に適切なフォーカスの動作を設定します。 <xref:System.Windows.FrameworkElement.OnGotFocus%2A>ハンドラーにイベントの引数もフォーカス設定されている場合、現在の要素を処理済みとしてマークされません。 イベントのソースが別の要素ツリーで、(現在の要素ではなく) の場合は、ハンドラーは、何も実行します。  
  
 要素のフォーカスの既定の動作を変更するは、この方法でフォーカスの動作を変更する向上を実現するのにまったくフォーカス可能な要素を許可しないことによって対応するためにこのメソッドをオーバーライドすることができます (を参照してください<xref:System.Windows.UIElement.Focusable%2A>)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>引数で処理されるイベントをマークする場合に、要素ツリー内の他の親要素でのイベント処理に与える影響の注意してください。動作するためこのハンドラーのバブルのルーティング イベントを現在フォーカスを設定する<paramref name="sender" />イベントごと引数適切ではありません。フォーカスがや特定のコントロールの複合に応じての親要素、複合の子要素のいずれかに移動する必要があります。処理済みとしてしたがって focus イベントをマークすることは、イベントがルーティングするビジュアル ツリーの全体が作成したコントロールの複合の一部である場合にのみ推奨されます。</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この特定 * メソッドは、クラス ハンドラーのフックはありません。 正確に従う、確立されたも[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]で * メソッド規則がこのメソッドをオーバーライドし、基本実装を呼び出していない一致するイベントを抑制する可能性があります。  
  
 なお、<xref:System.Windows.FrameworkElement.IsInitialized%2A>設定することはできませんのでプロパティは読み取り専用、<xref:System.Windows.FrameworkElement.IsInitialized%2A>初期化動作を強制的にします。 のみ実行するためのものが初期化状態を設定、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]フレームワークです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>この仮想メソッドの既定の実装は、上記のように、イベントを発生させます。オーバーライドでは、この動作を保持するために基本実装を呼び出す必要があります。基底の実装の呼び出しに失敗した場合だけでなく、発生しません、<see cref="E:System.Windows.FrameworkElement.Initialized" />イベントの想定が通常どおり、<see cref="T:System.Windows.FrameworkElement" />派生クラスには、2 つ重要なスタイルとテーマ スタイルの初期化の操作であるで抑制します。この基本の実装によって実装されます。</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、通常、プロパティの変更または無効化を検出するものではありません。 代わりに目的が、一般的な無効化パターンの変更があったプロパティの広範な分類に関する特定の情報がわかっている場合。  
  
 このメソッドでは、オブジェクトの有効期間中に何度もを呼び出す可能性があります。 したがって、特定のプロパティのメタデータをオーバーライドし、適用するを使用するパフォーマンスが向上を実現できます<xref:System.Windows.CoerceValueCallback>または<xref:System.Windows.PropertyChangedCallback>個々 のプロパティです。 場合にこのメソッドを使用すると、<xref:System.Windows.FrameworkElement>多数の値と相互に依存関係プロパティを含む動作をレンダリングする必要がありますを再実行関連のプロパティの無効化のケースのいくつかのようにロジックが含まれている場合またはします。  
  
 ある同じ名前に注意してください`OnPropertyChanged`異なるシグネチャを持つメソッド (パラメーターの型が<xref:System.ComponentModel.PropertyChangedEventArgs>) に多数のクラスに表示されることができます。 ある`OnPropertyChanged`のコントラクトの一部であり、データ オブジェクトの通知に使用<xref:System.ComponentModel.INotifyPropertyChanged>です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>常に、実装では、最初の操作として基底の実装を呼び出します。これを行うにはエラーには、全体が無効になりますが大幅に [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティ システムで、これにより、正しくない値が報告されます。特定<see cref="T:System.Windows.FrameworkElement" />実装も表示されるユーザー インターフェイスに影響するプロパティのさまざまな適切な状態を維持する必要があります。適切な時点でスタイルを設定する変更に基づき、ビジュアル ツリーを無効化が含まれます。</para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        <summary>Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>します。 このメソッドを呼び出す場合は、リセット、 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 、プロパティ、<xref:System.Windows.FrameworkElement.ActualHeight%2A>プロパティ、またはその両方として指定されている内容によっては、指定された引数で変更されは常にイベントが発生します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>一般的なレイアウト シナリオには、このメソッドをオーバーライドしません。レイアウト システムは、すべての可能なレイアウトの配置し、メジャーの場合は考慮ことを保証する意図的に非同期の方法で動作します。レイアウト システムは、メソッドをオーバーライド<see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />と<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />は通常の必要な必要なレイアウトをカスタマイズします。<see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />仮想として公開されます。オーバーライドできます<see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />応答で再構成を実行時動作の変更が入力コントロールと組み合わせて使用するイベントに関連する例外的なケースを解決するのに不正確なレイアウト情報を与える可能性があります。でも (これは保護されているが封印されていない) の派生クラスでこのメソッドをオーバーライドできます。常に既定の WPF フレームワーク レベルのレンダリングの動作を無効にするための特別な理由がない限り、上記で説明した動作を保持する基本実装を呼び出します。失敗を発生させる、<see cref="E:System.Windows.FrameworkElement.SizeChanged" />イベントは、標準の WPF フレームワーク レベルのレイアウト システムの実装を使用する場合、非標準のレイアウトの動作が発生します。</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">The old style.</param>
        <param name="newStyle">The new style.</param>
        <summary>Invoked when the style in use on this element changes, which will invalidate the layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、スタイルが変更された状態を記録する内部フラグを設定する既定の実装があります。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>通常必要はありませんこのメソッドをオーバーライドします。いずれかのメジャーを含むスタイルを変更または変更での一般的な実装を想定して、別のレンダリング サイクルは、既に配置<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />、または、既定値です。上書きが<see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />適切な場合がある場合、 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />実装が意図的に最適化されたまたは部分的な更新プログラムをサポートする、まだたいより直接的スタイルに変更を適用します。(部分的な更新を増分複数の呼び出しを回避しようとなる<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />と<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />すべての子要素に)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、既定の実装ではありません。 継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。  
  
 このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。 ここでは、照合イベントは、ルーティングされたイベントです。 On のメソッドの実装パターンでは別のルーティング イベントのルーティング イベントを子要素、必ずしも要素で、実装は、イベント引数のソースを実行する必要があります。 のでハンドラーを呼び出すことによって発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生させる必要がありますいないを再試行してください)。 サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。 イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、既定の実装ではありません。 継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。  
  
 このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。 ここでは、照合イベントは、ルーティングされたイベントです。 On のメソッドの実装パターンでは別のルーティング イベントのルーティング イベントを子要素、必ずしも要素で、実装は、イベント引数のソースを実行する必要があります。 のでハンドラーを呼び出すことによって発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生させる必要がありますいないを再試行してください)。 サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。 イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">The old parent element. May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</param>
        <summary>Invoked when the parent of this element in the visual tree is changed. Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビジュアル ツリーは、コレクションなどに視覚的にレンダリングされない要素を省略しているので、論理ツリーから異なる可能性がありますし、そのテーマとスタイルの合成に基づいていくつかの要素を展開します。 詳細については、「[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>この仮想メソッドの既定の実装は、新しい親のクエリを実行し、さまざまな初期化イベントを発生させますの初期化状態に関する内部フラグを設定、<see cref="T:System.Windows.FrameworkElement" />をクリックします。宣言されている一連の基本実装を呼び出して、最後に、 <see cref="T:System.Windows.UIElement" />、さらにその基本呼び出す<see cref="T:System.Windows.Media.Visual" />です。常にこの動作を保持する基本実装を呼び出す、それ以外の場合別の要素の子として宣言されている場合は、この要素の要素ツリーの動作が期待どおりに。既存のいくつか [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] クラスなど、このメソッドをオーバーライドします。 <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />、<see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />です。最も一般的なシナリオは、新しい親は、特定の型である必要がありますを強制します。これには、新しい親には、いくつかの種類のテストの方法が失敗した場合、例外がスローが含まれます。このシナリオに特化したバージョンは、リスト項目およびメニュー項目をなしません、親の外部 visual でそれらを格納する適切なコレクションを所有しているの実装に存在します。親の変更は、一時的にその「標準」の親要素に依存しているデザイナーのシナリオがある可能性がありますので、このような場合とは限りません例外を発生させません、注意してください。このメソッドは、通常はルート要素など、特定の要素でオーバーライドも<see cref="T:System.Windows.Window" />します。別のケースのマークアップが明らかなルート要素である要素は、自動生成、コンパイル済みの論理ツリー内の大きいインフラストラクチャ (など<see cref="T:System.Windows.Controls.Page" />)。<see cref="T:System.Windows.Window" />と<see cref="T:System.Windows.Controls.Page" />実装が意図的に、メソッドをシールします。</para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</summary>
        <value>
          <see langword="true" /> この要素は、テーマのスタイル プロパティを使用していない場合すべての元のスタイル プロパティはローカル アプリケーションのスタイルから取り出され、テーマのスタイル プロパティは適用されません。 <see langword="false" /> 場合はアプリケーション スタイルが最初に、適用し、アプリケーションのスタイルで具体的には設定されていないプロパティのテーマ スタイルを適用します。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの最も一般的な使用法は、テーマとスタイルを提供しているスタイルのセッター内の間接的な使用率です。  
  
> [!IMPORTANT]
>  設定した場合<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>に`true`テーマ スタイルによって提供される既定のコントロール テンプレートをコントロールに抑制されます。 そのコントロール テンプレートには通常コンテンツ発表者と基本を提供するその他の合成要素が含まれています[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]機能およびコントロールのビジュアル化。 を、既定のテーマ スタイルと同じ機能をサポートするために続行するには、制御する場合は、同じ構造をレプリケートするコントロール テンプレートを使用して別のスタイルを指定してください。 詳しくは、「[コントロールの作成の概要](~/docs/framework/wpf/controls/control-authoring-overview.md)」を参照してください。  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical parent  element of this element.</summary>
        <value>この要素の論理上の親。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> あります`null`要素がインスタンス化されましたが、最終的に、ページ レベルのルート要素、または、アプリケーション オブジェクトに接続するすべての論理ツリーにアタッチされていない場合。  
  
 要素の論理上の親が、アプリケーションの機能に応じて変わることが可能性のある、このプロパティの値を維持するその変更は反映されないことに注意してください。 通常必要があります値を取得する必要がある直前です。  
  
 参照してください[wpf ツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)の詳細については、論理ツリーの移動、およびシナリオを使用して、<xref:System.Windows.FrameworkElement.Parent%2A>検出は、適切な親要素の手法として。  
  
 プロパティのエンジンは可能性があると再計算要素のすべてのプロパティ値が親を再指定、いくつかのプロパティは、論理ツリーを使用して値を継承するため。 <xref:System.Windows.FrameworkElement.DataContext%2A>にバインドできますも変更を適用します。  
  
 要素の親の変更は通常によってのみ行われますコレクションの操作、dedicated を使用して追加または削除メソッド、または、要素のコンテンツのプロパティを設定します。  
  
 使用するための最も一般的なシナリオ、<xref:System.Windows.FrameworkElement.Parent%2A>プロパティ、参照を取得し、さまざまな<xref:System.Windows.FrameworkElement>親からのプロパティ値。 テンプレートの場合、<xref:System.Windows.FrameworkElement.Parent%2A>テンプレートの最終的になります`null`です。 この時点以降をテンプレートが実際に適用されている論理ツリーに拡張を使用して<xref:System.Windows.FrameworkElement.TemplatedParent%2A>です。  
  
 このプロパティに論理ツリーの親と異なる場合のビジュアル ツリーの親が報告されていないことに注意してください。 ビジュアル ツリーの親では、通常重要アプリケーションの一般的なケースではないが、visual 特定レベルの場合に必要な親要素があります。 「<xref:System.Windows.Media.VisualTreeHelper>」を参照してください。  
  
   
  
## Examples  
 次の例では、要素の親をチェックし、親からのプロパティ値を使用すると一致する子要素のプロパティを設定するコードを示します。 ここでは、これらは、表示サイズに影響するプロパティです。  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">The child element reporting the change.</param>
        <summary>Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />. <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この要素の子要素をいくつかのプロパティは無効化およびプロパティがあるとマークされた場合<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>または<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>でプロパティのメタデータの登録中に、このメソッドが呼び出されます。 メソッドの呼び出しでは、この要素は、レイアウトの部分 (増分) の更新をサポートしている場合は、特定の子要素を再測定する必要があります、親要素に通知します。  
  
 既定では、<xref:System.Windows.FrameworkElement>増分のレイアウトをサポートしていませんし、、<xref:System.Windows.FrameworkElement>クラスのこのメソッドは既定の実装を持ちません。 既定のレイアウト システムの動作を変更することが必要なために、ここでこのメソッドをオーバーライドする必要があるシナリオは一般的ではありません。  
  
 クラスが、WPF フレームワーク レベルのレイアウト システムよりも大幅に制限は、使用可能な子要素の型の制限を持っているかどうかには、実装のシナリオ例があります。 これらのカスタム要素の性質上、プロパティが変更された可能性があります意図的を延期する一部のカスタム レイアウトの動作を実装する場合。 たとえば、特定の種類別のレイアウト パスになる通常の変更のメジャー/配置メソッドのオーバーライドを描画パスを子要素を最適化しようとするを遅らせることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">The direction for which a prospective focus change should be determined.</param>
        <summary>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</summary>
        <returns>The next element that focus would move to if focus were actually traversed. May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 実際には、フォーカスを移動するが関連する方法です。  
  
   
  
## Examples  
 次の例をいくつかのボタンの入力を表すことがある各ボタンを処理するハンドラーを実装する<xref:System.Windows.Input.FocusNavigationDirection>です。 ハンドラーは、現在のキーボード フォーカス、および呼び出しを持つ要素が追跡<xref:System.Windows.FrameworkElement.PredictFocus%2A>、その要素にし、適切なを指定します<xref:System.Windows.Input.FocusNavigationDirection>の初期化の構文として、<xref:System.Windows.Input.TraversalRequest>指定されたパラメーターを入力します。 その要素に移動する代わりに<xref:System.Windows.FrameworkElement.MoveFocus%2A>タスクは実行の場合は、ハンドラーが視覚エフェクトの目的で予測されたフォーカス コピー先の物理サイズを変更します。  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />. These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Name to use for the specified name-object mapping.</param>
        <param name="scopedElement">Object for the mapping.</param>
        <summary>Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.NameScope.RegisterName%2A>です。 実装は、該当するが見つかるまで、連続する親要素は確認<xref:System.Windows.NameScope>実装を実装する要素の検索で見つかった<xref:System.Windows.Markup.INameScope>です。 名前スコープの詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。  
  
 呼び出す<xref:System.Windows.FrameworkElement.RegisterName%2A>が正しくコードで作成されたときに、アプリケーションのアニメーションのストーリー ボードをフックするために必要です。 これは、プロパティ、キーのいずれかのストーリー ボード作成ため<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>、ターゲット要素への参照を実行することではなく実行時の名前検索を使用します。 これは、その要素が、コードから参照渡しでアクセス可能な場合でも当てはまります。 ストーリー ボードのターゲットの名前を登録する必要がある理由の詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">The element to remove.</param>
        <summary>Removes the provided object from this element's logical tree. <see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素の論理子を表すオブジェクトのコレクションの実装には、このメソッドを使用します。 これは、プロパティの getter または setter、クラスのハンドラーで行うことがあります`Changed`イベント、コンス トラクター、またはコレクション内でそれ自体の種類します。  
  
 指定された基本コントロール クラスのコンテンツ モデルに適切なものがない限りは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。 レベルのサブクラス化を検討してください<xref:System.Windows.Controls.ContentControl>、 <xref:System.Windows.Controls.ItemsControl>、および<xref:System.Windows.Controls.HeaderedItemsControl>です。 これらのクラスを介して専用の論理子の特定の強制使用したモデルのコンテンツを提供する[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]、その他の機能では通常望ましくのサポートに加えて、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]テンプレートを介してスタイルなどのコントロールです。  
  
   
  
## Examples  
 次の例では、実装、`Child`カスタム プロパティ<xref:System.Windows.FrameworkElement>独自 visual レイヤーの実装を行うことです。 プロパティの set アクセス操作子では、古い値がクラスに固有のビジュアル コレクションと同様に、論理ツリーから削除されている値が変更された場合ように設計されています。 値がキャッシュされ、標準的な WPF フレームワーク レベル論理ツリーとカスタム ビジュアルのコレクションの両方に、新しい値を追加し、します。  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、親を示します<xref:System.Windows.Controls.ScrollViewer>(またはその派生クラス) を要素を発生させる、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベント表示できるようにする、スクロール可能な地域内です。 <xref:System.Windows.Controls.ScrollViewer>によりマークし、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベントをイベントのクラス処理を使用して、処理します。 一般に<xref:System.Windows.FrameworkElement.RequestBringIntoView>データ マークしないでまたはいずれかではスクロール可能な領域を制御するすべてのクラスによって処理されるイベント インスタンス ハンドラーと呼ばれる要素の目的の目標を妨害するそう<xref:System.Windows.FrameworkElement.BringIntoView%2A>です。  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|ルーティング方法|バブル|  
|Delegate|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the locally-defined resource dictionary.</summary>
        <value>ローカルで定義された現在のリソース ディクショナリ。各リソースにはキーでアクセスできます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完全または部分的に定義できるリソース ディクショナリ[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]は、通常、プロパティ要素として作成し、個々 のページまたはアプリケーションのルート要素には、通常します。 このレベルでリソース ディクショナリを配置すると、ページ内の個々 の子要素 (または任意のページでは、アプリケーションの場合に、) を検索しやすきます。 ほとんどのアプリケーション シナリオでは、ことをお勧めスタイルが、リソース ディクショナリ内のオブジェクト要素として定義されているスタイル リソース全体を自己完結型できるように、外部リソースとして定義するか (このアプローチにより、別個のデザイナー役割を編集することが必要な物理ファイルを分離することにより、開発者の役割から)。  
  
 このプロパティをリソース ディクショナリだけがその要素内で直接宣言を返すことに注意してください。 これは、実際のリソース ルックアップ プロセスの子要素がアクセスできる場所の検索方向を再帰的に、各親要素で定義されているリソースとは異なるです。  
  
 リソースは、コレクション内からコードで参照することもできますでリソースが作成されたことに注意してください[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]確実アクセスできなくなりますまで後<xref:System.Windows.FrameworkElement.Loaded>ディクショナリを宣言する要素で発生します。 実際には、リソースが解析されるに非同期的におよび not であっても、<xref:System.Windows.FrameworkElement.Loaded>イベントが参照できるように保証、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]リソースを定義します。 このため、通常のみにアクセスする[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]またはその他の実行時のコードの一部としてリソースを定義[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]スタイルや属性の値をリソース拡張機能の参照などの手法です。 コードによって、リソースにアクセスするときに基本的と等価であるから行われます。 参照に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。  
  
 基になる<xref:System.Windows.ResourceDictionary>追加、削除、またはコードを使用してから、コレクション内のリソースを照会するために必要なメソッドをサポートします。 <xref:System.Windows.FrameworkElement.Resources%2A>プロパティは、要素を新規または別のリソースのコレクションを完全に置き換えるのシナリオをサポートする設定<xref:System.Windows.ResourceDictionary>です。  
  
 注意して、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]に示す構文の要素を含まない、<xref:System.Windows.ResourceDictionary>です。 これは、暗黙の型のコレクション構文の例コレクションの要素を表すタグを省略できます。 代わりに、コレクションに項目として追加される要素を指定します。 暗黙の型のコレクションの詳細については、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]を参照してください[XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)です。 1 つのケースで、<xref:System.Windows.ResourceDictionary>要素がマージされたディクショナリを導入する場合ではありません通常その子要素として明示的に指定がまだ<xref:System.Windows.ResourceDictionary>します。 詳細については、「[リソース ディクショナリのトピックとマージ](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)です。  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>XAML 値  
 *oneOrMoreResourceElements*  
 1 つまたは複数のオブジェクト要素定義されているリソース。 各リソースのプロパティ要素内で各<xref:System.Windows.ResourceDictionary>に一意の値を持つ必要があります、 [X:key ディレクティブ](~/docs/framework/xaml-services/x-key-directive.md)、値がから取得されたときに、一意のキーとして機能する、<xref:System.Windows.ResourceDictionary>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attaches a binding to this element for the specified dependency property.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">Identifies the destination property where the binding should be established.</param>
        <param name="path">The source property name or the path to the property used for the binding.</param>
        <summary>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</summary>
        <returns>Records the conditions of the binding. This return value can be useful for error checking.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>、として現在のインスタンスを渡しますが、 <xref:System.Windows.DependencyObject>、新たに作成および<xref:System.Windows.Data.Binding>に基づいて、指定した`path`パラメーター。 この署名は、単純な既定のバインディングを確立する場合に便利です。 既定以外の条件へのバインディング プロパティを指定するか、使用する必要がある場合、<xref:System.Windows.Data.MultiBinding>または<xref:System.Windows.Data.PriorityBinding>、使用する必要があります、<xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29>署名します。  
  
   
  
## Examples  
 次の例では、特定のパスを使用してバインドを設定します。  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">Identifies the property where the binding should be established.</param>
        <param name="binding">Represents the specifics of the data binding.</param>
        <summary>Attaches a binding to this element, based on the provided binding object.</summary>
        <returns>Records the conditions of the binding. This return value can be useful for error checking.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>、現在のインスタンスに渡されます<xref:System.Windows.DependencyObject>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">The element that specifies a flow direction.</param>
        <param name="value">A value of the enumeration, specifying the direction.</param>
        <summary>Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、の添付プロパティの構文をサポートしている、<xref:System.Windows.FrameworkElement.FlowDirection%2A>プロパティ、したがって、指定された要素を子に許可<xref:System.Windows.FrameworkElement>を親要素内での配置のフローの方向を指定します。 現在の値を設定する<xref:System.Windows.FrameworkElement>、ダイレクトを使用して[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]アクセサー<xref:System.Windows.FrameworkElement.FlowDirection%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">The property to which the resource is bound.</param>
        <param name="name">The name of the resource.</param>
        <summary>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 リソースの参照の使用に似ていますが、 [DynamicResource マークアップ拡張機能](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)マークアップでします。 リソース参照では、実行時の遅延単位で指定したプロパティの値を提供する内部式を作成します。 式は、現在の要素が親を再指定する場合や、リソース ディクショナリが内部のイベントによって変更された値が示すされるたびに再評価されます (親の変更は、ディクショナリの検索パスを変更は)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、戻り値は`true`、ローカルの少なくとも 1 つのキーを持つリソースがある限り、<xref:System.Windows.FrameworkElement.Resources%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されます`true`場合、<xref:System.Windows.Style>ローカルに設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが戻る`true`場合、<xref:System.Windows.FrameworkElement.Triggers%2A>プロパティがローカルに設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。 ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイルでします。  
  
 レイアウト システム内のプロパティを読み取り、<xref:System.Windows.SizeChangedEventArgs>報告されるサイズの変更を重要な考慮するかどうかを決定する、このイベントの引数のクラスです。 これにより、レイアウト システムや、コントロールに固有のレイアウトの実装を強制的に新旧の高さまたは幅の値の視覚的にこうしたわずかな違いのためのレイアウト変更を回避します。 こうしたわずかな違いは、浮動小数点データ型の丸め処理を行うか、同じ結果の計算があります。  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|ルーティング方法|直接|  
|Delegate|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the source value changes for any existing property binding on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントのエイリアスを作成する、<xref:System.Windows.Data.Binding.SourceUpdated>いずれかが発生するイベントを<xref:System.Windows.Data.Binding>この要素に関連付けられています。  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style used by this element when it is rendered.</summary>
        <value>要素に適用される既定以外のスタイル (存在する場合)。 それ以外の場合は <see langword="null" />。 既定で構築された既定<see cref="T:System.Windows.FrameworkElement" />は<see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールの現在のスタイルは多くの場合、コントロール テーマから既定のスタイルによって提供されるまたはスタイルから通常によって適用されるその種類のコントロールにページまたはアプリケーション レベル (暗黙的なスタイル) のリソース。 このプロパティは既定の設定したり返したり (テーマ) のスタイルが、暗黙的なスタイルまたは明示的なスタイル要素で動作しているのか、返します。 暗黙的または明示的なスタイルの場合、スタイルをリソースとして指定またはローカルに定義されているかどうかは関係ありません。  
  
 スタイルの設定の制限があります。 全体をリセットする<xref:System.Windows.FrameworkElement.Style%2A>プロパティを新しい<xref:System.Windows.Style>、いつでもレイアウト再構成を強制します。 ただし、そのスタイルが使用中で読み込まれた要素で配置されるとすぐとして、<xref:System.Windows.Style>と見なすべきシールします。 使用するスタイルの個々 のプロパティを変更しようとしています (などのコレクション内のすべて<xref:System.Windows.Style.Setters%2A>) 例外がスローされます。 マークアップで定義されているスタイルは、(リソース) のリソース ディクショナリから読み込まれるか (インライン スタイル) に含まれているページが読み込まれるとすぐに使用すると見なされます。  
  
 <xref:System.Windows.FrameworkElement.Style%2A> 特殊な優先順位を持つ依存関係プロパティです。 ローカルに設定スタイルが通常プロパティ システムに最高の優先順位で動作します。 場合、<xref:System.Windows.FrameworkElement.Style%2A>プロパティ システムは、そのタイプが指定されたローカルまたはアプリケーションのリソースで暗黙的なスタイルのチェックの読み込み中にこの時点では、null がします。 スタイルは、この手順の後にも null し、動作するスタイル プレゼンテーションのため、通常に由来 (テーマ) の既定のスタイルもに既定のスタイルが返されない場合、<xref:System.Windows.FrameworkElement.Style%2A>プロパティの値。 参照してください[依存関係プロパティの値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)または[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)です。  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>XAML 値  
 *resourceExtension*  
 次のいずれかの: または。 参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
 *styleResourceKey*  
 要求されているスタイルを識別するキー。 このキーは既存のリソースを<xref:System.Windows.ResourceDictionary>です。  
  
> [!NOTE]
>  プロパティ要素構文は技術的に可能であれば、ほとんどのシナリオでスタイルをお勧めしません。 参照してください[インライン スタイルとテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)です。 バインドの参照を使用して、または<xref:System.Windows.Data.Binding>も可能ですが、一般的ではないです。  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 次の例では、リソース ディクショナリにスタイルを定義します。  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the requested ambient property.</param>
        <summary>For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</summary>
        <returns>
          <see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.FrameworkElement> のインスタンスが <xref:System.Windows.Markup.IQueryAmbient> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an arbitrary object value that can be used to store custom information about this element.</summary>
        <value>任意の値。 このプロパティには既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、その他の Microsoft のプログラミング モデルで、アプリケーションまたは Windows フォームの Visual Basic などのタグのプロパティに似ています。 <xref:System.Windows.FrameworkElement.Tag%2A> いずれかに関する基本的なカスタム情報を格納する既存プロパティ場所を指定するためのものでは<xref:System.Windows.FrameworkElement>しなくてをサブクラス化要素です。  
  
 プロパティ要素の使用を設定するために使用する必要があるため、このプロパティは、オブジェクトを受け取り、<xref:System.Windows.FrameworkElement.Tag%2A>文字列などの組み込みの既知の型コンバーターを使用したオブジェクト以外に XAML のプロパティです。 この方法で使用されるオブジェクトは通常されませんが、標準の WPF 名前空間内で短くてしたがって可能性がありますを外部の名前空間の名前空間のマッピングの XAML 要素として導入するためにします。 詳細については、「 [XAML 名前空間と WPF XAML のマッピングの Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)と[XAML と WPF のカスタム クラス](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)です。  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.TagProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the target value changes for any property binding on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントのエイリアスを作成する、<xref:System.Windows.Data.Binding.TargetUpdated>いずれかが発生するイベントを<xref:System.Windows.Data.Binding>この要素に関連付けられています。 通常つまり、対象のバインディングは双方向のバインドおよびバインドされた依存関係プロパティが確認された、以前プロパティの値が現在の検証またはプロパティまたはデータ ソースをサポートするキャッシュのスキームに従った有効なです。  
  
 イベント データを使用して、<xref:System.Windows.FrameworkElement.TargetUpdated>ターゲット値の更新を報告している特定のプロパティを決定するイベントです。  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.</summary>
        <value>要素が<see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" />を作成するには、この要素を発生します。 この値は、頻繁に<see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 多くの場合は、`null`アプリケーション マークアップやコード内に作成されるオブジェクト。 これは、テンプレートではなく、それらのオブジェクトを直接作成するためです。 オブジェクト参照を取得するかの一般的な名前参照で、ルートから論理ツリーをウォークすることによって、テンプレートから付属していません。  
  
 あるケース<xref:System.Windows.FrameworkElement.TemplatedParent%2A>できない可能性があります`null`visual を使用してツリーをウォーク特定低水準入力イベントのイベント処理のヒット テストなどの操作を含める<xref:System.Windows.Media.VisualTreeHelper>、または列挙子を使用する場合があります戻り値の要素が付属しています。テンプレートです。 別の場合は、明示的に呼び出すかどうか<xref:System.Windows.FrameworkTemplate.FindName%2A>既存に対して<xref:System.Windows.FrameworkTemplate>され、返されたオブジェクトを操作します。  
  
 テンプレートは、実際には共有オブジェクト、テンプレートの内容が 1 回だけ作成される場所です。 そのため、テンプレートから得られた要素へのオブジェクト参照を取得する場合があります、見かけ上の論理ツリーは、ページのルートには到達できません。 このようなテンプレートへの参照をページの論理ツリーを接続するために取得する必要があります、<xref:System.Windows.FrameworkElement.TemplatedParent%2A>値し、必要に応じて、その要素ツリーのナビゲーションを続行します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>ツールヒントのオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの値が型の場合<xref:System.Windows.Controls.ToolTip>、その値は、ツール ヒントで使用される、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。  値は、他の任意の型のかどうかは、その値として使用されます、*コンテンツ*の<xref:System.Windows.Controls.ToolTip>提供システムによって (作成) します。 詳細については、「<xref:System.Windows.Controls.ToolTipService>」を参照してください。 サービス クラスはさらにカスタマイズするために使用する添付プロパティを提供する<xref:System.Windows.Controls.ToolTip>です。  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>XAML 値  
 *toolTipContent*  
 文字列の表示テキストになる、<xref:System.Windows.FrameworkElement.ToolTip%2A>です。  
  
 *toolTipObjectContent*  
 コンテンツとして使用されるオブジェクト要素の形式で提供される一部のオブジェクト、<xref:System.Windows.FrameworkElement>です。 通常、<xref:System.Windows.FrameworkElement>またはその他の要素のレイアウトの合成を作成する、 <xref:System.Windows.FrameworkElement.ToolTip%2A>、最終的に、合成内のテキスト コンテンツを格納します。 この使用率、<xref:System.Windows.Controls.ToolTip>要素が作成、解析されたから暗黙的に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、および*方法*としてコンテンツを設定その<xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>プロパティです。  
  
 <`ToolTip` .../>  
 「<xref:System.Windows.Controls.ToolTip>」を参照してください。  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|メタデータ プロパティに設定します。 `true`|なし|  
  
   
  
## Examples  
 次の例を作成、<xref:System.Windows.Controls.ToolTip>コードとし、セットで、<xref:System.Windows.FrameworkElement.ToolTip%2A>プロパティを<xref:System.Windows.Controls.Primitives.StatusBar>コントロール。  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs just before any tooltip on the element is closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マーク、<xref:System.Windows.FrameworkElement.ToolTipClosing>イベントを処理が、ツールヒントの終了をキャンセルしていません。 ツールヒントが表示されたらは、UI でのユーザー操作への応答でのみ行われますツールヒントを終了します。  
  
 このイベントをすることはできません、<xref:System.Windows.EventTrigger>スタイルでします。 これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|ルーティング方法|直接|  
|Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   オーバーライド<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any tooltip on the element is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ツールヒントが表示されないように、ui で、ハンドラーを<xref:System.Windows.FrameworkElement.ToolTipOpening>マークを付けることができます、<xref:System.Windows.Controls.ToolTipEventArgs>イベント データを処理します。 それ以外の場合、ツールヒントが表示されるの値を使用して、<xref:System.Windows.FrameworkElement.ToolTip%2A>ツールヒントのコンテンツとプロパティ。 もう 1 つの可能なシナリオは、の値をリセットするハンドラーを記述することも、<xref:System.Windows.FrameworkElement.ToolTip%2A>ツールヒントが表示される直前にイベント ソースである要素のプロパティです。  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> 発生しません。 場合の値<xref:System.Windows.FrameworkElement.ToolTip%2A>は`null`それ以外の場合、または設定解除します。 意図的に設定しないでください<xref:System.Windows.FrameworkElement.ToolTip%2A>に`null`tooltip が開いているか、; これは、ツールヒントを閉じるための効果がありませんを開き、UI に望ましくない visual アーティファクトを作成、代わりにします。  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening>イベントをすることはできません、<xref:System.Windows.EventTrigger>スタイルでします。 これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|ルーティング方法|直接|  
|Delegate|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   オーバーライド<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of triggers established directly on this element, or in child elements.</summary>
        <value>厳密に型指定されたコレクションの<see cref="T:System.Windows.Trigger" />オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このプロパティのみ設定できます[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]コレクション オブジェクトにアクセスして、追加などのさまざまなメソッドを使用して、表示、コレクション構文を使用します。 コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込みです。 プロパティは、ルート要素にのみ存在します。検索や他の場所で設定しようとしています。 には、スローされる例外が発生します。  
  
 このプロパティでは、この要素で使用されているスタイルの一部として存在するトリガーを確認できません。 マークアップまたはコードで、このコレクションに追加されることはトリガーのコレクションを報告するだけです。 要素は、既存の既定では、このような要素を通常必要はありません (テンプレートからのインスタンス)。コントロールの複合スタイルの代わりに確立されるまでに由来するトリガーの一般的なであります。  
  
 動作の観点から (のどの要素の宣言元のどちらの効果を確立しようとして<xref:System.Windows.FrameworkElement.Triggers%2A>コレクション)、トリガーを起動する条件とトリガーの影響の両方でこの要素がありますまたは論理ツリー内には、その子要素があります。 などの有効期間イベントを使用する場合は、<xref:System.Windows.FrameworkElement.Loaded>をこのコレクションを取得するには、子要素のトリガーできない可能性がありますまだ完全に読み込まれると、コレクションが実行時に真にするより小さくなります。  
  
 要素に設定されているトリガーのコレクションのみをサポートする注<xref:System.Windows.EventTrigger>、ありませんプロパティ トリガー (<xref:System.Windows.Trigger>)。 プロパティ トリガーを必要とする場合は、スタイルまたはテンプレート内でこれらを挿入し、し、そのスタイルまたはテンプレートの要素に代入するかする必要があります経由で直接、<xref:System.Windows.FrameworkElement.Style%2A>プロパティ、または暗黙的なスタイル参照を通じて間接的にします。  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 値  
 *oneOrMoreTriggers*  
 1 つ以上定義されている<xref:System.Windows.EventTrigger>要素。 このような個々 のトリガーは、有効なストーリー ボード操作および参照を格納すると想定されます。 このコレクションは、ページのルート要素でのみ設定できますに注意してください。 詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The key identifier of the resource to be found.</param>
        <summary>Searches for a resource with the specified key, and returns that resource if found.</summary>
        <returns>The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元の要素で、リソースが見つからない場合は、親リソースのツリーが論理ツリーを上方向へ検索ツリーになる同じ方法で検索すると、リソースが要求されたキーによって実行時にします。 このメソッドを返します`null`そのキーのリソースが存在しない任意の場所リソース ツリーで、時に、ツリーの既存の条件ごとの場合にのみを<xref:System.Windows.FrameworkElement.TryFindResource%2A>と呼びます。  
  
 通常返されたリソース値に設定しようとしているプロパティの型を戻り値をキャストするとすぐにします。  
  
 <xref:System.Windows.FrameworkElement.FindResource%2A>メソッドが指定されたキーを持つリソースが返されない場合、例外をスローする点を除いて、同様の動作がします。  
  
   
  
## Examples  
 次の例は、ここで設定されているクリックされたボタン、背景ブラシ リソース定義が呼び出すことによって取得ボタンとして実装<xref:System.Windows.FrameworkElement.TryFindResource%2A>自体にします。 これは、要素のツリーされ、リソースを検索 (で、リソースそれ自体が定義されている[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]は表示されません)。  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the element is removed from within an element tree of loaded elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。 ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイルでします。  
  
 <xref:System.Windows.FrameworkElement.Loaded> および<xref:System.Windows.FrameworkElement.Unloaded>両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります。 テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。 したがって<xref:System.Windows.FrameworkElement.Unloaded>そのページから移動したときにのみ発生すると見なされますことはできません。  
  
 なお、<xref:System.Windows.FrameworkElement.Unloaded>アプリケーションがシャット ダウンを開始した後、イベントは発生しません。 によって、条件が定義されているときに、アプリケーションのシャット ダウンが発生、<xref:System.Windows.Application.ShutdownMode%2A>プロパティが発生します。 ハンドラー内でクリーンアップ コードを配置する場合、<xref:System.Windows.FrameworkElement.Unloaded>など、イベント、<xref:System.Windows.Window>または<xref:System.Windows.Controls.UserControl>に呼び出すことはできません期待どおりにします。  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|ルーティング方法|直接|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。 これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。 これらの識別子を使用して、クラスのハンドラーを追加できます。  
  
 ルーティング イベントの登録の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。 ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、次を参照してください。<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name of the name-object pair to remove from the current scope.</param>
        <summary>Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 だけで済みます名の登録解除に同じ名前の別の要素を再登録する場合。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</summary>
        <value>
          <see langword="true" /> レイアウトの丸めが適用される場合それ以外の場合、<see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>要素のプロパティは`true`、中に計算されるすべての整数以外のピクセル値、<xref:System.Windows.UIElement.Measure%2A>と<xref:System.Windows.UIElement.Arrange%2A>パスは全体のピクセル値に丸められます。  
  
 このプロパティは、子要素によって継承されます。  
  
> [!NOTE]
>  設定する必要があります<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>に`true`ルート要素にします。 レイアウト システム子座標を親座標; に追加します。そのため、親座標がピクセルの境界にない場合は、子座標もいないピクセルの境界にします。 場合<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>ルートにある設定を設定できません<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>を希望する効果を取得する子にします。  
  
 半透明のエッジ デバイス ピクセルの途中で、エッジになった場合に、アンチ エイリアス処理によって生成されるを排除するピクセルの境界にオブジェクトを描画します。 次の図は、デバイスのピクセルの中央にある単一のピクセル幅の行の出力を示します。 左側の線はレイアウトの丸めが使用されないため、アンチ エイリアス処理します。 右側の線は、レイアウトの丸めを使用します。  
  
 ![アンチ&#45;エイリアス線が単一のピクセル線と比較します。](~/add/media/pixelsnaplinecompare.PNG "単一のピクセル線と比較したアンチ エイリアス線。")  
  
 レイアウトの丸めを使用する場合と<xref:System.Windows.GridUnitType.Star>サイズ変更、レイアウト システムを作成小さな違いサブピクセル レンダリングを避けるために、列または行の計測結果にします。 たとえば、グリッドがある 3 列のサイズの 100 の合計幅<xref:System.Windows.GridUnitType.Star>、3 つの列を作成する代わりに 33.3 の幅が同じ、レイアウト システムは、幅が 33 と 34 の幅を持つ 2 つの列を作成します。  
  
> [!NOTE]
>  .NET 4.6 での変更にはレイアウトの境界線を持つコントロールのクリッピングの発生を削減する丸め処理が行われました。 既定では、この機能は、ターゲット フレームワークが .NET Framework 4.6 以降である場合に有効にします。 App.config ファイルに次の設定を追加することで、新しい動作を以前のバージョンの framework を対象とするアプリケーションで選択できます:`<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>`設定は、のみ、アプリケーションが .NET Framework 4.6 で実行されているときにします。  
  
   
  
## Examples  
 次の例では、影響を<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>プロパティは、単一のピクセル幅の行にします。 左側の線がレイアウトの丸めを使用していませんし、右側の線がレイアウトの丸めを使用します。 緩やかに変化は、ウィンドウをサイズ変更、レイアウトの丸めによる、違いを確認します。  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</summary>
        <value>垂直方向の配置の設定。 既定値は <see cref="F:System.Windows.VerticalAlignment.Stretch" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Windows.FrameworkElement.Height%2A>と<xref:System.Windows.FrameworkElement.Width%2A>要素にプロパティが明示的に設定されている、これらの測定値はこのプロパティの設定通常の効果をキャンセル、レイアウトで優先<xref:System.Windows.VerticalAlignment.Stretch>です。  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]新機能は、実際には、依存関係プロパティのプロパティ アクセサー。 この特定の依存関係プロパティでは、派生した要素のクラス、特にコントロールで設定が異なります見かけ上の「既定」値がよくあります。 これは、2 つの方法のいずれかで一般的に発生します特定の派生クラスがその既定値を設定するためのさまざまなメタデータ、依存関係プロパティが再登録されている。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。 たとえば、明確な「既定」の<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>の<xref:System.Windows.Controls.ComboBoxItem>コントロールになります<xref:System.Windows.VerticalAlignment.Center>場合でも、<xref:System.Windows.Controls.ComboBoxItem>継承<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>から直接<xref:System.Windows.FrameworkElement>です。 これは、既定のスタイル内でその値がリセットされたため<xref:System.Windows.Controls.ComboBoxItem>スタイルのコントロール テンプレート内で。  
  
 <xref:System.Windows.Controls.Canvas> 使用しません<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>ためのレイアウトを作成するときに<xref:System.Windows.Controls.Canvas>絶対位置に基づきます。  
  
 継承された場合<xref:System.Windows.Controls.ComboBoxItem>またはその派生クラス、<xref:System.Windows.Controls.ComboBoxItem>にするには、このプロパティの既定値を再定義<xref:System.Windows.VerticalAlignment.Center>です。  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of visual child elements within this element.</summary>
        <value>この要素のビジュアル子要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement>の実装<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>常に 0 または 1 個のいずれかを返します。 1 つを超える可能性がある子ビジュアル コレクションを保持するクラスは、この両方のプロパティをオーバーライドする必要がありますと<xref:System.Windows.FrameworkElement.GetVisualChild%2A>です。  
  
 このプロパティは、現在の子コレクションのレイアウトのオーバーライドを実装するための上限を決定する使用一般的に (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>、 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>)。  
  
   
  
## Examples  
 次の例は、カスタムの装飾がで宣言されている値を使用する方法を示しています、<xref:System.Windows.Media.VisualCollection>のオーバーライドを値は、複数のビジュアルの子を保持し、これらを報告する<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>と<xref:System.Windows.FrameworkElement.GetVisualChild%2A>です。  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>クラスは、子要素のコレクションで複数のビジュアルの子をサポートする場合は、そのコレクション内の要素の数を返すには、このプロパティをオーバーライドします。これは、コレクション オブジェクト自体が、カウントを返す場合でも行う必要があります。WPF フレームワーク レベルの要素のレイアウト ロジックは、すべての要素がを通じて有効なカウントを返すことを前提、<see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" />プロパティです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the element.</summary>
        <value>要素の幅で、[です。INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] です。 既定値は <see cref="F:System.Double.NaN" /> です。 この値は 0.0 以上にする必要があります。 上限については、「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>幅情報を指定します。  その他の 2 つは<xref:System.Windows.FrameworkElement.MinWidth%2A>と<xref:System.Windows.FrameworkElement.MaxWidth%2A>です。  実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinWidth%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxWidth%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Width%2A>です。  
  
 このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。 これに対しての値、<xref:System.Windows.FrameworkElement.ActualWidth%2A>異なる場合があります。 レイアウトが、何らかの理由により推奨されるサイズを拒否している可能性がありますがします。 また、レイアウト システム自体が、システムのプロパティ セット<xref:System.Windows.FrameworkElement.Width%2A>処理されない可能性がある特定のプロパティの変更をまだサイジングとします。  
  
 さらに許容される<xref:System.Double>値、このプロパティにすることができますも<xref:System.Double.NaN?displayProperty=nameWithType>します。 これは、自動サイズ変更動作を指定する方法です。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。 自動サイズ変更動作は、要素が利用できる幅いっぱいになることを意味します。 ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のスタイルでの既定値を頻繁に指定します。  
  
 だけでなく、検証チェックは、非決定的の上限値にバインドされている<xref:System.Windows.FrameworkElement.Width%2A>レイアウト システムにより強制適用されている (これは非常に大きな数よりも大きい<xref:System.Single.MaxValue?displayProperty=nameWithType>がよりも小さい<xref:System.Double.MaxValue?displayProperty=nameWithType>)。 この上限値を超えた場合は、要素は表示されませんし、例外はスローされません。 設定しない<xref:System.Windows.FrameworkElement.Width%2A>の表示可能な最大サイズは、この非決定的の上限を超える可能性がありますよりも大幅に大きい値にします。  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>XAML 値  
 *double*  
 <xref:System.Double>  
  
 文字列表現を<xref:System.Double>0.0 以上の値。 上限については、「解説」を参照してください。 この値として解釈されます、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。 明示的に、文字列では、小数点を含める必要がありますされません。 値のインスタンス`1`は許容されます。  
  
 *qualifiedDouble*  
 A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。  
  
 `px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px を = =  
  
 `cm` センチメートル; は、します。1cm==(96/2.54) px  
  
 `pt` ポイントです。1pt==(96/72) px  
  
 `Auto`  
 自動サイズ変更を有効にします。 「解説」を参照してください。  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|メタデータ プロパティに設定します。 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>