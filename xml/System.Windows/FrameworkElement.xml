<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52bb34d9daddff99314e23014e5d61909a488206" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9a7e2-101">WPF フレームワーク レベルのプロパティ、イベント、およびメソッドのセットを Windows Presentation Foundation (WPF) 要素で利用できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9a7e2-101">Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</span>
      </span>
      <span data-ttu-id="9a7e2-102">このクラスは WPF フレームワーク レベルの実装として用意されており、<see cref="T:System.Windows.UIElement" /> によって定義される WPF コア レベル API 上に構築されています。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9a7e2-102">This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-103"><xref:System.Windows.FrameworkElement> WPF フレームワーク レベルの要素のクラスと、WPF コア レベルのセット間の接続ポイントは、<xref:System.Windows.UIElement>プレゼンテーション サービス。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-103"><xref:System.Windows.FrameworkElement> is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services.</span></span> <span data-ttu-id="9a7e2-104">これらの概念の詳細については、次を参照してください。 [WPF アーキテクチャ](~/docs/framework/wpf/advanced/wpf-architecture.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-104">For more information about these concepts, see [WPF Architecture](~/docs/framework/wpf/advanced/wpf-architecture.md).</span></span>  
  
 <span data-ttu-id="9a7e2-105"><xref:System.Windows.FrameworkElement> 拡張<xref:System.Windows.UIElement>し、次の機能を追加します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-105"><xref:System.Windows.FrameworkElement> extends <xref:System.Windows.UIElement> and adds the following capabilities:</span></span>  
  
-   <span data-ttu-id="9a7e2-106">**レイアウト システム定義**:<xref:System.Windows.FrameworkElement>特定の仮想メンバーとして定義されたメソッドの特定の WPF フレームワーク レベルの実装を提供<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-106">**Layout system definition**: <xref:System.Windows.FrameworkElement> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="9a7e2-107">特に、<xref:System.Windows.FrameworkElement>特定 WPF コア レベルのレイアウトの上書きが封印を示し、代わりに派生クラスの WPF フレームワーク レベルの同等を代わりにオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-107">Most notably, <xref:System.Windows.FrameworkElement> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</span></span> <span data-ttu-id="9a7e2-108">たとえば、<xref:System.Windows.FrameworkElement>シール<xref:System.Windows.UIElement.ArrangeCore%2A>提供<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-108">For example, <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span> <span data-ttu-id="9a7e2-109">これらの変更は、WPF フレームワーク レベルでがあることの完全な配置システムでいずれかを表示できるという事実を反映<xref:System.Windows.FrameworkElement>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-109">These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="9a7e2-110">WPF で構造体、一般的なは、特定のレベルのメンバーをコア[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]ベース レイアウト ソリューションの場所は、レイアウト システムの実際のエンジンが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-110">At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined.</span></span> <span data-ttu-id="9a7e2-111">詳細については、次を参照してください。[レイアウト](~/docs/framework/wpf/advanced/layout.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-111">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
-   <span data-ttu-id="9a7e2-112">**論理ツリー:** 全般的な[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プログラミング モデルがされている要素のツリーとして表現されて多くの場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-112">**The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements.</span></span> <span data-ttu-id="9a7e2-113">論理ツリーとして要素のツリーを表現して、サポートの実装はマークアップでそのツリーを定義するのに付属しているのサポート、<xref:System.Windows.FrameworkElement>レベル。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-113">Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <xref:System.Windows.FrameworkElement> level.</span></span> <span data-ttu-id="9a7e2-114">注ただしその<xref:System.Windows.FrameworkElement>意図的に、コンテンツ モデルを一切定義しませんし、派生クラスには、その責任のままにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-114">Note however that <xref:System.Windows.FrameworkElement> deliberately does not define a content model, and leaves that responsibility to derived classes.</span></span> <span data-ttu-id="9a7e2-115">詳細については、「[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-115">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
-   <span data-ttu-id="9a7e2-116">**オブジェクトの有効期間イベント:** 要素が初期化される場合を把握すると便利です (コンス トラクターが呼び出されます) または論理ツリーに要素が最初に読み込まれるときにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-116">**Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</span></span> <span data-ttu-id="9a7e2-117"><xref:System.Windows.FrameworkElement> 分離コードが関係する操作子要素の追加などの要素に役立ちますフックを提供するオブジェクトの有効期間に関連するいくつかのイベントを定義します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-117"><xref:System.Windows.FrameworkElement> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</span></span> <span data-ttu-id="9a7e2-118">詳細については、次を参照してください。[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-118">For more information, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
-   <span data-ttu-id="9a7e2-119">**データ バインディング、および動的リソース参照のサポート:** によってデータのバインドとリソースのプロパティ レベルのサポートは実装されて、<xref:System.Windows.DependencyProperty>クラスし、プロパティ システムがあるメンバー値を解決する機能に埋め込むとして格納されている、 <xref:System.Windows.Expression> (データのバインドと動的なリソースの両方の基礎となるプログラミング構造) はによって実装<xref:System.Windows.FrameworkElement>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-119">**Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a7e2-120">詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)と[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-120">For more information, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md) and [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="9a7e2-121">**スタイル:** <xref:System.Windows.FrameworkElement>定義、<xref:System.Windows.FrameworkElement.Style%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-121">**Styles:** <xref:System.Windows.FrameworkElement> defines the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="9a7e2-122">ただし、<xref:System.Windows.FrameworkElement>されていないテンプレートでサポートを定義またはデコレーターをサポートしません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-122">However, <xref:System.Windows.FrameworkElement> does not yet define support for templates, or support decorators.</span></span> <span data-ttu-id="9a7e2-123">これらの機能がなどのコントロール クラスによって導入された<xref:System.Windows.Controls.Control>と<xref:System.Windows.Controls.ContentControl>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-123">These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
-   <span data-ttu-id="9a7e2-124">**アニメーションをサポート:** 一部アニメーション サポートは、WPF コア レベルで既に定義されてが<xref:System.Windows.FrameworkElement>これを実装することによって拡張<xref:System.Windows.FrameworkElement.BeginStoryboard%2A>関連メンバーとします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-124">**More animation support:** Some animation support was already defined at the WPF core level, but <xref:System.Windows.FrameworkElement> extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.</span></span>  
  
 <span data-ttu-id="9a7e2-125">クラスの階層からわかるように多く[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]クラスから派生<xref:System.Windows.FrameworkElement>直接または中間の基本クラスのいずれかなど、<xref:System.Windows.Controls.Panel>または<xref:System.Windows.Controls.Control>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-125">As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classes derive from <xref:System.Windows.FrameworkElement>, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.</span></span>  
  
 <span data-ttu-id="9a7e2-126">使用する場合<xref:System.Windows.FrameworkElement>を基底クラスとして最初既存の派生クラスを確認する場合があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-126">If you intend to use <xref:System.Windows.FrameworkElement> as a base class, you might want to first examine the existing derived classes.</span></span> <span data-ttu-id="9a7e2-127"><xref:System.Windows.FrameworkElement> 基本的なシナリオの数は、サポートもいくつかの作成に使用する構成要素の意味で"element"ために必要な機能がありません[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]で[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-127"><xref:System.Windows.FrameworkElement> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> <span data-ttu-id="9a7e2-128">インスタンス、 <xref:System.Windows.FrameworkElement> ; 任意の場合は true コンテンツ モデルが定義されていません。<xref:System.Windows.FrameworkElement>基底クラスが作成できるプロパティを定義していないよう[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]子要素です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-128">For instance, a <xref:System.Windows.FrameworkElement> does not define any true content model; <xref:System.Windows.FrameworkElement> as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] child elements.</span></span> <span data-ttu-id="9a7e2-129">具体的には、することができますを見て<xref:System.Windows.Controls.Control>と<xref:System.Windows.Controls.ContentControl>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-129">In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-130">
            <see cref="T:System.Windows.FrameworkElement" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-130">Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-131">この要素の描画時の高さを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-131">Gets the rendered height of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-132">要素の高さ ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] の値)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-132">The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-133">既定値は 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-133">The default value is 0 (zero).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-134">このプロパティは、その他の高さの入力と、レイアウト システムに基づいて計算される値です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-134">This property is a calculated value based on other height inputs, and the layout system.</span></span> <span data-ttu-id="9a7e2-135">値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど<xref:System.Windows.FrameworkElement.Height%2A>入力の変更の基礎にあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-135">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="9a7e2-136"><xref:System.Windows.FrameworkElement.ActualHeight%2A>注意すべき、計算した値には複数存在する可能性がありますか、増分が報告されている結果が変化してさまざまな操作、レイアウト システムでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-136">Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="9a7e2-137">レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-137">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="9a7e2-138">このプロパティを設定することはできませんが[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、基にすることができます、<xref:System.Windows.Trigger>スタイルでは、その値にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-138">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-139">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-139">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-140">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-140">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|<span data-ttu-id="9a7e2-141">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-141">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-142">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-142">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-143">次の例では、さまざまな高さのプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-143">The following example displays various height properties.</span></span>  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-144">
            <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-144">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-145">この要素の描画時の幅を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-145">Gets the rendered width of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-146">要素の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] の値)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-146">The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-147">既定値は 0 (ゼロ) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-147">The default value is 0 (zero).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-148">このプロパティは、その他の幅の入力と、レイアウト システムに基づいて計算される値です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-148">This property is a calculated value based on other width inputs, and the layout system.</span></span> <span data-ttu-id="9a7e2-149">値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど<xref:System.Windows.FrameworkElement.Width%2A>入力の変更の基礎にあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-149">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="9a7e2-150"><xref:System.Windows.FrameworkElement.ActualWidth%2A>注意すべき、計算した値には複数存在する可能性がありますか、増分が報告されている結果が変化してさまざまな操作、レイアウト システムでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-150">Because <xref:System.Windows.FrameworkElement.ActualWidth%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="9a7e2-151">レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-151">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="9a7e2-152">このプロパティを設定することはできませんが[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、基にすることができます、<xref:System.Windows.Trigger>スタイルでは、その値にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-152">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-153">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-153">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-154">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-154">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|<span data-ttu-id="9a7e2-155">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-155">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-156">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-156">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-157">次の例では、さまざまな幅のプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-157">The following example displays various width properties.</span></span>  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-158">
            <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-158">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="9a7e2-159">追加される子要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-159">Child element to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-160">指定したオブジェクトをこの要素の論理ツリーに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-160">Adds the provided object to the logical tree of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-161">要素の論理上の子要素を表すオブジェクトのコレクションの実装には、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-161">Use this method for the implementation of collections on objects that represent logical child elements of an element.</span></span> <span data-ttu-id="9a7e2-162">プロパティの getter または setter、クラス処理を Changed イベント、コンス トラクター、またはコレクション型自体内では、子要素のコレクションのコレクションのメンテナンスを行う可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-162">Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="9a7e2-163">使用可能な基本コントロール クラスのコンテンツ モデルの適切なものが、制御のシナリオの場合を除きは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-163">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</span></span> <span data-ttu-id="9a7e2-164">レベルのサブクラス化を検討してください<xref:System.Windows.Controls.ContentControl>、 <xref:System.Windows.Controls.ItemsControl>、および<xref:System.Windows.Controls.HeaderedItemsControl>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-164">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="9a7e2-165">これらのクラスを介して専用の論理ツリーの子要素の特定の強制使用したモデルのコンテンツを提供する[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]、その他の機能では通常望ましくのサポートに加えて、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]テンプレートを介してスタイルなどのコントロールです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-165">These classes provide a content model with particular enforcement of logical tree child elements through dedicated [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span> <span data-ttu-id="9a7e2-166">使用する方法の詳細についての<xref:System.Windows.FrameworkElement.LogicalChildren%2A>と<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>を参照してください[wpf ツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-166">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 <span data-ttu-id="9a7e2-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> 別のプロセスによって、論理ツリーが反復処理されているときに呼び出された場合、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> may throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-168">次の例では、実装、`Child`カスタム プロパティ<xref:System.Windows.FrameworkElement>独自 visual レイヤーの実装を行うことです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-168">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="9a7e2-169">プロパティ set アクセス操作子では、古い値がクラスに固有のビジュアル コレクションと同様に、論理ツリーから削除されている値が変更された場合ように設計されています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-169">The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="9a7e2-170">プロパティの値がキャッシュされ、論理ツリーとカスタム ビジュアルのコレクションの両方に、新しい値を追加し、します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-170">The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-171">必要に応じて現在のテンプレートのビジュアル ツリーを構築し、この呼び出しによってビジュアル ツリーが再構築されたかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-171">Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-172">ビジュアルがツリーに追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-172">
              <see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-173">アプリケーションでは、要素のビジュアル ツリーが完了したことを保証するには、このメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-173">Applications can call this method to guarantee that the visual tree of an element is complete.</span></span> <span data-ttu-id="9a7e2-174">この保証のステップのコードは、ツリー内の子要素をチェックする場合は、必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-174">This guarantee step might be necessary if code will be checking the child elements in the tree.</span></span> <span data-ttu-id="9a7e2-175">一般的な要素のロジックを呼び出すアプリケーション内での<xref:System.Windows.FrameworkElement.ApplyTemplate%2A>テンプレートは適用されるため、適切な位置にある要素を有効期間内に自動的に、必要ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-175">For typical element logic within applications, calling <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</span></span>  
  
 <span data-ttu-id="9a7e2-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> メジャーがすべてで呼び出されると、WPF フレームワーク レベルのレイアウト システム渡しです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is called on every Measure pass by the WPF framework-level layout system.</span></span>  
  
 <span data-ttu-id="9a7e2-177"><xref:System.Windows.FrameworkElement> 派生クラスで使用できる、<xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>通知を受ける場合はこのメソッドが明示的に呼び出された場合のまたはレイアウト システム クラス ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-177"><xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system.</span></span> <span data-ttu-id="9a7e2-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> テンプレートが完全に生成され、論理ツリーにアタッチされている後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="9a7e2-179">この要素が要素自体と子を配置するために使用する親の末尾の領域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-179">The final area within the parent that this element should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-180">
            <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (<see cref="T:System.Windows.UIElement" /> で仮想メソッドとして定義されています) を実装し、その実装をシールします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-180">Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-181">このメソッドはシールされています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-181">This method is sealed.</span></span> <span data-ttu-id="9a7e2-182">要素のレイアウトの配置パスを具体的には、カスタム要素内のロジックをオーバーライドするために、<xref:System.Windows.FrameworkElement>派生クラスでオーバーライドする必要があります<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-182">In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">
          <span data-ttu-id="9a7e2-183">この要素が要素自体と子を配置するために使用する親の末尾の領域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-183">The final area within the parent that this element should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-184">派生クラスでオーバーライドされると、子要素を配置し、<see cref="T:System.Windows.FrameworkElement" /> 派生クラスのサイズを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-184">When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-185">使用する実際のサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-185">The actual size used.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-186">コントロールの作成者が、処理の配置パスのレイアウトをカスタマイズするには、このメソッドをオーバーライドする必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-186">Control authors who want to customize the arrange pass of layout processing should override this method.</span>
            </span>
            <span data-ttu-id="9a7e2-187">実装パターンが呼び出す必要があります<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />各表示されている子要素、およびパスが、最終的な目的として各子要素のサイズ、<paramref name="finalRect" />パラメーター。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-187">The implementation pattern should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each visible child element, and pass the final desired size for each child element as the <paramref name="finalRect" /> parameter.</span>
            </span>
            <span data-ttu-id="9a7e2-188">親要素を呼び出す必要があります<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />、それぞれの子にそれ以外の場合、子要素は表示されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-188">Parent elements should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child, otherwise the child elements will not be rendered.</span>
            </span>
            <span data-ttu-id="9a7e2-189">多くの派生クラスでは、このメソッドの実装を提供します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-189">Many derived classes offer implementations of this method.</span>
            </span>
            <span data-ttu-id="9a7e2-190">顕著な: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />、<see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" />と<see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-190">Prominent ones include: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-191">この要素の初期化プロセスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-191">Starts the initialization process for this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-192">まだ公開または要素ツリーに要素を接続するための方法で調整する場合は、個々 の要素でこのメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-192">You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</span></span> <span data-ttu-id="9a7e2-193">たとえば、独自に作成した新しい<xref:System.Windows.FrameworkElement>、まだ接続していないことを任意の論理ツリーですがします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-193">For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree.</span></span> <span data-ttu-id="9a7e2-194">または、内の子要素を要素がここでは、論理ツリーは、ウィンドウやアプリケーションのページに接続されていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-194">Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-195">要素の読み込みプロセス中に、要素が初期化される前に行う必要がある特別な処理を提供するには、このメソッドを実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-195">Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</span>
            </span>
            <span data-ttu-id="9a7e2-196">(既定値) の基本実装では、初期化を追跡するためのいくつかの内部フラグを設定するため、実装には基底の実装を呼び出す必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-196">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span>
            </span>
            <span data-ttu-id="9a7e2-197">1 つの可能な実装では、コンス トラクターで既に有効になっていない、独自のプライベート クラス初期化ルーチンにフックとしてこのメソッドを使用します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-197">One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</span>
            </span>
            <span data-ttu-id="9a7e2-198">基底の実装は例外をスロー<see cref="M:System.Windows.FrameworkElement.BeginInit" />が呼び出された複数の同じ要素の前に<see cref="M:System.Windows.FrameworkElement.EndInit" />呼び出されています。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-198">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkElement.BeginInit" /> is called more than one time on the same element prior to <see cref="M:System.Windows.FrameworkElement.EndInit" /> being called.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-199">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-199">Begins the sequence of actions contained in the provided storyboard.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">
          <span data-ttu-id="9a7e2-200">開始するストーリーボード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-200">The storyboard to begin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-201">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-201">Begins the sequence of actions that are contained in the provided storyboard.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-202">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-202">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9a7e2-203">通常、作成、<xref:System.Windows.Media.Animation.Storyboard>または<xref:System.Windows.Media.Animation.BeginStoryboard>マークアップにある要素を配置として、<xref:System.Windows.EventTrigger>要素のコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-203">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9a7e2-204">イベントによってトリガーされると、アニメーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-204">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9a7e2-205">ほとんどのコントロール要素の<xref:System.Windows.Media.Animation.Storyboard>マークアップで公開されているプロパティでアドレス指定できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-205">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9a7e2-206">署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-206">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9a7e2-207">そのため、アニメーションは、1 回の実行後に再開できません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-207">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9a7e2-208">アニメーションを制御するもある必要があります、ストーリー ボード、 [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)コード内で参照でアクセスできるか。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-208">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-209">次の例を取得、<xref:System.Windows.Media.Animation.Storyboard>リソースからを実行し、<xref:System.Windows.Media.Animation.Storyboard>内部イベントが処理されるクラスの場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-209">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">
          <span data-ttu-id="9a7e2-210">開始するストーリーボード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-210">The storyboard to begin.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="9a7e2-211">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-211">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-212">プロパティが既にアニメーション化されていた場合にどうするかを指定するオプションを使用して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-212">Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-213">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-213">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9a7e2-214">通常、作成、<xref:System.Windows.Media.Animation.Storyboard>または<xref:System.Windows.Media.Animation.BeginStoryboard>マークアップにある要素を配置として、<xref:System.Windows.EventTrigger>要素のコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-214">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9a7e2-215">イベントによってトリガーされると、アニメーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-215">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9a7e2-216">ほとんどのコントロール要素の<xref:System.Windows.Media.Animation.Storyboard>マークアップで公開されているプロパティでアドレス指定できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-216">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9a7e2-217">署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-217">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9a7e2-218">そのため、アニメーションは、1 回の実行後に再開できません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-218">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9a7e2-219">アニメーションを制御するもある必要があります、ストーリー ボード、 [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)コード内で参照でアクセスできるか。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-219">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="9a7e2-220">属性としてハンドオフ動作を指定することができます<xref:System.Windows.Media.Animation.BeginStoryboard>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-220">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="9a7e2-221">使用して、HandoffBehavior の作成</span><span class="sxs-lookup"><span data-stu-id="9a7e2-221">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="9a7e2-222">適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムは、時計を自動的に削除されません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-222">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="9a7e2-223">使用して多数の時計を適用するときに、パフォーマンスの問題を回避する<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-223">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="9a7e2-224">クロックを削除するいくつかの方法があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-224">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="9a7e2-225">プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション オブジェクトのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-225">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="9a7e2-226">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-226">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="9a7e2-227">これにより、すべてのアニメーション クロックが、プロパティから削除します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-227">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="9a7e2-228">固有の仕様を削除する<xref:System.Windows.Media.Animation.AnimationClock>にクロックのリストを使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、<xref:System.Windows.Media.Animation.ClockController>を呼び出す、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-228">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="9a7e2-229">これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-229">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="9a7e2-230">唯一のルート クロックできますで制御されることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-230">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="9a7e2-231">なお、<xref:System.Windows.Media.Animation.Clock.Completed>クロックの有効期間が forever の場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-231">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="9a7e2-232">その場合は、ユーザーを決定する必要がありますを呼び出すときに<xref:System.Windows.Media.Animation.ClockController.Remove%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-232">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-233">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-233">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="9a7e2-234">オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-234">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="9a7e2-235">クロック オブジェクトに関する詳細については、次を参照してください。[アニメーションおよびタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-235">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-236">次の例を取得、<xref:System.Windows.Media.Animation.Storyboard>リソースからを実行し、<xref:System.Windows.Media.Animation.Storyboard>内部イベントが処理されるクラスの場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-236">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">
          <span data-ttu-id="9a7e2-237">開始するストーリーボード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-237">The storyboard to begin.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="9a7e2-238">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-238">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span>
          </span>
        </param>
        <param name="isControllable">
          <span data-ttu-id="9a7e2-239">アニメーションを起動した後に、アニメーションを制御できるかどうか (一時停止できるかどうか) を宣言します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-239">Declares whether the animation is controllable (can be paused) after it is started.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-240">開始後のアニメーションの制御の状態を指定して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-240">Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-241">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-241">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9a7e2-242">通常、作成、<xref:System.Windows.Media.Animation.Storyboard>または<xref:System.Windows.Media.Animation.BeginStoryboard>マークアップにある要素を配置として、<xref:System.Windows.EventTrigger>要素のコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-242">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9a7e2-243">イベントによってトリガーされると、アニメーションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-243">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9a7e2-244">ほとんどのコントロール要素の<xref:System.Windows.Media.Animation.Storyboard>マークアップで公開されているプロパティでアドレス指定できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-244">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9a7e2-245">署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-245">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9a7e2-246">そのため、アニメーションは、1 回の実行後に再開できません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-246">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9a7e2-247">アニメーションを制御するもある必要があります、ストーリー ボード、 [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)コード内で参照でアクセスできるか。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-247">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="9a7e2-248">属性としてハンドオフ動作を指定することができます<xref:System.Windows.Media.Animation.BeginStoryboard>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-248">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="9a7e2-249">使用して、HandoffBehavior の作成</span><span class="sxs-lookup"><span data-stu-id="9a7e2-249">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="9a7e2-250">適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムは、時計を自動的に削除されません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-250">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="9a7e2-251">使用して多数の時計を適用するときに、パフォーマンスの問題を回避する<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-251">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="9a7e2-252">クロックを削除するいくつかの方法があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-252">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="9a7e2-253">プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション オブジェクトのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-253">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="9a7e2-254">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-254">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="9a7e2-255">これにより、すべてのアニメーション クロックが、プロパティから削除します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-255">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="9a7e2-256">固有の仕様を削除する<xref:System.Windows.Media.Animation.AnimationClock>にクロックのリストを使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、<xref:System.Windows.Media.Animation.ClockController>を呼び出す、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-256">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="9a7e2-257">これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-257">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="9a7e2-258">唯一のルート クロックできますで制御されることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-258">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="9a7e2-259">なお、<xref:System.Windows.Media.Animation.Clock.Completed>クロックの有効期間が forever の場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-259">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="9a7e2-260">その場合は、ユーザーを決定する必要がありますを呼び出すときに<xref:System.Windows.Media.Animation.ClockController.Remove%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-260">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-261">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-261">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="9a7e2-262">オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-262">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="9a7e2-263">クロック オブジェクトに関する詳細については、次を参照してください。[アニメーションおよびタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-263">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-264">要素に使用される <see cref="T:System.Windows.Data.BindingGroup" /> を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-264">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-265">要素に使用される <see cref="T:System.Windows.Data.BindingGroup" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-265">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-266">A<xref:System.Windows.Data.BindingGroup>オブジェクトの複数のプロパティの値を検証するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-266">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="9a7e2-267">たとえば、アプリケーションがアドレスを入力するように求めるし、その型のオブジェクトが設定されます`Address`、プロパティを持つ`Street`、 `City`、 `ZipCode`、および`Country`ユーザーが指定した値を持つ。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-267">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="9a7e2-268">アプリケーションが 4 つを含むパネル<xref:System.Windows.Controls.TextBox>コントロール、それぞれは、オブジェクトのプロパティのいずれかにバインドします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-268">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object’s properties.</span></span> <span data-ttu-id="9a7e2-269">使用することができます、<xref:System.Windows.Controls.ValidationRule>で、<xref:System.Windows.Data.BindingGroup>を検証する、`Address`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-269">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="9a7e2-270">たとえば、<xref:System.Windows.Controls.ValidationRule>郵便番号が有効、住所の国であることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-270">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country of the address.</span></span>  
  
 <span data-ttu-id="9a7e2-271">子要素を継承、<xref:System.Windows.Data.BindingGroup>だけで、他の継承可能なプロパティと同様に、親要素からです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-271">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-272">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-272">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-273">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-273">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|<span data-ttu-id="9a7e2-274">メタデータ プロパティに設定**は true。**</span><span class="sxs-lookup"><span data-stu-id="9a7e2-274">Metadata properties set to **true**</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-275">次の例は、ユーザーが同じ値に 2 つのオブジェクトのプロパティに設定するかどうかを確認するアプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-275">The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</span></span> <span data-ttu-id="9a7e2-276">最初の例では、2 つ作成されます<xref:System.Windows.Controls.TextBox>コントロール、それぞれが別のデータ ソースにバインドされています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-276">The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source.</span></span> <span data-ttu-id="9a7e2-277"><xref:System.Windows.Controls.StackPanel>が、<xref:System.Windows.Data.BindingGroup>を格納している、 <xref:System.Windows.Controls.ValidationRule> 2 つの文字列が等しいことを確認します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-277">The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.</span></span>  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 <span data-ttu-id="9a7e2-278">次の例は、<xref:System.Windows.Controls.ValidationRule>前の例を使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-278">The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.</span></span>  <span data-ttu-id="9a7e2-279"><xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッド オーバーライドから、ソース オブジェクトを取得する例では、<xref:System.Windows.Data.BindingGroup>し、オブジェクトのプロパティが等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-279">In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 <span data-ttu-id="9a7e2-280">呼び出す、<xref:System.Windows.Controls.ValidationRule>を呼び出し、<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-280">To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.</span></span>  <span data-ttu-id="9a7e2-281">次の例では<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>ボタンのクリック イベントの発生時です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-281">The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-282">
            <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-282">Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-283">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-283">Attempts to bring this element into view, within any scrollable regions it is contained within.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-284">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-284">Attempts to bring this element into view, within any scrollable regions it is contained within.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-285">このメソッドを呼び出すことにより、<xref:System.Windows.FrameworkElement.RequestBringIntoView>の現在の要素から発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-285">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="9a7e2-286">このイベントで処理できるように、 <xref:System.Windows.Controls.ScrollViewer>、または派生されているかのようなクラス。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-286">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="9a7e2-287">想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、<xref:System.Windows.Controls.ScrollViewer>コントロール。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-287">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="9a7e2-288">どちらも、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベントも<xref:System.Windows.FrameworkElement.BringIntoView%2A>メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-288">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="9a7e2-289">理由としては、エラーなどで要素の設定を含めることができます<xref:System.Windows.UIElement.Visibility%2A>以外の何らかの値をされている<xref:System.Windows.Visibility.Visible>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-289">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="9a7e2-290">指定されていない署名を使用する場合、 `targetRectangle`、全体の要素のサイズし (その<xref:System.Windows.UIElement.RenderSize%2A>) が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-290">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="9a7e2-291">このメソッドを呼び出して、可能性のあるを呼び出す<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>要素を含む親スクロール可能な領域にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-291">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="9a7e2-292">この要素がスクロール可能領域に含まれていない場合、<xref:System.Windows.FrameworkElement.RequestBringIntoView>も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-292">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-293">実装するたびに応答するアプリケーションのナビゲーション イベントのハンドラーを次の例、[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]フラグメントには移動先が含まれています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-293">The following example implements a handler for an application navigation event that responds whenever the [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] being navigated to includes a fragment.</span></span> <span data-ttu-id="9a7e2-294">フラグメントを指定、[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]次のシャープ記号 (#)、実装済みの動作により、フレーム内でビューをスクロールする要素とします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-294">The fragment is named in the [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</span></span> <span data-ttu-id="9a7e2-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> および<xref:System.Windows.FrameworkElement.RequestBringIntoView>例ではそのスクロール動作を要求します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.</span></span>  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">
          <span data-ttu-id="9a7e2-296">指定した、表示する必要がある要素のサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-296">Specified size of the element that should also be brought into view.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-297">この要素が含まれているスクロール可能な領域内で、この要素の指定したサイズの領域が表示されるように試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-297">Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-298">このメソッドを呼び出すことにより、<xref:System.Windows.FrameworkElement.RequestBringIntoView>の現在の要素から発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-298">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="9a7e2-299">このイベントで処理できるように、 <xref:System.Windows.Controls.ScrollViewer>、または派生されているかのようなクラス。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-299">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="9a7e2-300">想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、<xref:System.Windows.Controls.ScrollViewer>コントロール。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-300">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="9a7e2-301">どちらも、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベントも<xref:System.Windows.FrameworkElement.BringIntoView%2A>メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-301">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="9a7e2-302">理由としては、エラーなどで要素の設定を含めることができます<xref:System.Windows.UIElement.Visibility%2A>以外の何らかの値をされている<xref:System.Windows.Visibility.Visible>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-302">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="9a7e2-303">指定されていない署名を使用する場合、 `targetRectangle`、全体の要素のサイズし (その<xref:System.Windows.UIElement.RenderSize%2A>) が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-303">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="9a7e2-304">このメソッドを呼び出して、可能性のあるを呼び出す<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>要素を含む親スクロール可能な領域にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-304">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="9a7e2-305">この要素がスクロール可能領域に含まれていない場合、<xref:System.Windows.FrameworkElement.RequestBringIntoView>も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-305">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-306">次の例では、制約付きのスクロール領域に大きなグラフィックスがします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-306">The following example has a large graphic in a constrained scrolling region.</span></span> <span data-ttu-id="9a7e2-307">ページ上のボタンには、大きな画像の特定の地域にビューをスクロールするハンドラーがあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-307">A button on the page has a handler that scrolls the view to a particular region of the large graphic.</span></span>  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-308">この要素内から [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] によってコンテキスト メニューが要求された場合に常に表示されるコンテキスト メニュー要素を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-308">Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-309">この要素に割り当てられたコンテキスト メニュー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-309">The context menu assigned to this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-310"><xref:System.Windows.Controls.ContextMenu> 自体は、<xref:System.Windows.FrameworkElement>クラスを派生しの技術的に可能であれば<xref:System.Windows.Controls.ContextMenu>自体が、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-310"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property.</span></span> <span data-ttu-id="9a7e2-311">ただし、これがユーザーの混乱を招くコンテキスト メニュー エクスペリエンスを作成し、この方法はお勧めできません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-311">However, this creates a confusing context menu experience for the user and this practice is not recommended.</span></span>  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-312">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-313">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-313">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|<span data-ttu-id="9a7e2-314">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-315">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-315">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-316">要素のコンテキスト メニューが閉じる直前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-316">Occurs just before any context menu on the element is closed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-317">閉じないようにするには、コンテキスト メニュー、イベントのハンドラーは、処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-317">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="9a7e2-318">としては、このイベントを使用して、<xref:System.Windows.EventTrigger>スタイルでは、イベントの基になるサービスの定義を参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-318">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="9a7e2-319">(ために、この使用法が必要でイベントの実装<xref:System.Windows.FrameworkElement>、公開、基になるサービスのイベントがマップされていない、<xref:System.Windows.FrameworkElement.ContextMenuClosing>識別子をトリガーとして使用することができます)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-319">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuClosing> identifier such that you can use it as a trigger).</span></span>  
  
 <span data-ttu-id="9a7e2-320"><xref:System.Windows.Controls.ContextMenu> 自体は、<xref:System.Windows.FrameworkElement>派生クラスしますが、<xref:System.Windows.FrameworkElement.ContextMenuClosing>イベントは発生しません。 コンテキスト メニューで直接です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-320"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the <xref:System.Windows.FrameworkElement.ContextMenuClosing> event will not be raised by a context menu directly.</span></span> <span data-ttu-id="9a7e2-321">代わりに、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI にコンテキスト メニューを閉じるしようとしたときにだけ発生する要素からイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-321">Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</span></span> <span data-ttu-id="9a7e2-322">ただしこれは<xref:System.Windows.Controls.ContextMenu>自体が、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティ (入れ子になったコンテキスト メニュー)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-322">However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu).</span></span> <span data-ttu-id="9a7e2-323">この場合、 <xref:System.Windows.Controls.ContextMenu> 、入れ子になった実際に所有して<xref:System.Windows.Controls.ContextMenu>し、入れ子になったコンテキスト メニューをされているイベントのソースと、イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-323">In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.</span></span>  
  
 <span data-ttu-id="9a7e2-324"><xref:System.Windows.Controls.ContextMenu>クラス自体は、類似のイベントもあります (<xref:System.Windows.Controls.ContextMenu.Closed>) が、<xref:System.Windows.Controls.ContextMenu.Closed>イベントは、ユーザーの操作をキャンセルすることが提供されません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-324">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-325">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-326">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-326">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="9a7e2-327">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-327">Routing strategy</span></span>|<span data-ttu-id="9a7e2-328">バブル</span><span class="sxs-lookup"><span data-stu-id="9a7e2-328">Bubbling</span></span>|  
|<span data-ttu-id="9a7e2-329">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-329">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="9a7e2-330">オーバーライド<xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-330">Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-331">
            <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-331">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-332">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-332">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-333">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-333">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-334">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-334">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-335">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-335">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-336">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-336">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-337">要素のコンテキスト メニューが開くときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-337">Occurs when any context menu on the element is opened.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-338">コンテキスト メニューを手動で開く、処理済みとして、イベントのハンドラーは、関連するイベントをマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-338">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="9a7e2-339">それ以外の場合の既存の値、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティが自動的にコンテキスト メニューを開き、使用されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-339">Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="9a7e2-340">既定のアクションを効果的に取り消し処理イベントをマークすることとの値にリセットすることにより、<xref:System.Windows.FrameworkElement.ContextMenu%2A>プロパティを開き、新しい<xref:System.Windows.Controls.ContextMenu>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-340">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="9a7e2-341">ただしはタイミングの問題を認識する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-341">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="9a7e2-342">コンテキスト メニューを完全に置き換えるために、<xref:System.Windows.FrameworkElement.ContextMenuOpening>ハンドラー、初期のコンテキスト メニューにはできません null/空です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-342">In order to completely replace the context menu through a <xref:System.Windows.FrameworkElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="9a7e2-343">また、イベントを処理し、新しいコンテキスト メニューを手動で開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-343">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="9a7e2-344">詳細については、「[する方法: ContextMenuOpening イベントを処理](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-344">For details, see [How to: Handle the ContextMenuOpening Event](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).</span></span>  
  
 <span data-ttu-id="9a7e2-345">このイベントを使用する、<xref:System.Windows.EventTrigger>スタイルでは、基になる添付イベントを参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-345">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="9a7e2-346">(ために、この使用法が必要でイベントの実装<xref:System.Windows.FrameworkElement>、公開、基になるサービスのイベントがマップされていない、<xref:System.Windows.FrameworkElement.ContextMenuOpening>識別子をトリガーで使用することができます)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-346">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuOpening> identifier such that you can use it in triggers).</span></span>  
  
 <span data-ttu-id="9a7e2-347"><xref:System.Windows.Controls.ContextMenu> 自体は、<xref:System.Windows.FrameworkElement>派生クラスには、ソースとして開かれている、コンテキスト メニューからこのイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-347"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source.</span></span> <span data-ttu-id="9a7e2-348">イベントは、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI のコンテキスト メニューを開くしようとしたときにだけ発生する要素から発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-348">The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</span></span> <span data-ttu-id="9a7e2-349">ことが<xref:System.Windows.Controls.ContextMenu>自体が、<xref:System.Windows.FrameworkElement.ContextMenu%2A>がプロパティには、このシナリオを避ける必要があります (詳細については、「 <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="9a7e2-349">It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="9a7e2-350"><xref:System.Windows.Controls.ContextMenu>クラス自体は、類似のイベントもあります (<xref:System.Windows.Controls.ContextMenu.Opened>) が、<xref:System.Windows.Controls.ContextMenu.Opened>ユーザーの操作をキャンセルする機会を提供しません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-350">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-351">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-352">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-352">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="9a7e2-353">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-353">Routing strategy</span></span>|<span data-ttu-id="9a7e2-354">バブル</span><span class="sxs-lookup"><span data-stu-id="9a7e2-354">Bubbling</span></span>|  
|<span data-ttu-id="9a7e2-355">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-355">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="9a7e2-356">オーバーライド<xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-356">Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-357">
            <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-357">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-358">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-359">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-360">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-361">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-362">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-363">
            <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-363">Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-364">この要素上にマウス ポインターが置かれたときに表示されるカーソルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-364">Gets or sets the cursor that displays when the mouse pointer is over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-365">表示対象のカーソル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-365">The cursor to display.</span>
          </span>
          <span data-ttu-id="9a7e2-366">この依存関係プロパティによって、既定値が <see langword="null" /> として定義されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-366">The default value is defined as <see langword="null" /> per this dependency property.</span>
          </span>
          <span data-ttu-id="9a7e2-367">ただし、実行時における実用的な既定値は、さまざまな要因から取得されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-367">However, the practical default at run time will come from a variety of factors.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-368">このプロパティを設定すると[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロセッサがの型の変換に依存しています、<xref:System.Windows.Input.Cursor>クラス文字列を評価します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-368">When you set this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="9a7e2-369">指定された文字列に評価される必要があります、<xref:System.Windows.Input.CursorType>値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-369">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="9a7e2-370">詳細については、「<xref:System.Windows.Input.Cursor>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-370">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="9a7e2-371">このプロパティによって設定されるカーソルは、マウス ポインターがこの要素上に表示されないかどうかの値に依存しても、<xref:System.Windows.FrameworkElement.ForceCursor%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-371">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="9a7e2-372">また、アクティブなドラッグ、マウスのキャプチャ、テキスト コントロール、および、内のモードの編集など、イベント関連の考慮事項も影響を与えますカーソル、このプロパティで指定した値よりも優先順位の高い。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-372">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="9a7e2-373">最終的な既定値にこのプロパティの設定の動作を戻すには、設定`null`もう一度です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-373">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="9a7e2-374">`null`既定を意味実際的なカーソルの値の決定がここでは遅延し、別の場所から入手してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-374">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="9a7e2-375">提示された場合、ソースからプログラムで値を使用せず、既定のカーソルが視覚的に以上、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]アプリケーションは矢印になります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-375">If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span> <span data-ttu-id="9a7e2-376">ただし、カーソルの一時的な変更に設定されていない、<xref:System.Windows.FrameworkElement.Cursor%2A>経由で渡されるときに、要素の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-376">However, the transient cursor changes are not set to the <xref:System.Windows.FrameworkElement.Cursor%2A> values of the elements when they are passed over.</span></span> <span data-ttu-id="9a7e2-377"><xref:System.Windows.FrameworkElement.Cursor%2A>それが実際に設定されている場合、インスタンスのコードや、スタイルを介しての値がプロパティはのみレポート null 以外です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-377">The <xref:System.Windows.FrameworkElement.Cursor%2A> property will only report non null values in cases where it was actually set, for instance through code or a style.</span></span> <span data-ttu-id="9a7e2-378">上にあるマウスが移動するたび、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]アプリケーションが発生し、<xref:System.Windows.UIElement.QueryCursor>イベント。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-378">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event.</span></span> <span data-ttu-id="9a7e2-379">イベント バブルと経路上の任意の要素、イベントを処理し、このイベントの引数をカーソルの値を設定する機会があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-379">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</span></span> <span data-ttu-id="9a7e2-380">これは、ほとんどの場合、視覚的に明らかなカーソルを生成するメカニズムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-380">This is the mechanism that produces the visually apparent cursor in most cases.</span></span> <span data-ttu-id="9a7e2-381">場合、<xref:System.Windows.UIElement.QueryCursor>ハンドラーは、カーソルの結果を返すし、イベントが処理され、引数に変更された値を持つファクトの値よりも優先、<xref:System.Windows.FrameworkElement.Cursor%2A>任意のレベルでは、プロパティしない限り、<xref:System.Windows.FrameworkElement.ForceCursor%2A>が設定されています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-381">If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="9a7e2-382">通常の静的プロパティの値にこのプロパティを設定する場合は、カスタムのカーソルを作成しない、<xref:System.Windows.Input.Cursors>クラスです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-382">If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span> <span data-ttu-id="9a7e2-383">設定<xref:System.Windows.FrameworkElement.Cursor%2A>コードで、次のいずれかが必要です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-383">Setting <xref:System.Windows.FrameworkElement.Cursor%2A> in code requires one of the following:</span></span>  
  
-   <span data-ttu-id="9a7e2-384">呼び出す、<xref:System.Windows.Input.Cursor>を取得するコンス トラクター、<xref:System.Windows.Input.Cursor>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-384">Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance.</span></span> <span data-ttu-id="9a7e2-385">両方の署名、<xref:System.Windows.Input.Cursor>ストリームまたはファイルの作成中に応じるために、コンス トラクターを使用して、<xref:System.Windows.Input.Cursor>カーソルのカスタム オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-385">Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.</span></span>  
  
-   <span data-ttu-id="9a7e2-386">使用して、<xref:System.Windows.Input.CursorConverter>クラスとその<xref:System.Windows.Input.CursorConverter.ConvertFrom%2A>メソッドによって、カーソルを指定する<xref:System.Windows.Input.CursorType>、または文字列に評価されることを<xref:System.Windows.Input.CursorType>に戻り値のキャストと<xref:System.Windows.Input.Cursor>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-386">Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.</span></span>  
  
 <span data-ttu-id="9a7e2-387">設定、<xref:System.Windows.Input.Cursor>にカスタム値が有効でない部分的に信頼します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-387">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="9a7e2-388">カスタム カーソルの詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-388">For more information on custom cursors, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-389">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-389">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-390">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-390">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|<span data-ttu-id="9a7e2-391">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-391">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-392">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-392">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-393">次の例では、カーソル グラフィックを意図的に設定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-393">The following example shows how to deliberately set the cursor graphic.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-394">
            <see cref="P:System.Windows.FrameworkElement.Cursor" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-394">Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-395">要素がデータ バインディングに含まれている場合に、その要素のデータ コンテキストを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-395">Gets or sets the data context for an element when it participates in data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-396">データ コンテキストとして使用するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-396">The object to use as data context.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-397">*データ コンテキスト*概念により、バインディング、だけでなく、バインディング、パスなどの他の特性に使用されるデータ ソースについて、親要素から情報を継承する要素です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-397">*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</span></span>  
  
 <span data-ttu-id="9a7e2-398">直接データ コンテキストを設定することができます、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]オブジェクト、そのオブジェクトのプロパティを評価する、バインディングを使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-398">Data context can be set directly to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="9a7e2-399">または、データ コンテキストを設定、<xref:System.Windows.Data.DataSourceProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-399">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="9a7e2-400">この依存関係プロパティでは、プロパティの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-400">This dependency property inherits property values.</span></span> <span data-ttu-id="9a7e2-401">その他の値を使用せずに子要素がある場合<xref:System.Windows.FrameworkElement.DataContext%2A>プロパティ システムは値を設定し、ローカルの値や、スタイルを介して確立、<xref:System.Windows.FrameworkElement.DataContext%2A>割り当てられているこの値を持つ最も近い親要素の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-401">If there are child elements without other values for <xref:System.Windows.FrameworkElement.DataContext%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="9a7e2-402">次のプロパティのいずれかを使用する代わりに、<xref:System.Windows.Data.Binding>クラスをバインディング ソースを明示的に指定する: <xref:System.Windows.Data.Binding.ElementName%2A>、 <xref:System.Windows.Data.Binding.Source%2A>、または<xref:System.Windows.Data.Binding.RelativeSource%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-402">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> <span data-ttu-id="9a7e2-403">詳細については、次を参照してください。[する方法: バインド ソースを指定して](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-403">For more information, see [How to: Specify the Binding Source](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).</span></span>  
  
 <span data-ttu-id="9a7e2-404">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、<xref:System.Windows.FrameworkElement.DataContext%2A>として最も一般的に設定されて、<xref:System.Windows.Data.Binding>宣言します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-404">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkElement.DataContext%2A> is most typically set to as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="9a7e2-405">プロパティ要素構文または属性の構文のいずれかを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-405">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="9a7e2-406">属性構文は、このページの例に示しています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-406">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="9a7e2-407">コードを使用して設定することもできます<xref:System.Windows.FrameworkElement.DataContext%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-407">You can also use code to set <xref:System.Windows.FrameworkElement.DataContext%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-408"><xref:System.Windows.FrameworkElement.DataContext%2A> 別に 1 つのコンテキストをバインドする場合がありますのシナリオを容易にするために、バインド可能なプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-408"><xref:System.Windows.FrameworkElement.DataContext%2A> is a bindable property, to facilitate scenarios where one context might be bound to another.</span></span> <span data-ttu-id="9a7e2-409">ただしにバインドする場合<xref:System.Windows.FrameworkElement.DataContext%2A>、循環バインドの参照を作成しないように注意してください (バインドしないでください、 <xref:System.Windows.FrameworkElement.DataContext%2A> 、それ自体には、プロパティ値の継承の性質を行う、<xref:System.Windows.FrameworkElement.DataContext%2A>プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-409">However, if you bind to <xref:System.Windows.FrameworkElement.DataContext%2A>, be careful to not create circular binding references (do not bind a <xref:System.Windows.FrameworkElement.DataContext%2A> to itself, which is possible to do because of the property value inheritance nature of the <xref:System.Windows.FrameworkElement.DataContext%2A> property).</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-410">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-410">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-411">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-411">XAML Attribute Usage</span></span>  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-412">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-412">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-413">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-413">*dataContextObject*</span></span>  
 <span data-ttu-id="9a7e2-414">親要素内のすべてのバインディングのデータ コンテキストとして機能する直接埋め込まれたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-414">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="9a7e2-415">通常、このオブジェクトは、<xref:System.Windows.Data.Binding>別または<xref:System.Windows.Data.BindingBase>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-415">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class.</span></span> <span data-ttu-id="9a7e2-416">または、いずれかの生データ[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]オブジェクトの種類のバインディングは、後で定義されている実際のバインディングをここでは、配置することも対象としています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-416">Alternatively, raw data of any [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="9a7e2-417">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-417">*bindingUsage*</span></span>  
 <span data-ttu-id="9a7e2-418">適切なデータ コンテキストに評価されるバインディングの使用方法です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-418">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="9a7e2-419">詳細については、「[バインディングのマークアップ拡張機能](~/docs/framework/wpf/advanced/binding-markup-extension.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-419">For details, see [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md).</span></span>  
  
 <span data-ttu-id="9a7e2-420">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-420">*resourceExtension*</span></span>  
 <span data-ttu-id="9a7e2-421">次のいずれか。 またはします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-421">One of the following:  or .</span></span> <span data-ttu-id="9a7e2-422">この使用法は、リソース内のオブジェクトとして定義されている、生データを参照するときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-422">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="9a7e2-423">参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-423">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9a7e2-424">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-424">*contextResourceKey*</span></span>  
 <span data-ttu-id="9a7e2-425">内から要求されたオブジェクトのキー識別子、<xref:System.Windows.ResourceDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-425">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-426">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-426">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-427">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-427">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|<span data-ttu-id="9a7e2-428">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-428">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-429">次の例では、バインディング上のデータ コンテキストの動作を示していて、特定のバインドされたプロパティの値を定義する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-429">The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</span></span>  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-430">この要素のデータ コンテキストが変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-430">Occurs when the data context for this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-431">データ コンテキストおよびデータ バインディングの詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-431">For an explanation of data contexts and data binding, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a7e2-432">ときに、<xref:System.Windows.FrameworkElement.DataContext%2A>要素変更では、この要素上のすべてのデータ バインド プロパティ可能性のある影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-432">When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="9a7e2-433">これは、データ コンテキストを継承するには、論理ツリーで、現在の要素の子要素である任意の要素も、現在の要素自体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-433">This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="9a7e2-434">このような既存のすべてのバインドは、新しい再解釈する必要があります<xref:System.Windows.FrameworkElement.DataContext%2A>し、バインディングの結果を再評価します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-434">All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results.</span></span> <span data-ttu-id="9a7e2-435">データ バインディング エンジンは、非確定的なこれらの生成基準とした注文に関する、<xref:System.Windows.FrameworkElement.DataContextChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-435">The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <xref:System.Windows.FrameworkElement.DataContextChanged> event.</span></span> <span data-ttu-id="9a7e2-436">イベントの後、または任意の組み合わせで、再評価は、イベントの前に発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-436">The reevaluations can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-437">
            <see cref="P:System.Windows.FrameworkElement.DataContext" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-437">Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-438">テーマ スタイルを使用または定義するときに、このコントロールのスタイルを参照するために使用されるキーを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-438">Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-439">スタイルのキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-439">The style key.</span>
          </span>
          <span data-ttu-id="9a7e2-440">テーマ スタイル参照の一部として正常に機能するために、この値は、スタイルを設定するコントロールの <see cref="T:System.Type" /> である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-440">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-441">このプロパティは、通常はその直接のプロパティ アクセサーのを通じて設定されません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-441">This property is typically not set through any of its direct property accessors.</span></span> <span data-ttu-id="9a7e2-442">この依存関係プロパティの型に固有のメタデータをオーバーライドする代わりに、新規に作成するたびに<xref:System.Windows.FrameworkElement>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-442">Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="9a7e2-443">コントロールを派生するときに呼び出す、<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>メソッドに対して、<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>識別子、コントロールの静的コンス トラクター内で派生したクラス (または同等のクラス初期化) します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-443">When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).</span></span>  
  
 <span data-ttu-id="9a7e2-444">コントロール通常独自の型にするには、このプロパティの既定値が上書きが場合によってはでしたも使用してテーマ ディクショナリ内のスタイルが存在する基本型です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-444">A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</span></span> <span data-ttu-id="9a7e2-445">これは、基本コントロールのコントロールのテンプレートが完全にその派生したコントロールのビジュアル表現を定義し、どのような追加のメンバーが派生型を公開では、コントロール テンプレートの一部としては、追加の要素は不要な場合のみ実用的です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-445">This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</span></span>  
  
 <span data-ttu-id="9a7e2-446">要素またはコントロールは意図的にテーマのスタイルを使用する場合は、設定、<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>プロパティを`true`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-446">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-447">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-447">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-448">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-448">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="9a7e2-449">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-449">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-450">次の例は、「解説」で説明されている依存関係プロパティのメタデータ オーバーライド使用を示しています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-450">The following example illustrates the dependency property metadata override usage discussed in Remarks.</span></span> <span data-ttu-id="9a7e2-451">このコードは、カスタム コントロール クラスを定義`NumericUpDown`専用コントロール ライブラリのアセンブリから使用するためのものです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-451">This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly.</span></span> <span data-ttu-id="9a7e2-452">ここで示した静的コンス トラクターがプライベートの初期化関数を参照、クラス ハンドラーを登録 (別の一般的なコントロールのサブクラス化シナリオ[Handled、クラス処理とルーティング イベントをマークすること](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) し、最後に上書き、<xref:System.Windows.FrameworkElement.DefaultStyleKey%2A>で依存関係プロパティのメタデータ、`NumericUpDown`クラスです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-452">The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) and finally overrides the <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> dependency property metadata on the `NumericUpDown` class.</span></span> <span data-ttu-id="9a7e2-453"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 常に任意いくつかが設定されていないコントロールのスタイルを検索するテーマ スタイル システムが使用されている規則は、目的のキーとして独自の型を返します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-453"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</span></span> <span data-ttu-id="9a7e2-454">完全なサンプルもそのキーによって参照されている実際のコントロールのテーマのスタイルを定義します。参照してください[NumericUpDown カスタム コントロールのテーマと UI オートメーションのサポート サンプル](http://go.microsoft.com/fwlink/?LinkID=160025)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-454">The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](http://go.microsoft.com/fwlink/?LinkID=160025).</span></span>  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  
[!code-csharp[CustomControlNumericUpDown#Close](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#close)]
[!code-vb[CustomControlNumericUpDown#Close](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#close)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-455">
            <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-455">Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-456">この要素の初期化プロセスが完了したことを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-456">Indicates that the initialization process for the element is complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-457">場合<xref:System.Windows.FrameworkElement.BeginInit%2A>が既に呼び出されて、基本実装を発生させる、<xref:System.Windows.FrameworkElement.Initialized>イベント。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-457">If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event.</span></span> <span data-ttu-id="9a7e2-458">それ以外の場合<xref:System.Windows.FrameworkElement.BeginInit%2A>も呼び出されなかったかではない可能性があるかどうかを特定<xref:System.Windows.FrameworkElement.BeginInit%2A>、呼び出された<xref:System.Windows.FrameworkElement.Initialized>は発生しません代わりに、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-458">Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9a7e2-459">以前に <see cref="M:System.Windows.FrameworkElement.EndInit" /> が呼び出されていないこの要素で、<see cref="M:System.Windows.FrameworkElement.BeginInit" /> が呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-459">
              <see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-460">要素の読み込みプロセス中に、要素の初期化を行うときに行う必要がある特別な処理を提供するには、このメソッドを実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-460">Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</span>
            </span>
            <span data-ttu-id="9a7e2-461">(既定値) の基本実装では、初期化を追跡するためのいくつかの内部フラグを設定するため、実装には基底の実装を呼び出す必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-461">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9a7e2-462">要求された要素の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-462">The name of the requested element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-463">指定した識別名を持つ要素を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-463">Finds an element that has the provided identifier name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-464">要求された要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-464">The requested element.</span>
          </span>
          <span data-ttu-id="9a7e2-465">一致する要素が見つからなかった場合は <see langword="null" /> になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-465">This can be <see langword="null" /> if no matching element was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-466">要素に子要素がある場合は、要求された名前を持つ要素を再帰的には、すべて検索は、これらの子要素です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-466">If the element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
 <span data-ttu-id="9a7e2-467"><xref:System.Windows.FrameworkElement.FindName%2A> 現在の要素の名前スコープ内で動作します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-467"><xref:System.Windows.FrameworkElement.FindName%2A> operates within the current element's namescope.</span></span> <span data-ttu-id="9a7e2-468">詳細については、「 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-468">For details, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">
          <span data-ttu-id="9a7e2-469">要求したリソースのキー識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-469">The key identifier for the requested resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-470">指定したキーを持つリソースを検索します。要求したリソースが見つからない場合は例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-470">Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-471">要求されたリソース。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-471">The requested resource.</span>
          </span>
          <span data-ttu-id="9a7e2-472">指定したキーを持つリソースが見つからなかった場合は例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-472">If no resource with the provided key was found, an exception is thrown.</span>
          </span>
          <span data-ttu-id="9a7e2-473">その場合は <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 値が返されることもあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-473">An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a7e2-474">見つからないキーのこのメソッドを呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-474">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="9a7e2-475">呼び出し元に起因する例外を処理しないかどうかは<xref:System.Windows.FrameworkElement.FindResource%2A>、呼び出す<xref:System.Windows.FrameworkElement.TryFindResource%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-475">If you do not want to handle exceptions that result from calling <xref:System.Windows.FrameworkElement.FindResource%2A>, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead.</span></span> <span data-ttu-id="9a7e2-476"><xref:System.Windows.FrameworkElement.TryFindResource%2A> 返します`null`要求されたリソースが見つからないし、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-476"><xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="9a7e2-477">呼び出し元の要素で、リソースが見つからない場合論理ツリー内の親要素、検索結果の 次へし、アプリケーション、し、テーマ、最後にシステム リソースです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-477">If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</span></span> <span data-ttu-id="9a7e2-478">この参照方法は、リソースがマークアップで動的リソース参照によって要求された場合に、ツリーを検索する方法と同じです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-478">This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</span></span> <span data-ttu-id="9a7e2-479">リソースの検索の詳細については、次を参照してください。 [XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-479">For more information about resource lookup, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9a7e2-480">通常、即座にキャストする、<xref:System.Windows.FrameworkElement.FindResource%2A>に値を返し、プロパティの型を返されるリソース値に設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-480">Typically, you immediately cast a <xref:System.Windows.FrameworkElement.FindResource%2A> return value to the type of the property that you setting with the returned resource value.</span></span>  
  
 <span data-ttu-id="9a7e2-481">リソース キーは必ずしも文字列です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-481">Resource keys are not necessarily strings.</span></span> <span data-ttu-id="9a7e2-482">たとえば、スタイル、テーマのレベルでのコントロールが意図的と適合するため、<xref:System.Type>の管理、およびアプリケーションまたはページのスタイルのコントロールを通常使用してこの同じキー規則。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-482">For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention.</span></span> <span data-ttu-id="9a7e2-483">詳細については、「[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)または[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-483">For details, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md) or [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-484">次の例では、名前付きリソースを取得し、プロパティに値を適切な型にキャストします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-484">The following example obtains a named resource and casts it to an appropriate type to fill a property.</span></span>  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <span data-ttu-id="9a7e2-485">
            <paramref name="resourceKey" /> が見つからず、<see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> イベントのイベント ハンドラーが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-485">
              <paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span>
          </span>
          <span data-ttu-id="9a7e2-486">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-486">-or-</span>
          </span>
          <span data-ttu-id="9a7e2-487">
            <paramref name="resourceKey" /> が見つからず、<see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> イベントで <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> プロパティが <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-487">
              <paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9a7e2-488">
            <paramref name="resourceKey" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-488">
              <paramref name="resourceKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-489">レイアウトを制御する親要素内でのテキストやその他の[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 要素のフロー方向を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-489">Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-490">テキストやその他の [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 要素の親要素内でのフロー方向を示す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-490">The direction that text and other [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements flow within their parent element, as a value of the enumeration.</span>
          </span>
          <span data-ttu-id="9a7e2-491">既定値は <see cref="F:System.Windows.FlowDirection.LeftToRight" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-491">The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-492">依存関係プロパティの使用法を設定、<xref:System.Windows.FrameworkElement.FlowDirection%2A>この要素上です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-492">The dependency property usage sets the <xref:System.Windows.FrameworkElement.FlowDirection%2A> on this element.</span></span> <span data-ttu-id="9a7e2-493">プロパティ値の設定の継承により<xref:System.Windows.FrameworkElement.FlowDirection%2A>要素では設定できます可能性のある<xref:System.Windows.FrameworkElement.FlowDirection%2A>設定していないすべての子要素で<xref:System.Windows.FrameworkElement.FlowDirection%2A>ローカルやスタイルなどがその他の手段です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-493">Because of property value inheritance, setting <xref:System.Windows.FrameworkElement.FlowDirection%2A> on an element can potentially set <xref:System.Windows.FrameworkElement.FlowDirection%2A> on all child elements that did not set <xref:System.Windows.FrameworkElement.FlowDirection%2A> locally or though other means such as styles.</span></span>  
  
 <span data-ttu-id="9a7e2-494">このプロパティは自動的に設定されていない、任意のアプリケーションのカルチャの情報の一部として、要素は、必ずしもものではありません、カルチャ情報が含まれる一般的なフローの方向に従うようにコンテンツを含めることがあるためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-494">This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</span></span> <span data-ttu-id="9a7e2-495">グローバリゼーションの考慮事項の詳細については、次を参照してください。 [WPF のグローバリゼーション](~/docs/framework/wpf/advanced/globalization-for-wpf.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-495">For more information on globalization considerations, see [Globalization for WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).</span></span>  
  
 <span data-ttu-id="9a7e2-496">このプロパティは、定義されている[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]依存関係プロパティとして機能するように、プロパティ アクセサー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-496">This property has a defined [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property.</span></span> <span data-ttu-id="9a7e2-497">ただしはも登録ように、接続されているため、添付プロパティとしても機能できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-497">However, it is also registered as attached, so it can also function as an attached property.</span></span> <span data-ttu-id="9a7e2-498">添付としての登録は主にするプロパティ値の継承がサポートされているが、プロパティは、実際の添付プロパティとしても使用できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-498">The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</span></span> <span data-ttu-id="9a7e2-499">添付プロパティの使用は、のみで、フローの方向を設定するオブジェクトが関連、<xref:System.Windows.FrameworkElement>時に、レイアウトを実行する親要素がない自体が、<xref:System.Windows.FrameworkElement>にまだないより直接的に定義されていると`FlowDirection`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-499">The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property.</span></span> <span data-ttu-id="9a7e2-500">(フローの一部のドキュメント クラス<xref:System.Windows.Documents.Block>と<xref:System.Windows.Documents.Inline>が独自に定義`FlowDirection`、し、このプロパティは、フローの方向を設定もできます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-500">(Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction.</span></span> <span data-ttu-id="9a7e2-501">プロパティの値が読み取ら最終的なコンテンツ ホストで添付プロパティの使用を必要とせず。)</span><span class="sxs-lookup"><span data-stu-id="9a7e2-501">The property value is then read by the eventual content host without requiring attached property usage.)</span></span>  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-502">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-502">XAML Attribute Usage</span></span>  
 <span data-ttu-id="9a7e2-503">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span><span class="sxs-lookup"><span data-stu-id="9a7e2-503">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span></span>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="9a7e2-504">XAML テキストの使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-504">XAML Text Usage</span></span>  
 <span data-ttu-id="9a7e2-505">このプロパティはないクラスにも設定できます<xref:System.Windows.FrameworkElement>に続いて派生クラス、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]添付プロパティの使用法。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-505">This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attached property usage:</span></span>  
  
 <span data-ttu-id="9a7e2-506">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-506">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span></span>  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-507">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-507">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-508">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-508">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|<span data-ttu-id="9a7e2-509">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-509">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-510"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span><span class="sxs-lookup"><span data-stu-id="9a7e2-510"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span></span>|  
  
 <span data-ttu-id="9a7e2-511">このプロパティは、依存関係プロパティとが接続されているプロパティの両方「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-511">This property is both a dependency property and an attached property; see Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-512">
            <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-512">Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-513">この要素がキーボード フォーカスを受け取ったときに適用される外観、効果、またはその他のスタイル特性のカスタマイズを可能にするプロパティを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-513">Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-514">フォーカスに適用する目的のスタイル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-514">The desired style to apply on focus.</span>
          </span>
          <span data-ttu-id="9a7e2-515">依存関係プロパティ内で宣言された既定値は空の静的 <see cref="T:System.Windows.Style" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-515">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span>
          </span>
          <span data-ttu-id="9a7e2-516">ただし、実行時の有効値は、多くの場合、コントロールのテーマ サポートによって提供されたスタイルです (ただし、常にそうであるとは限りません)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-516">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-517">このプロパティは、視覚的な外観に影響を与えますが、状況は報告されません<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>メタデータにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-517">This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata.</span></span> <span data-ttu-id="9a7e2-518">これは、視覚的な外観の変更イベント ドリブンなすべての時刻に適用されるおよびしたがっては限らないメタデータに、visual またはレイアウトの情報です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-518">This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="9a7e2-519">概念的には、フォーカスがコントロールに適用される視覚的な動作は、コントロール間で一貫している必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-519">Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</span></span> <span data-ttu-id="9a7e2-520">一貫性を実現するための最もわかりやすい方法では、全体のテーマを作成している場合にのみフォーカス visual スタイルを変更します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-520">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="9a7e2-521">個々 のコントロールのスタイルとテーマの一部ではなくこのプロパティを設定キーボード フォーカスに関するユーザー エクスペリエンスに混乱をこれは、このプロパティの使用目的はありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-521">Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="9a7e2-522">コントロール固有の動作は意図的に一貫したテーマにする場合は、はるかに優れた方法を使用してトリガーのスタイルで入力状態の個々 のプロパティのように<xref:System.Windows.UIElement.IsFocused%2A>または<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>が既存のフォーカス visual スタイルに視覚的に干渉しないようにするためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-522">If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="9a7e2-523">目的で設計の詳細については<xref:System.Windows.FrameworkElement.FocusVisualStyle%2A>と代替プロパティの焦点は、「[コントロール、および FocusVisualStyle でフォーカスのスタイルは](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-523">For more information on the design intention of <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-524">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-524">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-525">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-525">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-526">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-526">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-527">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-527">*resourceExtension*</span></span>  
 <span data-ttu-id="9a7e2-528">次のいずれかの: または。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-528">One of the following: , or .</span></span> <span data-ttu-id="9a7e2-529">参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-529">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9a7e2-530">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-530">*styleResourceKey*</span></span>  
 <span data-ttu-id="9a7e2-531">要求されているスタイルを識別するキー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-531">The key that identifies the style being requested.</span></span> <span data-ttu-id="9a7e2-532">このキーは既存のリソースを<xref:System.Windows.ResourceDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-532">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a7e2-533">プロパティ要素構文は、技術的に可能ですが、推奨されません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-533">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="9a7e2-534">参照してください[インライン スタイルとテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-534">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="9a7e2-535">バインドの参照を使用して、または<xref:System.Windows.Data.Binding>も可能ですが、一般的ではないです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-535">A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-536">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-536">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-537">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-537">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="9a7e2-538">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-538">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-539">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-539">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-540">
            <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-540">Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-541">この <see cref="T:System.Windows.FrameworkElement" /> でカーソルを <see cref="P:System.Windows.FrameworkElement.Cursor" /> プロパティの宣言に従って描画するように[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] を強制するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-541">Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-542">この要素の上にあるときのカーソルの表示に <see cref="P:System.Windows.FrameworkElement.Cursor" /> の現在の設定を強制的に使用する場合は <see langword="true" /> (すべての子要素を含む)。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-542">
              <see langword="true" /> if cursor presentation while over this element is forced to use current <see cref="P:System.Windows.FrameworkElement.Cursor" /> settings for the cursor (including on all child elements); otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9a7e2-543">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-543">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-544">このプロパティを設定する場合`true`子要素で設定されているカーソル設定よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-544">If you set this property to `true` you will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="9a7e2-545">そのため、一般にアプリケーション[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]子要素は、カーソルを指定しようとしている場合は特に、ユーザーの混乱する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-545">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="9a7e2-546">設定<xref:System.Windows.FrameworkElement.ForceCursor%2A>の方がコントロールのサブクラス化または複合のシナリオに適しています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-546">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-547">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-547">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-548">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-548">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|<span data-ttu-id="9a7e2-549">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-549">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-550">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-550">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-551">次の例では、カーソルの値を強制します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-551">The following example forces the cursor value.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-552">
            <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-552">Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a7e2-553">バインディングを取得するターゲット <see cref="T:System.Windows.DependencyProperty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-553">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-554">指定したプロパティのバインディングを表す <see cref="T:System.Windows.Data.BindingExpression" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-554">Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-555">ターゲット プロパティにアクティブなバインディングがある場合は <see cref="T:System.Windows.Data.BindingExpression" />。それ以外の場合は <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-555">A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-556">戻り値の確認`null`プロパティがアクティブなバインディングを持つかどうかを決定する手法は、します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-556">Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.</span></span>  
  
 <span data-ttu-id="9a7e2-557">このメソッドは、実際には、利便性のためのラッパー、<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-557">This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9a7e2-558"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 現在のインスタンスを渡すと、`dp`パラメーターを<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-558"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="9a7e2-559">
            <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> を返す対象の要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-559">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-560">指定した <see cref="T:System.Windows.DependencyObject" /> の <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 添付プロパティの値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-560">Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-561">列挙体の値としての要求されたフローの方向。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-561">The requested flow direction, as a value of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-562">添付プロパティの構文をサポートするためには、このメソッドの主な目的、<xref:System.Windows.FrameworkElement.FlowDirection%2A>プロパティ、したがって、指定された要素を子に許可<xref:System.Windows.FrameworkElement>を親要素内での配置のフローの方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-562">The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="9a7e2-563">現在の値を取得する<xref:System.Windows.FrameworkElement>、ダイレクトを使用して[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]アクセサー<xref:System.Windows.FrameworkElement.FlowDirection%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-563">To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">
          <span data-ttu-id="9a7e2-564">ビジュアル プレゼンテーションを行う要素の部分のサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-564">The size of the part of the element that does visual presentation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-565">クリッピング マスクのジオメトリを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-565">Returns a geometry for a clipping mask.</span>
          </span>
          <span data-ttu-id="9a7e2-566">クリッピング マスクは、利用可能な表示領域より大きな要素をレイアウト システムが配置しようとすると適用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-566">The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-567">クリッピング ジオメトリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-567">The clipping geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-568">減算する余白、`layoutSlotSize`レイアウト システムの動作の一部として。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-568">Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.</span></span>  
  
 <span data-ttu-id="9a7e2-569">返される null 参照では、クリップが発生しないことを示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-569">A returned null reference indicates that no clipping will occur.</span></span> <span data-ttu-id="9a7e2-570">既定の実装を常に返します`null`とき<xref:System.Windows.UIElement.ClipToBounds%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-570">The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span> <span data-ttu-id="9a7e2-571">このメソッドは、<xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-571">This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a7e2-572"><xref:System.Windows.FrameworkElement>実装を使用して<xref:System.Windows.FrameworkElement.MaxHeight%2A>と<xref:System.Windows.FrameworkElement.MaxWidth%2A>計算にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-572">The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations.</span></span> <span data-ttu-id="9a7e2-573">いくつかのサブクラス<xref:System.Windows.FrameworkElement>再度このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-573">Several subclasses of <xref:System.Windows.FrameworkElement> override this method again.</span></span> <span data-ttu-id="9a7e2-574"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>、戻り値を常にオーバーライド`null`のため装飾多くの場合、意図的に通常の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-574"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds.</span></span> <span data-ttu-id="9a7e2-575"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> および<xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType>返す`null`場合<xref:System.Windows.UIElement.ClipToBounds%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-575"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-576">既定の実装を常に返します<see langword="null" />とき<see cref="P:System.Windows.UIElement.ClipToBounds" />は<see langword="false" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-576">The default implementation always returns <see langword="null" /> when <see cref="P:System.Windows.UIElement.ClipToBounds" /> is <see langword="false" />.</span>
            </span>
            <span data-ttu-id="9a7e2-577">上書きは通常、この動作を保持するためが必要場合は、リレーションシップと派生クラスと基底クラスではなく、レイアウト ロジックの目的に応じて、例外です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-577">Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">
          <span data-ttu-id="9a7e2-578">検索する子の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-578">Name of the child to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-579">インスタンス化された <see cref="T:System.Windows.Controls.ControlTemplate" /> のビジュアル ツリー内にある名前付き要素を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-579">Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-580">要求された要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-580">The requested element.</span>
          </span>
          <span data-ttu-id="9a7e2-581">要求した名前の要素が存在しない場合は <see langword="null" /> になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-581">May be <see langword="null" /> if no element of the requested name exists.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-582">テンプレートで[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]自己完結型の名前スコープがあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-582">Templates in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope.</span></span> <span data-ttu-id="9a7e2-583">テンプレートは、再利用し、各コントロールの複数のインスタンスがそのテンプレートをインスタンス化時にテンプレートで定義されている任意の名前の一意性が維持できないためにです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-583">This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</span></span> <span data-ttu-id="9a7e2-584">呼び出す、<xref:System.Windows.FrameworkElement.GetTemplateChild%2A>がインスタンス化した後、テンプレートからのオブジェクトへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-584">Call the <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> method to return references to objects that come from the template after it is instantiated.</span></span> <span data-ttu-id="9a7e2-585">使用することはできません、<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>ために、テンプレートから項目を検索するメソッド<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>はで動作しより一般的なスコープとの間の接続がない、<xref:System.Windows.Controls.ControlTemplate>は、クラス自体およびインスタンス化されたテンプレートが適用されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-585">You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.</span></span>  
  
 <span data-ttu-id="9a7e2-586"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> このメソッドと同じ機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-586"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> supplies the same function as this method.</span></span> <span data-ttu-id="9a7e2-587"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 代わりにパブリックが保護されている、正しい名前スコープの考慮事項要素およびその中の項目を名前付き検索内でテンプレートにアクセスできるようにするを使用しています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-587"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</span></span> <span data-ttu-id="9a7e2-588">使用して<xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType>する必要がある場合、親コントロールの外部要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-588">Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> when you need to get an element outside of its parent control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-589">ビジュアル親が存在しない場合に、この要素に対する代替の論理上の親を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-589">Returns an alternative logical parent for this element if there is no visual parent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-590">このメソッドの WPF フレームワーク レベルの実装が非ビジュアルの親接続を持つ場合は <see langword="null" /> 以外の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-590">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-591">このメソッドは、<xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-591">This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a7e2-592">既定値<xref:System.Windows.FrameworkElement>実装、予想される 1 つ visual の親を返しますの結果の取得と同じである、<xref:System.Windows.FrameworkElement.Parent%2A>値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-592">The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value.</span></span> <span data-ttu-id="9a7e2-593">派生クラスの実装では、別の親リレーションシップを返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-593">Derived class implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9a7e2-594">コレクション内の要求された子要素の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-594">The zero-based index of the requested child element in the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-595">
            <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /> をオーバーライドして、子要素のコレクションから指定したインデックスの子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-595">Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-596">要求された子要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-596">The requested child element.</span>
          </span>
          <span data-ttu-id="9a7e2-597">
            <see langword="null" /> を返すことはできません。指定したインデックスが範囲外の場合は例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-597">This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-598"><xref:System.Windows.FrameworkElement>実装では、唯一の有効なインデックスは 0 です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-598">In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero.</span></span> <span data-ttu-id="9a7e2-599">コンテンツ モデル<xref:System.Windows.FrameworkElement.GetVisualChild%2A>0 個または 1 つの子要素コレクションではなくをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-599">The content model for <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supports either zero or one child elements, not a collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-600">次の例は、カスタムの装飾がで宣言されている値を使用する方法を示しています、<xref:System.Windows.Media.VisualCollection>複数のビジュアルの子を保持します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-600">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children.</span></span> <span data-ttu-id="9a7e2-601">これらの値がのオーバーライドから報告された<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>と<xref:System.Windows.FrameworkElement.GetVisualChild%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-601">These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-602">この実装は、わかりやすいビジュアル子要素のコレクションを保持しない要素に対してのみです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-602">This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</span>
            </span>
            <span data-ttu-id="9a7e2-603">このようなコレクションがいずれかの要素は、このメソッドをオーバーライドし、その要素でサポートされている子要素のコレクションの同等のインデックスにインデックスをマップする必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-603">Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</span>
            </span>
            <span data-ttu-id="9a7e2-604">0 の範囲内でインデックス<see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" />(マイナス 1) 有効な要素を返す必要があります他のインデックスが範囲外の例外をスローする必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-604">An index in the range from zero to <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (minus one) should return a valid element; any other index should throw an out-of-range exception.</span>
            </span>
            <span data-ttu-id="9a7e2-605">子コレクションをサポートし、上書きを要素型の例は<see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />を 1 つ以上の使用可能な子を返しますが<see cref="T:System.Windows.Controls.Panel" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-605">An example of an element type that does support a child collection and overrides <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> to return more than one possible child is <see cref="T:System.Windows.Controls.Panel" />.</span>
            </span>
            <span data-ttu-id="9a7e2-606">既定の実装で<see cref="T:System.Windows.FrameworkElement" />visual の子を 1 つのみを開始します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-606">The default implementation in <see cref="T:System.Windows.FrameworkElement" /> presumes only one visual child.</span>
            </span>
            <span data-ttu-id="9a7e2-607">値を渡す<paramref name="index" />以外で例外をスローするの 0 個の原因です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-607">Any value passed for <paramref name="index" /> other than zero causes an exception to be thrown.</span>
            </span>
            <span data-ttu-id="9a7e2-608">デコレーター、装飾、特殊なレンダリングでは、要素などの一般的な要素がいくつかのオーバーライド、 <see cref="T:System.Windows.FrameworkElement" /> (中級者向けの基本クラスから実装) の実装です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-608">Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <see cref="T:System.Windows.FrameworkElement" /> implementation (of the implementation from intermediate base classes).</span>
            </span>
            <span data-ttu-id="9a7e2-609">コレクションを使用する他のユーザーが、一部の実装はまだ visual の子を 1 つを適用します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-609">Some implementations still enforce one visual child whereas others allow a collection.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-610">要素の推奨される高さを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-610">Gets or sets the suggested height of the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-611">要素の高さ ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-611">The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-612">既定値は <see cref="F:System.Double.NaN" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-612">The default value is <see cref="F:System.Double.NaN" />.</span>
          </span>
          <span data-ttu-id="9a7e2-613">この値は 0.0 以上にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-613">This value must be equal to or greater than 0.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-614"><xref:System.Windows.FrameworkElement.Height%2A> 3 つの書き込み可能なプロパティの 1 つ<xref:System.Windows.FrameworkElement>高さ情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-614"><xref:System.Windows.FrameworkElement.Height%2A> is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="9a7e2-615">その他の 2 つは<xref:System.Windows.FrameworkElement.MinHeight%2A>と<xref:System.Windows.FrameworkElement.MaxHeight%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-615">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="9a7e2-616">間の競合がある場合これらの値、実際の高さを決定するためのアプリケーションの順序は最初<xref:System.Windows.FrameworkElement.MinHeight%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxHeight%2A>、最後に、境界内にある場合<xref:System.Windows.FrameworkElement.Height%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-616">If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-617">この要素がその他の要素内の子要素の場合は、値にこのプロパティを設定、本当にのみ推奨される値です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-617">If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</span></span> <span data-ttu-id="9a7e2-618">レイアウト システムだけでなく、親要素の特定のレイアウト ロジックが値として使用 nonbinding 入力レイアウトの処理中にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-618">The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</span></span> <span data-ttu-id="9a7e2-619">実際には、<xref:System.Windows.FrameworkElement>は、ほとんどの場合; 他の子要素を設定する場合でも、<xref:System.Windows.FrameworkElement.Height%2A>で<xref:System.Windows.Window>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-619">In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the <xref:System.Windows.FrameworkElement.Height%2A> on <xref:System.Windows.Window>.</span></span> <span data-ttu-id="9a7e2-620">(の<xref:System.Windows.Window>、基になるアプリケーション モデルは、Hwnd を作成する基本的なレンダリングの前提条件を確立するときに、値を使用するアプリケーションをホストします)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-620">(For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</span></span>  
  
 <span data-ttu-id="9a7e2-621">さらに許容される<xref:System.Double>値、このプロパティにすることができますも<xref:System.Double.NaN?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-621">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a7e2-622">これは、コードの自動サイズ変更動作を指定する方法です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-622">This is how you specify auto sizing behavior in code.</span></span> <span data-ttu-id="9a7e2-623">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-623">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="9a7e2-624">自動サイズ変更動作は、要素が利用できる高さいっぱいになることを意味します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-624">Auto sizing behavior implies that the element will fill the height available to it.</span></span> <span data-ttu-id="9a7e2-625">ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のテーマのスタイルを使用して既定値を頻繁に指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-625">Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="9a7e2-626">このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-626">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="9a7e2-627">これに対しての値、<xref:System.Windows.FrameworkElement.ActualHeight%2A>異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-627">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary.</span></span> <span data-ttu-id="9a7e2-628">これは、原因が考えられますか静的にレイアウトが何らかの理由により推奨されるサイズを拒否または一時的にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-628">This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</span></span> <span data-ttu-id="9a7e2-629">プロパティ システムの一連の基準とした、レイアウト システム自体が非同期的にやり取り<xref:System.Windows.FrameworkElement.Height%2A>処理されない可能性がある特定のプロパティの変更をまだサイジングとします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-629">The layout system itself works asynchronously relative to the property system's set of <xref:System.Windows.FrameworkElement.Height%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="9a7e2-630">値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-630">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a7e2-631">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-631">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
 <span data-ttu-id="9a7e2-632">だけでなく、検証チェックは、非決定的の上限値にバインドされている<xref:System.Windows.FrameworkElement.Height%2A>レイアウト システムにより強制適用されている (これは非常に大きな数よりも大きい<xref:System.Single.MaxValue?displayProperty=nameWithType>がよりも小さい<xref:System.Double.MaxValue?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-632">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Height%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="9a7e2-633">この上限値を超えた場合は、要素は表示されませんし、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-633">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="9a7e2-634">設定しない<xref:System.Windows.FrameworkElement.Height%2A>の表示可能な最大サイズは、この非決定的の上限を超える可能性がありますよりも大幅に大きい値にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-634">Do not set <xref:System.Windows.FrameworkElement.Height%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-635">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-635">XAML Attribute Usage</span></span>  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-636">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-636">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-637">*double*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-637">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a7e2-638">文字列表現を<xref:System.Double>0.0 以上の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-638">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a7e2-639">上限については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-639">See Remarks for upper bound information.</span></span> <span data-ttu-id="9a7e2-640">この値として解釈されます、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-640">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a7e2-641">明示的に、文字列では、小数点を含める必要がありますされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-641">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a7e2-642">値のインスタンス`1`は許容されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-642">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a7e2-643">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-643">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a7e2-644">A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-644">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a7e2-645">`px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a7e2-645">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a7e2-646">`in` インチです。1 96px を = =</span><span class="sxs-lookup"><span data-stu-id="9a7e2-646">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a7e2-647">`cm` センチメートル; は、します。1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-647">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a7e2-648">`pt` ポイントです。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-648">`pt` is points; 1pt==(96/72) px</span></span>  
  
 <span data-ttu-id="9a7e2-649">**Auto**</span><span class="sxs-lookup"><span data-stu-id="9a7e2-649">**Auto**</span></span>  
 <span data-ttu-id="9a7e2-650">自動サイズ変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-650">Enables autosizing behavior.</span></span> <span data-ttu-id="9a7e2-651">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-651">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-652">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-652">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-653">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-653">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|<span data-ttu-id="9a7e2-654">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-654">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-655">
            <see cref="P:System.Windows.FrameworkElement.Height" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-655">Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-656">この要素が、Panel またはアイテム コントロールのような親要素内に構成されるときに適用される水平方向の配置特性を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-656">Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-657">列挙体の値としての水平方向の配置設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-657">A horizontal alignment setting, as a value of the enumeration.</span>
          </span>
          <span data-ttu-id="9a7e2-658">既定値は、<see cref="F:System.Windows.HorizontalAlignment.Stretch" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-658">The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-659">ときに<xref:System.Windows.FrameworkElement.Height%2A>と<xref:System.Windows.FrameworkElement.Width%2A>要素にプロパティが明示的に設定されている場合、これらの測定値はレイアウト時に高い優先、実行設定の標準的な効果が取り消されます<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>に<xref:System.Windows.HorizontalAlignment.Stretch>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-659">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> to <xref:System.Windows.HorizontalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="9a7e2-660"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-660"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="9a7e2-661">この特定の依存関係プロパティでは、特にコントロールのサブクラス化された要素で設定が異なります見かけ上の「既定」値がよくあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-661">This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</span></span> <span data-ttu-id="9a7e2-662">これは、2 つの方法のいずれかで一般的に発生します特定のサブクラスでは、にはその既定値を設定するためのさまざまなメタデータと、依存関係プロパティが再登録。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-662">This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="9a7e2-663">たとえば、明確な「既定」の<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>の<xref:System.Windows.Controls.Label>コントロールになります<xref:System.Windows.HorizontalAlignment.Left>場合でも、<xref:System.Windows.Controls.Label>継承<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>から直接<xref:System.Windows.FrameworkElement>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-663">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment.Left>, even though <xref:System.Windows.Controls.Label> inherits <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a7e2-664">これは、既定のスタイル内でその値がリセットされたため<xref:System.Windows.Controls.Label>スタイルのコントロール テンプレート内で。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-664">This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.</span></span>  
  
 <span data-ttu-id="9a7e2-665"><xref:System.Windows.Controls.Canvas> 使用しません<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>ためのレイアウトを作成するときに<xref:System.Windows.Controls.Canvas>絶対位置に基づきます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-665"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="9a7e2-666">によって継承と<xref:System.Windows.Controls.Label>派生クラス、または<xref:System.Windows.Controls.Label>にするには、この依存関係プロパティの既定値を再定義<xref:System.Windows.HorizontalAlignment.Left>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-666">When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment.Left>.</span></span>  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-667">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-667">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-668">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-668">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|<span data-ttu-id="9a7e2-669">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-669">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-670">
            <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-670">Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-671">プロパティ値の継承、リソース キーのルックアップ、および RelativeSource FindAncestor 検索のスコープの制限を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-671">Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-672">列挙体の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-672">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="9a7e2-673">既定値は、<see cref="F:System.Windows.InheritanceBehavior.Default" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-673">The default is <see cref="F:System.Windows.InheritanceBehavior.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-674">要素内の特定境界ツリー セット<xref:System.Windows.FrameworkElement.InheritanceBehavior%2A>を意図的に、アプリケーションのリソースを確認したり、さらに、現在の要素またはそのいずれかのクエリから RelativeSource FindAncestor 参照を防ぐためには、force リソースの検索に、継承動作のスコープを制限します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-674">Certain boundaries in the element tree set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</span></span> <span data-ttu-id="9a7e2-675">RelativeSource FindAncestor 参照の場合は、バインディングを使用して、<xref:System.Windows.Data.RelativeSource>を持つその<xref:System.Windows.Data.RelativeSource.Mode%2A>プロパティに設定、<xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-675">RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> value.</span></span>  
  
 <span data-ttu-id="9a7e2-676">派生クラスをこのプロパティを設定する場合は、する必要がありますこれを行う、静的コンス トラクター内またはその他の初期化ルーチンです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-676">If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-677">この <see cref="T:System.Windows.FrameworkElement" /> が初期化されるときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-677">Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized.</span>
          </span>
          <span data-ttu-id="9a7e2-678">このイベントと同時に、<see cref="P:System.Windows.FrameworkElement.IsInitialized" /> プロパティの値が <see langword="false" /> (未定義) から <see langword="true" /> に変更されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-678">This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-679">このイベントになります発生するたびに、<xref:System.Windows.FrameworkElement.EndInit%2A>または<xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-679">This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called.</span></span> <span data-ttu-id="9a7e2-680">アプリケーション コードからまたはいずれかのメソッドの呼び出しが同梱されている可能性があります、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]プロセッサの動作時に、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]ページを処理します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-680">Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] page is processed.</span></span>  
  
 <span data-ttu-id="9a7e2-681">処理するかどうかを選択する<xref:System.Windows.FrameworkElement.Loaded>または<xref:System.Windows.FrameworkElement.Initialized>要件によって異なります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-681">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="9a7e2-682">要素のプロパティを読み取る必要がない場合のプロパティをリセットして、レイアウト情報は必要ありません<xref:System.Windows.FrameworkElement.Initialized>の対象となるイベントの向上があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-682">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="9a7e2-683">使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合<xref:System.Windows.FrameworkElement.Loaded>の対象となるイベントの向上があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-683">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="9a7e2-684">必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-684">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="9a7e2-685">(を確認する必要があります、<xref:System.Windows.FrameworkPropertyMetadata>プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-685">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="9a7e2-686">オブジェクトのイベントのシーケンスに関する詳細については、<xref:System.Windows.FrameworkElement>もいくつかの関連アプリケーションと要素のクラスを参照してください、[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-686">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-687">この <see cref="T:System.Windows.FrameworkElement" /> によって使用される入力のコンテキストを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-687">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-688">代替の入力メソッドからの入力を解釈する方法を変更する入力スコープ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-688">The input scope, which modifies how input from alternative input methods is interpreted.</span>
          </span>
          <span data-ttu-id="9a7e2-689">既定値は <see langword="null" /> です (既定のコマンド処理を行います)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-689">The default value is <see langword="null" /> (which results in a default handling of commands).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-690">この依存関係プロパティでは、プロパティの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-690">This dependency property inherits property values.</span></span> <span data-ttu-id="9a7e2-691">その他の値を使用せずに子要素がある場合<xref:System.Windows.FrameworkElement.InputScope%2A>プロパティ システムは値を設定し、ローカルの値や、スタイルを介して確立、<xref:System.Windows.FrameworkElement.InputScope%2A>割り当てられているこの値を持つ最も近い先祖の要素の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-691">If there are child elements without other values for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 <span data-ttu-id="9a7e2-692">ただし、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文の使用状況が表示されているし、は構文的に許可されているのこのプロパティを設定[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-692">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-693">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-693">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-694">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-694">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|<span data-ttu-id="9a7e2-695">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-695">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-696">
            <see cref="P:System.Windows.FrameworkElement.InputScope" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-696">Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-697">この要素が初期化されているかどうかを示す値を取得します。要素の初期化は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサによる処理の間に行われる場合と、<see cref="M:System.Windows.FrameworkElement.EndInit" /> メソッドを明示的に呼び出すことによって行われる場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-697">Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-698">上で挙げた [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサの処理またはメソッド呼び出しを通じて要素が初期化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-698">
              <see langword="true" /> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-699">このプロパティがありますも`true`新しい親要素を持つし、そのために再読み込みされたことになるように、この要素が論理ツリー内で移動されたかどうか。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-699">This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 <span data-ttu-id="9a7e2-700">このプロパティにも使用している場合に便利ですが<xref:System.Windows.FrameworkElement.BeginInit%2A>と<xref:System.Windows.FrameworkElement.EndInit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-700">This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>.</span></span> <span data-ttu-id="9a7e2-701">によって読み込まれる論理ツリー内の要素、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロセッサを初期化する確実に実行されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-701">Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized.</span></span> <span data-ttu-id="9a7e2-702">論理ツリーに存在しない要素が初期化されるときに<xref:System.Windows.FrameworkElement.EndInit%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-702">Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called.</span></span> <span data-ttu-id="9a7e2-703">特定の処理がない場合に<xref:System.Windows.FrameworkElement.BeginInit%2A>と<xref:System.Windows.FrameworkElement.EndInit%2A>、コンス トラクターが初期化された結果を返すとすぐにこれは行われます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-703">In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-704">この要素が表示のために読み込まれているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-704">Gets a value that indicates whether this element has been loaded for presentation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-705">現在の要素が要素ツリーにアタッチされている場合は <see langword="true" />。読み込まれた要素ツリーに要素がアタッチされていない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-705">
              <see langword="true" /> if the current element is attached to an element tree; <see langword="false" /> if the element has never been attached to a loaded element tree.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-706">新しく構築されたから<xref:System.Windows.FrameworkElement>、このプロパティは、まず`false`、開いたまま`true`に設定されている後`true`コードによって接続されている論理ツリーから要素が、後で削除された場合でも、です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-706">From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code.</span></span> <span data-ttu-id="9a7e2-707">`true` 状態は、要素が、プレゼンテーション エンジンに読み込まれるときに、一般的なプレゼンテーション ロジックによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-707">`true` state is set by the general presentation logic when elements are loaded into the presentation engine.</span></span>  
  
 <span data-ttu-id="9a7e2-708">通常、読み込まれた要素は、レンダリングされた、すべてではなく<xref:System.Windows.FrameworkElement>派生クラスは、プレゼンテーション、およびなどの他のプロパティがある<xref:System.Windows.UIElement.Visibility%2A>プレゼンテーションに影響を与えることができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-708">Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-709">次の例は、2 つのハンドラーを実装します。 いずれかの処理が、<xref:System.Windows.FrameworkElement.Loaded>イベントの重大度であるため、ページのルート要素が読み込まれることが確実であるため、ルート要素のイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-709">The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</span></span> <span data-ttu-id="9a7e2-710">ユーザー コントロールを呼び出し、その他のハンドラーをフック<xref:System.Windows.FrameworkElement.IsLoaded%2A>されるようにするルート要素には、読み込まれた完全にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-710">The other handler is hooked to a user control, and calls <xref:System.Windows.FrameworkElement.IsLoaded%2A> to assure that the root element is loaded completely.</span></span> <span data-ttu-id="9a7e2-711">両方のハンドラーは、子要素に新しいデータを設定する (非表示) 同じ関数を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-711">Both handlers call the same function (not shown) that will populate child elements with fresh data.</span></span>  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-712">要素に適用されるローカライズ/グローバリゼーション言語情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-712">Gets or sets localization/globalization language information that applies to an element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-713">この要素の言語情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-713">The language information for this element.</span>
          </span>
          <span data-ttu-id="9a7e2-714">既定値は、<see cref="T:System.Windows.Markup.XmlLanguage" /> の値が文字列 "en-US" に設定された <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-714">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-715">文字列の形式では、RFC 3066 標準に従います。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-715">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="9a7e2-716">たとえば、米国"EN-US"は英語です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-716">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="9a7e2-717">値と形式の詳細については、次を参照してください。<xref:System.Windows.Markup.XmlLanguage>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-717">For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.</span></span>  
  
 <span data-ttu-id="9a7e2-718">この依存関係プロパティでは、プロパティの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-718">This dependency property inherits property values.</span></span> <span data-ttu-id="9a7e2-719">その他の値を使用せずに子要素がある場合<xref:System.Windows.FrameworkElement.Language%2A>ローカル値またはスタイルを介して確立されると、プロパティのシステム値が設定されますを<xref:System.Windows.FrameworkElement.Language%2A>割り当てられているこの値を持つ最も近い先祖の要素の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-719">If there are child elements without other values for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]<span data-ttu-id="9a7e2-720"> 一般的な意味を定義、`xml:lang`属性。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-720"> defines the general meaning of the `xml:lang` attribute.</span></span> <span data-ttu-id="9a7e2-721"><xref:System.Windows.FrameworkElement.Language%2A> 依存関係プロパティとして、この属性の意味を本質的に公開します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-721"><xref:System.Windows.FrameworkElement.Language%2A> essentially exposes the meaning of this attribute as a dependency property.</span></span> <span data-ttu-id="9a7e2-722"><xref:System.Windows.FrameworkElement.Language%2A> プログラムで調整されることができます、匹敵する方法でプロパティ システムの値の継承に参加できる方法、`xml:lang`子要素のスコープ内に属性が継承される[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-722"><xref:System.Windows.FrameworkElement.Language%2A> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].</span></span> <span data-ttu-id="9a7e2-723">設定した場合<xref:System.Windows.FrameworkElement.Language%2A>、その値が、`xml:lang`し、以前の値を上書きします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-723">If you set <xref:System.Windows.FrameworkElement.Language%2A>, that value becomes the `xml:lang` and overwrites any previous value.</span></span> <span data-ttu-id="9a7e2-724">詳細については、次を参照してください。 [xml:lang XAML での処理](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-724">For more information, see [xml:lang Handling in XAML](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-725">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-725">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-726">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-726">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|<span data-ttu-id="9a7e2-727">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-727">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-728">
            <see cref="P:System.Windows.FrameworkElement.Language" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-728">Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-729">レイアウトの実行時にこの要素に適用するグラフィック変換を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-729">Gets or sets a graphics transformation that should apply to this element when  layout is performed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-730">この要素で使用する変換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-730">The transform this element should use.</span>
          </span>
          <span data-ttu-id="9a7e2-731">既定値は、<see cref="P:System.Windows.Media.Transform.Identity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-731">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-732">対照的に<xref:System.Windows.UIElement.RenderTransform%2A>、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>レイアウトの結果に影響されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-732">In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> will affect results of layout.</span></span>  
  
 <span data-ttu-id="9a7e2-733">トランス フォームを設定するには、スケールおよび回転の強力な機能が備わっています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-733">Setting a transform provides powerful capabilities of scaling and rotating.</span></span> <span data-ttu-id="9a7e2-734">ただし、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>無視<xref:System.Windows.Media.TranslateTransform>操作します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-734">However, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignores <xref:System.Windows.Media.TranslateTransform> operations.</span></span> <span data-ttu-id="9a7e2-735">これは子要素をレイアウト システムの動作、<xref:System.Windows.FrameworkElement>任意のオフセットがレイアウトにスケールまたは回転した要素の位置および親要素の座標システムへの自動修正します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-735">This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</span></span>  
  
 <span data-ttu-id="9a7e2-736"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> レイアウト システムで完全パスを必要としないシナリオで起動する場合は、不十分なアプリケーションのパフォーマンスに可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-736"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</span></span> <span data-ttu-id="9a7e2-737">適用すると、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>を<xref:System.Windows.Controls.Panel.Children%2A>のコレクション、<xref:System.Windows.Controls.Panel>レイアウト システムによって新しいパスがトリガー、および画面に表示されるすべて remeasured して再配置するオブジェクトを強制的に実行します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-737">When you apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</span></span> <span data-ttu-id="9a7e2-738">完全なアプリケーションを更新する場合は[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]、この機能は必要なものだけする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-738">If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need.</span></span> <span data-ttu-id="9a7e2-739">ただし、完全な配置パスを使用する必要はありません、使用、<xref:System.Windows.UIElement.RenderTransform%2A>プロパティでは、レイアウト システムを呼び出しませんであるため、通常このシナリオの方が適しています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-739">However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</span></span>  
  
 <span data-ttu-id="9a7e2-740">シナリオ例を<xref:System.Windows.FrameworkElement.LayoutTransform%2A>が役に立つを含める: フォーカス、編集の動作などを提供することで (拡大) 要素を拡大/縮小から水平方向の垂直方向に、またはその逆の場合は、メニュー コンポーネントなどの要素を回転します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-740">Example scenarios where <xref:System.Windows.FrameworkElement.LayoutTransform%2A> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</span></span>  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-741">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-741">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-742">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-742">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|<span data-ttu-id="9a7e2-743">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-743">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-744">次の例に適用する方法を示しています、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>要素にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-744">The following example shows how to apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to an element.</span></span> <span data-ttu-id="9a7e2-745">インスタンスを作成する例では、<xref:System.Windows.Controls.Button>親内でホストおよび<xref:System.Windows.Controls.Grid>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-745">The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>.</span></span> <span data-ttu-id="9a7e2-746">また、使用、<xref:System.Windows.FrameworkElement.LayoutTransform%2A>を適用するプロパティ、<xref:System.Windows.Media.RotateTransform>を<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-746">It also uses the <xref:System.Windows.FrameworkElement.LayoutTransform%2A> property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-747">
            <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-747">Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-748">要素のレイアウトやレンダリングが完了し、操作を受け入れる準備が整ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-748">Occurs when the element is laid out, rendered, and ready for interaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-749"><xref:System.Windows.FrameworkElement.Loaded> 通常最後のイベント、要素の初期化のシーケンスで発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-749"><xref:System.Windows.FrameworkElement.Loaded> is usually the last event raised in an element initialization sequence.</span></span> <span data-ttu-id="9a7e2-750">これが常に発生した後<xref:System.Windows.FrameworkElement.Initialized>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-750">It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>.</span></span> <span data-ttu-id="9a7e2-751">処理するかどうかを選択する<xref:System.Windows.FrameworkElement.Loaded>または<xref:System.Windows.FrameworkElement.Initialized>要件によって異なります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-751">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="9a7e2-752">要素のプロパティを読み取る必要がない場合のプロパティをリセットして、レイアウト情報は必要ありません<xref:System.Windows.FrameworkElement.Initialized>の対象となるイベントの向上があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-752">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="9a7e2-753">使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合<xref:System.Windows.FrameworkElement.Loaded>の対象となるイベントの向上があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-753">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="9a7e2-754">必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-754">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="9a7e2-755">(を確認する必要があります、<xref:System.Windows.FrameworkPropertyMetadata>プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-755">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="9a7e2-756">オブジェクトのイベントのシーケンスに関する詳細については、<xref:System.Windows.FrameworkElement>もいくつかの関連アプリケーションと要素のクラスを参照してください、[オブジェクトの有効期間イベント](~/docs/framework/wpf/advanced/object-lifetime-events.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-756">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 <span data-ttu-id="9a7e2-757">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-757">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9a7e2-758">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイルでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-758">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9a7e2-759"><xref:System.Windows.FrameworkElement.Loaded> および<xref:System.Windows.FrameworkElement.Unloaded>両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-759"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="9a7e2-760">テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-760">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="9a7e2-761">したがって<xref:System.Windows.FrameworkElement.Loaded>のみページが最初に読み込まれるときに、ページへの移動を発生すると見なされますことはできません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-761">Therefore <xref:System.Windows.FrameworkElement.Loaded> cannot be assumed to occur only when a page is first loaded through navigation to the page.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-762">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-762">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-763">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-763">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|<span data-ttu-id="9a7e2-764">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-764">Routing strategy</span></span>|<span data-ttu-id="9a7e2-765">直接</span><span class="sxs-lookup"><span data-stu-id="9a7e2-765">Direct</span></span>|  
|<span data-ttu-id="9a7e2-766">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-766">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-767">
            <see cref="E:System.Windows.FrameworkElement.Loaded" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-767">Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-768">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-768">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-769">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-769">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-770">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-770">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-771">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-771">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-772">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-772">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-773">この要素の論理上の子要素に対する列挙子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-773">Gets an enumerator for logical child elements of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-774">この要素の論理上の子要素に対する列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-774">An enumerator for logical child elements of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-775"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> 使用すると、子要素を反復処理できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-775"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> allows you to iterate over child elements.</span></span> <span data-ttu-id="9a7e2-776">これは、可能性があります、定義済みの専用のコレクションはありませんが、まだ特に複数の子要素が含まれている要素に便利です<xref:System.Windows.FrameworkContentElement>子要素です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-776">This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.</span></span>  
  
 <span data-ttu-id="9a7e2-777">使用する方法の詳細についての<xref:System.Windows.FrameworkElement.LogicalChildren%2A>と<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>を参照してください[wpf ツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-777">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-778">要素の外側の余白を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-778">Gets or sets the outer margin of an element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-779">要素の余白の値を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-779">Provides margin values for the element.</span>
          </span>
          <span data-ttu-id="9a7e2-780">既定値は、すべてのプロパティが 0 (ゼロ) の <see cref="T:System.Windows.Thickness" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-780">The default value is a <see cref="T:System.Windows.Thickness" /> with all properties equal to 0 (zero).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-781">余白は、この要素とレイアウトを作成するときに、隣接するその他の要素間の空白、[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-781">The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="9a7e2-782">共有要素は、ピア要素 (その他のコレクション内の要素、共通の親コントロールの) などがあります。 または、この要素の親の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-782">Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</span></span>  
  
 <span data-ttu-id="9a7e2-783"><xref:System.Windows.FrameworkElement.Margin%2A> として設定されている、<xref:System.Windows.Thickness>構造数値としてではなく、余白を非対称的設定できるようにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-783"><xref:System.Windows.FrameworkElement.Margin%2A> is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically.</span></span> <span data-ttu-id="9a7e2-784"><xref:System.Windows.Thickness>構造体自体には文字列型の変換がサポートされているため、非対称を指定できます<xref:System.Windows.FrameworkElement.Margin%2A>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性構文もします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-784">The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute syntax also.</span></span>  
  
 <span data-ttu-id="9a7e2-785">0 以外の余白は要素のレイアウトの<xref:System.Windows.FrameworkElement.ActualWidth%2A>と<xref:System.Windows.FrameworkElement.ActualHeight%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-785">A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-786">余白は、レイアウトの兄弟要素の追加たとえば、2 つの隣接する要素が隣接する端に 30 の余白がどちらも設定は、60 の単位の間にスペースがあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-786">Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</span></span>  
  
 <span data-ttu-id="9a7e2-787">余白の設定を持つ要素を指定したサイズ制約通常しない<xref:System.Windows.FrameworkElement.Margin%2A>割り当てられた四角形領域が十分な大きさの余白と要素のコンテンツ領域にかどうかはありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-787">Elements that have margins set will not typically constrain the size of the specified <xref:System.Windows.FrameworkElement.Margin%2A> if the allotted rectangle space is not large enough for the margin plus the element content area.</span></span> <span data-ttu-id="9a7e2-788">要素のコンテンツ領域は、代わりにレイアウトの計算時に制限されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-788">The element content area will be constrained instead when layout is calculated.</span></span> <span data-ttu-id="9a7e2-789">コンテンツが既に 0 に制約されていますもは余白が制限される場合だけです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-789">The only case where margins would be constrained also is if the content is already constrained all the way to zero.</span></span>  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-790">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-790">XAML Attribute Usage</span></span>  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-791">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-791">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-792">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-792">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-793">*左、上、右、下*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-793">*left, top, right, bottom*</span></span>  
 <span data-ttu-id="9a7e2-794">0 との間の数値と<xref:System.Double.PositiveInfinity>の 4 つの可能なディメンション プロパティを指定する、<xref:System.Windows.Thickness>構造体。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-794">Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.</span></span>  
  
 <span data-ttu-id="9a7e2-795">属性の使用方法も指定すると、対称的、論理的な順序で適用される省略形の値を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-795">The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</span></span> <span data-ttu-id="9a7e2-796">たとえば、`Margin="20"`という意味に解釈されます、<xref:System.Windows.Thickness>すべてのプロパティが 20 に設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-796">For instance, `Margin="20"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20.</span></span> <span data-ttu-id="9a7e2-797">`Margin="20,50"` という意味に解釈されます、<xref:System.Windows.Thickness>で<xref:System.Windows.Thickness.Left%2A>と<xref:System.Windows.Thickness.Right%2A>を 20 に設定し、<xref:System.Windows.Thickness.Top%2A>と<xref:System.Windows.Thickness.Bottom%2A>は 50 に設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-797">`Margin="20,50"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.</span></span>  
  
 <span data-ttu-id="9a7e2-798">既定の単位、<xref:System.Windows.Thickness>メジャーが[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-798">The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)].</span></span> <span data-ttu-id="9a7e2-799">単位の種類の文字列を追加することによって、他の単位を指定することも`cm`、 `in`、または`pt`任意の測定値にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-799">You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.</span></span>  
  
 <span data-ttu-id="9a7e2-800">数値として提供される[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性が必要な 10 進数のポイントを指定しない (0 が許容される、0.0 として指定する必要はありません)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-800">Number values provided as [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</span></span> <span data-ttu-id="9a7e2-801">詳細については[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]使用状況を参照してください<xref:System.Windows.Thickness>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-801">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
 <span data-ttu-id="9a7e2-802">*thicknessReference*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-802">*thicknessReference*</span></span>  
 <span data-ttu-id="9a7e2-803">既存のオブジェクト参照<xref:System.Windows.Thickness>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-803">An object reference to an existing <xref:System.Windows.Thickness>.</span></span> <span data-ttu-id="9a7e2-804">可能性があります、 `}`、または`}`参照します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-804">This might be a `}`, a , or `}` reference.</span></span> <span data-ttu-id="9a7e2-805">詳細については[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]使用状況を参照してください<xref:System.Windows.Thickness>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-805">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-806">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-806">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-807">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-807">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|<span data-ttu-id="9a7e2-808">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-808">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-809">
            <see cref="P:System.Windows.FrameworkElement.Margin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-809">Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-810">要素の高さの最大値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-810">Gets or sets the maximum height constraint of the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-811">要素の最大の高さ ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-811">The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-812">既定値は <see cref="F:System.Double.PositiveInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-812">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span>
          </span>
          <span data-ttu-id="9a7e2-813">この値は、0.0 以上の任意の値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-813">This value can be any value equal to or greater than 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-814">
            <see cref="F:System.Double.PositiveInfinity" /> も有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-814">
              <see cref="F:System.Double.PositiveInfinity" /> is also valid.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-815">これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>高さ情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-815">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="9a7e2-816">その他の 2 つは<xref:System.Windows.FrameworkElement.MinHeight%2A>と<xref:System.Windows.FrameworkElement.Height%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-816">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  <span data-ttu-id="9a7e2-817">実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinHeight%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxHeight%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Height%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-817">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-818">値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-818">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a7e2-819">無効な値を設定しようとする場合、実行時に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-819">If you attempt to set an invalid value a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-820">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-820">XAML Attribute Usage</span></span>  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-821">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-821">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-822">*double*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-822">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a7e2-823">文字列表現を<xref:System.Double>0.0 以上の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-823">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a7e2-824">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-824">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a7e2-825">明示的に、文字列では、小数点を含める必要がありますされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-825">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a7e2-826">値のインスタンス`1`は許容されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-826">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a7e2-827">同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて[X:static マークアップ拡張機能](~/docs/framework/xaml-services/x-static-markup-extension.md)かどうかは、値を明示的に設定する必要があります。<xref:System.Double.PositiveInfinity>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-827">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="9a7e2-828">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-828">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a7e2-829">A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-829">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a7e2-830">`px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a7e2-830">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a7e2-831">`in` インチです。1 96px を = =</span><span class="sxs-lookup"><span data-stu-id="9a7e2-831">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a7e2-832">`cm` センチメートル; は、します。1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-832">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a7e2-833">`pt` ポイントです。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-833">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-834">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-834">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-835">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-835">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|<span data-ttu-id="9a7e2-836">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-836">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-837">
            <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-837">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-838">要素の幅の最大値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-838">Gets or sets the maximum width constraint of the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-839">要素の最大の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-839">The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-840">既定値は <see cref="F:System.Double.PositiveInfinity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-840">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span>
          </span>
          <span data-ttu-id="9a7e2-841">この値は、0.0 以上の任意の値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-841">This value can be any value equal to or greater than 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-842">
            <see cref="F:System.Double.PositiveInfinity" /> も有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-842">
              <see cref="F:System.Double.PositiveInfinity" /> is also valid.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-843">これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>幅情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-843">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span> <span data-ttu-id="9a7e2-844">その他の 2 つは<xref:System.Windows.FrameworkElement.MinWidth%2A>と<xref:System.Windows.FrameworkElement.Width%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-844">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>.</span></span> <span data-ttu-id="9a7e2-845">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinWidth%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxWidth%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Width%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-845">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-846">値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-846">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a7e2-847">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-847">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-848">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-848">XAML Attribute Usage</span></span>  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-849">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-849">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-850">*double*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-850">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a7e2-851">文字列表現を<xref:System.Double>0.0 以上の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-851">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a7e2-852">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-852">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a7e2-853">明示的に、文字列では、小数点を含める必要がありますされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-853">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a7e2-854">値のインスタンス`1`は許容されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-854">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a7e2-855">同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて[X:static マークアップ拡張機能](~/docs/framework/xaml-services/x-static-markup-extension.md)値に設定する<xref:System.Double.PositiveInfinity>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-855">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) to set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="9a7e2-856">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-856">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a7e2-857">A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-857">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a7e2-858">`px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a7e2-858">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a7e2-859">`in` インチです。1 96px を = =</span><span class="sxs-lookup"><span data-stu-id="9a7e2-859">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a7e2-860">`cm` センチメートル; は、します。1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-860">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a7e2-861">`pt` ポイントです。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-861">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-862">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-862">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-863">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-863">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|<span data-ttu-id="9a7e2-864">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-864">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-865">
            <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-865">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="9a7e2-866">親要素が子要素に与えることが利用可能なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-866">The available size that the parent element can give to the child elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-867">
            <see cref="T:System.Windows.FrameworkElement" /> の測定パス レイアウト システムの基本動作を実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-867">Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-868">レイアウト内のこの要素の必要なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-868">The desired size of this element in layout.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-869">このメソッドは<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>WPF コア レベルと WPF フレームワーク レベルのレイアウトの測定の実装に接続します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-869">This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> to connect the  WPF core-level and WPF framework-level layout measure implementations.</span></span> <span data-ttu-id="9a7e2-870"><xref:System.Windows.FrameworkElement>実装メソッドをシールします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-870">The <xref:System.Windows.FrameworkElement> implementation seals the method.</span></span> <span data-ttu-id="9a7e2-871">WPF フレームワーク レベル上に構築される要素の測定パス レイアウト動作を調整するのには、オーバーライド<xref:System.Windows.FrameworkElement.MeasureOverride%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-871">To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead.</span></span> <span data-ttu-id="9a7e2-872">測定パスを意図的に、WPF フレームワーク レベルのビルドを使用して要素のレイアウトの動作を調整する<xref:System.Windows.FrameworkElement>、オーバーライド<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-872">To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="9a7e2-873">この要素が子要素に提供できる使用可能なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-873">The available size that this element can give to child elements.</span>
          </span>
          <span data-ttu-id="9a7e2-874">あらゆるコンテンツに要素がサイズを合わせることを示す値として、無限大を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-874">Infinity can be specified as a value to indicate that the element will size to whatever content is available.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-875">派生クラスでオーバーライドされると、子要素に必要なレイアウトのサイズを測定し、<see cref="T:System.Windows.FrameworkElement" /> 派生クラスのサイズを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-875">When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-876">子要素のサイズの計算に基づいて、この要素が判断したレイアウト時に必要なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-876">The size that this element determines it needs during layout, based on its calculations of child element sizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-877">オーバーライド<xref:System.Windows.FrameworkElement.MeasureOverride%2A>に含まれているように、要素のカスタム レイアウトのサイズ変更動作を実装する、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]レイアウト システムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-877">Override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] layout system.</span></span> <span data-ttu-id="9a7e2-878">実装は、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-878">Your implementation should do the following:</span></span>  
  
1.  <span data-ttu-id="9a7e2-879">レイアウト、呼び出しの一部である子の要素の特定のコレクションを反復処理する<xref:System.Windows.UIElement.Measure%2A>各子要素にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-879">Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
2.  <span data-ttu-id="9a7e2-880">すぐに<xref:System.Windows.UIElement.DesiredSize%2A>の子で (これには、設定後にプロパティとして<xref:System.Windows.UIElement.Measure%2A>と呼びます)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-880">Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).</span></span>  
  
3.  <span data-ttu-id="9a7e2-881">子要素の測定に基づく親の net 目的のサイズを計算します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-881">Compute the net desired size of the parent based upon the measurement of the child elements.</span></span>  
  
 <span data-ttu-id="9a7e2-882">戻り値<xref:System.Windows.FrameworkElement.MeasureOverride%2A>メジャーが現在の要素の親要素の入力となる要素の独自必要なサイズにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-882">The return value of <xref:System.Windows.FrameworkElement.MeasureOverride%2A> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</span></span> <span data-ttu-id="9a7e2-883">ページのルート要素に到達するまでは、レイアウト システムでこの同じプロセスが続行されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-883">This same process continues through the layout system until the root element of the page is reached.</span></span>  
  
 <span data-ttu-id="9a7e2-884">このプロセス中には、子要素より大規模なに返す場合があります<xref:System.Windows.UIElement.DesiredSize%2A>最初よりもサイズ`availableSize`を子要素がより多くの領域を依頼するかを示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-884">During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space.</span></span> <span data-ttu-id="9a7e2-885">これは、何らかのスタックの順序、または任意の数の測定] または [コンテンツの配置のソリューションを確立することによって、親コントロールのサイズを変更して、スクロール可能な領域を導入することにより、独自の実装で処理可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-885">This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a7e2-886">要素を呼び出す必要があります<xref:System.Windows.UIElement.Measure%2A>でこの処理中にそれぞれの子では、それ以外の場合、子要素は正しくサイズまたはされません配置します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-886">Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-887">次のコンパイルされていないコードでは、この実装パターンを示します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-887">The following non-compiling code shows this implementation pattern.</span>
            </span>
            <span data-ttu-id="9a7e2-888">
              <c>VisualChildren</c>独自の要素を定義する必要がありますの子の列挙可能なコレクション プロパティを表します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-888">
                <c>VisualChildren</c> represents an enumerable collection property of children that your own element should define.</span>
            </span>
            <span data-ttu-id="9a7e2-889">プロパティは、何かということができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-889">The property can be named anything.</span>
            </span>
            <span data-ttu-id="9a7e2-890">
              <c>VisualChildren</c>は、この例の目的のプレース ホルダー名<c>VisualChildren</c>されませんが、[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]によって提供されるよう[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]または名前付けパターンの一部.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-890">
                <c>VisualChildren</c> is a placeholder name for purposes of this example, <c>VisualChildren</c> is not an [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] as provided by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] or a part of a naming pattern..</span>
            </span>  
  
 [!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)]
 [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-891">要素の高さの最小値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-891">Gets or sets the minimum height constraint of the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-892">要素の最小の高さ ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-892">The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-893">既定値は 0.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-893">The default value is 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-894">この値は、0.0 以上の任意の値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-894">This value can be any value equal to or greater than 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-895">ただし、<see cref="F:System.Double.PositiveInfinity" /> と <see cref="F:System.Double.NaN" /> は無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-895">However, <see cref="F:System.Double.PositiveInfinity" /> is NOT valid, nor is <see cref="F:System.Double.NaN" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-896">これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>高さ情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-896">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span>  <span data-ttu-id="9a7e2-897">その他の 2 つは<xref:System.Windows.FrameworkElement.Height%2A>と<xref:System.Windows.FrameworkElement.MaxHeight%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-897">The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="9a7e2-898">実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinHeight%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxHeight%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Height%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-898">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-899">値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-899">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a7e2-900">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-900">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-901">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-901">XAML Attribute Usage</span></span>  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-902">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-902">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-903">*double*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-903">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a7e2-904">文字列表現を<xref:System.Double>0.0 以上の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-904">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a7e2-905">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-905">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a7e2-906">明示的に、文字列では、小数点を含める必要がありますされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-906">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a7e2-907">値のインスタンス`1`は許容されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-907">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a7e2-908">同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-908">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="9a7e2-909">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-909">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a7e2-910">A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-910">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a7e2-911">`px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a7e2-911">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a7e2-912">`in` インチです。1 96px を = =</span><span class="sxs-lookup"><span data-stu-id="9a7e2-912">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a7e2-913">`cm` センチメートル; は、します。1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-913">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a7e2-914">`pt` ポイントです。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-914">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-915">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-915">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-916">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-916">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|<span data-ttu-id="9a7e2-917">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-917">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-918">
            <see cref="P:System.Windows.FrameworkElement.MinHeight" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-918">Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-919">要素の幅の最小値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-919">Gets or sets the minimum width constraint of the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-920">要素の最小の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-920">The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-921">既定値は 0.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-921">The default value is 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-922">この値は、0.0 以上の任意の値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-922">This value can be any value equal to or greater than 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-923">ただし、<see cref="F:System.Double.PositiveInfinity" /> と <see cref="F:System.Double.NaN" /> は無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-923">However, <see cref="F:System.Double.PositiveInfinity" /> is not valid, nor is <see cref="F:System.Double.NaN" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-924">これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>幅情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-924">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="9a7e2-925">その他の 2 つは<xref:System.Windows.FrameworkElement.Width%2A>と<xref:System.Windows.FrameworkElement.MaxWidth%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-925">The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="9a7e2-926">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinWidth%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxWidth%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Width%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-926">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-927">値の制限、<xref:System.Double>によって値が適用される、<xref:System.Windows.ValidateValueCallback>メカニズムです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-927">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a7e2-928">無効な値を設定しようとすると、実行時例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-928">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-929">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-929">XAML Attribute Usage</span></span>  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-930">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-930">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-931">*double*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-931">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a7e2-932">文字列表現を<xref:System.Double>0.0 以上の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-932">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a7e2-933">これは、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-933">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a7e2-934">明示的に、文字列では、小数点を含める必要がありますされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-934">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a7e2-935">値のインスタンス`1`は許容されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-935">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a7e2-936">同じ<xref:System.Double>プロパティの値セクションで説明したように範囲の制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-936">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="9a7e2-937">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-937">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a7e2-938">A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-938">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a7e2-939">`px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a7e2-939">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a7e2-940">`in` インチです。1 96px を = =</span><span class="sxs-lookup"><span data-stu-id="9a7e2-940">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a7e2-941">`cm` センチメートル; は、します。1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-941">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a7e2-942">`pt` ポイントです。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-942">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-943">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-943">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-944">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-944">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|<span data-ttu-id="9a7e2-945">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-945">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-946">
            <see cref="P:System.Windows.FrameworkElement.MinWidth" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-946">Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="9a7e2-947">フォーカスの移動方向を表す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-947">The direction that focus is to be moved, as a value of the enumeration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-948">指定した移動方向の別の要素にこの要素からキーボード フォーカスを移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-948">Moves the keyboard focus away from this element and to another element in a provided traversal direction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-949">フォーカスの移動が成功した場合は <see langword="true" /> が返されます。指定した方向にターゲット要素が存在しない場合や、ターゲット要素にキーボード フォーカスを設定できなかった場合は、<see langword="false" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-949">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-950">この実装をオーバーライド<xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType>メソッドをシールとします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-950">This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> and seals the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-951">次の例では、いくつかのボタンの入力を処理するハンドラーを実装します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-951">The following example implements a handler that handles several possible button inputs.</span></span> <span data-ttu-id="9a7e2-952">各ボタンを表すことがある<xref:System.Windows.Input.FocusNavigationDirection>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-952">Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="9a7e2-953">ハンドラーは、現在のキーボード フォーカス、および呼び出しを持つ要素が追跡<xref:System.Windows.FrameworkElement.MoveFocus%2A>、適切なを指定して、その要素に<xref:System.Windows.Input.FocusNavigationDirection>の初期化の構文として、<xref:System.Windows.Input.TraversalRequest>指定されたパラメーターを入力します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-953">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.MoveFocus%2A> on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span>  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-954">要素の識別名を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-954">Gets or sets the identifying name of the element.</span>
          </span>
          <span data-ttu-id="9a7e2-955">この名前は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] プロセッサによる処理時に構築されたマークアップ要素を、その後に分離コード (イベント ハンドラーのコードなど) から参照するために使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-955">The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-956">要素の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-956">The name of the element.</span>
          </span>
          <span data-ttu-id="9a7e2-957">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-957">The default is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-958">このプロパティの最も一般的な使用法を指定する、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]マークアップの属性と要素の名前。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-958">The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.</span></span>  
  
 <span data-ttu-id="9a7e2-959">このプロパティでは、WPF フレームワーク レベルの便利なプロパティを設定する基本的にでは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-959">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md).</span></span>  
  
 <span data-ttu-id="9a7e2-960">名は、名前スコープ内で一意でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-960">Names must be unique within a namescope.</span></span> <span data-ttu-id="9a7e2-961">詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-961">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="9a7e2-962">取得する、<xref:System.Windows.FrameworkElement.Name%2A>内の要素を作成する場合はコードは一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-962">Getting a <xref:System.Windows.FrameworkElement.Name%2A> if you are creating elements in code is not common.</span></span> <span data-ttu-id="9a7e2-963">既に適切な参照をコードにある場合だけメソッドを呼び出すことができ、要素のプロパティが参照し、一般的に必要ではない、<xref:System.Windows.FrameworkElement.Name%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-963">If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <xref:System.Windows.FrameworkElement.Name%2A>.</span></span> <span data-ttu-id="9a7e2-964">この例外となる場合、<xref:System.Windows.FrameworkElement.Name%2A>文字列オーバー ロードされたに意味を持ちます内でその名前を表示すると便利である場合[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-964">An exception to this is if the <xref:System.Windows.FrameworkElement.Name%2A> string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="9a7e2-965">設定、<xref:System.Windows.FrameworkElement.Name%2A>分離コードから場合、元の<xref:System.Windows.FrameworkElement.Name%2A>マークアップから設定されても、推奨されていませんし、読み込み後、プロパティを変更する、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]元のオブジェクト参照は変更されません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-965">Setting a <xref:System.Windows.FrameworkElement.Name%2A> from code-behind if the original <xref:System.Windows.FrameworkElement.Name%2A> was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will not change the original object reference.</span></span> <span data-ttu-id="9a7e2-966">基になる名前スコープは、解析時に明示的に作成された場合にのみ、オブジェクト参照が作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-966">The object references are created only when the underlying namescopes are explicitly created during parsing.</span></span> <span data-ttu-id="9a7e2-967">具体的に呼び出す必要があります<xref:System.Windows.FrameworkElement.RegisterName%2A>を効果的に変更する、<xref:System.Windows.FrameworkElement.Name%2A>既に読み込まれた要素のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-967">You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the <xref:System.Windows.FrameworkElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="9a7e2-968">1 つの重要な場合は設定、<xref:System.Windows.FrameworkElement.Name%2A>コードから重要では実行時に参照できるように、に対して ストーリー ボードが要素の実行に名前を登録するときに、します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-968">One notable case where setting <xref:System.Windows.FrameworkElement.Name%2A> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</span></span> <span data-ttu-id="9a7e2-969">名前を登録することができます、前にも必要になるをインスタンス化し、割り当てます、<xref:System.Windows.NameScope>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-969">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="9a7e2-970">使用例」を参照してください。 または[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-970">See the Example section, or [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="9a7e2-971">設定<xref:System.Windows.FrameworkElement.Name%2A>コードからは制限されていますが、アプリケーションの場合して要素を取得する<xref:System.Windows.FrameworkElement.Name%2A>が一般的です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-971">Setting <xref:System.Windows.FrameworkElement.Name%2A> from code has limited applications, but getting an element by <xref:System.Windows.FrameworkElement.Name%2A> is more common.</span></span> <span data-ttu-id="9a7e2-972">1 つのシナリオは、アプリケーションがここで、アプリケーションにページが再読み込みされ、必ずしもそのページに対して定義されている分離コードが実行時のコードではありませんは、ナビゲーション モデルをサポートするかどうかです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-972">One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</span></span> <span data-ttu-id="9a7e2-973">ユーティリティ メソッド<xref:System.Windows.FrameworkElement.FindName%2A>、これは、<xref:System.Windows.FrameworkElement>で要素を検索できます<xref:System.Windows.FrameworkElement.Name%2A>その要素の論理ツリーで、必要に応じて、ツリーを再帰的を検索します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-973">The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by <xref:System.Windows.FrameworkElement.Name%2A> in the logical tree for that element, searching the tree recursively as necessary.</span></span> <span data-ttu-id="9a7e2-974">使用することができます、<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>の静的メソッド<xref:System.Windows.LogicalTreeHelper>もを取り、<xref:System.Windows.FrameworkElement.Name%2A>文字列を引数として。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-974">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a <xref:System.Windows.FrameworkElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="9a7e2-975">通常使用されるルート要素 (<xref:System.Windows.Window>、<xref:System.Windows.Controls.Page>たとえば) インターフェイスを実装して<xref:System.Windows.Markup.INameScope>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-975">Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="9a7e2-976">名前をそのスコープ内で明確にすることを強制するには、このインターフェイスの実装が予想されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-976">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span> <span data-ttu-id="9a7e2-977">このインターフェイスを定義するルート要素は、すべての名前スコープの動作の境界を定義するも、関連する[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-977">The root elements that define this interface also define the namescope behavior boundaries for all the related [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span></span>  
  
 <span data-ttu-id="9a7e2-978"><xref:System.Windows.FrameworkElement.Name%2A>プロパティは、他のプロセスの識別子としても機能します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-978">The <xref:System.Windows.FrameworkElement.Name%2A> property also serves as an identifier for other processes.</span></span> <span data-ttu-id="9a7e2-979">インスタンス、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]オートメーション モデルで使用する<xref:System.Windows.FrameworkElement.Name%2A>クライアントとプロバイダーの AutomationId として。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-979">For instance, the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] automation model will use <xref:System.Windows.FrameworkElement.Name%2A> as the AutomationId for clients and providers.</span></span>  
  
 <span data-ttu-id="9a7e2-980">使用する文字列値<xref:System.Windows.FrameworkElement.Name%2A>による、基になるようにいくつかの制限がある[X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)によって定義された、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]仕様です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-980">The string values used for <xref:System.Windows.FrameworkElement.Name%2A> have some restrictions, as imposed by the underlying [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specification.</span></span> <span data-ttu-id="9a7e2-981">最も顕著な<xref:System.Windows.FrameworkElement.Name%2A>はアルファベットまたはアンダー スコア文字 (_) で始める必要があるあり、アルファベット、数字、またはアンダー スコアのみを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-981">Most notably, a <xref:System.Windows.FrameworkElement.Name%2A> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</span></span> <span data-ttu-id="9a7e2-982">詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-982">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="9a7e2-983"><xref:System.Windows.FrameworkElement.Name%2A> アニメーション化することはできませんのほとんどの依存関係プロパティの 1 つです (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>は`true`メタデータに) 名前そのものがアニメーションを対象とするために不可欠であるためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-983"><xref:System.Windows.FrameworkElement.Name%2A> is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation.</span></span> <span data-ttu-id="9a7e2-984">データ バインディング、<xref:System.Windows.FrameworkElement.Name%2A>技術的に可能ですは、非常に一般的ではないため、データにバインドされた<xref:System.Windows.FrameworkElement.Name%2A>プロパティのメインの意図された目的に使用できません: 分離コードの識別子の接続ポイントを提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-984">Data binding a <xref:System.Windows.FrameworkElement.Name%2A> is technically possible, but is an extremely uncommon scenario because a data-bound <xref:System.Windows.FrameworkElement.Name%2A> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-985">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-985">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-986">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-986">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.NameProperty>|  
|<span data-ttu-id="9a7e2-987">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-987">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-988">次の例のセット、<xref:System.Windows.FrameworkElement.Name%2A>コードでは、プロパティ、名前に、新しく作成し、登録と<xref:System.Windows.NameScope>を呼び出して<xref:System.Windows.FrameworkElement.RegisterName%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-988">The following example sets the <xref:System.Windows.FrameworkElement.Name%2A> property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>.</span></span> <span data-ttu-id="9a7e2-989">ストーリー ボードでは、対象を設定する必要があるために、次に示す手法は、ストーリー ボードのアニメーション化するための要件、 <xref:System.Windows.FrameworkElement.Name%2A>、し、オブジェクト参照の対象となることはできません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-989">The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <xref:System.Windows.FrameworkElement.Name%2A>, and cannot be targeted by object reference.</span></span>  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-990">
            <see cref="P:System.Windows.FrameworkElement.Name" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-990">Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-991">派生クラスでオーバーライドされると、アプリケーション コードや内部プロセスで <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> が呼び出されるたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-991">When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-992">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-992">This method has no default implementation.</span></span>  
  
 <span data-ttu-id="9a7e2-993">テンプレートのテンプレートのプロパティから派生した要素の完成したビジュアル ツリーのセクションでは、<xref:System.Windows.Style>要素に適用されています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-993">Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element.</span></span> <span data-ttu-id="9a7e2-994">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-994">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-995">派生クラスの<see cref="T:System.Windows.FrameworkElement" />可能なシナリオのさまざまな通知としてこのメソッドを使用できます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-995">Derived classes of <see cref="T:System.Windows.FrameworkElement" /> can use this method as a notification for a variety of possible scenarios:</span>
            </span>  
  
-   <span data-ttu-id="9a7e2-996">要素のビジュアル ツリーの残りの部分を構築するコードの独自の実装を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-996">You can call your own implementation of code that builds the remainder of an element visual tree.</span></span>  
  
-   <span data-ttu-id="9a7e2-997">テンプレートから得られた名前付きの要素への参照を取得するなど、適用されてもテンプレートのビジュアル ツリーに依存するコードを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-997">You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</span></span>  
  
-   <span data-ttu-id="9a7e2-998">テンプレートのビジュアル ツリーが完了した後に存在する意味がないサービスを導入することができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-998">You can introduce services that only make sense to exist after the visual tree from templates is complete.</span></span>  
  
-   <span data-ttu-id="9a7e2-999">状態とその他の要因に依存しているテンプレート内の要素のプロパティを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-999">You can set states and properties of elements within the template that are dependent on other factors.</span></span><span data-ttu-id="9a7e2-1000">インスタンスのプロパティの値のみ探索可能な親要素を理解することでもありますクラスが、一般的なテンプレートを使用して、特定の派生です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1000">For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</span></span><span data-ttu-id="9a7e2-1001">実装時は、独自の実装前に基本実装を呼び出す常にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1001">Implementers should always call the base implementation before their own implementation.</span></span><span data-ttu-id="9a7e2-1002"><see cref="T:System.Windows.FrameworkElement" /> 既定値を持たない自体の実装が介在するクラスがあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1002"><see cref="T:System.Windows.FrameworkElement" /> itself has no default implementation, but intervening classes might.</span></span><span data-ttu-id="9a7e2-1003"><see cref="T:System.Windows.Controls.Control" /> 同様の上書きは、<see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1003"><see cref="T:System.Windows.Controls.Control" /> offers a similar override, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1004">イベントに関するデータを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1004">Provides data about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1005">未処理の <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1005">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="9a7e2-1006">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1006">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1007">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1007">This method has no default implementation.</span></span> <span data-ttu-id="9a7e2-1008">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1008">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a7e2-1009">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1009">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a7e2-1010">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1010">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a7e2-1011">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1011">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a7e2-1012">サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1012">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a7e2-1013">イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1013">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1014">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1014">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1015">未処理の <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1015">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="9a7e2-1016">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1016">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1017">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1017">This method has no default implementation.</span></span> <span data-ttu-id="9a7e2-1018">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1018">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a7e2-1019">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1019">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a7e2-1020">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1020">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a7e2-1021">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1021">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a7e2-1022">サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1022">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a7e2-1023">イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1023">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1024">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1024">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1025">未処理の <see cref="E:System.Windows.UIElement.GotFocus" /> イベントが、その経路上でこの要素に到達するたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1025">Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1026">その他のとは異なり \* ベースの要素によって公開されるメソッド<xref:System.Windows.FrameworkElement.OnGotFocus%2A>が既定の実装です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1026">Unlike some other On\* methods exposed by the base elements, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> does have a default implementation.</span></span> <span data-ttu-id="9a7e2-1027">具体的には、実装、基本要素の次のレベルで null の実装をオーバーライドするが<xref:System.Windows.UIElement.OnGotFocus%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1027">Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>.</span></span> <span data-ttu-id="9a7e2-1028">呼び出されると、<xref:System.Windows.FrameworkElement.OnGotFocus%2A>イベントがキーボード フォーカスのため、現在の要素から作成される場合に、この要素に適切なフォーカスの動作を設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1028">When invoked, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</span></span> <span data-ttu-id="9a7e2-1029"><xref:System.Windows.FrameworkElement.OnGotFocus%2A>ハンドラーにイベントの引数もフォーカス設定されている場合、現在の要素を処理済みとしてマークされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1029">The <xref:System.Windows.FrameworkElement.OnGotFocus%2A> handler does not mark the event arguments as handled, even when focus is set to the current element.</span></span> <span data-ttu-id="9a7e2-1030">イベントのソースが別の要素ツリーで、(現在の要素ではなく) の場合は、ハンドラーは、何も実行します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1030">If the event's source was another element in the tree (not the current element), the handler does nothing.</span></span>  
  
 <span data-ttu-id="9a7e2-1031">要素のフォーカスの既定の動作を変更するは、この方法でフォーカスの動作を変更する向上を実現するのにまったくフォーカス可能な要素を許可しないことによって対応するためにこのメソッドをオーバーライドすることができます (を参照してください<xref:System.Windows.UIElement.Focusable%2A>)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1031">You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1032">引数で処理されるイベントをマークする場合に、要素ツリー内の他の親要素でのイベント処理に与える影響の注意してください。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1032">If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</span>
            </span>
            <span data-ttu-id="9a7e2-1033">動作するためこのハンドラーのバブルのルーティング イベントを現在フォーカスを設定する<paramref name="sender" />イベントごと引数適切ではありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1033">Because this handler acts on an event with a bubbling routing, setting the focus to the current <paramref name="sender" /> per the event arguments may not be appropriate.</span>
            </span>
            <span data-ttu-id="9a7e2-1034">フォーカスがや特定のコントロールの複合に応じての親要素、複合の子要素のいずれかに移動する必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1034">Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</span>
            </span>
            <span data-ttu-id="9a7e2-1035">処理済みとしてしたがって focus イベントをマークすることは、イベントがルーティングするビジュアル ツリーの全体が作成したコントロールの複合の一部である場合にのみ推奨されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1035">Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1036">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1036">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1037">
            <see cref="E:System.Windows.FrameworkElement.Initialized" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1037">Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event.</span>
          </span>
          <span data-ttu-id="9a7e2-1038">このメソッドは、<see cref="P:System.Windows.FrameworkElement.IsInitialized" /> が内部で <see langword="true" /> に設定されるたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1038">This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1039">この特定 \* メソッドは、クラス ハンドラーのフックはありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1039">This particular On\* method is not a class handler hook.</span></span> <span data-ttu-id="9a7e2-1040">正確に従う、確立されたも[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]で \* メソッド規則がこのメソッドをオーバーライドし、基本実装を呼び出していない一致するイベントを抑制する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1040">Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] On\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</span></span>  
  
 <span data-ttu-id="9a7e2-1041">なお、<xref:System.Windows.FrameworkElement.IsInitialized%2A>設定することはできませんのでプロパティは読み取り専用、<xref:System.Windows.FrameworkElement.IsInitialized%2A>初期化動作を強制的にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1041">Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior.</span></span> <span data-ttu-id="9a7e2-1042">のみ実行するためのものが初期化状態を設定、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]フレームワークです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1042">Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1043">この仮想メソッドの既定の実装は、上で説明したようにイベントを発生させます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1043">The default implementation of this virtual method raises the event as described above.</span>
            </span>
            <span data-ttu-id="9a7e2-1044">オーバーライドでは、この動作を保持するために基本実装を呼び出す必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1044">Overrides should call the base implementation to preserve this behavior.</span>
            </span>
            <span data-ttu-id="9a7e2-1045">基底の実装の呼び出しに失敗した場合だけでなく、発生しません、<see cref="E:System.Windows.FrameworkElement.Initialized" />イベントの想定が通常どおり、<see cref="T:System.Windows.FrameworkElement" />派生クラスには、2 つ重要なスタイルとテーマ スタイルの初期化の操作であるで抑制します。この基本の実装によって実装されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1045">If you fail to call the base implementation, not only will you not raise the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event as is generally expected of a <see cref="T:System.Windows.FrameworkElement" /> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1046">変更されたプロパティと、新旧の値を記述するイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1046">The event data that describes the property that changed, as well as old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1047">この <see cref="T:System.Windows.FrameworkElement" /> の依存関係プロパティの有効値が更新されると、そのたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1047">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated.</span>
          </span>
          <span data-ttu-id="9a7e2-1048">変更が発生した特定の依存関係プロパティが引数パラメーターで報告されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1048">The specific dependency property that changed is reported in the arguments parameter.</span>
          </span>
          <span data-ttu-id="9a7e2-1049">
            <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> をオーバーライドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1049">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1050">このメソッドは、通常、プロパティの変更または無効化を検出するものではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1050">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="9a7e2-1051">代わりに目的が、一般的な無効化パターンの変更があったプロパティの広範な分類に関する特定の情報がわかっている場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1051">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="9a7e2-1052">このメソッドでは、オブジェクトの有効期間中に何度もを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1052">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="9a7e2-1053">したがって、特定のプロパティのメタデータをオーバーライドし、適用するを使用するパフォーマンスが向上を実現できます<xref:System.Windows.CoerceValueCallback>または<xref:System.Windows.PropertyChangedCallback>個々 のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1053">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="9a7e2-1054">場合にこのメソッドを使用すると、<xref:System.Windows.FrameworkElement>多数の値と相互に依存関係プロパティを含む動作をレンダリングする必要がありますを再実行関連のプロパティの無効化のケースのいくつかのようにロジックが含まれている場合またはします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1054">However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="9a7e2-1055">ある同じ名前に注意してください`OnPropertyChanged`異なるシグネチャを持つメソッド (パラメーターの型が<xref:System.ComponentModel.PropertyChangedEventArgs>) に多数のクラスに表示されることができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1055">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="9a7e2-1056">ある`OnPropertyChanged`のコントラクトの一部であり、データ オブジェクトの通知に使用<xref:System.ComponentModel.INotifyPropertyChanged>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1056">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1057">常に、実装では、最初の操作として基底の実装を呼び出します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1057">Always call the base implementation, as the first operation in your implementation.</span>
            </span>
            <span data-ttu-id="9a7e2-1058">これを行うにはエラーには、全体が無効になりますが大幅に[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プロパティ システムは、これにより、正しくない値が報告されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1058">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</span>
            </span>
            <span data-ttu-id="9a7e2-1059">特定<see cref="T:System.Windows.FrameworkElement" />実装も表示されるユーザー インターフェイスに影響するプロパティのさまざまな適切な状態を維持する必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1059">The specific <see cref="T:System.Windows.FrameworkElement" /> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</span>
            </span>
            <span data-ttu-id="9a7e2-1060">適切な時点でスタイルを設定する変更に基づき、ビジュアル ツリーを無効化が含まれます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1060">These include invalidating the visual tree based on changes to style at appropriate times.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">
          <span data-ttu-id="9a7e2-1061">変更に関係する、古いサイズと新しいサイズの詳細。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1061">Details of the old and new size involved in the change.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1062">指定した情報を最終的なイベント データの一部として使用して <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1062">Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1063">このメソッドは、<xref:System.Windows.UIElement.OnRenderSizeChanged%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1063">This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>.</span></span> <span data-ttu-id="9a7e2-1064">このメソッドを呼び出す場合は、リセット、 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 、プロパティ、<xref:System.Windows.FrameworkElement.ActualHeight%2A>プロパティ、またはその両方として指定されている内容によっては、指定された引数で変更されは常にイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1064">If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1065">一般的なレイアウト シナリオには、このメソッドをオーバーライドしません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1065">Do not override this method for typical layout scenarios.</span>
            </span>
            <span data-ttu-id="9a7e2-1066">レイアウト システムは、すべての可能なレイアウトの配置し、メジャーの場合は考慮ことを保証する意図的に非同期の方法で動作します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1066">The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</span>
            </span>
            <span data-ttu-id="9a7e2-1067">レイアウト システムは、メソッドをオーバーライド<see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />と<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />は通常の必要な必要なレイアウトをカスタマイズします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1067">The layout system override methods <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> are usually sufficient for any required layout customization.</span>
            </span>
            <span data-ttu-id="9a7e2-1068">
              <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> バーチャル マシンとして公開されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1068">
                <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> is exposed as a virtual.</span>
            </span>
            <span data-ttu-id="9a7e2-1069">オーバーライドできます<see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />応答で再構成を実行時動作の変更が入力コントロールと組み合わせて使用するイベントに関連する例外的なケースを解決するのに不正確なレイアウト情報を与える可能性があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1069">You can override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</span>
            </span>
            <span data-ttu-id="9a7e2-1070">でも (これは保護されているが封印されていない) の派生クラスでこのメソッドをオーバーライドできます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1070">You may still override this method in derived classes (it is protected but not sealed).</span>
            </span>
            <span data-ttu-id="9a7e2-1071">常に既定の WPF フレームワーク レベルのレンダリングの動作を無効にするための特別な理由がない限り、上記で説明した動作を保持する基本実装を呼び出します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1071">Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</span>
            </span>
            <span data-ttu-id="9a7e2-1072">失敗を発生させる、<see cref="E:System.Windows.FrameworkElement.SizeChanged" />イベントは、標準の WPF フレームワーク レベルのレイアウト システムの実装を使用する場合、非標準のレイアウトの動作が発生します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1072">Failing to raise the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">
          <span data-ttu-id="9a7e2-1073">元のスタイル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1073">The old style.</span>
          </span>
        </param>
        <param name="newStyle">
          <span data-ttu-id="9a7e2-1074">新しいスタイル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1074">The new style.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1075">この要素で使用されているスタイルが変更された場合に呼び出されます。スタイルが変更されるとレイアウトが無効になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1075">Invoked when the style in use on this element changes, which will invalidate the layout.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1076">このメソッドには、スタイルが変更された状態を記録する内部フラグを設定する既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1076">This method has a default implementation that sets an internal flag that notes the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1077">通常必要はありませんこのメソッドをオーバーライドします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1077">You should not typically have to override this method.</span>
            </span>
            <span data-ttu-id="9a7e2-1078">いずれかのメジャーを含むスタイルを変更または変更での一般的な実装を想定して、別のレンダリング サイクルは、既に配置<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />、または、既定値です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1078">Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, or the defaults.</span>
            </span>
            <span data-ttu-id="9a7e2-1079">上書きが<see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />適切な場合がある場合、 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />実装が意図的に最適化されたまたは部分的な更新プログラムをサポートする、まだたいより直接的スタイルに変更を適用します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1079">Overrides of <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> might be appropriate if your <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</span>
            </span>
            <span data-ttu-id="9a7e2-1080">(部分的な更新を増分複数の呼び出しを回避しようとなる<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />と<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />すべての子要素に)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1080">(The partial updates would be an attempt to avoid multiple incremental calls to <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> and <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on any child elements).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1081">イベントに関するデータを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1081">Provides data about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1082">未処理の <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1082">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="9a7e2-1083">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1083">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1084">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1084">This method has no default implementation.</span></span> <span data-ttu-id="9a7e2-1085">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1085">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a7e2-1086">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1086">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a7e2-1087">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1087">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a7e2-1088">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1088">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a7e2-1089">サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1089">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a7e2-1090">イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1090">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="9a7e2-1091">イベントに関するデータを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1091">Provides data about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1092">
            <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1092">Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="9a7e2-1093">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1093">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1094">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1094">This method has no default implementation.</span></span> <span data-ttu-id="9a7e2-1095">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1095">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a7e2-1096">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1096">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a7e2-1097">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1097">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a7e2-1098">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1098">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a7e2-1099">サブクラス<xref:System.Windows.FrameworkElement>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1099">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a7e2-1100">イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1100">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="9a7e2-1101">前の親要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1101">The old parent element.</span>
          </span>
          <span data-ttu-id="9a7e2-1102">
            <see langword="null" /> は要素に前のビジュアル親が存在しないことを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1102">May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1103">ビジュアル ツリー内のこの要素の親が変更されたときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1103">Invoked when the parent of this element in the visual tree is changed.</span>
          </span>
          <span data-ttu-id="9a7e2-1104">
            <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /> をオーバーライドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1104">Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1105">ビジュアル ツリーは、コレクションなどに視覚的にレンダリングされない要素を省略しているので、論理ツリーから異なる可能性がありますし、そのテーマとスタイルの合成に基づいていくつかの要素を展開します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1105">The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</span></span> <span data-ttu-id="9a7e2-1106">詳細については、「[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1106">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1107">この仮想メソッドの既定の実装は、新しい親のクエリを実行し、さまざまな初期化イベントを発生させますの初期化状態に関する内部フラグを設定、<see cref="T:System.Windows.FrameworkElement" />をクリックします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1107">The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <see cref="T:System.Windows.FrameworkElement" /> as appropriate.</span>
            </span>
            <span data-ttu-id="9a7e2-1108">宣言されている一連の基本実装を呼び出して、最後に、 <see cref="T:System.Windows.UIElement" />、さらにその基本呼び出す<see cref="T:System.Windows.Media.Visual" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1108">Finally, it calls the successive base implementations as declared by <see cref="T:System.Windows.UIElement" />, which in turn calls its base in <see cref="T:System.Windows.Media.Visual" />.</span>
            </span>
            <span data-ttu-id="9a7e2-1109">常にこの動作を保持する基本実装を呼び出す、それ以外の場合別の要素の子として宣言されている場合は、この要素の要素ツリーの動作が期待どおりに。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1109">Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</span>
            </span>
            <span data-ttu-id="9a7e2-1110">既存のいくつか[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]クラスなど、このメソッドをオーバーライドします。 <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />、<see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1110">A few existing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classes override this method, for example: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span>
            </span>
            <span data-ttu-id="9a7e2-1111">最も一般的なシナリオは、新しい親は、特定の型である必要がありますを強制します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1111">The most common scenario is to enforce that the new parent must be a particular type.</span>
            </span>
            <span data-ttu-id="9a7e2-1112">これには、新しい親には、いくつかの種類のテストの方法が失敗した場合、例外がスローが含まれます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1112">This might involve throwing an exception if the new parent failed some manner of type test.</span>
            </span>
            <span data-ttu-id="9a7e2-1113">このシナリオに特化したバージョンは、リスト項目およびメニュー項目をなしません、親の外部 visual でそれらを格納する適切なコレクションを所有しているの実装に存在します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1113">A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</span>
            </span>
            <span data-ttu-id="9a7e2-1114">親の変更は、一時的にその「標準」の親要素に依存しているデザイナーのシナリオがある可能性がありますので、このような場合とは限りません例外を発生させません、注意してください。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1114">Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</span>
            </span>
            <span data-ttu-id="9a7e2-1115">このメソッドは、通常はルート要素など、特定の要素でオーバーライドも<see cref="T:System.Windows.Window" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1115">This method is also overridden in certain elements that are typically the root element, such as  <see cref="T:System.Windows.Window" />.</span>
            </span>
            <span data-ttu-id="9a7e2-1116">別のケースのマークアップが明らかなルート要素である要素は、自動生成、コンパイル済みの論理ツリー内の大きいインフラストラクチャ (など<see cref="T:System.Windows.Controls.Page" />)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1116">Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <see cref="T:System.Windows.Controls.Page" />).</span>
            </span>
            <span data-ttu-id="9a7e2-1117">
              <see cref="T:System.Windows.Window" />と<see cref="T:System.Windows.Controls.Page" />実装が意図的に、メソッドをシールします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1117">The <see cref="T:System.Windows.Window" /> and <see cref="T:System.Windows.Controls.Page" /> implementations deliberately seal the method.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1118">この要素に、テーマのスタイルのスタイル プロパティが含まれるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1118">Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1119">この要素がテーマ スタイル プロパティを使用しない場合は <see langword="true" /> (スタイルが生成するすべてのプロパティは、ローカルのアプリケーション スタイルに起因するため、テーマ スタイル プロパティは適用されません)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1119">
              <see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span>
          </span>
          <span data-ttu-id="9a7e2-1120">まずアプリケーション スタイルを適用してから、アプリケーション スタイルで明確に設定されなかったプロパティに対してテーマ スタイルを適用する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1120">
              <see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span>
          </span>
          <span data-ttu-id="9a7e2-1121">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1121">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1122">このプロパティの最も一般的な使用法は、テーマとスタイルを提供しているスタイルのセッター内の間接的な使用率です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1122">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a7e2-1123">設定した場合<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>に`true`テーマ スタイルによって提供される既定のコントロール テンプレートをコントロールに抑制されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1123">If you set <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> to `true` on a control, you will be suppressing the default control template supplied by the theme styles.</span></span> <span data-ttu-id="9a7e2-1124">そのコントロール テンプレートには通常コンテンツ発表者と基本を提供するその他の合成要素が含まれています[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]機能およびコントロールのビジュアル化。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1124">That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] functionality and visualization for the control.</span></span> <span data-ttu-id="9a7e2-1125">を、既定のテーマ スタイルと同じ機能をサポートするために続行するには、制御する場合は、同じ構造をレプリケートするコントロール テンプレートを使用して別のスタイルを指定してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1125">If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</span></span> <span data-ttu-id="9a7e2-1126">詳しくは、「[コントロールの作成の概要](~/docs/framework/wpf/controls/control-authoring-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1126">For more information, see [Control Authoring Overview](~/docs/framework/wpf/controls/control-authoring-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-1127">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1127">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1128">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1128">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="9a7e2-1129">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1129">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1130">
            <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1130">Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1131">この要素の論理上の親要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1131">Gets the logical parent  element of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1132">この要素の論理上の親。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1132">This element's logical parent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1133"><xref:System.Windows.FrameworkElement.Parent%2A> あります`null`要素がインスタンス化されましたが、最終的に、ページ レベルのルート要素、または、アプリケーション オブジェクトに接続するすべての論理ツリーにアタッチされていない場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1133"><xref:System.Windows.FrameworkElement.Parent%2A> may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</span></span>  
  
 <span data-ttu-id="9a7e2-1134">要素の論理上の親が、アプリケーションの機能に応じて変わることが可能性のある、このプロパティの値を維持するその変更は反映されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1134">Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="9a7e2-1135">通常必要があります値を取得する必要がある直前です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1135">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="9a7e2-1136">参照してください[wpf ツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)の詳細については、論理ツリーの移動、およびシナリオを使用して、<xref:System.Windows.FrameworkElement.Parent%2A>検出は、適切な親要素の手法として。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1136">See [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) for more information about logical tree  traversal, and the scenarios where using  <xref:System.Windows.FrameworkElement.Parent%2A> as a technique of parent element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="9a7e2-1137">プロパティのエンジンは可能性があると再計算要素のすべてのプロパティ値が親を再指定、いくつかのプロパティは、論理ツリーを使用して値を継承するため。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1137">The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="9a7e2-1138"><xref:System.Windows.FrameworkElement.DataContext%2A>にバインドできますも変更を適用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1138">The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="9a7e2-1139">要素の親の変更は通常によってのみ行われますコレクションの操作、dedicated を使用して追加または削除メソッド、または、要素のコンテンツのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1139">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="9a7e2-1140">使用するための最も一般的なシナリオ、<xref:System.Windows.FrameworkElement.Parent%2A>プロパティ、参照を取得し、さまざまな<xref:System.Windows.FrameworkElement>親からのプロパティ値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1140">The most typical scenario for using the <xref:System.Windows.FrameworkElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent.</span></span> <span data-ttu-id="9a7e2-1141">テンプレートの場合、<xref:System.Windows.FrameworkElement.Parent%2A>テンプレートの最終的になります`null`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1141">For templates, the <xref:System.Windows.FrameworkElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="9a7e2-1142">この時点以降をテンプレートが実際に適用されている論理ツリーに拡張を使用して<xref:System.Windows.FrameworkElement.TemplatedParent%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1142">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-1143">このプロパティに論理ツリーの親と異なる場合のビジュアル ツリーの親が報告されていないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1143">Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</span></span> <span data-ttu-id="9a7e2-1144">ビジュアル ツリーの親では、通常重要アプリケーションの一般的なケースではないが、visual 特定レベルの場合に必要な親要素があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1144">Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</span></span> <span data-ttu-id="9a7e2-1145">「<xref:System.Windows.Media.VisualTreeHelper>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1145">See <xref:System.Windows.Media.VisualTreeHelper>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1146">次の例では、要素の親をチェックし、親からのプロパティ値を使用すると一致する子要素のプロパティを設定するコードを示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1146">The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</span></span> <span data-ttu-id="9a7e2-1147">ここでは、これらは、表示サイズに影響するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1147">In this case these are properties that affect the rendering size.</span></span>  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="9a7e2-1148">変更を報告している子要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1148">The child element reporting the change.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1149">
            <see cref="T:System.Windows.FrameworkElement" /> の特殊なサブクラスでインクリメンタル レイアウトの実装をサポートします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1149">Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />.</span>
          </span>
          <span data-ttu-id="9a7e2-1150">レイアウト中に親のメジャーまたは整列パスに影響を与えるものとしてメタデータ内でマークされているプロパティを子要素が無効にすると、<see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> が呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1150">
              <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1151">この要素の子要素をいくつかのプロパティは無効化およびプロパティがあるとマークされた場合<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>または<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>でプロパティのメタデータの登録中に、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1151">If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked.</span></span> <span data-ttu-id="9a7e2-1152">メソッドの呼び出しでは、この要素は、レイアウトの部分 (増分) の更新をサポートしている場合は、特定の子要素を再測定する必要があります、親要素に通知します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1152">The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</span></span>  
  
 <span data-ttu-id="9a7e2-1153">既定では、<xref:System.Windows.FrameworkElement>増分のレイアウトをサポートしていませんし、、<xref:System.Windows.FrameworkElement>クラスのこのメソッドは既定の実装を持ちません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1153">By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation.</span></span> <span data-ttu-id="9a7e2-1154">既定のレイアウト システムの動作を変更することが必要なために、ここでこのメソッドをオーバーライドする必要があるシナリオは一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1154">The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</span></span>  
  
 <span data-ttu-id="9a7e2-1155">クラスが、WPF フレームワーク レベルのレイアウト システムよりも大幅に制限は、使用可能な子要素の型の制限を持っているかどうかには、実装のシナリオ例があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1155">An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</span></span> <span data-ttu-id="9a7e2-1156">これらのカスタム要素の性質上、プロパティが変更された可能性があります意図的を延期する一部のカスタム レイアウトの動作を実装する場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1156">Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</span></span> <span data-ttu-id="9a7e2-1157">たとえば、特定の種類別のレイアウト パスになる通常の変更のメジャー/配置メソッドのオーバーライドを描画パスを子要素を最適化しようとするを遅らせることができます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1157">For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <span data-ttu-id="9a7e2-1158">予想されるフォーカスの変更を決定する方向。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1158">The direction for which a prospective focus change should be determined.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1159">この要素を基準に、指定したフォーカスの移動方向で次にフォーカスを受け取る要素を特定します。ただし、実際のフォーカスの移動は行われません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1159">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1160">フォーカスが実際にスキャンされた場合にフォーカスの移動先となる、次の要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1160">The next element that focus would move to if focus were actually traversed.</span>
          </span>
          <span data-ttu-id="9a7e2-1161">この要素を基準に、指定した方向へフォーカスを移動できない場合は、<see langword="null" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1161">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1162"><xref:System.Windows.FrameworkElement.MoveFocus%2A> 実際には、フォーカスを移動するが関連する方法です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1162"><xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1163">次の例をいくつかのボタンの入力を表すことがある各ボタンを処理するハンドラーを実装する<xref:System.Windows.Input.FocusNavigationDirection>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1163">The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="9a7e2-1164">ハンドラーは、現在のキーボード フォーカス、および呼び出しを持つ要素が追跡<xref:System.Windows.FrameworkElement.PredictFocus%2A>、その要素にし、適切なを指定します<xref:System.Windows.Input.FocusNavigationDirection>の初期化の構文として、<xref:System.Windows.Input.TraversalRequest>指定されたパラメーターを入力します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1164">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.PredictFocus%2A> on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span> <span data-ttu-id="9a7e2-1165">その要素に移動する代わりに<xref:System.Windows.FrameworkElement.MoveFocus%2A>タスクは実行の場合は、ハンドラーが視覚エフェクトの目的で予測されたフォーカス コピー先の物理サイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1165">Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</span></span>  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="9a7e2-1166">
            <see cref="T:System.Windows.Input.TraversalRequest" /> に、<see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.First" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /> のいずれかの方向が指定されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1166">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span>
          </span>
          <span data-ttu-id="9a7e2-1167">これらの方向は、<see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> に対しては有効ではありません (<see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> に対しては有効です)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1167">These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9a7e2-1168">指定した名前オブジェクトの割り当てに使用する名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1168">Name to use for the specified name-object mapping.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="9a7e2-1169">割り当て対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1169">Object for the mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1170">
            <see cref="T:System.Windows.NameScope" /> の登録メソッドへのアクセスを簡略化するアクセサーを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1170">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1171">このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.NameScope.RegisterName%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1171">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="9a7e2-1172">実装は、該当するが見つかるまで、連続する親要素は確認<xref:System.Windows.NameScope>実装を実装する要素の検索で見つかった<xref:System.Windows.Markup.INameScope>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1172">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="9a7e2-1173">名前スコープの詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1173">For more information about namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="9a7e2-1174">呼び出す<xref:System.Windows.FrameworkElement.RegisterName%2A>が正しくコードで作成されたときに、アプリケーションのアニメーションのストーリー ボードをフックするために必要です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1174">Calling <xref:System.Windows.FrameworkElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="9a7e2-1175">これは、プロパティ、キーのいずれかのストーリー ボード作成ため<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>、ターゲット要素への参照を実行することではなく実行時の名前検索を使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1175">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="9a7e2-1176">これは、その要素が、コードから参照渡しでアクセス可能な場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1176">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="9a7e2-1177">ストーリー ボードのターゲットの名前を登録する必要がある理由の詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1177">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="9a7e2-1178">削除する要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1178">The element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1179">指定されたオブジェクトをこの要素の論理ツリーから削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1179">Removes the provided object from this element's logical tree.</span>
          </span>
          <span data-ttu-id="9a7e2-1180">
            <see cref="T:System.Windows.FrameworkElement" /> は、この削除との同期を維持するために、影響を受ける論理ツリー親ポインターを更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1180">
              <see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1181">要素の論理子を表すオブジェクトのコレクションの実装には、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1181">Use this method for the implementation of collections on objects that represent logical children of an element.</span></span> <span data-ttu-id="9a7e2-1182">これは、プロパティの getter または setter、クラスのハンドラーで行うことがあります`Changed`イベント、コンス トラクター、またはコレクション内でそれ自体の種類します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1182">This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="9a7e2-1183">指定された基本コントロール クラスのコンテンツ モデルに適切なものがない限りは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1183">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</span></span> <span data-ttu-id="9a7e2-1184">レベルのサブクラス化を検討してください<xref:System.Windows.Controls.ContentControl>、 <xref:System.Windows.Controls.ItemsControl>、および<xref:System.Windows.Controls.HeaderedItemsControl>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1184">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="9a7e2-1185">これらのクラスを介して専用の論理子の特定の強制使用したモデルのコンテンツを提供する[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]、その他の機能では通常望ましくのサポートに加えて、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]テンプレートを介してスタイルなどのコントロールです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1185">These classes provide a content model with particular enforcement of logical children through dedicated [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1186">次の例では、実装、`Child`カスタム プロパティ<xref:System.Windows.FrameworkElement>独自 visual レイヤーの実装を行うことです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1186">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="9a7e2-1187">プロパティの set アクセス操作子では、古い値がクラスに固有のビジュアル コレクションと同様に、論理ツリーから削除されている値が変更された場合ように設計されています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1187">The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="9a7e2-1188">値がキャッシュされ、標準的な WPF フレームワーク レベル論理ツリーとカスタム ビジュアルのコレクションの両方に、新しい値を追加し、します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1188">The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1189">この要素で <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> が呼び出されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1189">Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1190">このイベントは、親を示します<xref:System.Windows.Controls.ScrollViewer>(またはその派生クラス) を要素を発生させる、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベント表示できるようにする、スクロール可能な地域内です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1190">This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event should be made visible within the scrollable region.</span></span> <span data-ttu-id="9a7e2-1191"><xref:System.Windows.Controls.ScrollViewer>によりマークし、<xref:System.Windows.FrameworkElement.RequestBringIntoView>イベントをイベントのクラス処理を使用して、処理します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1191">The <xref:System.Windows.Controls.ScrollViewer> will then mark the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event as handled, by using class handling of the event.</span></span> <span data-ttu-id="9a7e2-1192">一般に<xref:System.Windows.FrameworkElement.RequestBringIntoView>データ マークしないでまたはいずれかではスクロール可能な領域を制御するすべてのクラスによって処理されるイベント インスタンス ハンドラーと呼ばれる要素の目的の目標を妨害するそう<xref:System.Windows.FrameworkElement.BringIntoView%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1192">In general <xref:System.Windows.FrameworkElement.RequestBringIntoView> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.</span></span>  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-1193">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1193">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1194">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1194">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|<span data-ttu-id="9a7e2-1195">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1195">Routing strategy</span></span>|<span data-ttu-id="9a7e2-1196">バブル</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1196">Bubbling</span></span>|  
|<span data-ttu-id="9a7e2-1197">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1197">Delegate</span></span>|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1198">
            <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1198">Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1199">ローカルで定義されたリソース ディクショナリを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1199">Gets or sets the locally-defined resource dictionary.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1200">ローカルで定義された現在のリソース ディクショナリ。各リソースにはキーでアクセスできます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1200">The current locally-defined dictionary of resources, where each resource can be accessed by key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1201">完全または部分的に定義できるリソース ディクショナリ[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]は、通常、プロパティ要素として作成し、個々 のページまたはアプリケーションのルート要素には、通常します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1201">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="9a7e2-1202">このレベルでリソース ディクショナリを配置すると、ページ内の個々 の子要素 (または任意のページでは、アプリケーションの場合に、) を検索しやすきます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1202">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="9a7e2-1203">ほとんどのアプリケーション シナリオでは、ことをお勧めスタイルが、リソース ディクショナリ内のオブジェクト要素として定義されているスタイル リソース全体を自己完結型できるように、外部リソースとして定義するか (このアプローチは、分担デザイナーと開発者の責任を編集することが必要な物理ファイルを分離することにより、役立ちます)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1203">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="9a7e2-1204">このプロパティをリソース ディクショナリだけがその要素内で直接宣言を返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1204">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="9a7e2-1205">これは、実際のリソース ルックアップ プロセスの子要素がアクセスできる場所の検索方向を再帰的に、各親要素で定義されているリソースとは異なるです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1205">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="9a7e2-1206">リソースは、コレクション内からコードで参照することもできますでリソースが作成されたことに注意してください[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]確実アクセスできなくなりますまで後<xref:System.Windows.FrameworkElement.Loaded>ディクショナリを宣言する要素で発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1206">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="9a7e2-1207">実際には、リソースが解析されるに非同期的におよび not であっても、<xref:System.Windows.FrameworkElement.Loaded>イベントが参照できるように保証、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]リソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1207">In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="9a7e2-1208">このため、通常のみにアクセスする[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]またはその他の実行時のコードの一部としてリソースを定義[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]スタイルや属性の値をリソース拡張機能の参照などの手法です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1208">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="9a7e2-1209">コードによって、リソースにアクセスするときに基本的と等価であるから行われます。 参照に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1209">When you access resources through code, it is essentially equivalent to a  reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="9a7e2-1210">基になる<xref:System.Windows.ResourceDictionary>追加、削除、またはコードを使用してから、コレクション内のリソースを照会するために必要なメソッドをサポートします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1210">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code.</span></span> <span data-ttu-id="9a7e2-1211"><xref:System.Windows.FrameworkElement.Resources%2A>プロパティは、要素を新規または別のリソースのコレクションを完全に置き換えるのシナリオをサポートする設定<xref:System.Windows.ResourceDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1211">The <xref:System.Windows.FrameworkElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="9a7e2-1212">注意して、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]に示す構文の要素を含まない、<xref:System.Windows.ResourceDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1212">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="9a7e2-1213">これは、暗黙の型のコレクション構文の例コレクションの要素を表すタグを省略できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1213">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="9a7e2-1214">代わりに、コレクションに項目として追加される要素を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1214">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="9a7e2-1215">暗黙の型のコレクションの詳細については、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]を参照してください[XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1215">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span> <span data-ttu-id="9a7e2-1216">1 つのケースで、<xref:System.Windows.ResourceDictionary>要素がマージされたディクショナリを導入する場合ではありません通常その子要素として明示的に指定がまだ<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1216">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="9a7e2-1217">詳細については、「[リソース ディクショナリのトピックとマージ](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1217">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-1218">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1218">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-1219">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1219">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-1220">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1220">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="9a7e2-1221">1 つまたは複数のオブジェクト要素定義されているリソース。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1221">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="9a7e2-1222">各リソースのプロパティ要素内で各<xref:System.Windows.ResourceDictionary>に一意の値を持つ必要があります、 [X:key ディレクティブ](~/docs/framework/xaml-services/x-key-directive.md)、値がから取得されたときに、一意のキーとして機能する、<xref:System.Windows.ResourceDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1222">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/docs/framework/xaml-services/x-key-directive.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1223">指定した依存関係プロパティのためのバインディングをこの要素に添付します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1223">Attaches a binding to this element for the specified dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a7e2-1224">バインディングを確立する必要がある対象のプロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1224">Identifies the destination property where the binding should be established.</span>
          </span>
        </param>
        <param name="path">
          <span data-ttu-id="9a7e2-1225">ソース プロパティ名、またはバインドに使用されているプロパティへのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1225">The source property name or the path to the property used for the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1226">指定したソース プロパティ名をデータ ソースへのパスの修飾として使用して、この要素にバインディングを添付します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1226">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1227">バインドの条件を記録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1227">Records the conditions of the binding.</span>
          </span>
          <span data-ttu-id="9a7e2-1228">この戻り値は、エラーをチェックするために役立ちます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1228">This return value can be useful for error checking.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1229">このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>、として現在のインスタンスを渡しますが、 <xref:System.Windows.DependencyObject>、新たに作成および<xref:System.Windows.Data.Binding>に基づいて、指定した`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1229">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="9a7e2-1230">この署名は、単純な既定のバインディングを確立する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1230">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="9a7e2-1231">既定以外の条件へのバインディング プロパティを指定するか、使用する必要がある場合、<xref:System.Windows.Data.MultiBinding>または<xref:System.Windows.Data.PriorityBinding>、使用する必要があります、<xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29>署名します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1231">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1232">次の例では、特定のパスを使用してバインドを設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1232">The following example sets a binding using a specific path.</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a7e2-1233">バインドを確立する必要があるプロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1233">Identifies the property where the binding should be established.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="9a7e2-1234">データ バインディングの詳細を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1234">Represents the specifics of the data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1235">指定したバインディング オブジェクトに基づいて、この要素にバインドをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1235">Attaches a binding to this element, based on the provided binding object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1236">バインドの条件を記録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1236">Records the conditions of the binding.</span>
          </span>
          <span data-ttu-id="9a7e2-1237">この戻り値は、エラーをチェックするために役立ちます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1237">This return value can be useful for error checking.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1238">このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>、現在のインスタンスに渡されます<xref:System.Windows.DependencyObject>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1238">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="9a7e2-1239">フロー方向を指定する要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1239">The element that specifies a flow direction.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9a7e2-1240">方向を指定する列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1240">A value of the enumeration, specifying the direction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1241">指定された要素の <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 添付プロパティの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1241">Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1242">このメソッドは、の添付プロパティの構文をサポートしている、<xref:System.Windows.FrameworkElement.FlowDirection%2A>プロパティ、したがって、指定された要素を子に許可<xref:System.Windows.FrameworkElement>を親要素内での配置のフローの方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1242">This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="9a7e2-1243">現在の値を設定する<xref:System.Windows.FrameworkElement>、ダイレクトを使用して[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]アクセサー<xref:System.Windows.FrameworkElement.FlowDirection%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1243">To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="9a7e2-1244">リソースのバインド先のプロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1244">The property to which the resource is bound.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="9a7e2-1245">リソースの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1245">The name of the resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1246">指定した名前のリソースを検索し、指定したプロパティにそのリソースへのリソース参照を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1246">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1247">リソースの参照の使用に似ていますが、 [DynamicResource マークアップ拡張機能](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)マークアップでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1247">A resource reference is similar to the use of a [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) in markup.</span></span> <span data-ttu-id="9a7e2-1248">リソース参照では、実行時の遅延単位で指定したプロパティの値を提供する内部式を作成します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1248">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="9a7e2-1249">式は、現在の要素が親を再指定する場合や、リソース ディクショナリが内部のイベントによって変更された値が示すされるたびに再評価されます (親の変更は、ディクショナリの検索パスを変更は)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1249">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1250">シリアル化プロセスが、<see cref="P:System.Windows.FrameworkElement.Resources" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1250">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1251">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkElement.Resources" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1251">
              <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1252">これは、戻り値は`true`、ローカルの少なくとも 1 つのキーを持つリソースがある限り、<xref:System.Windows.FrameworkElement.Resources%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1252">This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1253">シリアル化プロセスが、<see cref="P:System.Windows.FrameworkElement.Style" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1253">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1254">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkElement.Style" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1254">
              <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1255">返されます`true`場合、<xref:System.Windows.Style>ローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1255">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1256">シリアル化プロセスが、<see cref="P:System.Windows.FrameworkElement.Triggers" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1256">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1257">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkElement.Triggers" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1257">
              <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1258">このメソッドが戻る`true`場合、<xref:System.Windows.FrameworkElement.Triggers%2A>プロパティがローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1258">This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1259">この要素の <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> プロパティまたは <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> プロパティの値が変更されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1259">Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1260">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1260">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9a7e2-1261">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイルでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1261">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9a7e2-1262">レイアウト システム内のプロパティを読み取り、<xref:System.Windows.SizeChangedEventArgs>報告されるサイズの変更を重要な考慮するかどうかを決定する、このイベントの引数のクラスです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1262">The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant.</span></span> <span data-ttu-id="9a7e2-1263">これにより、レイアウト システムや、コントロールに固有のレイアウトの実装を強制的に新旧の高さまたは幅の値の視覚的にこうしたわずかな違いのためのレイアウト変更を回避します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1263">This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</span></span> <span data-ttu-id="9a7e2-1264">こうしたわずかな違いは、浮動小数点データ型の丸め処理を行うか、同じ結果の計算があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1264">The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</span></span>  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-1265">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1265">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1266">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1266">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|<span data-ttu-id="9a7e2-1267">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1267">Routing strategy</span></span>|<span data-ttu-id="9a7e2-1268">直接</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1268">Direct</span></span>|  
|<span data-ttu-id="9a7e2-1269">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1269">Delegate</span></span>|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1270">
            <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1270">Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1271">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1271">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-1272">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1272">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-1273">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1273">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-1274">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1274">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-1275">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1275">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1276">この要素の既存のプロパティ バインディングのソース値が変更されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1276">Occurs when the source value changes for any existing property binding on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1277">このイベントのエイリアスを作成する、<xref:System.Windows.Data.Binding.SourceUpdated>いずれかが発生するイベントを<xref:System.Windows.Data.Binding>この要素に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1277">This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-1278">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1278">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1279">この要素が使用するスタイルを、表示されるときに取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1279">Gets or sets the style used by this element when it is rendered.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1280">要素に適用される既定以外のスタイル (存在する場合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1280">The applied, nondefault style for the element, if present.</span>
          </span>
          <span data-ttu-id="9a7e2-1281">それ以外の場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1281">Otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9a7e2-1282">既定で構築された <see cref="T:System.Windows.FrameworkElement" /> の既定値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1282">The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1283">コントロールの現在のスタイルは多くの場合、コントロール テーマから既定のスタイルによって提供されるまたはスタイルから通常によって適用されるその種類のコントロールにページまたはアプリケーション レベル (暗黙的なスタイル) のリソース。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1283">For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="9a7e2-1284">このプロパティは既定の設定したり返したり (テーマ) のスタイルが、暗黙的なスタイルまたは明示的なスタイル要素で動作しているのか、返します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1284">This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</span></span> <span data-ttu-id="9a7e2-1285">暗黙的または明示的なスタイルの場合、スタイルをリソースとして指定またはローカルに定義されているかどうかは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1285">In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="9a7e2-1286">スタイルの設定の制限があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1286">Setting the styles has some restrictions.</span></span> <span data-ttu-id="9a7e2-1287">全体をリセットする<xref:System.Windows.FrameworkElement.Style%2A>プロパティを新しい<xref:System.Windows.Style>、いつでもレイアウト再構成を強制します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1287">You can reset the entire <xref:System.Windows.FrameworkElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="9a7e2-1288">ただし、そのスタイルが使用中で読み込まれた要素で配置されるとすぐとして、<xref:System.Windows.Style>と見なすべきシールします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1288">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="9a7e2-1289">使用するスタイルの個々 のプロパティを変更しようとしています (などのコレクション内のすべて<xref:System.Windows.Style.Setters%2A>) 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1289">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="9a7e2-1290">マークアップで定義されているスタイルは、(リソース) のリソース ディクショナリから読み込まれるか (インライン スタイル) に含まれているページが読み込まれるとすぐに使用すると見なされます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1290">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="9a7e2-1291"><xref:System.Windows.FrameworkElement.Style%2A> 特殊な優先順位を持つ依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1291"><xref:System.Windows.FrameworkElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="9a7e2-1292">ローカルに設定スタイルが通常プロパティ システムに最高の優先順位で動作します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1292">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="9a7e2-1293">場合、<xref:System.Windows.FrameworkElement.Style%2A>プロパティ システムは、そのタイプが指定されたローカルまたはアプリケーションのリソースで暗黙的なスタイルのチェックの読み込み中にこの時点では、null がします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1293">If the <xref:System.Windows.FrameworkElement.Style%2A> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</span></span> <span data-ttu-id="9a7e2-1294">スタイルは、この手順の後にも null し、動作するスタイル プレゼンテーションのため、通常に由来 (テーマ) の既定のスタイルもに既定のスタイルが返されない場合、<xref:System.Windows.FrameworkElement.Style%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1294">If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkElement.Style%2A> property value.</span></span> <span data-ttu-id="9a7e2-1295">参照してください[依存関係プロパティの値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)または[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1295">See [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) or [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-1296">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1296">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-1297">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1297">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-1298">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1298">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-1299">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1299">*resourceExtension*</span></span>  
 <span data-ttu-id="9a7e2-1300">次のいずれかの: または。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1300">One of the following: , or .</span></span> <span data-ttu-id="9a7e2-1301">参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1301">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9a7e2-1302">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1302">*styleResourceKey*</span></span>  
 <span data-ttu-id="9a7e2-1303">要求されているスタイルを識別するキー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1303">The key that identifies the style being requested.</span></span> <span data-ttu-id="9a7e2-1304">このキーは既存のリソースを<xref:System.Windows.ResourceDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1304">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a7e2-1305">プロパティ要素構文は技術的に可能であれば、ほとんどのシナリオでスタイルをお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1305">Property element syntax is technically possible, but not recommended for most style scenarios.</span></span> <span data-ttu-id="9a7e2-1306">参照してください[インライン スタイルとテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1306">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="9a7e2-1307">バインドの参照を使用して、または<xref:System.Windows.Data.Binding>も可能ですが、一般的ではないです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1307">A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-1308">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1308">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1309">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1309">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|<span data-ttu-id="9a7e2-1310">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1310">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1311">次の例では、リソース ディクショナリにスタイルを定義します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1311">The following example defines a style in a resource dictionary.</span></span>  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1312">
            <see cref="P:System.Windows.FrameworkElement.Style" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1312">Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">
          <span data-ttu-id="9a7e2-1313">要求されたアンビエント プロパティの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1313">The name of the requested ambient property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1314">このメンバーの説明については、<see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> メソッドのトピックを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1314">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1315">
            <paramref name="propertyName" /> を使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1315">
              <see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1316">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1316">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9a7e2-1317">これは、<xref:System.Windows.FrameworkElement> のインスタンスが <xref:System.Windows.Markup.IQueryAmbient> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1317">It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1318">この要素に関するユーザー定義情報の格納に使用できる任意のオブジェクト値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1318">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1319">任意の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1319">The intended value.</span>
          </span>
          <span data-ttu-id="9a7e2-1320">このプロパティには既定値はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1320">This property has no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1321">このプロパティは、その他の Microsoft のプログラミング モデルで、アプリケーションまたは Windows フォームの Visual Basic などのタグのプロパティに似ています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1321">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="9a7e2-1322"><xref:System.Windows.FrameworkElement.Tag%2A> いずれかに関する基本的なカスタム情報を格納する既存プロパティ場所を指定するためのものでは<xref:System.Windows.FrameworkElement>しなくてをサブクラス化要素です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1322"><xref:System.Windows.FrameworkElement.Tag%2A> is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.</span></span>  
  
 <span data-ttu-id="9a7e2-1323">プロパティ要素の使用を設定するために使用する必要があるため、このプロパティは、オブジェクトを受け取り、<xref:System.Windows.FrameworkElement.Tag%2A>文字列などの組み込みの既知の型コンバーターを使用したオブジェクト以外に XAML のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1323">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="9a7e2-1324">この方法で使用されるオブジェクトは通常されませんが、標準の WPF 名前空間内で短くてしたがって可能性がありますを外部の名前空間の名前空間のマッピングの XAML 要素として導入するためにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1324">Objects used in this manner are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span> <span data-ttu-id="9a7e2-1325">詳細については、「 [XAML 名前空間と WPF XAML のマッピングの Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)と[XAML と WPF のカスタム クラス](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1325">For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) and [XAML and Custom Classes for WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-1326">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1326">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1327">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1327">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.TagProperty>|  
|<span data-ttu-id="9a7e2-1328">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1328">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-1329">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1329">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1330">
            <see cref="P:System.Windows.FrameworkElement.Tag" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1330">Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1331">この要素のプロパティ バインディングのターゲット値が変更されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1331">Occurs when the target value changes for any property binding on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1332">このイベントのエイリアスを作成する、<xref:System.Windows.Data.Binding.TargetUpdated>いずれかが発生するイベントを<xref:System.Windows.Data.Binding>この要素に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1332">This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="9a7e2-1333">通常つまり、対象のバインディングは双方向のバインドおよびバインドされた依存関係プロパティが確認された、以前プロパティの値が現在の検証またはプロパティまたはデータ ソースをサポートするキャッシュのスキームに従った有効なです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1333">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</span></span>  
  
 <span data-ttu-id="9a7e2-1334">イベント データを使用して、<xref:System.Windows.FrameworkElement.TargetUpdated>ターゲット値の更新を報告している特定のプロパティを決定するイベントです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1334">Use the event data of the <xref:System.Windows.FrameworkElement.TargetUpdated> event to determine the specific property that is reporting the target value update.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-1335">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1335">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1336">この要素の親テンプレートへの参照を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1336">Gets a reference to the template parent of this element.</span>
          </span>
          <span data-ttu-id="9a7e2-1337">このプロパティは、要素がテンプレートによって作成されていない場合は無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1337">This property is not relevant if the element was not created through a template.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1338">要素が<see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" />を作成するには、この要素を発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1338">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span>
          </span>
          <span data-ttu-id="9a7e2-1339">この値は、頻繁に<see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1339">This value is frequently <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1340"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> 多くの場合は、`null`アプリケーション マークアップやコード内に作成されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1340"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> is frequently `null` for objects that are created in your application markup or code.</span></span> <span data-ttu-id="9a7e2-1341">これは、テンプレートではなく、それらのオブジェクトを直接作成するためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1341">This is because you create those objects directly, not via a template.</span></span> <span data-ttu-id="9a7e2-1342">オブジェクト参照を取得するかの一般的な名前参照で、ルートから論理ツリーをウォークすることによって、テンプレートから付属していません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1342">Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</span></span>  
  
 <span data-ttu-id="9a7e2-1343">あるケース<xref:System.Windows.FrameworkElement.TemplatedParent%2A>できない可能性があります`null`visual を使用してツリーをウォーク特定低水準入力イベントのイベント処理のヒット テストなどの操作を含める<xref:System.Windows.Media.VisualTreeHelper>、または列挙子を使用する場合があります戻り値のテンプレートから得られた要素。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1343">Cases where <xref:System.Windows.FrameworkElement.TemplatedParent%2A> might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates.</span></span> <span data-ttu-id="9a7e2-1344">別の場合は、明示的に呼び出すかどうか<xref:System.Windows.FrameworkTemplate.FindName%2A>既存に対して<xref:System.Windows.FrameworkTemplate>され、返されたオブジェクトを操作します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1344">Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.</span></span>  
  
 <span data-ttu-id="9a7e2-1345">テンプレートは、実際には共有オブジェクト、テンプレートの内容が 1 回だけ作成される場所です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1345">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="9a7e2-1346">そのため、テンプレートから得られた要素へのオブジェクト参照を取得する場合があります、見かけ上の論理ツリーは、ページのルートには到達できません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1346">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="9a7e2-1347">このようなテンプレートへの参照をページの論理ツリーを接続するために取得する必要があります、<xref:System.Windows.FrameworkElement.TemplatedParent%2A>値し、必要に応じて、その要素ツリーのナビゲーションを続行します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1347">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1348">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] でこの要素に対して表示されるツールヒント オブジェクトを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1348">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1349">ツールヒント オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1349">The tooltip object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1350">このプロパティの値が型の場合<xref:System.Windows.Controls.ToolTip>、その値は、ツール ヒントで使用される、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1350">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="9a7e2-1351">値は、他の任意の型のかどうかは、その値として使用されます、*コンテンツ*の<xref:System.Windows.Controls.ToolTip>提供システムによって (作成) します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1351">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="9a7e2-1352">詳細については、「<xref:System.Windows.Controls.ToolTipService>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1352">For more information, see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="9a7e2-1353">サービス クラスはさらにカスタマイズするために使用する添付プロパティを提供する<xref:System.Windows.Controls.ToolTip>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1353">The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-1354">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1354">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-1355">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1355">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-1356">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1356">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-1357">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1357">*toolTipContent*</span></span>  
 <span data-ttu-id="9a7e2-1358">文字列の表示テキストになる、<xref:System.Windows.FrameworkElement.ToolTip%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1358">A string that becomes the display text for the <xref:System.Windows.FrameworkElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-1359">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1359">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="9a7e2-1360">コンテンツとして使用されるオブジェクト要素の形式で提供される一部のオブジェクト、<xref:System.Windows.FrameworkElement>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1360">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement> .</span></span> <span data-ttu-id="9a7e2-1361">通常、<xref:System.Windows.FrameworkElement>またはその他の要素のレイアウトの合成を作成する、 <xref:System.Windows.FrameworkElement.ToolTip%2A>、最終的に、合成内のテキスト コンテンツを格納します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1361">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="9a7e2-1362">この使用率、<xref:System.Windows.Controls.ToolTip>要素が作成、解析されたから暗黙的に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、および*方法*としてコンテンツを設定その<xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1362">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="9a7e2-1363"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="9a7e2-1363"><`ToolTip` .../></span></span>  
 <span data-ttu-id="9a7e2-1364">「<xref:System.Windows.Controls.ToolTip>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1364">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-1365">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1365">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1366">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1366">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|<span data-ttu-id="9a7e2-1367">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1367">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a7e2-1368">なし</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1368">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1369">次の例を作成、<xref:System.Windows.Controls.ToolTip>コードとし、セットで、<xref:System.Windows.FrameworkElement.ToolTip%2A>プロパティを<xref:System.Windows.Controls.Primitives.StatusBar>コントロール。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1369">The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the <xref:System.Windows.FrameworkElement.ToolTip%2A> property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.</span></span>  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1370">要素のツールヒントが閉じる直前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1370">Occurs just before any tooltip on the element is closed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1371">マーク、<xref:System.Windows.FrameworkElement.ToolTipClosing>イベントを処理が、ツールヒントの終了をキャンセルしていません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1371">Marking the <xref:System.Windows.FrameworkElement.ToolTipClosing> event as handled does not cancel closing the tooltip.</span></span> <span data-ttu-id="9a7e2-1372">ツールヒントが表示されたらは、UI でのユーザー操作への応答でのみ行われますツールヒントを終了します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1372">Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</span></span>  
  
 <span data-ttu-id="9a7e2-1373">このイベントをすることはできません、<xref:System.Windows.EventTrigger>スタイルでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1373">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="9a7e2-1374">これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1374">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-1375">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1375">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1376">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1376">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|<span data-ttu-id="9a7e2-1377">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1377">Routing strategy</span></span>|<span data-ttu-id="9a7e2-1378">直接</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1378">Direct</span></span>|  
|<span data-ttu-id="9a7e2-1379">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1379">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="9a7e2-1380">オーバーライド<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1380">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1381">
            <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1381">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1382">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1382">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-1383">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1383">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-1384">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1384">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-1385">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1385">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-1386">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1386">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1387">要素のツールヒントが開かれたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1387">Occurs when any tooltip on the element is opened.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1388">ツールヒントが表示されないように、ui で、ハンドラーを<xref:System.Windows.FrameworkElement.ToolTipOpening>マークを付けることができます、<xref:System.Windows.Controls.ToolTipEventArgs>イベント データを処理します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1388">To prevent a tooltip from appearing in the UI, your handler for <xref:System.Windows.FrameworkElement.ToolTipOpening> can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled.</span></span> <span data-ttu-id="9a7e2-1389">それ以外の場合、ツールヒントが表示されるの値を使用して、<xref:System.Windows.FrameworkElement.ToolTip%2A>ツールヒントのコンテンツとプロパティ。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1389">Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content.</span></span> <span data-ttu-id="9a7e2-1390">もう 1 つの可能なシナリオは、の値をリセットするハンドラーを記述することも、<xref:System.Windows.FrameworkElement.ToolTip%2A>ツールヒントが表示される直前にイベント ソースである要素のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1390">Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.</span></span>  
  
 <span data-ttu-id="9a7e2-1391"><xref:System.Windows.FrameworkElement.ToolTipOpening> 発生しません。 場合の値<xref:System.Windows.FrameworkElement.ToolTip%2A>は`null`それ以外の場合、または設定解除します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1391"><xref:System.Windows.FrameworkElement.ToolTipOpening> will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset.</span></span> <span data-ttu-id="9a7e2-1392">意図的に設定しないでください<xref:System.Windows.FrameworkElement.ToolTip%2A>に`null`tooltip が開いているか、; これは、ツールヒントを閉じるための効果がありませんを開き、UI に望ましくない visual アーティファクトを作成、代わりにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1392">Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</span></span>  
  
 <span data-ttu-id="9a7e2-1393"><xref:System.Windows.FrameworkElement.ToolTipOpening>イベントをすることはできません、<xref:System.Windows.EventTrigger>スタイルでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1393">The <xref:System.Windows.FrameworkElement.ToolTipOpening> event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="9a7e2-1394">これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1394">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-1395">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1395">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1396">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1396">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="9a7e2-1397">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1397">Routing strategy</span></span>|<span data-ttu-id="9a7e2-1398">直接</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1398">Direct</span></span>|  
|<span data-ttu-id="9a7e2-1399">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1399">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="9a7e2-1400">オーバーライド<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1400">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1401">
            <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1401">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1402">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1402">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-1403">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1403">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-1404">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1404">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-1405">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1405">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-1406">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1406">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1407">
            <see cref="P:System.Windows.FrameworkElement.ToolTip" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1407">Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1408">この要素に直接、または子要素で設定されているトリガーのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1408">Gets the collection of triggers established directly on this element, or in child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1409">厳密に型指定された <see cref="T:System.Windows.Trigger" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1409">A strongly typed collection of <see cref="T:System.Windows.Trigger" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9a7e2-1410">このプロパティのみ設定できます[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]コレクション オブジェクトにアクセスして、追加などのさまざまなメソッドを使用して、表示、コレクション構文を使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1410">This property can only be set in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</span></span> <span data-ttu-id="9a7e2-1411">コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込みです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1411">The property to access the collection object itself is read-only, the collection itself is read-write.</span></span> <span data-ttu-id="9a7e2-1412">プロパティは、ルート要素にのみ存在します。検索や他の場所で設定しようとしています。 には、スローされる例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1412">The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="9a7e2-1413">このプロパティでは、この要素で使用されているスタイルの一部として存在するトリガーを確認できません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1413">This property does not enable you to examine triggers that exist as part of styles in use on this element.</span></span> <span data-ttu-id="9a7e2-1414">マークアップまたはコードで、このコレクションに追加されることはトリガーのコレクションを報告するだけです。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1414">It only reports the collection of triggers that are literally added to the collection, either in markup or code.</span></span> <span data-ttu-id="9a7e2-1415">要素は、既存の既定では、このような要素を通常必要はありません (テンプレートからのインスタンス)。コントロールの複合スタイルの代わりに確立されるまでに由来するトリガーの一般的なであります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1415">Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</span></span>  
  
 <span data-ttu-id="9a7e2-1416">動作の観点から (のどの要素の宣言元のどちらの効果を確立しようとして<xref:System.Windows.FrameworkElement.Triggers%2A>コレクション)、トリガーを起動する条件とトリガーの影響の両方でこの要素がありますまたは論理ツリー内には、その子要素があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1416">In terms of behavior (and trying to establish which effect came from which element's declared <xref:System.Windows.FrameworkElement.Triggers%2A> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</span></span> <span data-ttu-id="9a7e2-1417">などの有効期間イベントを使用する場合は、<xref:System.Windows.FrameworkElement.Loaded>をこのコレクションを取得するには、子要素のトリガーできない可能性がありますまだ完全に読み込まれると、コレクションが実行時に真にするより小さくなります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1417">Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</span></span>  
  
 <span data-ttu-id="9a7e2-1418">要素に設定されているトリガーのコレクションのみをサポートする注<xref:System.Windows.EventTrigger>、ありませんプロパティ トリガー (<xref:System.Windows.Trigger>)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1418">Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>).</span></span> <span data-ttu-id="9a7e2-1419">プロパティ トリガーを必要とする場合は、スタイルまたはテンプレート内でこれらを挿入し、し、そのスタイルまたはテンプレートの要素に代入するかする必要があります経由で直接、<xref:System.Windows.FrameworkElement.Style%2A>プロパティ、または暗黙的なスタイル参照を通じて間接的にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1419">If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a7e2-1420">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1420">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-1421">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1421">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-1422">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1422">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="9a7e2-1423">1 つ以上定義されている<xref:System.Windows.EventTrigger>要素。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1423">One or more defined <xref:System.Windows.EventTrigger> elements.</span></span> <span data-ttu-id="9a7e2-1424">このような個々 のトリガーは、有効なストーリー ボード操作および参照を格納すると想定されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1424">Each such trigger is expected to contain valid storyboard actions and references.</span></span> <span data-ttu-id="9a7e2-1425">このコレクションは、ページのルート要素でのみ設定できますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1425">Note that this collection can only be established on the root element of a page.</span></span> <span data-ttu-id="9a7e2-1426">詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1426">For more information, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">
          <span data-ttu-id="9a7e2-1427">検索するリソースのキー識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1427">The key identifier of the resource to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1428">指定されたキーを使用してリソースを検索し、見つかった場合はそのリソースを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1428">Searches for a resource with the specified key, and returns that resource if found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9a7e2-1429">見つかったリソース。指定した <paramref name="key" /> のリソースが見つからない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1429">The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1430">呼び出し元の要素で、リソースが見つからない場合は、親リソースのツリーが論理ツリーを上方向へ検索ツリーになる同じ方法で検索すると、リソースが要求されたキーによって実行時にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1430">If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</span></span> <span data-ttu-id="9a7e2-1431">このメソッドを返します`null`そのキーのリソースが存在しない任意の場所リソース ツリーで、時に、ツリーの既存の条件ごとの場合にのみを<xref:System.Windows.FrameworkElement.TryFindResource%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1431">The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <xref:System.Windows.FrameworkElement.TryFindResource%2A> is called.</span></span>  
  
 <span data-ttu-id="9a7e2-1432">通常返されたリソース値に設定しようとしているプロパティの型を戻り値をキャストするとすぐにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1432">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="9a7e2-1433"><xref:System.Windows.FrameworkElement.FindResource%2A>メソッドが指定されたキーを持つリソースが返されない場合、例外をスローする点を除いて、同様の動作がします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1433">The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1434">次の例は、ここで設定されているクリックされたボタン、背景ブラシ リソース定義が呼び出すことによって取得ボタンとして実装<xref:System.Windows.FrameworkElement.TryFindResource%2A>自体にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1434">The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <xref:System.Windows.FrameworkElement.TryFindResource%2A> on itself.</span></span> <span data-ttu-id="9a7e2-1435">これは、要素のツリーされ、リソースを検索 (で、リソースそれ自体が定義されている[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]は表示されません)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1435">This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and is not shown).</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1436">読み込まれた要素の要素ツリーから要素が削除されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1436">Occurs when the element is removed from within an element tree of loaded elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1437">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1437">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9a7e2-1438">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイルでします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1438">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9a7e2-1439"><xref:System.Windows.FrameworkElement.Loaded> および<xref:System.Windows.FrameworkElement.Unloaded>両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1439"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="9a7e2-1440">テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1440">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="9a7e2-1441">したがって<xref:System.Windows.FrameworkElement.Unloaded>そのページから移動したときにのみ発生すると見なされますことはできません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1441">Therefore <xref:System.Windows.FrameworkElement.Unloaded> cannot be assumed to occur only on navigation away from the page.</span></span>  
  
 <span data-ttu-id="9a7e2-1442">なお、<xref:System.Windows.FrameworkElement.Unloaded>アプリケーションがシャット ダウンを開始した後、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1442">Note that the <xref:System.Windows.FrameworkElement.Unloaded> event is not raised after an application begins shutting down.</span></span> <span data-ttu-id="9a7e2-1443">によって、条件が定義されているときに、アプリケーションのシャット ダウンが発生、<xref:System.Windows.Application.ShutdownMode%2A>プロパティが発生します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1443">Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs.</span></span> <span data-ttu-id="9a7e2-1444">ハンドラー内でクリーンアップ コードを配置する場合、<xref:System.Windows.FrameworkElement.Unloaded>など、イベント、<xref:System.Windows.Window>または<xref:System.Windows.Controls.UserControl>に呼び出すことはできません期待どおりにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1444">If you place cleanup code within a handler for the <xref:System.Windows.FrameworkElement.Unloaded> event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a7e2-1445">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1445">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1446">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1446">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|<span data-ttu-id="9a7e2-1447">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1447">Routing strategy</span></span>|<span data-ttu-id="9a7e2-1448">直接</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1448">Direct</span></span>|  
|<span data-ttu-id="9a7e2-1449">Delegate</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1449">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1450">
            <see cref="E:System.Windows.FrameworkElement.Unloaded" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1450">Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1451">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1451">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a7e2-1452">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1452">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a7e2-1453">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1453">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a7e2-1454">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1454">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a7e2-1455">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1455">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9a7e2-1456">現在のスコープから削除する名前とオブジェクトのペアの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1456">Name of the name-object pair to remove from the current scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9a7e2-1457">
            <see cref="T:System.Windows.NameScope" /> の登録解除メソッドへのアクセスを簡略化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1457">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1458">だけで済みます名の登録解除に同じ名前の別の要素を再登録する場合。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1458">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1459">現在の <see cref="T:System.Windows.FrameworkElement" /> に既定のスタイルを再度適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1459">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1460">レイアウトの間に、この要素のサイズおよび位置にレイアウトの丸めを適用するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1460">Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1461">レイアウトの丸めを適用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1461">
              <see langword="true" /> if layout rounding is applied; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9a7e2-1462">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1462">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1463">ときに、<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>要素のプロパティは`true`、中に計算されるすべての整数以外のピクセル値、<xref:System.Windows.UIElement.Measure%2A>と<xref:System.Windows.UIElement.Arrange%2A>パスは全体のピクセル値に丸められます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1463">When the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.</span></span>  
  
 <span data-ttu-id="9a7e2-1464">このプロパティは、子要素によって継承されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1464">This property is inherited by child elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a7e2-1465">設定する必要があります<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>に`true`ルート要素にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1465">You should set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root element.</span></span> <span data-ttu-id="9a7e2-1466">レイアウト システム子座標を親座標; に追加します。そのため、親座標がピクセルの境界にない場合は、子座標もいないピクセルの境界にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1466">The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</span></span> <span data-ttu-id="9a7e2-1467">場合<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>ルートにある設定を設定できません<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>を希望する効果を取得する子にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1467">If <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.</span></span>  
  
 <span data-ttu-id="9a7e2-1468">半透明のエッジ デバイス ピクセルの途中で、エッジになった場合に、アンチ エイリアス処理によって生成されるを排除するピクセルの境界にオブジェクトを描画します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1468">Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</span></span> <span data-ttu-id="9a7e2-1469">次の図は、デバイスのピクセルの中央にある単一のピクセル幅の行の出力を示します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1469">The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</span></span> <span data-ttu-id="9a7e2-1470">左側の線はレイアウトの丸めが使用されないため、アンチ エイリアス処理します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1470">The line on the left does not use layout rounding and is anti-aliased.</span></span> <span data-ttu-id="9a7e2-1471">右側の線は、レイアウトの丸めを使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1471">The line on the right uses layout rounding.</span></span>  
  
 <span data-ttu-id="9a7e2-1472">![アンチ&#45;エイリアス線が単一のピクセル線と比較します。](~/add/media/pixelsnaplinecompare.PNG "単一のピクセル線と比較したアンチ エイリアス線。")</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1472">![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG "Anti-aliased line compared to single pixel line.")</span></span>  
  
 <span data-ttu-id="9a7e2-1473">レイアウトの丸めを使用する場合と<xref:System.Windows.GridUnitType.Star>サイズ変更、レイアウト システムを作成小さな違いサブピクセル レンダリングを避けるために、列または行の計測結果にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1473">When you use layout rounding and <xref:System.Windows.GridUnitType.Star> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</span></span> <span data-ttu-id="9a7e2-1474">たとえば、グリッドがある 3 列のサイズの 100 の合計幅<xref:System.Windows.GridUnitType.Star>、3 つの列を作成する代わりに 33.3 の幅が同じ、レイアウト システムは、幅が 33 と 34 の幅を持つ 2 つの列を作成します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1474">For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType.Star>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a7e2-1475">.NET 4.6 での変更にはレイアウトの境界線を持つコントロールのクリッピングの発生を削減する丸め処理が行われました。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1475">In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</span></span> <span data-ttu-id="9a7e2-1476">既定では、この機能は、ターゲット フレームワークが .NET Framework 4.6 以降である場合に有効にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1476">By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</span></span> <span data-ttu-id="9a7e2-1477">App.config ファイルに次の設定を追加することで、新しい動作を以前のバージョンの framework を対象とするアプリケーションで選択できます:`<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>`設定は、のみ、アプリケーションが .NET Framework 4.6 で実行されているときにします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1477">Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1478">次の例では、影響を<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>プロパティは、単一のピクセル幅の行にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1478">The following example demonstrates the effect that the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property has on a single pixel-width line.</span></span> <span data-ttu-id="9a7e2-1479">左側の線がレイアウトの丸めを使用していませんし、右側の線がレイアウトの丸めを使用します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1479">The line on the left does not use layout rounding and the line on the right uses layout rounding.</span></span> <span data-ttu-id="9a7e2-1480">緩やかに変化は、ウィンドウをサイズ変更、レイアウトの丸めによる、違いを確認します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1480">If you slowly resize the window, you can see the difference that layout rounding makes.</span></span>  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1481">
            <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1481">Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1482">この要素が、Panel またはアイテム コントロールのような親要素内に作成されるときに適用される垂直方向の配置特性を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1482">Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1483">垂直方向の配置の設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1483">A vertical alignment setting.</span>
          </span>
          <span data-ttu-id="9a7e2-1484">既定値は、<see cref="F:System.Windows.VerticalAlignment.Stretch" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1484">The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1485">ときに<xref:System.Windows.FrameworkElement.Height%2A>と<xref:System.Windows.FrameworkElement.Width%2A>要素にプロパティが明示的に設定されている、これらの測定値はこのプロパティの設定通常の効果をキャンセル、レイアウトで優先<xref:System.Windows.VerticalAlignment.Stretch>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1485">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="9a7e2-1486"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1486"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="9a7e2-1487">この特定の依存関係プロパティでは、派生した要素のクラス、特にコントロールで設定が異なります見かけ上の「既定」値がよくあります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1487">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</span></span> <span data-ttu-id="9a7e2-1488">これは、2 つの方法のいずれかで一般的に発生します特定の派生クラスがその既定値を設定するためのさまざまなメタデータ、依存関係プロパティが再登録されている。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1488">This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="9a7e2-1489">たとえば、明確な「既定」の<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>の<xref:System.Windows.Controls.ComboBoxItem>コントロールになります<xref:System.Windows.VerticalAlignment.Center>場合でも、<xref:System.Windows.Controls.ComboBoxItem>継承<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>から直接<xref:System.Windows.FrameworkElement>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1489">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment.Center>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a7e2-1490">これは、既定のスタイル内でその値がリセットされたため<xref:System.Windows.Controls.ComboBoxItem>スタイルのコントロール テンプレート内で。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1490">This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.</span></span>  
  
 <span data-ttu-id="9a7e2-1491"><xref:System.Windows.Controls.Canvas> 使用しません<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>ためのレイアウトを作成するときに<xref:System.Windows.Controls.Canvas>絶対位置に基づきます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1491"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="9a7e2-1492">継承された場合<xref:System.Windows.Controls.ComboBoxItem>またはその派生クラス、<xref:System.Windows.Controls.ComboBoxItem>にするには、このプロパティの既定値を再定義<xref:System.Windows.VerticalAlignment.Center>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1492">When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment.Center>.</span></span>  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-1493">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1493">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1494">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1494">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|<span data-ttu-id="9a7e2-1495">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1495">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1496">
            <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1496">Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1497">この要素内でビジュアル子要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1497">Gets the number of visual child elements within this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1498">この要素のビジュアル子要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1498">The number of visual child elements for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1499"><xref:System.Windows.FrameworkElement>の実装<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>常に 0 または 1 個のいずれかを返します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1499">The <xref:System.Windows.FrameworkElement> implementation of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> always returns either zero or one.</span></span> <span data-ttu-id="9a7e2-1500">1 つを超える可能性がある子ビジュアル コレクションを保持するクラスは、この両方のプロパティをオーバーライドする必要がありますと<xref:System.Windows.FrameworkElement.GetVisualChild%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1500">Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-1501">このプロパティは、現在の子コレクションのレイアウトのオーバーライドを実装するための上限を決定する使用一般的に (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>、 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1501">This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a7e2-1502">次の例は、カスタムの装飾がで宣言されている値を使用する方法を示しています、<xref:System.Windows.Media.VisualCollection>のオーバーライドを値は、複数のビジュアルの子を保持し、これらを報告する<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>と<xref:System.Windows.FrameworkElement.GetVisualChild%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1502">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="9a7e2-1503">クラスは、子要素のコレクションで複数のビジュアルの子をサポートする場合は、そのコレクション内の要素の数を返すには、このプロパティをオーバーライドします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1503">If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</span>
            </span>
            <span data-ttu-id="9a7e2-1504">これは、コレクション オブジェクト自体が、カウントを返す場合でも行う必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1504">You must do this even if the collection object itself returns a count.</span>
            </span>
            <span data-ttu-id="9a7e2-1505">WPF フレームワーク レベルの要素のレイアウト ロジックは、すべての要素がを通じて有効なカウントを返すことを前提、<see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" />プロパティです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="9a7e2-1505">Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> property.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1506">要素の幅を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1506">Gets or sets the width of the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9a7e2-1507">要素の幅 ([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1507">The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span>
          </span>
          <span data-ttu-id="9a7e2-1508">既定値は <see cref="F:System.Double.NaN" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1508">The default value is <see cref="F:System.Double.NaN" />.</span>
          </span>
          <span data-ttu-id="9a7e2-1509">この値は 0.0 以上にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1509">This value must be equal to or greater than 0.0.</span>
          </span>
          <span data-ttu-id="9a7e2-1510">上限については、「解説」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1510">See Remarks for upper bound information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a7e2-1511">これには 3 つのプロパティのいずれかの<xref:System.Windows.FrameworkElement>幅情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1511">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="9a7e2-1512">その他の 2 つは<xref:System.Windows.FrameworkElement.MinWidth%2A>と<xref:System.Windows.FrameworkElement.MaxWidth%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1512">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="9a7e2-1513">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<xref:System.Windows.FrameworkElement.MinWidth%2A>、受け入れられ、する必要があります<xref:System.Windows.FrameworkElement.MaxWidth%2A>、最後に、境界内にある場合のこれら各<xref:System.Windows.FrameworkElement.Width%2A>です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1513">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9a7e2-1514">このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1514">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="9a7e2-1515">これに対しての値、<xref:System.Windows.FrameworkElement.ActualWidth%2A>異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1515">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary.</span></span> <span data-ttu-id="9a7e2-1516">レイアウトが、何らかの理由により推奨されるサイズを拒否している可能性がありますがします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1516">The layout may have rejected the suggested size for some reason.</span></span> <span data-ttu-id="9a7e2-1517">また、レイアウト システム自体が、システムのプロパティ セット<xref:System.Windows.FrameworkElement.Width%2A>処理されない可能性がある特定のプロパティの変更をまだサイジングとします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1517">Also, the layout system itself works asynchronously relative to the property system set of <xref:System.Windows.FrameworkElement.Width%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="9a7e2-1518">さらに許容される<xref:System.Double>値、このプロパティにすることができますも<xref:System.Double.NaN?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1518">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a7e2-1519">これは、自動サイズ変更動作を指定する方法です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1519">This is how you specify auto sizing behavior.</span></span> <span data-ttu-id="9a7e2-1520">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1520">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="9a7e2-1521">自動サイズ変更動作は、要素が利用できる幅いっぱいになることを意味します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1521">Auto sizing behavior implies that the element will fill the width available to it.</span></span> <span data-ttu-id="9a7e2-1522">ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のスタイルでの既定値を頻繁に指定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1522">Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="9a7e2-1523">だけでなく、検証チェックは、非決定的の上限値にバインドされている<xref:System.Windows.FrameworkElement.Width%2A>レイアウト システムにより強制適用されている (これは非常に大きな数よりも大きい<xref:System.Single.MaxValue?displayProperty=nameWithType>がよりも小さい<xref:System.Double.MaxValue?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1523">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Width%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="9a7e2-1524">この上限値を超えた場合は、要素は表示されませんし、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1524">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="9a7e2-1525">設定しない<xref:System.Windows.FrameworkElement.Width%2A>の表示可能な最大サイズは、この非決定的の上限を超える可能性がありますよりも大幅に大きい値にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1525">Do not set <xref:System.Windows.FrameworkElement.Width%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a7e2-1526">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1526">XAML Attribute Usage</span></span>  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a7e2-1527">XAML 値</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1527">XAML Values</span></span>  
 <span data-ttu-id="9a7e2-1528">*double*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1528">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a7e2-1529">文字列表現を<xref:System.Double>0.0 以上の値。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1529">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a7e2-1530">上限については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1530">See Remarks for upper bound information.</span></span> <span data-ttu-id="9a7e2-1531">この値として解釈されます、[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]測定します。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1531">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a7e2-1532">明示的に、文字列では、小数点を含める必要がありますされません。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1532">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a7e2-1533">値のインスタンス`1`は許容されます。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1533">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a7e2-1534">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1534">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a7e2-1535">A*二重*値、上記と続けて次の単位の宣言文字列のいずれかの: `px`、 `in`、 `cm`、`pt`です。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1535">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a7e2-1536">`px` (既定値) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1536">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a7e2-1537">`in` インチです。1 96px を = =</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1537">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a7e2-1538">`cm` センチメートル; は、します。1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1538">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a7e2-1539">`pt` ポイントです。1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1539">`pt` is points; 1pt==(96/72) px</span></span>  
  
 `Auto`  
 <span data-ttu-id="9a7e2-1540">自動サイズ変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1540">Enables autosizing behavior.</span></span> <span data-ttu-id="9a7e2-1541">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1541">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a7e2-1542">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1542">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a7e2-1543">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1543">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|<span data-ttu-id="9a7e2-1544">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="9a7e2-1544">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9a7e2-1545">
            <see cref="P:System.Windows.FrameworkElement.Width" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9a7e2-1545">Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>