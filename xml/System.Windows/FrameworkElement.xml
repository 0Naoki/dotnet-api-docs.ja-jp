<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FrameworkElement.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b891ec5d-4b60-42d7-ac21-95eab9e3ef8252bb34d9daddff99314e23014e5d61909a488206.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52bb34d9daddff99314e23014e5d61909a488206</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">058bfa0b75b777d3171411d35da8f11617fc06b0</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/04/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</source>
          <target state="translated">WPF フレームワーク レベルのプロパティ、イベント、およびメソッドのセットを Windows Presentation Foundation (WPF) 要素で利用できます。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">このクラスは WPF フレームワーク レベルの実装として用意されており、<ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> によって定義される WPF コア レベル API 上に構築されています。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is the connecting point between WPF framework-level element classes and the WPF core-level set of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> presentation services.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> WPF フレームワーク レベルの要素のクラスと、WPF コア レベルのセット間の接続ポイントは、<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>プレゼンテーション サービス。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information about these concepts, see <bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](~/docs/framework/wpf/advanced/wpf-architecture.md)</ept>.</source>
          <target state="translated">これらの概念の詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF アーキテクチャ<ept id="p1">](~/docs/framework/wpf/advanced/wpf-architecture.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> extends <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and adds the following capabilities:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 拡張<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>し、次の機能を追加します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Layout system definition<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>レイアウト システム定義<ept id="p1">**</ept>:<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>特定の仮想メンバーとして定義されたメソッドの特定の WPF フレームワーク レベルの実装を提供<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>Most notably, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</source>
          <target state="translated">特に、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>特定 WPF コア レベルのレイアウトの上書きが封印を示し、代わりに派生クラスの WPF フレームワーク レベルの同等を代わりにオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> but provides <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>シール<ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>提供<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class.</source>
          <target state="translated">これらの変更は、WPF フレームワーク レベルでがあることの完全な配置システムでいずれかを表示できるという事実を反映<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>At the WPF core level, certain members that will structure a general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> based layout solution are in place, but the actual engine of the layout system is not defined.</source>
          <target state="translated">WPF で構造体、一般的なは、特定のレベルのメンバーをコア<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>ベース レイアウト ソリューションの場所は、レイアウト システムの実際のエンジンが定義されていません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>レイアウト<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>The logical tree:<ept id="p1">**</ept> The general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming model is often expressed in terms of being a tree of elements.</source>
          <target state="translated"><bpt id="p1">**</bpt>論理ツリー:<ept id="p1">**</ept>全般的な<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>プログラミング モデルがされている要素のツリーとして表現されて多くの場合。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> level.</source>
          <target state="translated">論理ツリーとして要素のツリーを表現して、サポートの実装はマークアップでそのツリーを定義するのに付属しているのサポート、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>レベル。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>Note however that <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> deliberately does not define a content model, and leaves that responsibility to derived classes.</source>
          <target state="translated">注ただしその<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>意図的に、コンテンツ モデルを一切定義しませんし、派生クラスには、その責任のままにします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>WPF のツリー<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Object lifetime events:<ept id="p1">**</ept> It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</source>
          <target state="translated"><bpt id="p1">**</bpt>オブジェクトの有効期間イベント:<ept id="p1">**</ept>要素が初期化される場合を把握すると便利です (コンス トラクターが呼び出されます) または論理ツリーに要素が最初に読み込まれるときにします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 分離コードが関係する操作子要素の追加などの要素に役立ちますフックを提供するオブジェクトの有効期間に関連するいくつかのイベントを定義します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>オブジェクトの有効期間イベント<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Support for data binding and dynamic resource references:<ept id="p1">**</ept> The property-level support for data binding and resources is implemented by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> class and embodied in the property system, but the ability to resolve a member value that is stored as an <ph id="ph2">&lt;xref:System.Windows.Expression&gt;</ph> (the programming construct that underlies both data binding and dynamic resources) is implemented by <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>データ バインディング、および動的リソース参照のサポート:<ept id="p1">**</ept>によってデータのバインドとリソースのプロパティ レベルのサポートは実装されて、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>クラスし、プロパティ システムがあるメンバー値を解決する機能に埋め込むとして格納されている、 <ph id="ph2">&lt;xref:System.Windows.Expression&gt;</ph> (データのバインドと動的なリソースの両方の基礎となるプログラミング構造) はによって実装<ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept> and <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>と<bpt id="p2">[</bpt>XAML リソース<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Styles:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> defines the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">**</bpt>スタイル:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>定義、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> does not yet define support for templates, or support decorators.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>されていないテンプレートでサポートを定義またはデコレーターをサポートしません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>These features are introduced by control classes such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>.</source>
          <target state="translated">これらの機能がなどのコントロール クラスによって導入された<ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>More animation support:<ept id="p1">**</ept> Some animation support was already defined at the WPF core level, but <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> extends this by implementing <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;</ph> and related members.</source>
          <target state="translated"><bpt id="p1">**</bpt>アニメーションをサポート:<ept id="p1">**</ept>一部アニメーション サポートは、WPF コア レベルで既に定義されてが<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>これを実装することによって拡張<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;</ph>関連メンバーとします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>As can be seen from the class hierarchy, many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> classes derive from <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, either directly or through intermediate base classes such as <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
          <target state="translated">クラスの階層からわかるように多く<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>クラスから派生<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>直接または中間の基本クラスのいずれかなど、<ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>または<ph id="ph4">&lt;xref:System.Windows.Controls.Control&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>If you intend to use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> as a base class, you might want to first examine the existing derived classes.</source>
          <target state="translated">使用する場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>を基底クラスとして最初既存の派生クラスを確認する場合があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> in <ph id="ph3">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 基本的なシナリオの数は、サポートもいくつかの作成に使用する構成要素の意味で"element"ために必要な機能がありません<ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>で<ph id="ph3">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For instance, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> does not define any true content model; <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> as a base class does not define a property that can create <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> child elements.</source>
          <target state="translated">インスタンス、 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> ; 任意の場合は true コンテンツ モデルが定義されていません。<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>基底クラスが作成できるプロパティを定義していないよう<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>子要素です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>In particular, you might want to look at <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>.</source>
          <target state="translated">具体的には、することができますを見て<ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Gets the rendered height of this element.</source>
          <target state="translated">この要素の描画時の高さを取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The element's height, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の高さ (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph> の値)。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The default value is 0 (zero).</source>
          <target state="translated">既定値は 0 (ゼロ) です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>This property is a calculated value based on other height inputs, and the layout system.</source>
          <target state="translated">このプロパティは、その他の高さの入力と、レイアウト システムに基づいて計算される値です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> that are the basis of the input change.</source>
          <target state="translated">値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>入力の変更の基礎にあります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>注意すべき、計算した値には複数存在する可能性がありますか、増分が報告されている結果が変化してさまざまな操作、レイアウト システムでします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> upon its value in a style.</source>
          <target state="translated">このプロパティを設定することはできませんが<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、基にすることができます、<ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph>スタイルでは、その値にします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The following example displays various height properties.</source>
          <target state="translated">次の例では、さまざまな高さのプロパティを表示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ActualHeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Gets the rendered width of this element.</source>
          <target state="translated">この要素の描画時の幅を取得します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The element's width, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の幅 (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph> の値)。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The default value is 0 (zero).</source>
          <target state="translated">既定値は 0 (ゼロ) です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>This property is a calculated value based on other width inputs, and the layout system.</source>
          <target state="translated">このプロパティは、その他の幅の入力と、レイアウト システムに基づいて計算される値です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> that are the basis of the input change.</source>
          <target state="translated">値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>入力の変更の基礎にあります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>注意すべき、計算した値には複数存在する可能性がありますか、増分が報告されている結果が変化してさまざまな操作、レイアウト システムでします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">レイアウト システムが、子要素に必要な測定スペース、親要素による制約などを計算している場合があります。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> upon its value in a style.</source>
          <target state="translated">このプロパティを設定することはできませんが<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、基にすることができます、<ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph>スタイルでは、その値にします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The following example displays various width properties.</source>
          <target state="translated">次の例では、さまざまな幅のプロパティを表示します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ActualWidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Child element to be added.</source>
          <target state="translated">追加される子要素。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Adds the provided object to the logical tree of this element.</source>
          <target state="translated">指定したオブジェクトをこの要素の論理ツリーに追加します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Use this method for the implementation of collections on objects that represent logical child elements of an element.</source>
          <target state="translated">要素の論理上の子要素を表すオブジェクトのコレクションの実装には、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</source>
          <target state="translated">プロパティの getter または setter、クラス処理を Changed イベント、コンス トラクター、またはコレクション型自体内では、子要素のコレクションのコレクションのメンテナンスを行う可能性があります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</source>
          <target state="translated">使用可能な基本コントロール クラスのコンテンツ モデルの適切なものが、制御のシナリオの場合を除きは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Consider subclassing at the level of <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>.</source>
          <target state="translated">レベルのサブクラス化を検討してください<ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>、および<ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>These classes provide a content model with particular enforcement of logical tree child elements through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">これらのクラスを介して専用の論理ツリーの子要素の特定の強制使用したモデルのコンテンツを提供する<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>、その他の機能では通常望ましくのサポートに加えて、<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>テンプレートを介してスタイルなどのコントロールです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>For more information on how to use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph> may throw an exception if called at a time when the logical tree is being iterated by another process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph> 別のプロセスによって、論理ツリーが反復処理されているときに呼び出された場合、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>The following example implements a <ph id="ph1">`Child`</ph> property on a custom <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that does its own visual layer implementation.</source>
          <target state="translated">次の例では、実装、<ph id="ph1">`Child`</ph>カスタム プロパティ<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>独自 visual レイヤーの実装を行うことです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</source>
          <target state="translated">プロパティ set アクセス操作子では、古い値がクラスに固有のビジュアル コレクションと同様に、論理ツリーから削除されている値が変更された場合ように設計されています。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</source>
          <target state="translated">プロパティの値がキャッシュされ、論理ツリーとカスタム ビジュアルのコレクションの両方に、新しい値を追加し、します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</source>
          <target state="translated">必要に応じて現在のテンプレートのビジュアル ツリーを構築し、この呼び出しによってビジュアル ツリーが再構築されたかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if visuals were added to the tree; returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated">ビジュアルがツリーに追加された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>Applications can call this method to guarantee that the visual tree of an element is complete.</source>
          <target state="translated">アプリケーションでは、要素のビジュアル ツリーが完了したことを保証するには、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>This guarantee step might be necessary if code will be checking the child elements in the tree.</source>
          <target state="translated">この保証のステップのコードは、ツリー内の子要素をチェックする場合は、必要があります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>For typical element logic within applications, calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</source>
          <target state="translated">一般的な要素のロジックを呼び出すアプリケーション内での<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph>テンプレートは適用されるため、適切な位置にある要素を有効期間内に自動的に、必要ではありません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> is called on every Measure pass by the WPF framework-level layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> メジャーがすべてで呼び出されると、WPF フレームワーク レベルのレイアウト システム渡しです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes can use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> class handler to be notified of cases where this method was called explicitly, or by the layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 派生クラスで使用できる、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph>通知を受ける場合はこのメソッドが明示的に呼び出された場合のまたはレイアウト システム クラス ハンドラー。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> is called after the template is completely generated and attached to the logical tree.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> テンプレートが完全に生成され、論理ツリーにアタッチされている後に呼び出されます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">この要素が要素自体と子を配置するために使用する親の末尾の領域。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> (defined as virtual in <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>) and seals the implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> (<ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> で仮想メソッドとして定義されています) を実装し、その実装をシールします。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>This method is sealed.</source>
          <target state="translated">このメソッドはシールされています。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>In order to override the logic in your custom element specifically for the arrange pass of element layout, your <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class must override <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.</source>
          <target state="translated">要素のレイアウトの配置パスを具体的には、カスタム要素内のロジックをオーバーライドするために、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>派生クラスでオーバーライドする必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">この要素が要素自体と子を配置するために使用する親の末尾の領域。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>When overridden in a derived class, positions child elements and determines a size for a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> derived class.</source>
          <target state="translated">派生クラスでオーバーライドされると、子要素を配置し、<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 派生クラスのサイズを決定します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>The actual size used.</source>
          <target state="translated">使用する実際のサイズ。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Control authors who want to customize the arrange pass of layout processing should override this method.</source>
          <target state="translated">コントロールの作成者が、処理の配置パスのレイアウトをカスタマイズするには、このメソッドをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>The implementation pattern should call <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on each visible child element, and pass the final desired size for each child element as the <ph id="ph2">&lt;paramref name="finalRect" /&gt;</ph> parameter.</source>
          <target state="translated">実装パターンが呼び出す必要があります<ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph>各表示されている子要素、およびパスが、最終的な目的として各子要素のサイズ、<ph id="ph2">&lt;paramref name="finalRect" /&gt;</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Parent elements should call <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on each child, otherwise the child elements will not be rendered.</source>
          <target state="translated">親要素を呼び出す必要があります<ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph>、それぞれの子にそれ以外の場合、子要素は表示されません。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Many derived classes offer implementations of this method.</source>
          <target state="translated">多くの派生クラスでは、このメソッドの実装を提供します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Prominent ones include: <ph id="ph1">&lt;see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" /&gt;</ph>.</source>
          <target state="translated">顕著な: <ph id="ph1">&lt;see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" /&gt;</ph>、<ph id="ph2">&lt;see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /&gt;</ph>と<ph id="ph3">&lt;see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Starts the initialization process for this element.</source>
          <target state="translated">この要素の初期化プロセスを開始します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</source>
          <target state="translated">まだ公開または要素ツリーに要素を接続するための方法で調整する場合は、個々 の要素でこのメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>For instance, you might have created a new <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, but have not yet attached it to any logical tree.</source>
          <target state="translated">たとえば、独自に作成した新しい<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、まだ接続していないことを任意の論理ツリーですがします。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</source>
          <target state="translated">または、内の子要素を要素がここでは、論理ツリーは、ウィンドウやアプリケーションのページに接続されていない可能性があります。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</source>
          <target state="translated">要素の読み込みプロセス中に、要素が初期化される前に行う必要がある特別な処理を提供するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</source>
          <target state="translated">(既定値) の基本実装では、初期化を追跡するためのいくつかの内部フラグを設定するため、実装には基底の実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</source>
          <target state="translated">1 つの可能な実装では、コンス トラクターで既に有効になっていない、独自のプライベート クラス初期化ルーチンにフックとしてこのメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>The base implementation will throw an exception if <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph> is called more than one time on the same element prior to <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> being called.</source>
          <target state="translated">基底の実装は例外をスロー<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph>が呼び出された複数の同じ要素の前に<ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph>呼び出されています。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Begins the sequence of actions contained in the provided storyboard.</source>
          <target state="translated">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>The storyboard to begin.</source>
          <target state="translated">開始するストーリーボード。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Begins the sequence of actions that are contained in the provided storyboard.</source>
          <target state="translated">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Typically, you create the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> element in markup, and then you place these as the <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> content on an element.</source>
          <target state="translated">通常、作成、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>マークアップにある要素を配置として、<ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph>要素のコンテンツ。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">イベントによってトリガーされると、アニメーションが実行されます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Most of the control aspects of a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be addressed by properties that are exposed in markup.</source>
          <target state="translated">ほとんどのコントロール要素の<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>マークアップで公開されているプロパティでアドレス指定できます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">署名を使用しない、 <ph id="ph1">`isControllable`</ph>、パラメーター、そのパラメーターが指定されている場合または<ph id="ph2">`false`</ph>、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">そのため、アニメーションは、1 回の実行後に再開できません。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">アニメーションを制御するもある必要があります、ストーリー ボード、 <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>コード内で参照でアクセスできるか。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>The following example retrieves a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> from resources, and then runs that <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> when an internal event is class handled.</source>
          <target state="translated">次の例を取得、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>リソースからを実行し、<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>内部イベントが処理されるクラスの場合。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The storyboard to begin.</source>
          <target state="translated">開始するストーリーボード。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</source>
          <target state="translated">プロパティが既にアニメーション化されていた場合にどうするかを指定するオプションを使用して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Typically, you create the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> element in markup, and then you place these as the <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> content on an element.</source>
          <target state="translated">通常、作成、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>マークアップにある要素を配置として、<ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph>要素のコンテンツ。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">イベントによってトリガーされると、アニメーションが実行されます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Most of the control aspects of a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be addressed by properties that are exposed in markup.</source>
          <target state="translated">ほとんどのコントロール要素の<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>マークアップで公開されているプロパティでアドレス指定できます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">署名を使用しない、 <ph id="ph1">`isControllable`</ph>、パラメーター、そのパラメーターが指定されている場合または<ph id="ph2">`false`</ph>、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">そのため、アニメーションは、1 回の実行後に再開できません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">アニメーションを制御するもある必要があります、ストーリー ボード、 <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>コード内で参照でアクセスできるか。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Handoff behavior can be specified as an attribute of <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>.</source>
          <target state="translated">属性としてハンドオフ動作を指定することができます<ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Using the Compose HandoffBehavior</source>
          <target state="translated">使用して、HandoffBehavior の作成</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property by using the <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">適用すると、 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>、または<ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>を使用してプロパティを<ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>、any<ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph>以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムは、時計を自動的に削除されません。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To avoid performance issues when you apply a large number of clocks by using <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">使用して多数の時計を適用するときに、パフォーマンスの問題を回避する<ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>There are several ways to remove a clock:</source>
          <target state="translated">クロックを削除するいくつかの方法があります。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove all clocks from a property, use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
          <target state="translated">プロパティからすべてのクロックを削除するには、使用、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph>アニメーション オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 <ph id="ph1">`null`</ph> 2 つ目として。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">これにより、すべてのアニメーション クロックが、プロパティから削除します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove a specific <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
          <target state="translated">固有の仕様を削除する<ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>にクロックのリストを使用して、<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph>のプロパティ、<ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>を取得する、<ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>を呼び出す、<ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>のメソッド、<ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is typically done in the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
          <target state="translated">これは、通常、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph>クロックのイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note that only root clocks can be controlled by a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">唯一のルート クロックできますで制御されることに注意してください、 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>;<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph>子クロックのプロパティを返します<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note also that the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph>クロックの有効期間が forever の場合、イベントは発生しません。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>In that case, the user must determine when to call <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
          <target state="translated">その場合は、ユーザーを決定する必要がありますを呼び出すときに<ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
          <target state="translated">クロック オブジェクトに関する詳細については、次を参照してください。<bpt id="p1">[</bpt>アニメーションおよびタイミング システムの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The following example retrieves a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> from resources, and then runs that <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> when an internal event is class handled.</source>
          <target state="translated">次の例を取得、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>リソースからを実行し、<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>内部イベントが処理されるクラスの場合。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>The storyboard to begin.</source>
          <target state="translated">開始するストーリーボード。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Declares whether the animation is controllable (can be paused) after it is started.</source>
          <target state="translated">アニメーションを起動した後に、アニメーションを制御できるかどうか (一時停止できるかどうか) を宣言します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</source>
          <target state="translated">開始後のアニメーションの制御の状態を指定して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Typically, you create the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> element in markup, and then you place these as the <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> content on an element.</source>
          <target state="translated">通常、作成、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>マークアップにある要素を配置として、<ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph>要素のコンテンツ。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">イベントによってトリガーされると、アニメーションが実行されます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Most of the control aspects of a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be addressed by properties that are exposed in markup.</source>
          <target state="translated">ほとんどのコントロール要素の<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>マークアップで公開されているプロパティでアドレス指定できます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">署名を使用しない、 <ph id="ph1">`isControllable`</ph>、パラメーター、そのパラメーターが指定されている場合または<ph id="ph2">`false`</ph>、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">そのため、アニメーションは、1 回の実行後に再開できません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">アニメーションを制御するもある必要があります、ストーリー ボード、 <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>コード内で参照でアクセスできるか。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Handoff behavior can be specified as an attribute of <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>.</source>
          <target state="translated">属性としてハンドオフ動作を指定することができます<ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Using the Compose HandoffBehavior</source>
          <target state="translated">使用して、HandoffBehavior の作成</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property by using the <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">適用すると、 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>、または<ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>を使用してプロパティを<ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>、any<ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph>以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムは、時計を自動的に削除されません。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>To avoid performance issues when you apply a large number of clocks by using <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">使用して多数の時計を適用するときに、パフォーマンスの問題を回避する<ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>There are several ways to remove a clock:</source>
          <target state="translated">クロックを削除するいくつかの方法があります。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>To remove all clocks from a property, use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
          <target state="translated">プロパティからすべてのクロックを削除するには、使用、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph>アニメーション オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 <ph id="ph1">`null`</ph> 2 つ目として。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">これにより、すべてのアニメーション クロックが、プロパティから削除します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>To remove a specific <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
          <target state="translated">固有の仕様を削除する<ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>にクロックのリストを使用して、<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph>のプロパティ、<ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>を取得する、<ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>を呼び出す、<ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>のメソッド、<ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>This is typically done in the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
          <target state="translated">これは、通常、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph>クロックのイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Note that only root clocks can be controlled by a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">唯一のルート クロックできますで制御されることに注意してください、 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>;<ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph>子クロックのプロパティを返します<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Note also that the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph>クロックの有効期間が forever の場合、イベントは発生しません。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>In that case, the user must determine when to call <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
          <target state="translated">その場合は、ユーザーを決定する必要がありますを呼び出すときに<ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
          <target state="translated">クロック オブジェクトに関する詳細については、次を参照してください。<bpt id="p1">[</bpt>アニメーションおよびタイミング システムの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph> that is used for the element.</source>
          <target state="translated">要素に使用される <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph> that is used for the element.</source>
          <target state="translated">要素に使用される <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> can be used to validate the values of multiple properties of an object.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph>オブジェクトの複数のプロパティの値を検証するために使用できます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>For example, suppose that an application prompts the user to enter an address and then populates an object of type <ph id="ph1">`Address`</ph>, which has the properties <ph id="ph2">`Street`</ph>, <ph id="ph3">`City`</ph>, <ph id="ph4">`ZipCode`</ph>, and <ph id="ph5">`Country`</ph>, with the values that the user provided.</source>
          <target state="translated">たとえば、アプリケーションがアドレスを入力するように求めるし、その型のオブジェクトが設定されます<ph id="ph1">`Address`</ph>、プロパティを持つ<ph id="ph2">`Street`</ph>、 <ph id="ph3">`City`</ph>、 <ph id="ph4">`ZipCode`</ph>、および<ph id="ph5">`Country`</ph>ユーザーが指定した値を持つ。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The application has a panel that contains four <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls, each of which is bound to one of the object’s properties.</source>
          <target state="translated">アプリケーションが 4 つを含むパネル<ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>コントロール、それぞれは、オブジェクトのプロパティのいずれかにバインドします。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>You can use a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> to validate the <ph id="ph3">`Address`</ph> object.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>で、<ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph>を検証する、<ph id="ph3">`Address`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> can ensure that the zip code is valid for the country of the address.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>郵便番号が有効、住所の国であることを確認できます。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Child elements inherit the <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> from their parent elements, just as with any other inheritable property.</source>
          <target state="translated">子要素を継承、<ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph>だけで、他の継承可能なプロパティと同様に、親要素からです。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Metadata properties set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept></source>
          <target state="translated">メタデータ プロパティに設定<bpt id="p1">**</bpt>は true。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</source>
          <target state="translated">次の例は、ユーザーが同じ値に 2 つのオブジェクトのプロパティに設定するかどうかを確認するアプリケーションの一部です。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The first example creates two <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls, each of which is bound to a different data source.</source>
          <target state="translated">最初の例では、2 つ作成されます<ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>コントロール、それぞれが別のデータ ソースにバインドされています。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> has a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> that contains a <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that checks that the two strings are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>が、<ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph>を格納している、 <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> 2 つの文字列が等しいことを確認します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that the previous example uses.</source>
          <target state="translated">次の例は、<ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>前の例を使用します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method override, the example gets each source object from the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> and checks whether the properties of the objects are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph>メソッド オーバーライドから、ソース オブジェクトを取得する例では、<ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph>し、オブジェクトのプロパティが等しいかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>To invoke the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph> method.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>を呼び出し、<ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph> when the click event of the button occurs.</source>
          <target state="translated">次の例では<ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph>ボタンのクリック イベントの発生時です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.BindingGroupProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.BindingGroup" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.BindingGroup" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Attempts to bring this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>Attempts to bring this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>By calling this method, you raise a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event that originates from the current element.</source>
          <target state="translated">このメソッドを呼び出すことにより、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>の現在の要素から発生するイベントです。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>This event is raised so that it can be handled by a <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, or a derived or similar class.</source>
          <target state="translated">このイベントで処理できるように、 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>、または派生されているかのようなクラス。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control.</source>
          <target state="translated">想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、<ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>Neither the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event nor the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">どちらも、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>イベントも<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph>メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>Reasons for failure can include the element settings, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> being some value other than <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">理由としては、エラーなどで要素の設定を含めることができます<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>以外の何らかの値をされている<ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) will be made visible.</source>
          <target state="translated">指定されていない署名を使用する場合、 <ph id="ph1">`targetRectangle`</ph>、全体の要素のサイズし (その<ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) が表示されます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>By calling this method, you potentially will call <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph> on any parent scrollable area that contains the element.</source>
          <target state="translated">このメソッドを呼び出して、可能性のあるを呼び出す<ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph>要素を含む親スクロール可能な領域にします。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>If this element is not contained in a scrollable area, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">この要素がスクロール可能領域に含まれていない場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>The following example implements a handler for an application navigation event that responds whenever the <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> being navigated to includes a fragment.</source>
          <target state="translated">実装するたびに応答するアプリケーションのナビゲーション イベントのハンドラーを次の例、<ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph>フラグメントには移動先が含まれています。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>The fragment is named in the <ph id="ph1">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</source>
          <target state="translated">フラグメントを指定、<ph id="ph1">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>次のシャープ記号 (#)、実装済みの動作により、フレーム内でビューをスクロールする要素とします。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> request that scrolling behavior in the example.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> および<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>例ではそのスクロール動作を要求します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Specified size of the element that should also be brought into view.</source>
          <target state="translated">指定した、表示する必要がある要素のサイズ。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">この要素が含まれているスクロール可能な領域内で、この要素の指定したサイズの領域が表示されるように試みます。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>By calling this method, you raise a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event that originates from the current element.</source>
          <target state="translated">このメソッドを呼び出すことにより、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>の現在の要素から発生するイベントです。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>This event is raised so that it can be handled by a <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, or a derived or similar class.</source>
          <target state="translated">このイベントで処理できるように、 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>、または派生されているかのようなクラス。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control.</source>
          <target state="translated">想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、<ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Neither the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event nor the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">どちらも、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>イベントも<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph>メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Reasons for failure can include the element settings, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> being some value other than <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">理由としては、エラーなどで要素の設定を含めることができます<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>以外の何らかの値をされている<ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) will be made visible.</source>
          <target state="translated">指定されていない署名を使用する場合、 <ph id="ph1">`targetRectangle`</ph>、全体の要素のサイズし (その<ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) が表示されます。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>By calling this method, you potentially will call <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph> on any parent scrollable area that contains the element.</source>
          <target state="translated">このメソッドを呼び出して、可能性のあるを呼び出す<ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph>要素を含む親スクロール可能な領域にします。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>If this element is not contained in a scrollable area, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">この要素がスクロール可能領域に含まれていない場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>The following example has a large graphic in a constrained scrolling region.</source>
          <target state="translated">次の例では、制約付きのスクロール領域に大きなグラフィックスがします。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>A button on the page has a handler that scrolls the view to a particular region of the large graphic.</source>
          <target state="translated">ページ上のボタンには、大きな画像の特定の地域にビューをスクロールするハンドラーがあります。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Gets or sets the context menu element that should appear whenever the context menu is requested through <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> from within this element.</source>
          <target state="translated">この要素内から <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> によってコンテキスト メニューが要求された場合に常に表示されるコンテキスト メニュー要素を取得または設定します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>The context menu assigned to this element.</source>
          <target state="translated">この要素に割り当てられたコンテキスト メニュー。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, and it is technically possible for <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself to have a <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 自体は、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>クラスを派生しの技術的に可能であれば<ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>自体が、<ph id="ph4">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>However, this creates a confusing context menu experience for the user and this practice is not recommended.</source>
          <target state="translated">ただし、これがユーザーの混乱を招くコンテキスト メニュー エクスペリエンスを作成し、この方法はお勧めできません。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Occurs just before any context menu on the element is closed.</source>
          <target state="translated">要素のコンテキスト メニューが閉じる直前に発生します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>To suppress closing context menus, handlers of the event should mark it as handled.</source>
          <target state="translated">閉じないようにするには、コンテキスト メニュー、イベントのハンドラーは、処理済みとしてマークします。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>To use this event as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style, you must reference the underlying service's definition of the event:</source>
          <target state="translated">としては、このイベントを使用して、<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでは、イベントの基になるサービスの定義を参照する必要があります。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>(This usage is required because the event implementation on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that exposes the underlying service event does not map the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph> identifier such that you can use it as a trigger).</source>
          <target state="translated">(ために、この使用法が必要でイベントの実装<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、公開、基になるサービスのイベントがマップされていない、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph>識別子をトリガーとして使用することができます)。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, but the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph> event will not be raised by a context menu directly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 自体は、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>派生クラスしますが、<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph>イベントは発生しません。 コンテキスト メニューで直接です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</source>
          <target state="translated">代わりに、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI にコンテキスト メニューを閉じるしようとしたときにだけ発生する要素からイベントが発生します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>However it is possible for <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself to have a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property (a nested context menu).</source>
          <target state="translated">ただしこれは<ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>自体が、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph>プロパティ (入れ子になったコンテキスト メニュー)。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>In this case the <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> really does own the nested <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> and might raise the event, with the source of the event being the nested context menu.</source>
          <target state="translated">この場合、 <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 、入れ子になった実際に所有して<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>し、入れ子になったコンテキスト メニューをされているイベントのソースと、イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> class itself also has a similar event (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph>) but the <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph> event does not provide you the opportunity to cancel the user action.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>クラス自体は、類似のイベントもあります (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph>) が、<ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph>イベントは、ユーザーの操作をキャンセルすることが提供されません。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Bubbling</source>
          <target state="translated">バブル</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">オーバーライド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;</ph>を派生クラスでは、このイベントに対するクラス処理を実装します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Occurs when any context menu on the element is opened.</source>
          <target state="translated">要素のコンテキスト メニューが開くときに発生します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>To manually open context menus, handlers of the events should mark the relevant event as handled.</source>
          <target state="translated">コンテキスト メニューを手動で開く、処理済みとして、イベントのハンドラーは、関連するイベントをマークする必要があります。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Otherwise, the existing value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property will be used to automatically open a context menu.</source>
          <target state="translated">それ以外の場合の既存の値、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph>プロパティが自動的にコンテキスト メニューを開き、使用されます。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property and then open the new <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>.</source>
          <target state="translated">既定のアクションを効果的に取り消し処理イベントをマークすることとの値にリセットすることにより、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph>プロパティを開き、新しい<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>However, there is a timing issue you should be aware of.</source>
          <target state="translated">ただしはタイミングの問題を認識する必要があります。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>In order to completely replace the context menu through a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> handler, the initial context menu must not be null / empty.</source>
          <target state="translated">コンテキスト メニューを完全に置き換えるために、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph>ハンドラー、初期のコンテキスト メニューにはできません null/空です。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Alternatively, you might need to handle the event and then manually open a new context menu.</source>
          <target state="translated">また、イベントを処理し、新しいコンテキスト メニューを手動で開く必要があります。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>For details, see <bpt id="p1">[</bpt>How to: Handle the ContextMenuOpening Event<ept id="p1">](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>する方法: ContextMenuOpening イベントを処理<ept id="p1">](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>To use this event as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style, you must reference the underlying attached event:</source>
          <target state="translated">このイベントを使用する、<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでは、基になる添付イベントを参照する必要があります。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>(This usage is required because the event implementation on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that exposes the underlying service event does not map the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> identifier such that you can use it in triggers).</source>
          <target state="translated">(ために、この使用法が必要でイベントの実装<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、公開、基になるサービスのイベントがマップされていない、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph>識別子をトリガーで使用することができます)。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, but this event will not be raised from the context menu being opened as a source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 自体は、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>派生クラスには、ソースとして開かれている、コンテキスト メニューからこのイベントは発生しません。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</source>
          <target state="translated">イベントは、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI のコンテキスト メニューを開くしようとしたときにだけ発生する要素から発生します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>It is possible for <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself to have a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property, but you should avoid this scenario (for details, see <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">ことが<ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>自体が、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph>がプロパティには、このシナリオを避ける必要があります (詳細については、「 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> class itself also has a similar event (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph>) but <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph> does not provide you the opportunity to cancel the user action.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>クラス自体は、類似のイベントもあります (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph>) が、<ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph>ユーザーの操作をキャンセルする機会を提供しません。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Bubbling</source>
          <target state="translated">バブル</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">オーバーライド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;</ph>を派生クラスでは、このイベントに対するクラス処理を実装します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ContextMenuProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ContextMenu" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ContextMenu" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Gets or sets the cursor that displays when the mouse pointer is over this element.</source>
          <target state="translated">この要素上にマウス ポインターが置かれたときに表示されるカーソルを取得または設定します。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The cursor to display.</source>
          <target state="translated">表示対象のカーソル。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The default value is defined as <ph id="ph1">&lt;see langword="null" /&gt;</ph> per this dependency property.</source>
          <target state="translated">この依存関係プロパティによって、既定値が <ph id="ph1">&lt;see langword="null" /&gt;</ph> として定義されます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>However, the practical default at run time will come from a variety of factors.</source>
          <target state="translated">ただし、実行時における実用的な既定値は、さまざまな要因から取得されます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>When you set this property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor relies on type conversion for the <ph id="ph3">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class to evaluate the string.</source>
          <target state="translated">このプロパティを設定すると<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>プロセッサがの型の変換に依存しています、<ph id="ph3">&lt;xref:System.Windows.Input.Cursor&gt;</ph>クラス文字列を評価します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The provided string should evaluate to a <ph id="ph1">&lt;xref:System.Windows.Input.CursorType&gt;</ph> value.</source>
          <target state="translated">指定された文字列に評価される必要があります、<ph id="ph1">&lt;xref:System.Windows.Input.CursorType&gt;</ph>値。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> for details.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> property.</source>
          <target state="translated">このプロパティによって設定されるカーソルは、マウス ポインターがこの要素上に表示されないかどうかの値に依存しても、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</source>
          <target state="translated">また、アクティブなドラッグ、マウスのキャプチャ、テキスト コントロール、および、内のモードの編集など、イベント関連の考慮事項も影響を与えますカーソル、このプロパティで指定した値よりも優先順位の高い。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>To revert the behavior of setting this property to the eventual default, set it to <ph id="ph1">`null`</ph> again.</source>
          <target state="translated">最終的な既定値にこのプロパティの設定の動作を戻すには、設定<ph id="ph1">`null`</ph>もう一度です。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The <ph id="ph1">`null`</ph> default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</source>
          <target state="translated"><ph id="ph1">`null`</ph>既定を意味実際的なカーソルの値の決定がここでは遅延し、別の場所から入手してください。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>If presented without programmatic values from any source, the default cursor that is visually over a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> application will be an arrow.</source>
          <target state="translated">提示された場合、ソースからプログラムで値を使用せず、既定のカーソルが視覚的に以上、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>アプリケーションは矢印になります。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>However, the transient cursor changes are not set to the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> values of the elements when they are passed over.</source>
          <target state="translated">ただし、カーソルの一時的な変更に設定されていない、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph>経由で渡されるときに、要素の値。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> property will only report non null values in cases where it was actually set, for instance through code or a style.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph>それが実際に設定されている場合、インスタンスのコードや、スタイルを介しての値がプロパティはのみレポート null 以外です。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Each movement of the mouse over a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> application raises a <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event.</source>
          <target state="translated">上にあるマウスが移動するたび、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>アプリケーションが発生し、<ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</source>
          <target state="translated">イベント バブルと経路上の任意の要素、イベントを処理し、このイベントの引数をカーソルの値を設定する機会があります。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>This is the mechanism that produces the visually apparent cursor in most cases.</source>
          <target state="translated">これは、ほとんどの場合、視覚的に明らかなカーソルを生成するメカニズムです。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> property at any level, unless <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> is set.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>ハンドラーは、カーソルの結果を返すし、イベントが処理され、引数に変更された値を持つファクトの値よりも優先、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph>任意のレベルでは、プロパティしない限り、<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph>が設定されています。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>If not are not creating a custom cursor, you typically set this property to a static property value of the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> class.</source>
          <target state="translated">通常の静的プロパティの値にこのプロパティを設定する場合は、カスタムのカーソルを作成しない、<ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> in code requires one of the following:</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph>コードで、次のいずれかが必要です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> constructor to get a <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> instance.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>を取得するコンス トラクター、<ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Both signatures of the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> constructor use streams or files, in anticipation that you are creating the <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> object for a custom cursor.</source>
          <target state="translated">両方の署名、<ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>ストリームまたはファイルの作成中に応じるために、コンス トラクターを使用して、<ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph>カーソルのカスタム オブジェクト。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Input.CursorConverter&gt;</ph> class and its <ph id="ph2">&lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;</ph> method to specify a cursor by <ph id="ph3">&lt;xref:System.Windows.Input.CursorType&gt;</ph>, or a string that can evaluate to a <ph id="ph4">&lt;xref:System.Windows.Input.CursorType&gt;</ph>, and cast the return to <ph id="ph5">&lt;xref:System.Windows.Input.Cursor&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Windows.Input.CursorConverter&gt;</ph>クラスとその<ph id="ph2">&lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;</ph>メソッドによって、カーソルを指定する<ph id="ph3">&lt;xref:System.Windows.Input.CursorType&gt;</ph>、または文字列に評価されることを<ph id="ph4">&lt;xref:System.Windows.Input.CursorType&gt;</ph>に戻り値のキャストと<ph id="ph5">&lt;xref:System.Windows.Input.Cursor&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> to a custom value is not enabled in partial trust.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>にカスタム値が有効でない部分的に信頼します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>For more information on custom cursors, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">カスタム カーソルの詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The following example shows how to deliberately set the cursor graphic.</source>
          <target state="translated">次の例では、カーソル グラフィックを意図的に設定する方法を示します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.CursorProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Gets or sets the data context for an element when it participates in data binding.</source>
          <target state="translated">要素がデータ バインディングに含まれている場合に、その要素のデータ コンテキストを取得または設定します。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>The object to use as data context.</source>
          <target state="translated">データ コンテキストとして使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>Data context<ept id="p1">*</ept> is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</source>
          <target state="translated"><bpt id="p1">*</bpt>データ コンテキスト<ept id="p1">*</ept>概念により、バインディング、だけでなく、バインディング、パスなどの他の特性に使用されるデータ ソースについて、親要素から情報を継承する要素です。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Data context can be set directly to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> object, with the bindings evaluating to properties of that object.</source>
          <target state="translated">直接データ コンテキストを設定することができます、<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>オブジェクト、そのオブジェクトのプロパティを評価する、バインディングを使用します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Alternatively, you can set the data context to a <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> object.</source>
          <target state="translated">または、データ コンテキストを設定、<ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>This dependency property inherits property values.</source>
          <target state="translated">この依存関係プロパティでは、プロパティの値を継承します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>If there are child elements without other values for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> established through local values or styles, then the property system will set the value to be the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> value of the nearest parent element with this value assigned.</source>
          <target state="translated">その他の値を使用せずに子要素がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>プロパティ システムは値を設定し、ローカルの値や、スタイルを介して確立、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>割り当てられているこの値を持つ最も近い親要素の値。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Alternatively, you can use one of the following properties of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class to specify the binding source explicitly: <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>.</source>
          <target state="translated">次のプロパティのいずれかを使用する代わりに、<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>クラスをバインディング ソースを明示的に指定する: <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>、または<ph id="ph4">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Binding Source<ept id="p1">](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>する方法: バインド ソースを指定して<ept id="p1">](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> is most typically set to as a <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> declaration.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>として最も一般的に設定されて、<ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph>宣言します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>You can use either property element syntax or attribute syntax.</source>
          <target state="translated">プロパティ要素構文または属性の構文のいずれかを使用することができます。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Attribute syntax is shown in the example on this page.</source>
          <target state="translated">属性構文は、このページの例に示しています。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>You can also use code to set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>.</source>
          <target state="translated">コードを使用して設定することもできます<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> is a bindable property, to facilitate scenarios where one context might be bound to another.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 別に 1 つのコンテキストをバインドする場合がありますのシナリオを容易にするために、バインド可能なプロパティです。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>However, if you bind to <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>, be careful to not create circular binding references (do not bind a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> to itself, which is possible to do because of the property value inheritance nature of the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property).</source>
          <target state="translated">ただしにバインドする場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>、循環バインドの参照を作成しないように注意してください (バインドしないでください、 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 、それ自体には、プロパティ値の継承の性質を行う、<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>プロパティ)。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>dataContextObject<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>dataContextObject<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>A directly embedded object that serves as data context for any bindings within the parent element.</source>
          <target state="translated">親要素内のすべてのバインディングのデータ コンテキストとして機能する直接埋め込まれたオブジェクト。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Typically, this object is a <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> or another <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> derived class.</source>
          <target state="translated">通常、このオブジェクトは、<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>別または<ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Alternatively, raw data of any <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object type intended for binding may be placed here, with the actual bindings defined later.</source>
          <target state="translated">または、いずれかの生データ<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>オブジェクトの種類のバインディングは、後で定義されている実際のバインディングをここでは、配置することも対象としています。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>A binding usage that evaluates to an appropriate data context.</source>
          <target state="translated">適切なデータ コンテキストに評価されるバインディングの使用方法です。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>For details, see <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/binding-markup-extension.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>バインディングのマークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/binding-markup-extension.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>One of the following:  or .</source>
          <target state="translated">次のいずれか。 またはします。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>This usage is used when referring to raw data defined as an object in resources.</source>
          <target state="translated">この使用法は、リソース内のオブジェクトとして定義されている、生データを参照するときに使用されます。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>The key identifier for the object being requested from within a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">内から要求されたオブジェクトのキー識別子、<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</source>
          <target state="translated">次の例では、バインディング上のデータ コンテキストの動作を示していて、特定のバインドされたプロパティの値を定義する情報を提供します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>Occurs when the data context for this element changes.</source>
          <target state="translated">この要素のデータ コンテキストが変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>For an explanation of data contexts and data binding, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
          <target state="translated">データ コンテキストおよびデータ バインディングの詳細については、次を参照してください。<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> for an element changes, all data-bound properties on this element are potentially affected.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>要素変更では、この要素上のすべてのデータ バインド プロパティ可能性のある影響を受けます。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</source>
          <target state="translated">これは、データ コンテキストを継承するには、論理ツリーで、現在の要素の子要素である任意の要素も、現在の要素自体に適用されます。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>All such existing bindings must re-interpret the new <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> and will reevaluate the binding results.</source>
          <target state="translated">このような既存のすべてのバインドは、新しい再解釈する必要があります<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>し、バインディングの結果を再評価します。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContextChanged&gt;</ph> event.</source>
          <target state="translated">データ バインディング エンジンは、非確定的なこれらの生成基準とした注文に関する、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContextChanged&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>The reevaluations can occur before the event, after the event, or in any mixture.</source>
          <target state="translated">イベントの後、または任意の組み合わせで、再評価は、イベントの前に発生します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.DataContextProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DataContext" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DataContext" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</source>
          <target state="translated">テーマ スタイルを使用または定義するときに、このコントロールのスタイルを参照するために使用されるキーを取得または設定します。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The style key.</source>
          <target state="translated">スタイルのキー。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>To work correctly as part of theme style lookup, this value is expected to be the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the control being styled.</source>
          <target state="translated">テーマ スタイル参照の一部として正常に機能するために、この値は、スタイルを設定するコントロールの <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> である必要があります。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>This property is typically not set through any of its direct property accessors.</source>
          <target state="translated">このプロパティは、通常はその直接のプロパティ アクセサーのを通じて設定されません。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Instead, you override the type-specific metadata of this dependency property every time you create a new <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class.</source>
          <target state="translated">この依存関係プロパティの型に固有のメタデータをオーバーライドする代わりに、新規に作成するたびに<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>When you derive a control, call the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> method against the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;</ph> identifier, within the static constructor of the control derived class (or equivalent class initialization).</source>
          <target state="translated">コントロールを派生するときに呼び出す、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>メソッドに対して、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;</ph>識別子、コントロールの静的コンス トラクター内で派生したクラス (または同等のクラス初期化) します。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</source>
          <target state="translated">コントロール通常独自の型にするには、このプロパティの既定値が上書きが場合によってはでしたも使用してテーマ ディクショナリ内のスタイルが存在する基本型です。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</source>
          <target state="translated">これは、基本コントロールのコントロールのテンプレートが完全にその派生したコントロールのビジュアル表現を定義し、どのような追加のメンバーが派生型を公開では、コントロール テンプレートの一部としては、追加の要素は不要な場合のみ実用的です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>If you want your element or control to deliberately not use theme styles, set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">要素またはコントロールは意図的にテーマのスタイルを使用する場合は、設定、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The following example illustrates the dependency property metadata override usage discussed in Remarks.</source>
          <target state="translated">次の例は、「解説」で説明されている依存関係プロパティのメタデータ オーバーライド使用を示しています。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>This code defines a custom control class <ph id="ph1">`NumericUpDown`</ph> intended to be used from a dedicated control library assembly.</source>
          <target state="translated">このコードは、カスタム コントロール クラスを定義<ph id="ph1">`NumericUpDown`</ph>専用コントロール ライブラリのアセンブリから使用するためのものです。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>) and finally overrides the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> dependency property metadata on the <ph id="ph2">`NumericUpDown`</ph> class.</source>
          <target state="translated">ここで示した静的コンス トラクターがプライベートの初期化関数を参照、クラス ハンドラーを登録 (別の一般的なコントロールのサブクラス化シナリオ<bpt id="p1">[</bpt>Handled、クラス処理とルーティング イベントをマークすること<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>) し、最後に上書き、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph>で依存関係プロパティのメタデータ、<ph id="ph2">`NumericUpDown`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> 常に任意いくつかが設定されていないコントロールのスタイルを検索するテーマ スタイル システムが使用されている規則は、目的のキーとして独自の型を返します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The complete sample also defines the actual control's theme style that is referenced by that key; see <bpt id="p1">[</bpt>NumericUpDown Custom Control with Theme and UI Automation Support Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160025)</ept>.</source>
          <target state="translated">完全なサンプルもそのキーによって参照されている実際のコントロールのテーマのスタイルを定義します。参照してください<bpt id="p1">[</bpt>NumericUpDown カスタム コントロールのテーマと UI オートメーションのサポート サンプル<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160025)</ept>です。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Indicates that the initialization process for the element is complete.</source>
          <target state="translated">この要素の初期化プロセスが完了したことを示します。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>If <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> was previously called, the base implementation will raise the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> event.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph>が既に呼び出されて、基本実装を発生させる、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Otherwise, if <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> was not called or it could not be determined whether <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> was called, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> is not raised and an exception is thrown instead.</source>
          <target state="translated">それ以外の場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph>も呼び出されなかったかではない可能性があるかどうかを特定<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph>、呼び出された<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>は発生しません代わりに、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.EndInit">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> was called without <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph> having previously been called on the element.</source>
          <target state="translated">以前に <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> が呼び出されていないこの要素で、<ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph> が呼び出されました。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</source>
          <target state="translated">要素の読み込みプロセス中に、要素の初期化を行うときに行う必要がある特別な処理を提供するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</source>
          <target state="translated">(既定値) の基本実装では、初期化を追跡するためのいくつかの内部フラグを設定するため、実装には基底の実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>The name of the requested element.</source>
          <target state="translated">要求された要素の名前。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>Finds an element that has the provided identifier name.</source>
          <target state="translated">指定した識別名を持つ要素を検索します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>The requested element.</source>
          <target state="translated">要求された要素。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching element was found.</source>
          <target state="translated">一致する要素が見つからなかった場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>If the element has child elements, these child elements are all searched recursively for the requested named element.</source>
          <target state="translated">要素に子要素がある場合は、要求された名前を持つ要素を再帰的には、すべて検索は、これらの子要素です。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph> operates within the current element's namescope.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph> 現在の要素の名前スコープ内で動作します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>For details, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">詳細については、「 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>The key identifier for the requested resource.</source>
          <target state="translated">要求したリソースのキー識別子。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</source>
          <target state="translated">指定したキーを持つリソースを検索します。要求したリソースが見つからない場合は例外がスローされます。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>The requested resource.</source>
          <target state="translated">要求されたリソース。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If no resource with the provided key was found, an exception is thrown.</source>
          <target state="translated">指定したキーを持つリソースが見つからなかった場合は例外がスローされます。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> value might also be returned in the exception case.</source>
          <target state="translated">その場合は <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> 値が返されることもあります。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If you call this method for a key that cannot be found, an exception is thrown.</source>
          <target state="translated">見つからないキーのこのメソッドを呼び出すと、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If you do not want to handle exceptions that result from calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph>, call <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> instead.</source>
          <target state="translated">呼び出し元に起因する例外を処理しないかどうかは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph>、呼び出す<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph>代わりにします。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> returns <ph id="ph2">`null`</ph> when a requested resource cannot be found, and does not throw an exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> 返します<ph id="ph2">`null`</ph>要求されたリソースが見つからないし、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</source>
          <target state="translated">呼び出し元の要素で、リソースが見つからない場合論理ツリー内の親要素、検索結果の 次へし、アプリケーション、し、テーマ、最後にシステム リソースです。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</source>
          <target state="translated">この参照方法は、リソースがマークアップで動的リソース参照によって要求された場合に、ツリーを検索する方法と同じです。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>For more information about resource lookup, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">リソースの検索の詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>Typically, you immediately cast a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> return value to the type of the property that you setting with the returned resource value.</source>
          <target state="translated">通常、即座にキャストする、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph>に値を返し、プロパティの型を返されるリソース値に設定します。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>Resource keys are not necessarily strings.</source>
          <target state="translated">リソース キーは必ずしも文字列です。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>For instance, styles for controls at the theme level are deliberately keyed to the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the control, and application or page styles for controls typically use this same key convention.</source>
          <target state="translated">たとえば、スタイル、テーマのレベルでのコントロールが意図的と適合するため、<ph id="ph1">&lt;xref:System.Type&gt;</ph>の管理、およびアプリケーションまたはページのスタイルのコントロールを通常使用してこの同じキー規則。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>For details, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept> or <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>または<bpt id="p2">[</bpt>XAML リソース<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>The following example obtains a named resource and casts it to an appropriate type to fill a property.</source>
          <target state="translated">次の例では、名前付きリソースを取得し、プロパティに値を適切な型にキャストします。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> was not found and an event handler does not exist for the <ph id="ph2">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> が見つからず、<ph id="ph2">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> イベントのイベント ハンドラーが存在しません。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> was not found and the <ph id="ph2">&lt;see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /&gt;</ph> property is <ph id="ph3">&lt;see langword="false" /&gt;</ph> in the <ph id="ph4">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> が見つからず、<ph id="ph2">&lt;see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /&gt;</ph> イベントで <ph id="ph4">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> プロパティが <ph id="ph3">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Gets or sets the direction that text and other <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements flow within any parent element that controls their layout.</source>
          <target state="translated">レイアウトを制御する親要素内でのテキストやその他の<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 要素のフロー方向を取得または設定します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The direction that text and other <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements flow within their parent element, as a value of the enumeration.</source>
          <target state="translated">テキストやその他の <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> 要素の親要素内でのフロー方向を示す列挙値。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.FlowDirection.LeftToRight" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Windows.FlowDirection.LeftToRight" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The dependency property usage sets the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on this element.</source>
          <target state="translated">依存関係プロパティの使用法を設定、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>この要素上です。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Because of property value inheritance, setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on an element can potentially set <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on all child elements that did not set <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> locally or though other means such as styles.</source>
          <target state="translated">プロパティ値の設定の継承により<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>要素では設定できます可能性のある<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>設定していないすべての子要素で<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>ローカルやスタイルなどがその他の手段です。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</source>
          <target state="translated">このプロパティは自動的に設定されていない、任意のアプリケーションのカルチャの情報の一部として、要素は、必ずしもものではありません、カルチャ情報が含まれる一般的なフローの方向に従うようにコンテンツを含めることがあるためです。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>For more information on globalization considerations, see <bpt id="p1">[</bpt>Globalization for WPF<ept id="p1">](~/docs/framework/wpf/advanced/globalization-for-wpf.md)</ept>.</source>
          <target state="translated">グローバリゼーションの考慮事項の詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF のグローバリゼーション<ept id="p1">](~/docs/framework/wpf/advanced/globalization-for-wpf.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property has a defined <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property accessor, so it functions as a dependency property.</source>
          <target state="translated">このプロパティは、定義されている<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>依存関係プロパティとして機能するように、プロパティ アクセサー。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>However, it is also registered as attached, so it can also function as an attached property.</source>
          <target state="translated">ただしはも登録ように、接続されているため、添付プロパティとしても機能できます。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</source>
          <target state="translated">添付としての登録は主にするプロパティ値の継承がサポートされているが、プロパティは、実際の添付プロパティとしても使用できます。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The attached property usage is only relevant if the object you intend to set the flow direction on has a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> parent element that performs layout upon it, is itself not a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and does not already have a more directly defined <ph id="ph3">`FlowDirection`</ph> property.</source>
          <target state="translated">添付プロパティの使用は、のみで、フローの方向を設定するオブジェクトが関連、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>時に、レイアウトを実行する親要素がない自体が、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>にまだないより直接的に定義されていると<ph id="ph3">`FlowDirection`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>(Some of the flow document classes such as <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> define their own <ph id="ph3">`FlowDirection`</ph>, and this property can also set the flow direction.</source>
          <target state="translated">(フローの一部のドキュメント クラス<ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph>が独自に定義<ph id="ph3">`FlowDirection`</ph>、し、このプロパティは、フローの方向を設定もできます。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The property value is then read by the eventual content host without requiring attached property usage.)</source>
          <target state="translated">プロパティの値が読み取ら最終的なコンテンツ ホストで添付プロパティの使用を必要とせず。)</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>XAML Text Usage</source>
          <target state="translated">XAML テキストの使用方法</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property can also be set on classes that are not <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes, by the following <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attached property usage:</source>
          <target state="translated">このプロパティはないクラスにも設定できます<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>に続いて派生クラス、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>添付プロパティの使用法。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source><ph id="ph1">`&lt;`</ph> <bpt id="p1">*</bpt>object<ept id="p1">*</ept> <ph id="ph2">`FrameworkElement.`</ph><bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph4">`"/&gt;`</ph></source>
          <target state="translated"><ph id="ph1">`&lt;`</ph> <bpt id="p1">*</bpt>object<ept id="p1">*</ept> <ph id="ph2">`FrameworkElement.`</ph><bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph4">`"/&gt;`</ph></target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph>、<ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property is both a dependency property and an attached property; see Remarks.</source>
          <target state="translated">このプロパティは、依存関係プロパティとが接続されているプロパティの両方「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.FlowDirectionProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</source>
          <target state="translated">この要素がキーボード フォーカスを受け取ったときに適用される外観、効果、またはその他のスタイル特性のカスタマイズを可能にするプロパティを取得または設定します。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The desired style to apply on focus.</source>
          <target state="translated">フォーカスに適用する目的のスタイル。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The default value as declared in the dependency property is an empty static <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>.</source>
          <target state="translated">依存関係プロパティ内で宣言された既定値は空の静的 <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</source>
          <target state="translated">ただし、実行時の有効値は、多くの場合、コントロールのテーマ サポートによって提供されたスタイルです (ただし、常にそうであるとは限りません)。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>This property affects visual appearance but does not report <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph> in metadata.</source>
          <target state="translated">このプロパティは、視覚的な外観に影響を与えますが、状況は報告されません<ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph>メタデータにします。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</source>
          <target state="translated">これは、視覚的な外観の変更イベント ドリブンなすべての時刻に適用されるおよびしたがっては限らないメタデータに、visual またはレイアウトの情報です。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</source>
          <target state="translated">概念的には、フォーカスがコントロールに適用される視覚的な動作は、コントロール間で一貫している必要があります。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</source>
          <target state="translated">一貫性を実現するための最もわかりやすい方法では、全体のテーマを作成している場合にのみフォーカス visual スタイルを変更します。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</source>
          <target state="translated">個々 のコントロールのスタイルとテーマの一部ではなくこのプロパティを設定キーボード フォーカスに関するユーザー エクスペリエンスに混乱をこれは、このプロパティの使用目的はありません。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>, and to do so in a way that does not visually interfere with any existing focus visual style.</source>
          <target state="translated">コントロール固有の動作は意図的に一貫したテーマにする場合は、はるかに優れた方法を使用してトリガーのスタイルで入力状態の個々 のプロパティのように<ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>が既存のフォーカス visual スタイルに視覚的に干渉しないようにするためです。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>For more information on the design intention of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FocusVisualStyle%2A&gt;</ph> and alternative focus properties, see <bpt id="p1">[</bpt>Styling for Focus in Controls, and FocusVisualStyle<ept id="p1">](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)</ept>.</source>
          <target state="translated">目的で設計の詳細については<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FocusVisualStyle%2A&gt;</ph>と代替プロパティの焦点は、「<bpt id="p1">[</bpt>コントロール、および FocusVisualStyle でフォーカスのスタイルは<ept id="p1">](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>One of the following: , or .</source>
          <target state="translated">次のいずれかの: または。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The key that identifies the style being requested.</source>
          <target state="translated">要求されているスタイルを識別するキー。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The key refers to an existing resource in a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">このキーは既存のリソースを<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Property element syntax is technically possible, but not recommended.</source>
          <target state="translated">プロパティ要素構文は、技術的に可能ですが、推奨されません。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>インライン スタイルとテンプレート<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>A binding reference using  or <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> is also possible, but uncommon.</source>
          <target state="translated">バインドの参照を使用して、または<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>も可能ですが、一般的ではないです。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.FocusVisualStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Gets or sets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> should force the <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> to render the cursor as declared by the <ph id="ph3">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> property.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> でカーソルを <ph id="ph3">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> プロパティの宣言に従って描画するように<ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> を強制するかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cursor presentation while over this element is forced to use current <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> settings for the cursor (including on all child elements); otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この要素の上にあるときのカーソルの表示に <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> の現在の設定を強制的に使用する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> (すべての子要素を含む)。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>If you set this property to <ph id="ph1">`true`</ph> you will override the cursor preferences established by child elements.</source>
          <target state="translated">このプロパティを設定する場合<ph id="ph1">`true`</ph>子要素で設定されているカーソル設定よりも優先されます。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Doing so in general application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> might be confusing for the user, particularly if child elements are attempting to specify cursors.</source>
          <target state="translated">そのため、一般にアプリケーション<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>子要素は、カーソルを指定しようとしている場合は特に、ユーザーの混乱する可能性があります。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> is more appropriate in control subclassing or compositing scenarios.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph>の方がコントロールのサブクラス化または複合のシナリオに適しています。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>The following example forces the cursor value.</source>
          <target state="translated">次の例では、カーソルの値を強制します。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ForceCursorProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ForceCursor" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ForceCursor" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>The target <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> to get the binding from.</source>
          <target state="translated">バインディングを取得するターゲット <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph> that represents the binding on the specified property.</source>
          <target state="translated">指定したプロパティのバインディングを表す <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph> if the target property has an active binding; otherwise, returns <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">ターゲット プロパティにアクティブなバインディングがある場合は <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>Checking the return value for <ph id="ph1">`null`</ph> is a technique you can use to determine whether a property has an active binding.</source>
          <target state="translated">戻り値の確認<ph id="ph1">`null`</ph>プロパティがアクティブなバインディングを持つかどうかを決定する手法は、します。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>This method is really just a convenience wrapper around the <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">このメソッドは、実際には、利便性のためのラッパー、<ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetBindingExpression%2A&gt;</ph> passes the current instance and the <ph id="ph2">`dp`</ph> parameter to <ph id="ph3">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetBindingExpression%2A&gt;</ph> 現在のインスタンスを渡すと、<ph id="ph2">`dp`</ph>パラメーターを<ph id="ph3">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>The element to return a <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> を返す対象の要素。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>Gets the value of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> attached property for the specified <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> の <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> 添付プロパティの値を取得します。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>The requested flow direction, as a value of the enumeration.</source>
          <target state="translated">列挙体の値としての要求されたフローの方向。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>The main purpose of this method is to support attached property syntax for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property, therefore allowing child elements of a provided <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">添付プロパティの構文をサポートするためには、このメソッドの主な目的、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>プロパティ、したがって、指定された要素を子に許可<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>を親要素内での配置のフローの方向を指定します。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>To get the value on the current <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, use the direct <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> accessor <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
          <target state="translated">現在の値を取得する<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、ダイレクトを使用して<ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>アクセサー<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The size of the part of the element that does visual presentation.</source>
          <target state="translated">ビジュアル プレゼンテーションを行う要素の部分のサイズ。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Returns a geometry for a clipping mask.</source>
          <target state="translated">クリッピング マスクのジオメトリを返します。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</source>
          <target state="translated">クリッピング マスクは、利用可能な表示領域より大きな要素をレイアウト システムが配置しようとすると適用されます。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The clipping geometry.</source>
          <target state="translated">クリッピング ジオメトリ。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Margins will be subtracted from the <ph id="ph1">`layoutSlotSize`</ph> as part of layout system behavior.</source>
          <target state="translated">減算する余白、<ph id="ph1">`layoutSlotSize`</ph>レイアウト システムの動作の一部として。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>A returned null reference indicates that no clipping will occur.</source>
          <target state="translated">返される null 参照では、クリップが発生しないことを示します。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph> when <ph id="ph2">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">既定の実装を常に返します<ph id="ph1">`null`</ph>とき<ph id="ph2">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>は<ph id="ph3">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation uses <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> in its calculations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>実装を使用して<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>計算にします。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Several subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> override this method again.</source>
          <target state="translated">いくつかのサブクラス<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>再度このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>, overrides to always return <ph id="ph2">`null`</ph> because adorners are often deliberately outside the ordinary bounds.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>、戻り値を常にオーバーライド<ph id="ph2">`null`</ph>のため装飾多くの場合、意図的に通常の範囲外です。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> return <ph id="ph3">`null`</ph> if <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph5">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> および<ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>返す<ph id="ph3">`null`</ph>場合<ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>は<ph id="ph5">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The default implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> when <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定の実装を常に返します<ph id="ph1">&lt;see langword="null" /&gt;</ph>とき<ph id="ph2">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph>は<ph id="ph3">&lt;see langword="false" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</source>
          <target state="translated">上書きは通常、この動作を保持するためが必要場合は、リレーションシップと派生クラスと基底クラスではなく、レイアウト ロジックの目的に応じて、例外です。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Name of the child to find.</source>
          <target state="translated">検索する子の名前。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Returns the named element in the visual tree of an instantiated <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ControlTemplate" /&gt;</ph>.</source>
          <target state="translated">インスタンス化された <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ControlTemplate" /&gt;</ph> のビジュアル ツリー内にある名前付き要素を返します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>The requested element.</source>
          <target state="translated">要求された要素。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no element of the requested name exists.</source>
          <target state="translated">要求した名前の要素が存在しない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Templates in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> have a self-contained namescope.</source>
          <target state="translated">テンプレートで<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>自己完結型の名前スコープがあります。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</source>
          <target state="translated">テンプレートは、再利用し、各コントロールの複数のインスタンスがそのテンプレートをインスタンス化時にテンプレートで定義されている任意の名前の一意性が維持できないためにです。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetTemplateChild%2A&gt;</ph> method to return references to objects that come from the template after it is instantiated.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetTemplateChild%2A&gt;</ph>がインスタンス化した後、テンプレートからのオブジェクトへの参照を返します。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> method to find items from templates because <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> acts in a more general scope, and there is no connection between the <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> class itself and the instantiated template once it is applied.</source>
          <target state="translated">使用することはできません、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph>ために、テンプレートから項目を検索するメソッド<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph>はで動作しより一般的なスコープとの間の接続がない、<ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>は、クラス自体およびインスタンス化されたテンプレートが適用されます。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> supplies the same function as this method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> このメソッドと同じ機能を提供します。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> 代わりにパブリックが保護されている、正しい名前スコープの考慮事項要素およびその中の項目を名前付き検索内でテンプレートにアクセスできるようにするを使用しています。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> when you need to get an element outside of its parent control.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph>する必要がある場合、親コントロールの外部要素を取得します。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>Returns an alternative logical parent for this element if there is no visual parent.</source>
          <target state="translated">ビジュアル親が存在しない場合に、この要素に対する代替の論理上の親を返します。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>Returns something other than <ph id="ph1">&lt;see langword="null" /&gt;</ph> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</source>
          <target state="translated">このメソッドの WPF フレームワーク レベルの実装が非ビジュアルの親接続を持つ場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> 以外の値を返します。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation returns the expected single visual parent, which is the same result as getting the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> value.</source>
          <target state="translated">既定値<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>実装、予想される 1 つ visual の親を返しますの結果の取得と同じである、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph>値。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>Derived class implementations might return alternate parent relationships.</source>
          <target state="translated">派生クラスの実装では、別の親リレーションシップを返す場合があります。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The zero-based index of the requested child element in the collection.</source>
          <target state="translated">コレクション内の要求された子要素の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /&gt;</ph>, and returns a child at the specified index from a collection of child elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /&gt;</ph> をオーバーライドして、子要素のコレクションから指定したインデックスの子を返します。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The requested child element.</source>
          <target state="translated">要求された子要素。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>This should not return <ph id="ph1">&lt;see langword="null" /&gt;</ph>; if the provided index is out of range, an exception is thrown.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> を返すことはできません。指定したインデックスが範囲外の場合は例外がスローされます。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation, the only valid index is zero.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>実装では、唯一の有効なインデックスは 0 です。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The content model for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph> supports either zero or one child elements, not a collection.</source>
          <target state="translated">コンテンツ モデル<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>0 個または 1 つの子要素コレクションではなくをサポートしています。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The following example shows how a custom adorner uses the values declared by a <ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> that it maintains for its multiple visual children.</source>
          <target state="translated">次の例は、カスタムの装飾がで宣言されている値を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph>複数のビジュアルの子を保持します。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>These values are reported through overrides of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>.</source>
          <target state="translated">これらの値がのオーバーライドから報告された<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</source>
          <target state="translated">この実装は、わかりやすいビジュアル子要素のコレクションを保持しない要素に対してのみです。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</source>
          <target state="translated">このようなコレクションがいずれかの要素は、このメソッドをオーバーライドし、その要素でサポートされている子要素のコレクションの同等のインデックスにインデックスをマップする必要があります。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>An index in the range from zero to <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph> (minus one) should return a valid element; any other index should throw an out-of-range exception.</source>
          <target state="translated">0 の範囲内でインデックス<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph>(マイナス 1) 有効な要素を返す必要があります他のインデックスが範囲外の例外をスローする必要があります。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>An example of an element type that does support a child collection and overrides <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /&gt;</ph> to return more than one possible child is <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Panel" /&gt;</ph>.</source>
          <target state="translated">子コレクションをサポートし、上書きを要素型の例は<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /&gt;</ph>を 1 つ以上の使用可能な子を返しますが<ph id="ph2">&lt;see cref="T:System.Windows.Controls.Panel" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The default implementation in <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> presumes only one visual child.</source>
          <target state="translated">既定の実装で<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>visual の子を 1 つのみを開始します。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Any value passed for <ph id="ph1">&lt;paramref name="index" /&gt;</ph> other than zero causes an exception to be thrown.</source>
          <target state="translated">値を渡す<ph id="ph1">&lt;paramref name="index" /&gt;</ph>以外で例外をスローするの 0 個の原因です。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> implementation (of the implementation from intermediate base classes).</source>
          <target state="translated">デコレーター、装飾、特殊なレンダリングでは、要素などの一般的な要素がいくつかのオーバーライド、 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> (中級者向けの基本クラスから実装) の実装です。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Some implementations still enforce one visual child whereas others allow a collection.</source>
          <target state="translated">コレクションを使用する他のユーザーが、一部の実装はまだ visual の子を 1 つを適用します。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Height">
          <source>Gets or sets the suggested height of the element.</source>
          <target state="translated">要素の推奨される高さを取得または設定します。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の高さ (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">この値は 0.0 以上にする必要があります。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> is one of three writable properties on <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify height information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 3 つの書き込み可能なプロパティの 1 つ<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>高さ情報を指定します。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>.</source>
          <target state="translated">その他の 2 つは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If there is a conflict between these values, the order of application for actual height determination is that first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and finally, if it is within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">間の競合がある場合これらの値、実際の高さを決定するためのアプリケーションの順序は最初<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph>、受け入れられ、する必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>、最後に、境界内にある場合<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</source>
          <target state="translated">この要素がその他の要素内の子要素の場合は、値にこのプロパティを設定、本当にのみ推奨される値です。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</source>
          <target state="translated">レイアウト システムだけでなく、親要素の特定のレイアウト ロジックが値として使用 nonbinding 入力レイアウトの処理中にします。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In practical terms, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is almost always the child element of something else; even when you set the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> on <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">実際には、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>は、ほとんどの場合; 他の子要素を設定する場合でも、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>で<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>(For <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</source>
          <target state="translated">(の<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>、基になるアプリケーション モデルは、Hwnd を作成する基本的なレンダリングの前提条件を確立するときに、値を使用するアプリケーションをホストします)。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In addition to acceptable <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, this property can also be <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">さらに許容される<ph id="ph1">&lt;xref:System.Double&gt;</ph>値、このプロパティにすることができますも<ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This is how you specify auto sizing behavior in code.</source>
          <target state="translated">これは、コードの自動サイズ変更動作を指定する方法です。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Auto sizing behavior implies that the element will fill the height available to it.</source>
          <target state="translated">自動サイズ変更動作は、要素が利用できる高さいっぱいになることを意味します。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のテーマのスタイルを使用して既定値を頻繁に指定します。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In contrast, the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> may vary.</source>
          <target state="translated">これに対しての値、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>異なる場合があります。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</source>
          <target state="translated">これは、原因が考えられますか静的にレイアウトが何らかの理由により推奨されるサイズを拒否または一時的にします。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The layout system itself works asynchronously relative to the property system's set of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and may not have processed that particular sizing property change yet.</source>
          <target state="translated">プロパティ システムの一連の基準とした、レイアウト システム自体が非同期的にやり取り<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>処理されない可能性がある特定のプロパティの変更をまだサイジングとします。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">値の制限、<ph id="ph1">&lt;xref:System.Double&gt;</ph>によって値が適用される、<ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph>メカニズムです。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> that is enforced by the layout system (this is a very large number, larger than <ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph> but smaller than <ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">だけでなく、検証チェックは、非決定的の上限値にバインドされている<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>レイアウト システムにより強制適用されている (これは非常に大きな数よりも大きい<ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph>がよりも小さい<ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">この上限値を超えた場合は、要素は表示されませんし、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Do not set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">設定しない<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>の表示可能な最大サイズは、この非決定的の上限を超える可能性がありますよりも大幅に大きい値にします。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">文字列表現を<ph id="ph1">&lt;xref:System.Double&gt;</ph>0.0 以上の値。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">この値として解釈されます、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A<bpt id="p1">*</bpt>二重<ept id="p1">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (既定値) <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> インチです。1 96px を = =</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> センチメートル; は、します。1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> ポイントです。1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><bpt id="p1">**</bpt>Auto<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Auto<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Enables autosizing behavior.</source>
          <target state="translated">自動サイズ変更を有効にします。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.HeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Height" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Height" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</source>
          <target state="translated">この要素が、Panel またはアイテム コントロールのような親要素内に構成されるときに適用される水平方向の配置特性を取得または設定します。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>A horizontal alignment setting, as a value of the enumeration.</source>
          <target state="translated">列挙体の値としての水平方向の配置設定。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.HorizontalAlignment.Stretch" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.HorizontalAlignment.Stretch" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>When <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Windows.HorizontalAlignment.Stretch&gt;</ph>.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>要素にプロパティが明示的に設定されている場合、これらの測定値はレイアウト時に高い優先、実行設定の標準的な効果が取り消されます<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph>に<ph id="ph4">&lt;xref:System.Windows.HorizontalAlignment.Stretch&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> is the <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph>新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</source>
          <target state="translated">この特定の依存関係プロパティでは、特にコントロールのサブクラス化された要素で設定が異なります見かけ上の「既定」値がよくあります。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">これは、2 つの方法のいずれかで一般的に発生します特定のサブクラスでは、にはその既定値を設定するためのさまざまなメタデータと、依存関係プロパティが再登録。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>For example, the apparent "default" of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> control will be <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>, even though <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph> inherits <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> direct from <ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">たとえば、明確な「既定」の<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph>の<ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph>コントロールになります<ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>場合でも、<ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph>継承<ph id="ph5">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph>から直接<ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>This is because that value was reset within the default style of <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph>, within the style's control template.</source>
          <target state="translated">これは、既定のスタイル内でその値がリセットされたため<ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph>スタイルのコントロール テンプレート内で。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> does not use <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> when composing layout, because <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is based on absolute positioning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 使用しません<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph>ためのレイアウトを作成するときに<ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>絶対位置に基づきます。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> or derived classes, <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> redefines the default value of this dependency property to be <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>.</source>
          <target state="translated">によって継承と<ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph>派生クラス、または<ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph>にするには、この依存関係プロパティの既定値を再定義<ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</source>
          <target state="translated">プロパティ値の継承、リソース キーのルックアップ、および RelativeSource FindAncestor 検索のスコープの制限を取得または設定します。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>A value of the enumeration.</source>
          <target state="translated">列挙体の値。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.InheritanceBehavior.Default" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.InheritanceBehavior.Default" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>Certain boundaries in the element tree set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InheritanceBehavior%2A&gt;</ph> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</source>
          <target state="translated">要素内の特定境界ツリー セット<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InheritanceBehavior%2A&gt;</ph>を意図的に、アプリケーションのリソースを確認したり、さらに、現在の要素またはそのいずれかのクエリから RelativeSource FindAncestor 参照を防ぐためには、force リソースの検索に、継承動作のスコープを制限します。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>RelativeSource FindAncestor lookup occurs when a binding uses a <ph id="ph1">&lt;xref:System.Windows.Data.RelativeSource&gt;</ph> that has its <ph id="ph2">&lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt;</ph> property set to the <ph id="ph3">&lt;xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType&gt;</ph> value.</source>
          <target state="translated">RelativeSource FindAncestor 参照の場合は、バインディングを使用して、<ph id="ph1">&lt;xref:System.Windows.Data.RelativeSource&gt;</ph>を持つその<ph id="ph2">&lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt;</ph>プロパティに設定、<ph id="ph3">&lt;xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType&gt;</ph>値。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</source>
          <target state="translated">派生クラスをこのプロパティを設定する場合は、する必要がありますこれを行う、静的コンス トラクター内またはその他の初期化ルーチンです。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Occurs when this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> is initialized.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> が初期化されるときに発生します。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>This event coincides with cases where the value of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> property changes from <ph id="ph2">&lt;see langword="false" /&gt;</ph> (or undefined) to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">このイベントと同時に、<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> プロパティの値が <ph id="ph2">&lt;see langword="false" /&gt;</ph> (未定義) から <ph id="ph3">&lt;see langword="true" /&gt;</ph> に変更されます。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>This event will be raised whenever the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;</ph> methods are called.</source>
          <target state="translated">このイベントになります発生するたびに、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Calls to either method could have come from application code, or through the <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> processor behavior when a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> page is processed.</source>
          <target state="translated">アプリケーション コードからまたはいずれかのメソッドの呼び出しが同梱されている可能性があります、<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>プロセッサの動作時に、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>ページを処理します。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Whether you choose to handle <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> depends on your requirements.</source>
          <target state="translated">処理するかどうかを選択する<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>要件によって異なります。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">要素のプロパティを読み取る必要がない場合のプロパティをリセットして、レイアウト情報は必要ありません<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>の対象となるイベントの向上があります。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>の対象となるイベントの向上があります。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>(You might need to check the <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</source>
          <target state="translated">(を確認する必要があります、<ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph>プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>For more information about the sequence of object events for a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>.</source>
          <target state="translated">オブジェクトのイベントのシーケンスに関する詳細については、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>もいくつかの関連アプリケーションと要素のクラスを参照してください、<bpt id="p1">[</bpt>オブジェクトの有効期間イベント<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Gets or sets the context for input used by this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> によって使用される入力のコンテキストを取得または設定します。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>The input scope, which modifies how input from alternative input methods is interpreted.</source>
          <target state="translated">代替の入力メソッドからの入力を解釈する方法を変更する入力スコープ。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph> (which results in a default handling of commands).</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="null" /&gt;</ph> です (既定のコマンド処理を行います)。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>This dependency property inherits property values.</source>
          <target state="translated">この依存関係プロパティでは、プロパティの値を継承します。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>If there are child elements without other values for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph> established through local values or styles, then the property system will set the value to be the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph> value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">その他の値を使用せずに子要素がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph>プロパティ システムは値を設定し、ローカルの値や、スタイルを介して確立、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph>割り当てられているこの値を持つ最も近い先祖の要素の値。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Although a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax usage is listed and is syntactically allowed, setting this property in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is not common.</source>
          <target state="translated">ただし、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>構文の使用状況が表示されているし、は構文的に許可されているのこのプロパティを設定<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>一般的ではありません。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.InputScopeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.InputScope" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.InputScope" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>Gets a value that indicates whether this element has been initialized, either during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor, or by explicitly having its <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> method called.</source>
          <target state="translated">この要素が初期化されているかどうかを示す値を取得します。要素の初期化は、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> プロセッサによる処理の間に行われる場合と、<ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> メソッドを明示的に呼び出すことによって行われる場合があります。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is initialized per the aforementioned <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processing or method calls; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">上で挙げた <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> プロセッサの処理またはメソッド呼び出しを通じて要素が初期化される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>This property may also be <ph id="ph1">`true`</ph> if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</source>
          <target state="translated">このプロパティがありますも<ph id="ph1">`true`</ph>新しい親要素を持つし、そのために再読み込みされたことになるように、この要素が論理ツリー内で移動されたかどうか。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>This property is useful if you also are using <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>.</source>
          <target state="translated">このプロパティにも使用している場合に便利ですが<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>Elements in the logical tree that is loaded by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor are assured to be initialized.</source>
          <target state="translated">によって読み込まれる論理ツリー内の要素、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>プロセッサを初期化する確実に実行されます。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>Elements not in the logical tree are initialized when <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph> is called.</source>
          <target state="translated">論理ツリーに存在しない要素が初期化されるときに<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>In absence of any specific handling of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>, this will happen as soon as the constructor returns the initialized result.</source>
          <target state="translated">特定の処理がない場合に<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>、コンス トラクターが初期化された結果を返すとすぐにこれは行われます。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>Gets a value that indicates whether this element has been loaded for presentation.</source>
          <target state="translated">この要素が表示のために読み込まれているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current element is attached to an element tree; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the element has never been attached to a loaded element tree.</source>
          <target state="translated">現在の要素が要素ツリーにアタッチされている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。読み込まれた要素ツリーに要素がアタッチされていない場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>From a newly constructed <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, this property starts off <ph id="ph2">`false`</ph>, and remains <ph id="ph3">`true`</ph> after it is set to <ph id="ph4">`true`</ph>, even if the element is subsequently removed from a connected logical tree by code.</source>
          <target state="translated">新しく構築されたから<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、このプロパティは、まず<ph id="ph2">`false`</ph>、開いたまま<ph id="ph3">`true`</ph>に設定されている後<ph id="ph4">`true`</ph>コードによって接続されている論理ツリーから要素が、後で削除された場合でも、です。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source><ph id="ph1">`true`</ph> state is set by the general presentation logic when elements are loaded into the presentation engine.</source>
          <target state="translated"><ph id="ph1">`true`</ph> 状態は、要素が、プレゼンテーション エンジンに読み込まれるときに、一般的なプレゼンテーション ロジックによって設定されます。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>Typically, loaded elements are rendered, but not all <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes have a presentation, and other properties such as <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> can influence presentation.</source>
          <target state="translated">通常、読み込まれた要素は、レンダリングされた、すべてではなく<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>派生クラスは、プレゼンテーション、およびなどの他のプロパティがある<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>プレゼンテーションに影響を与えることができます。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>The following example implements two handlers: one is handling the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</source>
          <target state="translated">次の例は、2 つのハンドラーを実装します。 いずれかの処理が、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>イベントの重大度であるため、ページのルート要素が読み込まれることが確実であるため、ルート要素のイベントです。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>The other handler is hooked to a user control, and calls <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsLoaded%2A&gt;</ph> to assure that the root element is loaded completely.</source>
          <target state="translated">ユーザー コントロールを呼び出し、その他のハンドラーをフック<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsLoaded%2A&gt;</ph>されるようにするルート要素には、読み込まれた完全にします。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>Both handlers call the same function (not shown) that will populate child elements with fresh data.</source>
          <target state="translated">両方のハンドラーは、子要素に新しいデータを設定する (非表示) 同じ関数を呼び出します。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Language">
          <source>Gets or sets localization/globalization language information that applies to an element.</source>
          <target state="translated">要素に適用されるローカライズ/グローバリゼーション言語情報を取得または設定します。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>The language information for this element.</source>
          <target state="translated">この要素の言語情報。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>The default value is an <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XmlLanguage" /&gt;</ph> with its <ph id="ph2">&lt;see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /&gt;</ph> value set to the string "en-US".</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="T:System.Windows.Markup.XmlLanguage" /&gt;</ph> の値が文字列 "en-US" に設定された <ph id="ph2">&lt;see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>The string formats follow the RFC 3066 standard.</source>
          <target state="translated">文字列の形式では、RFC 3066 標準に従います。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>For example, U.S. English is "en-US".</source>
          <target state="translated">たとえば、米国"EN-US"は英語です。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>For more information on the values and format, see <ph id="ph1">&lt;xref:System.Windows.Markup.XmlLanguage&gt;</ph>.</source>
          <target state="translated">値と形式の詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Windows.Markup.XmlLanguage&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>This dependency property inherits property values.</source>
          <target state="translated">この依存関係プロパティでは、プロパティの値を継承します。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>If there are child elements without other values for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> established through local values or styles, the property system will set the value to be the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">その他の値を使用せずに子要素がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>ローカル値またはスタイルを介して確立されると、プロパティのシステム値が設定されますを<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>割り当てられているこの値を持つ最も近い先祖の要素の値。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> defines the general meaning of the <ph id="ph2">`xml:lang`</ph> attribute.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> 一般的な意味を定義、<ph id="ph2">`xml:lang`</ph>属性。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> essentially exposes the meaning of this attribute as a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> 依存関係プロパティとして、この属性の意味を本質的に公開します。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the <ph id="ph2">`xml:lang`</ph> attribute can inherit to child element scope in <ph id="ph3">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> プログラムで調整されることができます、匹敵する方法でプロパティ システムの値の継承に参加できる方法、<ph id="ph2">`xml:lang`</ph>子要素のスコープ内に属性が継承される<ph id="ph3">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>, that value becomes the <ph id="ph2">`xml:lang`</ph> and overwrites any previous value.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>、その値が、<ph id="ph2">`xml:lang`</ph>し、以前の値を上書きします。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>For more information, see <bpt id="p1">[</bpt>xml:lang Handling in XAML<ept id="p1">](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>xml:lang XAML での処理<ept id="p1">](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.LanguageProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Language" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Language" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</source>
          <target state="translated">レイアウトの実行時にこの要素に適用するグラフィック変換を取得または設定します。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The transform this element should use.</source>
          <target state="translated">この要素で使用する変換。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The default is <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>In contrast to <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> will affect results of layout.</source>
          <target state="translated">対照的に<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>レイアウトの結果に影響されます。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Setting a transform provides powerful capabilities of scaling and rotating.</source>
          <target state="translated">トランス フォームを設定するには、スケールおよび回転の強力な機能が備わっています。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> ignores <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> operations.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>無視<ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph>操作します。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>This is because the layout system behavior for child elements of a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</source>
          <target state="translated">これは子要素をレイアウト システムの動作、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>任意のオフセットがレイアウトにスケールまたは回転した要素の位置および親要素の座標システムへの自動修正します。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> レイアウト システムで完全パスを必要としないシナリオで起動する場合は、不十分なアプリケーションのパフォーマンスに可能性があります。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of the <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</source>
          <target state="translated">適用すると、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>を<ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph>のコレクション、<ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>レイアウト システムによって新しいパスがトリガー、および画面に表示されるすべて remeasured して再配置するオブジェクトを強制的に実行します。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>If you are updating the complete application <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>, this functionality might be exactly what you need.</source>
          <target state="translated">完全なアプリケーションを更新する場合は<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>、この機能は必要なものだけする可能性があります。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>However, if you do not need a full layout pass, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</source>
          <target state="translated">ただし、完全な配置パスを使用する必要はありません、使用、<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>プロパティでは、レイアウト システムを呼び出しませんであるため、通常このシナリオの方が適しています。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Example scenarios where <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</source>
          <target state="translated">シナリオ例を<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>が役に立つを含める: フォーカス、編集の動作などを提供することで (拡大) 要素を拡大/縮小から水平方向の垂直方向に、またはその逆の場合は、メニュー コンポーネントなどの要素を回転します。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The following example shows how to apply a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> to an element.</source>
          <target state="translated">次の例に適用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>要素にします。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The example creates an instance of <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and hosts it within a parent <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
          <target state="translated">インスタンスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>親内でホストおよび<ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> property to apply a <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">また、使用、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>を適用するプロパティ、<ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>を<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.LayoutTransformProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.LayoutTransform" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.LayoutTransform" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Occurs when the element is laid out, rendered, and ready for interaction.</source>
          <target state="translated">要素のレイアウトやレンダリングが完了し、操作を受け入れる準備が整ったときに発生します。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> is usually the last event raised in an element initialization sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 通常最後のイベント、要素の初期化のシーケンスで発生します。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>It will always be raised after <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>.</source>
          <target state="translated">これが常に発生した後<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Whether you choose to handle <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> depends on your requirements.</source>
          <target state="translated">処理するかどうかを選択する<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>要件によって異なります。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">要素のプロパティを読み取る必要がない場合のプロパティをリセットして、レイアウト情報は必要ありません<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>の対象となるイベントの向上があります。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>の対象となるイベントの向上があります。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>(You might need to check the <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</source>
          <target state="translated">(を確認する必要があります、<ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph>プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>For more information about the sequence of object events for a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>.</source>
          <target state="translated">オブジェクトのイベントのシーケンスに関する詳細については、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>もいくつかの関連アプリケーションと要素のクラスを参照してください、<bpt id="p1">[</bpt>オブジェクトの有効期間イベント<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでします。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> および<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph>両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Therefore <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> cannot be assumed to occur only when a page is first loaded through navigation to the page.</source>
          <target state="translated">したがって<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>のみページが最初に読み込まれるときに、ページへの移動を発生すると見なされますことはできません。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Loaded" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Loaded" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>Gets an enumerator for logical child elements of this element.</source>
          <target state="translated">この要素の論理上の子要素に対する列挙子を取得します。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>An enumerator for logical child elements of this element.</source>
          <target state="translated">この要素の論理上の子要素に対する列挙子。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> allows you to iterate over child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> 使用すると、子要素を反復処理できます。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> child elements.</source>
          <target state="translated">これは、可能性があります、定義済みの専用のコレクションはありませんが、まだ特に複数の子要素が含まれている要素に便利です<ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>子要素です。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>For more information on how to use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Gets or sets the outer margin of an element.</source>
          <target state="translated">要素の外側の余白を取得または設定します。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Provides margin values for the element.</source>
          <target state="translated">要素の余白の値を提供します。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The default value is a <ph id="ph1">&lt;see cref="T:System.Windows.Thickness" /&gt;</ph> with all properties equal to 0 (zero).</source>
          <target state="translated">既定値は、すべてのプロパティが 0 (ゼロ) の <ph id="ph1">&lt;see cref="T:System.Windows.Thickness" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The margin is the space between this element and other elements that will be adjacent when layout creates the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">余白は、この要素とレイアウトを作成するときに、隣接するその他の要素間の空白、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</source>
          <target state="translated">共有要素は、ピア要素 (その他のコレクション内の要素、共通の親コントロールの) などがあります。 または、この要素の親の場合もあります。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> is set as a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> structure rather than as a number so that the margin can be set asymmetrically.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> として設定されている、<ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>構造数値としてではなく、余白を非対称的設定できるようにします。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> structure itself supports string type conversion so that you can specify an asymmetric <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute syntax also.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>構造体自体には文字列型の変換がサポートされているため、非対称を指定できます<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>で<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>属性構文もします。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>A non-zero margin applies space outside the element layout's <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>.</source>
          <target state="translated">0 以外の余白は要素のレイアウトの<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</source>
          <target state="translated">余白は、レイアウトの兄弟要素の追加たとえば、2 つの隣接する要素が隣接する端に 30 の余白がどちらも設定は、60 の単位の間にスペースがあります。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Elements that have margins set will not typically constrain the size of the specified <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> if the allotted rectangle space is not large enough for the margin plus the element content area.</source>
          <target state="translated">余白の設定を持つ要素を指定したサイズ制約通常しない<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>割り当てられた四角形領域が十分な大きさの余白と要素のコンテンツ領域にかどうかはありません。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The element content area will be constrained instead when layout is calculated.</source>
          <target state="translated">要素のコンテンツ領域は、代わりにレイアウトの計算時に制限されます。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The only case where margins would be constrained also is if the content is already constrained all the way to zero.</source>
          <target state="translated">コンテンツが既に 0 に制約されていますもは余白が制限される場合だけです。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><bpt id="p1">*</bpt>left, top, right, bottom<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>左、上、右、下<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Number values between 0 and <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> that specify the four possible dimension properties of a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> structure.</source>
          <target state="translated">0 との間の数値と<ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph>の 4 つの可能なディメンション プロパティを指定する、<ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>構造体。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</source>
          <target state="translated">属性の使用方法も指定すると、対称的、論理的な順序で適用される省略形の値を受け取ります。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>For instance, <ph id="ph1">`Margin="20"`</ph> will be interpreted to mean a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> with all properties set to 20.</source>
          <target state="translated">たとえば、<ph id="ph1">`Margin="20"`</ph>という意味に解釈されます、<ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>すべてのプロパティが 20 に設定します。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><ph id="ph1">`Margin="20,50"`</ph> will be interpreted to mean a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> with <ph id="ph3">&lt;xref:System.Windows.Thickness.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Thickness.Right%2A&gt;</ph> set to 20, and <ph id="ph5">&lt;xref:System.Windows.Thickness.Top%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Thickness.Bottom%2A&gt;</ph> set to 50.</source>
          <target state="translated"><ph id="ph1">`Margin="20,50"`</ph> という意味に解釈されます、<ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>で<ph id="ph3">&lt;xref:System.Windows.Thickness.Left%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Windows.Thickness.Right%2A&gt;</ph>を 20 に設定し、<ph id="ph5">&lt;xref:System.Windows.Thickness.Top%2A&gt;</ph>と<ph id="ph6">&lt;xref:System.Windows.Thickness.Bottom%2A&gt;</ph>は 50 に設定します。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The default unit for a <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> measure is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>.</source>
          <target state="translated">既定の単位、<ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>メジャーが<ph id="ph2">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>You can also specify other units by appending the unit type strings <ph id="ph1">`cm`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`pt`</ph> to any measure.</source>
          <target state="translated">単位の種類の文字列を追加することによって、他の単位を指定することも<ph id="ph1">`cm`</ph>、 <ph id="ph2">`in`</ph>、または<ph id="ph3">`pt`</ph>任意の測定値にします。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Number values provided as <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</source>
          <target state="translated">数値として提供される<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>属性が必要な 10 進数のポイントを指定しない (0 が許容される、0.0 として指定する必要はありません)。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> usage, see <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>.</source>
          <target state="translated">詳細については<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>使用状況を参照してください<ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>An object reference to an existing <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>.</source>
          <target state="translated">既存のオブジェクト参照<ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>This might be a <ph id="ph1">`}`</ph>, a , or <ph id="ph2">`}`</ph> reference.</source>
          <target state="translated">可能性があります、 <ph id="ph1">`}`</ph>、または<ph id="ph2">`}`</ph>参照します。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> usage, see <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>.</source>
          <target state="translated">詳細については<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>使用状況を参照してください<ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MarginProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Margin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Margin" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Gets or sets the maximum height constraint of the element.</source>
          <target state="translated">要素の高さの最大値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The maximum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の最大の高さ (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is also valid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> も有効です。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify height information.</source>
          <target state="translated">これには 3 つのプロパティのいずれかの<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>高さ情報を指定します。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">その他の 2 つは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>If there is a conflict between these values, the order of application for actual height determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph>、受け入れられ、する必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>、最後に、境界内にある場合のこれら各<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">値の制限、<ph id="ph1">&lt;xref:System.Double&gt;</ph>によって値が適用される、<ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph>メカニズムです。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>If you attempt to set an invalid value a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとする場合、実行時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">文字列表現を<ph id="ph1">&lt;xref:System.Double&gt;</ph>0.0 以上の値。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept> if you need to explicitly set the value to be <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>.</source>
          <target state="translated">同じ<ph id="ph1">&lt;xref:System.Double&gt;</ph>プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて<bpt id="p1">[</bpt>X:static マークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept>かどうかは、値を明示的に設定する必要があります。<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A<bpt id="p1">*</bpt>二重<ept id="p1">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (既定値) <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> インチです。1 96px を = =</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> センチメートル; は、します。1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> ポイントです。1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MaxHeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxHeight" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxHeight" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Gets or sets the maximum width constraint of the element.</source>
          <target state="translated">要素の幅の最大値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The maximum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の最大の幅 (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is also valid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> も有効です。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify width information.</source>
          <target state="translated">これには 3 つのプロパティのいずれかの<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>幅情報を指定します。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">その他の 2 つは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>If there is a conflict between these values, the order of application for actual width determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph>、受け入れられ、する必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>、最後に、境界内にある場合のこれら各<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">値の制限、<ph id="ph1">&lt;xref:System.Double&gt;</ph>によって値が適用される、<ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph>メカニズムです。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">文字列表現を<ph id="ph1">&lt;xref:System.Double&gt;</ph>0.0 以上の値。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept> to set the value to be <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>.</source>
          <target state="translated">同じ<ph id="ph1">&lt;xref:System.Double&gt;</ph>プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて<bpt id="p1">[</bpt>X:static マークアップ拡張機能<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept>値に設定する<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A<bpt id="p1">*</bpt>二重<ept id="p1">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (既定値) <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> インチです。1 96px を = =</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> センチメートル; は、します。1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> ポイントです。1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MaxWidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxWidth" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxWidth" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>The available size that the parent element can give to the child elements.</source>
          <target state="translated">親要素が子要素に与えることが利用可能なサイズ。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>Implements basic measure-pass layout system behavior for <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> の測定パス レイアウト システムの基本動作を実装します。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>The desired size of this element in layout.</source>
          <target state="translated">レイアウト内のこの要素の必要なサイズ。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph> to connect the  WPF core-level and WPF framework-level layout measure implementations.</source>
          <target state="translated">このメソッドは<ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph>WPF コア レベルと WPF フレームワーク レベルのレイアウトの測定の実装に接続します。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation seals the method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>実装メソッドをシールします。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> instead.</source>
          <target state="translated">WPF フレームワーク レベル上に構築される要素の測定パス レイアウト動作を調整するのには、オーバーライド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>代わりにします。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, override <ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">測定パスを意図的に、WPF フレームワーク レベルのビルドを使用して要素のレイアウトの動作を調整する<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、オーバーライド<ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The available size that this element can give to child elements.</source>
          <target state="translated">この要素が子要素に提供できる使用可能なサイズ。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Infinity can be specified as a value to indicate that the element will size to whatever content is available.</source>
          <target state="translated">あらゆるコンテンツに要素がサイズを合わせることを示す値として、無限大を指定できます。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>-derived class.</source>
          <target state="translated">派生クラスでオーバーライドされると、子要素に必要なレイアウトのサイズを測定し、<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 派生クラスのサイズを決定します。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The size that this element determines it needs during layout, based on its calculations of child element sizes.</source>
          <target state="translated">子要素のサイズの計算に基づいて、この要素が判断したレイアウト時に必要なサイズ。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> to implement custom layout sizing behavior for your element as it participates in the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> layout system.</source>
          <target state="translated">オーバーライド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>に含まれているように、要素のカスタム レイアウトのサイズ変更動作を実装する、<ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>レイアウト システムです。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Your implementation should do the following:</source>
          <target state="translated">実装は、次の操作を行います。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Iterate your element's particular collection of children that are part of layout, call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child element.</source>
          <target state="translated">レイアウト、呼び出しの一部である子の要素の特定のコレクションを反復処理する<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>各子要素にします。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Immediately get <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> on the child (this is set as a property after <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> is called).</source>
          <target state="translated">すぐに<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>の子で (これには、設定後にプロパティとして<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>と呼びます)。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Compute the net desired size of the parent based upon the measurement of the child elements.</source>
          <target state="translated">子要素の測定に基づく親の net 目的のサイズを計算します。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</source>
          <target state="translated">戻り値<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>メジャーが現在の要素の親要素の入力となる要素の独自必要なサイズにする必要があります。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>This same process continues through the layout system until the root element of the page is reached.</source>
          <target state="translated">ページのルート要素に到達するまでは、レイアウト システムでこの同じプロセスが続行されます。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>During this process, child elements might return a larger <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> size than the initial <ph id="ph2">`availableSize`</ph> to indicate that the child element wants more space.</source>
          <target state="translated">このプロセス中には、子要素より大規模なに返す場合があります<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>最初よりもサイズ<ph id="ph2">`availableSize`</ph>を子要素がより多くの領域を依頼するかを示します。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</source>
          <target state="translated">これは、何らかのスタックの順序、または任意の数の測定] または [コンテンツの配置のソリューションを確立することによって、親コントロールのサイズを変更して、スクロール可能な領域を導入することにより、独自の実装で処理可能性があります。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Elements should call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</source>
          <target state="translated">要素を呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>でこの処理中にそれぞれの子では、それ以外の場合、子要素は正しくサイズまたはされません配置します。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The following non-compiling code shows this implementation pattern.</source>
          <target state="translated">次のコンパイルされていないコードでは、この実装パターンを示します。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source><bpt id="p1">&lt;c&gt;</bpt>VisualChildren<ept id="p1">&lt;/c&gt;</ept> represents an enumerable collection property of children that your own element should define.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>VisualChildren<ept id="p1">&lt;/c&gt;</ept>独自の要素を定義する必要がありますの子の列挙可能なコレクション プロパティを表します。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The property can be named anything.</source>
          <target state="translated">プロパティは、何かということができます。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source><bpt id="p1">&lt;c&gt;</bpt>VisualChildren<ept id="p1">&lt;/c&gt;</ept> is a placeholder name for purposes of this example, <bpt id="p2">&lt;c&gt;</bpt>VisualChildren<ept id="p2">&lt;/c&gt;</ept> is not an <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> as provided by <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> or a part of a naming pattern..</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>VisualChildren<ept id="p1">&lt;/c&gt;</ept>は、この例の目的のプレース ホルダー名<bpt id="p2">&lt;c&gt;</bpt>VisualChildren<ept id="p2">&lt;/c&gt;</ept>されませんが、<ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph>によって提供されるよう<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>または名前付けパターンの一部.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Gets or sets the minimum height constraint of the element.</source>
          <target state="translated">要素の高さの最小値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The minimum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の最小の高さ (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The default value is 0.0.</source>
          <target state="translated">既定値は 0.0 です。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>However, <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is NOT valid, nor is <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> と <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph> は無効です。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify height information.</source>
          <target state="translated">これには 3 つのプロパティのいずれかの<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>高さ情報を指定します。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>.</source>
          <target state="translated">その他の 2 つは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>If there is a conflict between these values, the order of application for actual height determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph>、受け入れられ、する必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>、最後に、境界内にある場合のこれら各<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">値の制限、<ph id="ph1">&lt;xref:System.Double&gt;</ph>によって値が適用される、<ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph>メカニズムです。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">文字列表現を<ph id="ph1">&lt;xref:System.Double&gt;</ph>0.0 以上の値。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">同じ<ph id="ph1">&lt;xref:System.Double&gt;</ph>プロパティの値セクションで説明したように範囲の制限が適用されます。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A<bpt id="p1">*</bpt>二重<ept id="p1">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (既定値) <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> インチです。1 96px を = =</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> センチメートル; は、します。1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> ポイントです。1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MinHeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinHeight" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinHeight" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Gets or sets the minimum width constraint of the element.</source>
          <target state="translated">要素の幅の最小値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The minimum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の最小の幅 (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The default value is 0.0.</source>
          <target state="translated">既定値は 0.0 です。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>However, <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is not valid, nor is <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> と <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph> は無効です。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify width information.</source>
          <target state="translated">これには 3 つのプロパティのいずれかの<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>幅情報を指定します。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</source>
          <target state="translated">その他の 2 つは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>If there is a conflict between these values, the order of application for actual width determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph>、受け入れられ、する必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>、最後に、境界内にある場合のこれら各<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">値の制限、<ph id="ph1">&lt;xref:System.Double&gt;</ph>によって値が適用される、<ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph>メカニズムです。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">文字列表現を<ph id="ph1">&lt;xref:System.Double&gt;</ph>0.0 以上の値。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">同じ<ph id="ph1">&lt;xref:System.Double&gt;</ph>プロパティの値セクションで説明したように範囲の制限が適用されます。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A<bpt id="p1">*</bpt>二重<ept id="p1">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (既定値) <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> インチです。1 96px を = =</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> センチメートル; は、します。1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> ポイントです。1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MinWidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinWidth" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinWidth" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The direction that focus is to be moved, as a value of the enumeration.</source>
          <target state="translated">フォーカスの移動方向を表す列挙値。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</source>
          <target state="translated">指定した移動方向の別の要素にこの要素からキーボード フォーカスを移動します。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if focus is moved successfully; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the target element in direction as specified does not exist or could not be keyboard focused.</source>
          <target state="translated">フォーカスの移動が成功した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> が返されます。指定した方向にターゲット要素が存在しない場合や、ターゲット要素にキーボード フォーカスを設定できなかった場合は、<ph id="ph2">&lt;see langword="false" /&gt;</ph> が返されます。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>This implementation overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType&gt;</ph> and seals the method.</source>
          <target state="translated">この実装をオーバーライド<ph id="ph1">&lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType&gt;</ph>メソッドをシールとします。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The following example implements a handler that handles several possible button inputs.</source>
          <target state="translated">次の例では、いくつかのボタンの入力を処理するハンドラーを実装します。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Each button represents a possible <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>.</source>
          <target state="translated">各ボタンを表すことがある<ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The handler tracks the element with current keyboard focus, and calls <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> on that element, by specifying the appropriate <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> as initialization for the <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> type parameter provided.</source>
          <target state="translated">ハンドラーは、現在のキーボード フォーカス、および呼び出しを持つ要素が追跡<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph>、適切なを指定して、その要素に<ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>の初期化の構文として、<ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph>指定されたパラメーターを入力します。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Name">
          <source>Gets or sets the identifying name of the element.</source>
          <target state="translated">要素の識別名を取得または設定します。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Name">
          <source>The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor.</source>
          <target state="translated">この名前は、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> プロセッサによる処理時に構築されたマークアップ要素を、その後に分離コード (イベント ハンドラーのコードなど) から参照するために使用できます。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The name of the element.</source>
          <target state="translated">要素の名前。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The default is an empty string.</source>
          <target state="translated">既定値は空の文字列です。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The most common usage of this property is to specify a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> element name as an attribute in markup.</source>
          <target state="translated">このプロパティの最も一般的な使用法を指定する、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>マークアップの属性と要素の名前。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>This property essentially provides a WPF framework-level convenience property to set the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>.</source>
          <target state="translated">このプロパティでは、WPF フレームワーク レベルの便利なプロパティを設定する基本的にでは、 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Names must be unique within a namescope.</source>
          <target state="translated">名は、名前スコープ内で一意でなければなりません。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Getting a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> if you are creating elements in code is not common.</source>
          <target state="translated">取得する、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>内の要素を作成する場合はコードは一般的ではありません。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>.</source>
          <target state="translated">既に適切な参照をコードにある場合だけメソッドを呼び出すことができ、要素のプロパティが参照し、一般的に必要ではない、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>An exception to this is if the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> string has some overloaded meaning, for instance if it is useful to display that name in <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">この例外となる場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>文字列オーバー ロードされたに意味を持ちます内でその名前を表示すると便利である場合<ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Setting a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> from code-behind if the original <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> was set from markup is also not recommended, and changing the property after loading the <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> will not change the original object reference.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>分離コードから場合、元の<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>マークアップから設定されても、推奨されていませんし、読み込み後、プロパティを変更する、<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>元のオブジェクト参照は変更されません。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The object references are created only when the underlying namescopes are explicitly created during parsing.</source>
          <target state="translated">基になる名前スコープは、解析時に明示的に作成された場合にのみ、オブジェクト参照が作成されます。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>You must specifically call <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> to make an effective change to the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property of an already loaded element.</source>
          <target state="translated">具体的に呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph>を効果的に変更する、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>既に読み込まれた要素のプロパティです。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>One notable case where setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</source>
          <target state="translated">1 つの重要な場合は設定、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>コードから重要では実行時に参照できるように、に対して ストーリー ボードが要素の実行に名前を登録するときに、します。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Before you can register a name, might also need to instantiate and assign a <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> instance.</source>
          <target state="translated">名前を登録することができます、前にも必要になるをインスタンス化し、割り当てます、<ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>See the Example section, or <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">使用例」を参照してください。 または<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> from code has limited applications, but getting an element by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is more common.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>コードからは制限されていますが、アプリケーションの場合して要素を取得する<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>が一般的です。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</source>
          <target state="translated">1 つのシナリオは、アプリケーションがここで、アプリケーションにページが再読み込みされ、必ずしもそのページに対して定義されている分離コードが実行時のコードではありませんは、ナビゲーション モデルをサポートするかどうかです。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The utility method <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph>, which is available from any <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, can find any element by <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> in the logical tree for that element, searching the tree recursively as necessary.</source>
          <target state="translated">ユーティリティ メソッド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph>、これは、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>で要素を検索できます<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>その要素の論理ツリーで、必要に応じて、ツリーを再帰的を検索します。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Or you can use the <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> static method of <ph id="ph2">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph>, which also takes a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> string as an argument.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>の静的メソッド<ph id="ph2">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph>もを取り、<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>文字列を引数として。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Typically used root elements (<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> for example) implement the interface <ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">通常使用されるルート要素 (<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>たとえば) インターフェイスを実装して<ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Implementations of this interface are expected to enforce that names be unambiguous within their scope.</source>
          <target state="translated">名前をそのスコープ内で明確にすることを強制するには、このインターフェイスの実装が予想されます。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The root elements that define this interface also define the namescope behavior boundaries for all the related <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">このインターフェイスを定義するルート要素は、すべての名前スコープの動作の境界を定義するも、関連する<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property also serves as an identifier for other processes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>プロパティは、他のプロセスの識別子としても機能します。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>For instance, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> automation model will use <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> as the AutomationId for clients and providers.</source>
          <target state="translated">インスタンス、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>オートメーション モデルで使用する<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>クライアントとプロバイダーの AutomationId として。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The string values used for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> have some restrictions, as imposed by the underlying <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> defined by the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> specification.</source>
          <target state="translated">使用する文字列値<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>による、基になるようにいくつかの制限がある<bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>によって定義された、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>仕様です。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Most notably, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</source>
          <target state="translated">最も顕著な<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>はアルファベットまたはアンダー スコア文字 (_) で始める必要があるあり、アルファベット、数字、またはアンダー スコアのみを含める必要があります。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is one of the very few dependency properties that cannot be animated (<ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata), because the name itself is vital for targeting an animation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> アニメーション化することはできませんのほとんどの依存関係プロパティの 1 つです (<ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</ph>は<ph id="ph3">`true`</ph>メタデータに) 名前そのものがアニメーションを対象とするために不可欠であるためです。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Data binding a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is technically possible, but is an extremely uncommon scenario because a data-bound <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</source>
          <target state="translated">データ バインディング、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>技術的に可能ですは、非常に一般的ではないため、データにバインドされた<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>プロパティのメインの意図された目的に使用できません: 分離コードの識別子の接続ポイントを提供します。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property in code, and then registers the name into the newly created <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> by calling <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph>.</source>
          <target state="translated">次の例のセット、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>コードでは、プロパティ、名前に、新しく作成し、登録と<ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph>を呼び出して<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, and cannot be targeted by object reference.</source>
          <target state="translated">ストーリー ボードでは、対象を設定する必要があるために、次に示す手法は、ストーリー ボードのアニメーション化するための要件、 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>、し、オブジェクト参照の対象となることはできません。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.NameProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Name" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Name" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>When overridden in a derived class, is invoked whenever application code or internal processes call <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /&gt;</ph>.</source>
          <target state="translated">派生クラスでオーバーライドされると、アプリケーション コードや内部プロセスで <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /&gt;</ph> が呼び出されるたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>Templates are the section of an element's completed visual tree that comes from the Template property of a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> that is applied for the element.</source>
          <target state="translated">テンプレートのテンプレートのプロパティから派生した要素の完成したビジュアル ツリーのセクションでは、<ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph>要素に適用されています。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
          <target state="translated">詳しくは、「 <bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> can use this method as a notification for a variety of possible scenarios:</source>
          <target state="translated">派生クラスの<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>可能なシナリオのさまざまな通知としてこのメソッドを使用できます。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can call your own implementation of code that builds the remainder of an element visual tree.</source>
          <target state="translated">要素のビジュアル ツリーの残りの部分を構築するコードの独自の実装を呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</source>
          <target state="translated">テンプレートから得られた名前付きの要素への参照を取得するなど、適用されてもテンプレートのビジュアル ツリーに依存するコードを実行することができます。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can introduce services that only make sense to exist after the visual tree from templates is complete.</source>
          <target state="translated">テンプレートのビジュアル ツリーが完了した後に存在する意味がないサービスを導入することができます。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can set states and properties of elements within the template that are dependent on other factors.</source>
          <target state="translated">状態とその他の要因に依存しているテンプレート内の要素のプロパティを設定することができます。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</source>
          <target state="translated">インスタンスのプロパティの値のみ探索可能な親要素を理解することでもありますクラスが、一般的なテンプレートを使用して、特定の派生です。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>Implementers should always call the base implementation before their own implementation.</source>
          <target state="translated">実装時は、独自の実装前に基本実装を呼び出す常にする必要があります。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> itself has no default implementation, but intervening classes might.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 既定値を持たない自体の実装が介在するクラスがあります。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph> offers a similar override, <ph id="ph2">&lt;see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph> 同様の上書きは、<ph id="ph2">&lt;see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Provides data about the event.</source>
          <target state="translated">イベントに関するデータを提供します。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated">未処理の <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的は、類似した<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">ここでは、照合イベントは、ルーティングされたイベントです。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">サブクラス<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
          <target state="translated">イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated">未処理の <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的は、類似した<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">ここでは、照合イベントは、ルーティングされたイベントです。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">サブクラス<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
          <target state="translated">イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> event reaches this element in its route.</source>
          <target state="translated">未処理の <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> イベントが、その経路上でこの要素に到達するたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Unlike some other On* methods exposed by the base elements, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> does have a default implementation.</source>
          <target state="translated">その他のとは異なり * ベースの要素によって公開されるメソッド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph>が既定の実装です。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph>.</source>
          <target state="translated">具体的には、実装、基本要素の次のレベルで null の実装をオーバーライドするが<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>When invoked, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</source>
          <target state="translated">呼び出されると、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph>イベントがキーボード フォーカスのため、現在の要素から作成される場合に、この要素に適切なフォーカスの動作を設定します。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> handler does not mark the event arguments as handled, even when focus is set to the current element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph>ハンドラーにイベントの引数もフォーカス設定されている場合、現在の要素を処理済みとしてマークされません。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If the event's source was another element in the tree (not the current element), the handler does nothing.</source>
          <target state="translated">イベントのソースが別の要素ツリーで、(現在の要素ではなく) の場合は、ハンドラーは、何も実行します。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>).</source>
          <target state="translated">要素のフォーカスの既定の動作を変更するは、この方法でフォーカスの動作を変更する向上を実現するのにまったくフォーカス可能な要素を許可しないことによって対応するためにこのメソッドをオーバーライドすることができます (を参照してください<ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</source>
          <target state="translated">引数で処理されるイベントをマークする場合に、要素ツリー内の他の親要素でのイベント処理に与える影響の注意してください。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Because this handler acts on an event with a bubbling routing, setting the focus to the current <ph id="ph1">&lt;paramref name="sender" /&gt;</ph> per the event arguments may not be appropriate.</source>
          <target state="translated">動作するためこのハンドラーのバブルのルーティング イベントを現在フォーカスを設定する<ph id="ph1">&lt;paramref name="sender" /&gt;</ph>イベントごと引数適切ではありません。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</source>
          <target state="translated">フォーカスがや特定のコントロールの複合に応じての親要素、複合の子要素のいずれかに移動する必要があります。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</source>
          <target state="translated">処理済みとしてしたがって focus イベントをマークすることは、イベントがルーティングするビジュアル ツリーの全体が作成したコントロールの複合の一部である場合にのみ推奨されます。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>This method is invoked whenever <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> internally.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> が内部で <ph id="ph2">&lt;see langword="true" /&gt;</ph> に設定されるたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>This particular On* method is not a class handler hook.</source>
          <target state="translated">この特定 * メソッドは、クラス ハンドラーのフックはありません。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Nor does it exactly follow the established <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> On* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</source>
          <target state="translated">正確に従う、確立されたも<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>で * メソッド規則がこのメソッドをオーバーライドし、基本実装を呼び出していない一致するイベントを抑制する可能性があります。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Note that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph> property is read-only, so you cannot set <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph> to force initialization behavior.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph>設定することはできませんのでプロパティは読み取り専用、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph>初期化動作を強制的にします。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Setting the initialization state is intended to be done only by the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> framework.</source>
          <target state="translated">のみ実行するためのものが初期化状態を設定、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>フレームワークです。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>The default implementation of this virtual method raises the event as described above.</source>
          <target state="translated">この仮想メソッドの既定の実装は、上で説明したようにイベントを発生させます。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Overrides should call the base implementation to preserve this behavior.</source>
          <target state="translated">オーバーライドでは、この動作を保持するために基本実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>If you fail to call the base implementation, not only will you not raise the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> event as is generally expected of a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</source>
          <target state="translated">基底の実装の呼び出しに失敗した場合だけでなく、発生しません、<ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph>イベントの想定が通常どおり、<ph id="ph2">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>派生クラスには、2 つ重要なスタイルとテーマ スタイルの初期化の操作であるで抑制します。この基本の実装によって実装されます。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The event data that describes the property that changed, as well as old and new values.</source>
          <target state="translated">変更されたプロパティと、新旧の値を記述するイベント データ。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked whenever the effective value of any dependency property on this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> has been updated.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> の依存関係プロパティの有効値が更新されると、そのたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific dependency property that changed is reported in the arguments parameter.</source>
          <target state="translated">変更が発生した特定の依存関係プロパティが引数パラメーターで報告されます。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is not intended to generally detect property changes or invalidations.</source>
          <target state="translated">このメソッドは、通常、プロパティの変更または無効化を検出するものではありません。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</source>
          <target state="translated">代わりに目的が、一般的な無効化パターンの変更があったプロパティの広範な分類に関する特定の情報がわかっている場合。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is potentially invoked many times during the life of an object.</source>
          <target state="translated">このメソッドでは、オブジェクトの有効期間中に何度もを呼び出す可能性があります。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions for individual properties.</source>
          <target state="translated">したがって、特定のプロパティのメタデータをオーバーライドし、適用するを使用するパフォーマンスが向上を実現できます<ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>個々 のプロパティです。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>However, you would use this method if a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">場合にこのメソッドを使用すると、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>多数の値と相互に依存関係プロパティを含む動作をレンダリングする必要がありますを再実行関連のプロパティの無効化のケースのいくつかのようにロジックが含まれている場合またはします。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Note that there is an identically named <ph id="ph1">`OnPropertyChanged`</ph> method with a different signature (the parameter type is <ph id="ph2">&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;</ph>) that can appear on a number of classes.</source>
          <target state="translated">ある同じ名前に注意してください<ph id="ph1">`OnPropertyChanged`</ph>異なるシグネチャを持つメソッド (パラメーターの型が<ph id="ph2">&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;</ph>) に多数のクラスに表示されることができます。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>That <ph id="ph1">`OnPropertyChanged`</ph> is used for data object notifications, and is part of the contract for <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>.</source>
          <target state="translated">ある<ph id="ph1">`OnPropertyChanged`</ph>のコントラクトの一部であり、データ オブジェクトの通知に使用<ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Always call the base implementation, as the first operation in your implementation.</source>
          <target state="translated">常に、実装では、最初の操作として基底の実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Failure to do this will significantly disable the entire <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system, which causes incorrect values to be reported.</source>
          <target state="translated">これを行うにはエラーには、全体が無効になりますが大幅に<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システムは、これにより、正しくない値が報告されます。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</source>
          <target state="translated">特定<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>実装も表示されるユーザー インターフェイスに影響するプロパティのさまざまな適切な状態を維持する必要があります。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>These include invalidating the visual tree based on changes to style at appropriate times.</source>
          <target state="translated">適切な時点でスタイルを設定する変更に基づき、ビジュアル ツリーを無効化が含まれます。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Details of the old and new size involved in the change.</source>
          <target state="translated">変更に関係する、古いサイズと新しいサイズの詳細。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> event, using the specified information as part of the eventual event data.</source>
          <target state="translated">指定した情報を最終的なイベント データの一部として使用して <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>If you call this method you will reset the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</source>
          <target state="translated">このメソッドを呼び出す場合は、リセット、 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> 、プロパティ、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>プロパティ、またはその両方として指定されている内容によっては、指定された引数で変更されは常にイベントが発生します。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Do not override this method for typical layout scenarios.</source>
          <target state="translated">一般的なレイアウト シナリオには、このメソッドをオーバーライドしません。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</source>
          <target state="translated">レイアウト システムは、すべての可能なレイアウトの配置し、メジャーの場合は考慮ことを保証する意図的に非同期の方法で動作します。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The layout system override methods <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> are usually sufficient for any required layout customization.</source>
          <target state="translated">レイアウト システムは、メソッドをオーバーライド<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph>は通常の必要な必要なレイアウトをカスタマイズします。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> is exposed as a virtual.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> バーチャル マシンとして公開されます。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>You can override <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</source>
          <target state="translated">オーバーライドできます<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph>応答で再構成を実行時動作の変更が入力コントロールと組み合わせて使用するイベントに関連する例外的なケースを解決するのに不正確なレイアウト情報を与える可能性があります。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>You may still override this method in derived classes (it is protected but not sealed).</source>
          <target state="translated">でも (これは保護されているが封印されていない) の派生クラスでこのメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</source>
          <target state="translated">常に既定の WPF フレームワーク レベルのレンダリングの動作を無効にするための特別な理由がない限り、上記で説明した動作を保持する基本実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Failing to raise the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</source>
          <target state="translated">失敗を発生させる、<ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph>イベントは、標準の WPF フレームワーク レベルのレイアウト システムの実装を使用する場合、非標準のレイアウトの動作が発生します。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>The old style.</source>
          <target state="translated">元のスタイル。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>The new style.</source>
          <target state="translated">新しいスタイル。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>Invoked when the style in use on this element changes, which will invalidate the layout.</source>
          <target state="translated">この要素で使用されているスタイルが変更された場合に呼び出されます。スタイルが変更されるとレイアウトが無効になります。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>This method has a default implementation that sets an internal flag that notes the style changed condition.</source>
          <target state="translated">このメソッドには、スタイルが変更された状態を記録する内部フラグを設定する既定の実装があります。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>You should not typically have to override this method.</source>
          <target state="translated">通常必要はありませんこのメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph>, or the defaults.</source>
          <target state="translated">いずれかのメジャーを含むスタイルを変更または変更での一般的な実装を想定して、別のレンダリング サイクルは、既に配置<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> <ph id="ph2"> / </ph> <ph id="ph3">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph>、または、既定値です。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>Overrides of <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /&gt;</ph> might be appropriate if your <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph><ph id="ph3"> / </ph><ph id="ph4">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</source>
          <target state="translated">上書きが<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /&gt;</ph>適切な場合がある場合、 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> <ph id="ph3"> / </ph> <ph id="ph4">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph>実装が意図的に最適化されたまたは部分的な更新プログラムをサポートする、まだたいより直接的スタイルに変更を適用します。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>(The partial updates would be an attempt to avoid multiple incremental calls to <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on any child elements).</source>
          <target state="translated">(部分的な更新を増分複数の呼び出しを回避しようとなる<ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph>すべての子要素に)。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Provides data about the event.</source>
          <target state="translated">イベントに関するデータを提供します。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated">未処理の <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的は、類似した<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">ここでは、照合イベントは、ルーティングされたイベントです。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">サブクラス<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
          <target state="translated">イベントの引数を受け取り、処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Provides data about the event.</source>
          <target state="translated">イベントに関するデータを提供します。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Invoked whenever the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的は、類似した<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: インスタンス ハンドラーではなく、クラス ハンドラーを持つ派生クラスから一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">ここでは、照合イベントは、ルーティングされたイベントです。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On のメソッドの実装パターンではルーティング イベントの異なるルーティング イベントを子要素、必ずしも要素であるハンドラーを呼び出す (ほとんどの場合にイベントを再生成する必要がありますいないを再試行してください) で発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">サブクラス<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>経路イベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すにこともできます。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</source>
          <target state="translated">イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The old parent element.</source>
          <target state="translated">前の親要素。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> to indicate that the element did not have a visual parent previously.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> は要素に前のビジュアル親が存在しないことを示します。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Invoked when the parent of this element in the visual tree is changed.</source>
          <target state="translated">ビジュアル ツリー内のこの要素の親が変更されたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</source>
          <target state="translated">ビジュアル ツリーは、コレクションなどに視覚的にレンダリングされない要素を省略しているので、論理ツリーから異なる可能性がありますし、そのテーマとスタイルの合成に基づいていくつかの要素を展開します。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>WPF のツリー<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> as appropriate.</source>
          <target state="translated">この仮想メソッドの既定の実装は、新しい親のクエリを実行し、さまざまな初期化イベントを発生させますの初期化状態に関する内部フラグを設定、<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>をクリックします。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Finally, it calls the successive base implementations as declared by <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>, which in turn calls its base in <ph id="ph2">&lt;see cref="T:System.Windows.Media.Visual" /&gt;</ph>.</source>
          <target state="translated">宣言されている一連の基本実装を呼び出して、最後に、 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>、さらにその基本呼び出す<ph id="ph2">&lt;see cref="T:System.Windows.Media.Visual" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</source>
          <target state="translated">常にこの動作を保持する基本実装を呼び出す、それ以外の場合別の要素の子として宣言されている場合は、この要素の要素ツリーの動作が期待どおりに。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>A few existing <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> classes override this method, for example: <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>.</source>
          <target state="translated">既存のいくつか<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>クラスなど、このメソッドをオーバーライドします。 <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The most common scenario is to enforce that the new parent must be a particular type.</source>
          <target state="translated">最も一般的なシナリオは、新しい親は、特定の型である必要がありますを強制します。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This might involve throwing an exception if the new parent failed some manner of type test.</source>
          <target state="translated">これには、新しい親には、いくつかの種類のテストの方法が失敗した場合、例外がスローが含まれます。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</source>
          <target state="translated">このシナリオに特化したバージョンは、リスト項目およびメニュー項目をなしません、親の外部 visual でそれらを格納する適切なコレクションを所有しているの実装に存在します。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</source>
          <target state="translated">親の変更は、一時的にその「標準」の親要素に依存しているデザイナーのシナリオがある可能性がありますので、このような場合とは限りません例外を発生させません、注意してください。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This method is also overridden in certain elements that are typically the root element, such as  <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">このメソッドは、通常はルート要素など、特定の要素でオーバーライドも<ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <ph id="ph1">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph>).</source>
          <target state="translated">別のケースのマークアップが明らかなルート要素である要素は、自動生成、コンパイル済みの論理ツリー内の大きいインフラストラクチャ (など<ph id="ph1">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph> implementations deliberately seal the method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>と<ph id="ph2">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph>実装が意図的に、メソッドをシールします。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</source>
          <target state="translated">この要素に、テーマのスタイルのスタイル プロパティが含まれるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</source>
          <target state="translated">この要素がテーマ スタイル プロパティを使用しない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> (スタイルが生成するすべてのプロパティは、ローカルのアプリケーション スタイルに起因するため、テーマ スタイル プロパティは適用されません)。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</source>
          <target state="translated">まずアプリケーション スタイルを適用してから、アプリケーション スタイルで明確に設定されなかったプロパティに対してテーマ スタイルを適用する場合は <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</source>
          <target state="translated">このプロパティの最も一般的な使用法は、テーマとスタイルを提供しているスタイルのセッター内の間接的な使用率です。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph> to <ph id="ph2">`true`</ph> on a control, you will be suppressing the default control template supplied by the theme styles.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph>に<ph id="ph2">`true`</ph>テーマ スタイルによって提供される既定のコントロール テンプレートをコントロールに抑制されます。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>That control template typically includes the content presenter and other composited elements that provide basic <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> functionality and visualization for the control.</source>
          <target state="translated">そのコントロール テンプレートには通常コンテンツ発表者と基本を提供するその他の合成要素が含まれています<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>機能およびコントロールのビジュアル化。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</source>
          <target state="translated">を、既定のテーマ スタイルと同じ機能をサポートするために続行するには、制御する場合は、同じ構造をレプリケートするコントロール テンプレートを使用して別のスタイルを指定してください。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>For more information, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](~/docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
          <target state="translated">詳しくは、「<bpt id="p1">[</bpt>コントロールの作成の概要<ept id="p1">](~/docs/framework/wpf/controls/control-authoring-overview.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Gets the logical parent  element of this element.</source>
          <target state="translated">この要素の論理上の親要素を取得します。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>This element's logical parent.</source>
          <target state="translated">この要素の論理上の親。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> may be <ph id="ph2">`null`</ph> in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> あります<ph id="ph2">`null`</ph>要素がインスタンス化されましたが、最終的に、ページ レベルのルート要素、または、アプリケーション オブジェクトに接続するすべての論理ツリーにアタッチされていない場合。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</source>
          <target state="translated">要素の論理上の親が、アプリケーションの機能に応じて変わることが可能性のある、このプロパティの値を維持するその変更は反映されないことに注意してください。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>You typically should get the value immediately before you need it.</source>
          <target state="translated">通常必要があります値を取得する必要がある直前です。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>See <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept> for more information about logical tree  traversal, and the scenarios where using  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> as a technique of parent element discovery is appropriate.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>の詳細については、論理ツリーの移動、およびシナリオを使用して、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph>検出は、適切な親要素の手法として。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</source>
          <target state="translated">プロパティのエンジンは可能性があると再計算要素のすべてのプロパティ値が親を再指定、いくつかのプロパティは、論理ツリーを使用して値を継承するため。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> that applies for bindings can also change when elements are reparented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>にバインドできますも変更を適用します。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</source>
          <target state="translated">要素の親の変更は通常によってのみ行われますコレクションの操作、dedicated を使用して追加または削除メソッド、または、要素のコンテンツのプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The most typical scenario for using the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> property is to obtain a reference and then get various <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> property values from the parent.</source>
          <target state="translated">使用するための最も一般的なシナリオ、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph>プロパティ、参照を取得し、さまざまな<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>親からのプロパティ値。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>For templates, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> of the template eventually will be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">テンプレートの場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph>テンプレートの最終的になります<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>To get past this point and extend into the logical tree where the template is actually applied, use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>.</source>
          <target state="translated">この時点以降をテンプレートが実際に適用されている論理ツリーに拡張を使用して<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</source>
          <target state="translated">このプロパティに論理ツリーの親と異なる場合のビジュアル ツリーの親が報告されていないことに注意してください。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</source>
          <target state="translated">ビジュアル ツリーの親では、通常重要アプリケーションの一般的なケースではないが、visual 特定レベルの場合に必要な親要素があります。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</source>
          <target state="translated">次の例では、要素の親をチェックし、親からのプロパティ値を使用すると一致する子要素のプロパティを設定するコードを示します。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>In this case these are properties that affect the rendering size.</source>
          <target state="translated">ここでは、これらは、表示サイズに影響するプロパティです。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>The child element reporting the change.</source>
          <target state="translated">変更を報告している子要素。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>Supports incremental layout implementations in specialized subclasses of <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> の特殊なサブクラスでインクリメンタル レイアウトの実装をサポートします。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /&gt;</ph> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</source>
          <target state="translated">レイアウト中に親のメジャーまたは整列パスに影響を与えるものとしてメタデータ内でマークされているプロパティを子要素が無効にすると、<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /&gt;</ph> が呼び出されます。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>If this element has a child element on which some property was invalidated and the property was marked as <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> in property metadata during registration, this method is invoked.</source>
          <target state="translated">この要素の子要素をいくつかのプロパティは無効化およびプロパティがあるとマークされた場合<ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph>でプロパティのメタデータの登録中に、このメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</source>
          <target state="translated">メソッドの呼び出しでは、この要素は、レイアウトの部分 (増分) の更新をサポートしている場合は、特定の子要素を再測定する必要があります、親要素に通知します。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> does not support incremental layout, and in the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class this method has no default implementation.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>増分のレイアウトをサポートしていませんし、、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>クラスのこのメソッドは既定の実装を持ちません。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</source>
          <target state="translated">既定のレイアウト システムの動作を変更することが必要なために、ここでこのメソッドをオーバーライドする必要があるシナリオは一般的ではありません。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</source>
          <target state="translated">クラスが、WPF フレームワーク レベルのレイアウト システムよりも大幅に制限は、使用可能な子要素の型の制限を持っているかどうかには、実装のシナリオ例があります。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</source>
          <target state="translated">これらのカスタム要素の性質上、プロパティが変更された可能性があります意図的を延期する一部のカスタム レイアウトの動作を実装する場合。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</source>
          <target state="translated">たとえば、特定の種類別のレイアウト パスになる通常の変更のメジャー/配置メソッドのオーバーライドを描画パスを子要素を最適化しようとするを遅らせることができます。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The direction for which a prospective focus change should be determined.</source>
          <target state="translated">予想されるフォーカスの変更を決定する方向。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</source>
          <target state="translated">この要素を基準に、指定したフォーカスの移動方向で次にフォーカスを受け取る要素を特定します。ただし、実際のフォーカスの移動は行われません。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The next element that focus would move to if focus were actually traversed.</source>
          <target state="translated">フォーカスが実際にスキャンされた場合にフォーカスの移動先となる、次の要素。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>May return <ph id="ph1">&lt;see langword="null" /&gt;</ph> if focus cannot be moved relative to this element for the provided direction.</source>
          <target state="translated">この要素を基準に、指定した方向へフォーカスを移動できない場合は、<ph id="ph1">&lt;see langword="null" /&gt;</ph> が返されます。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> is the related method that actually does move focus.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> 実際には、フォーカスを移動するが関連する方法です。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The following example implements a handler that handles several possible button inputs, each button representing a possible <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>.</source>
          <target state="translated">次の例をいくつかのボタンの入力を表すことがある各ボタンを処理するハンドラーを実装する<ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The handler tracks the element with current keyboard focus, and calls <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.PredictFocus%2A&gt;</ph> on that element, and specifies the appropriate <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> as initialization for the <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> type parameter provided.</source>
          <target state="translated">ハンドラーは、現在のキーボード フォーカス、および呼び出しを持つ要素が追跡<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.PredictFocus%2A&gt;</ph>、その要素にし、適切なを指定します<ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>の初期化の構文として、<ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph>指定されたパラメーターを入力します。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>Instead of moving to that element as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</source>
          <target state="translated">その要素に移動する代わりに<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph>タスクは実行の場合は、ハンドラーが視覚エフェクトの目的で予測されたフォーカス コピー先の物理サイズを変更します。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>Specified one of the following directions in the <ph id="ph1">&lt;see cref="T:System.Windows.Input.TraversalRequest" /&gt;</ph>: <ph id="ph2">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Next" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" /&gt;</ph>, <ph id="ph4">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.First" /&gt;</ph>, <ph id="ph5">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TraversalRequest" /&gt;</ph> に、<ph id="ph2">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Next" /&gt;</ph>、<ph id="ph3">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" /&gt;</ph>、<ph id="ph4">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.First" /&gt;</ph>、<ph id="ph5">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /&gt;</ph> のいずれかの方向が指定されました。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>These directions are not legal for <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /&gt;</ph> (but they are legal for <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph>).</source>
          <target state="translated">これらの方向は、<ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /&gt;</ph> に対しては有効ではありません (<ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph> に対しては有効です)。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Name to use for the specified name-object mapping.</source>
          <target state="translated">指定した名前オブジェクトの割り当てに使用する名前。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Object for the mapping.</source>
          <target state="translated">割り当て対象のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Provides an accessor that simplifies access to the <ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> registration method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> の登録メソッドへのアクセスを簡略化するアクセサーを提供します。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>This method is a convenience method for calling <ph id="ph1">&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、便利なメソッドを呼び出す<ph id="ph1">&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>The implementation will check successive parent elements until it finds the applicable <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> implementation, which is found by finding an element that implements <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">実装は、該当するが見つかるまで、連続する親要素は確認<ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph>実装を実装する要素の検索で見つかった<ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>For more information about namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">名前スコープの詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> is necessary in order to correctly hook up animation storyboards for applications when created in code.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph>が正しくコードで作成されたときに、アプリケーションのアニメーションのストーリー ボードをフックするために必要です。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>This is because one of the key storyboard properties, <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph>, uses a run-time name lookup instead of being able to take a reference to a target element.</source>
          <target state="translated">これは、プロパティ、キーのいずれかのストーリー ボード作成ため<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph>、ターゲット要素への参照を実行することではなく実行時の名前検索を使用します。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>This is true even if that element is accessible by reference from the code.</source>
          <target state="translated">これは、その要素が、コードから参照渡しでアクセス可能な場合でも当てはまります。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>For more information on why you need to register names for storyboard targets, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">ストーリー ボードのターゲットの名前を登録する必要がある理由の詳細については、次を参照してください。<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The element to remove.</source>
          <target state="translated">削除する要素。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>Removes the provided object from this element's logical tree.</source>
          <target state="translated">指定されたオブジェクトをこの要素の論理ツリーから削除します。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> updates the affected logical tree parent pointers to keep in sync with this deletion.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> は、この削除との同期を維持するために、影響を受ける論理ツリー親ポインターを更新します。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>Use this method for the implementation of collections on objects that represent logical children of an element.</source>
          <target state="translated">要素の論理子を表すオブジェクトのコレクションの実装には、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>This might be done in property getters or setters, class handlers of <ph id="ph1">`Changed`</ph> events, constructors, or within the collection types themselves.</source>
          <target state="translated">これは、プロパティの getter または setter、クラスのハンドラーで行うことがあります<ph id="ph1">`Changed`</ph>イベント、コンス トラクター、またはコレクション内でそれ自体の種類します。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</source>
          <target state="translated">指定された基本コントロール クラスのコンテンツ モデルに適切なものがない限りは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>Consider subclassing at the level of <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>.</source>
          <target state="translated">レベルのサブクラス化を検討してください<ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>、および<ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>These classes provide a content model with particular enforcement of logical children through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">これらのクラスを介して専用の論理子の特定の強制使用したモデルのコンテンツを提供する<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>、その他の機能では通常望ましくのサポートに加えて、<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>テンプレートを介してスタイルなどのコントロールです。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The following example implements a <ph id="ph1">`Child`</ph> property on a custom <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that does its own visual layer implementation.</source>
          <target state="translated">次の例では、実装、<ph id="ph1">`Child`</ph>カスタム プロパティ<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>独自 visual レイヤーの実装を行うことです。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</source>
          <target state="translated">プロパティの set アクセス操作子では、古い値がクラスに固有のビジュアル コレクションと同様に、論理ツリーから削除されている値が変更された場合ように設計されています。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</source>
          <target state="translated">値がキャッシュされ、標準的な WPF フレームワーク レベル論理ツリーとカスタム ビジュアルのコレクションの両方に、新しい値を追加し、します。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /&gt;</ph> is called on this element.</source>
          <target state="translated">この要素で <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /&gt;</ph> が呼び出されると発生します。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>This event indicates to a parent <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> (or derived class) that the element that raises the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event should be made visible within the scrollable region.</source>
          <target state="translated">このイベントは、親を示します<ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>(またはその派生クラス) を要素を発生させる、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>イベント表示できるようにする、スクロール可能な地域内です。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> will then mark the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event as handled, by using class handling of the event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>によりマークし、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>イベントをイベントのクラス処理を使用して、処理します。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>In general <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph>.</source>
          <target state="translated">一般に<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph>データ マークしないでまたはいずれかではスクロール可能な領域を制御するすべてのクラスによって処理されるイベント インスタンス ハンドラーと呼ばれる要素の目的の目標を妨害するそう<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Bubbling</source>
          <target state="translated">バブル</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Gets or sets the locally-defined resource dictionary.</source>
          <target state="translated">ローカルで定義されたリソース ディクショナリを取得または設定します。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The current locally-defined dictionary of resources, where each resource can be accessed by key.</source>
          <target state="translated">ローカルで定義された現在のリソース ディクショナリ。各リソースにはキーでアクセスできます。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Resource dictionaries that can be defined completely or partially in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> are typically created as a property element, and are typically on the root element for any individual page or for the application.</source>
          <target state="translated">完全または部分的に定義できるリソース ディクショナリ<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>は、通常、プロパティ要素として作成し、個々 のページまたはアプリケーションのルート要素には、通常します。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</source>
          <target state="translated">このレベルでリソース ディクショナリを配置すると、ページ内の個々 の子要素 (または任意のページでは、アプリケーションの場合に、) を検索しやすきます。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</source>
          <target state="translated">ほとんどのアプリケーション シナリオでは、ことをお勧めスタイルが、リソース ディクショナリ内のオブジェクト要素として定義されているスタイル リソース全体を自己完結型できるように、外部リソースとして定義するか (このアプローチは、分担デザイナーと開発者の責任を編集することが必要な物理ファイルを分離することにより、役立ちます)。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Note that this property returns only the resource dictionary declared directly within that element.</source>
          <target state="translated">このプロパティをリソース ディクショナリだけがその要素内で直接宣言を返すことに注意してください。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</source>
          <target state="translated">これは、実際のリソース ルックアップ プロセスの子要素がアクセスできる場所の検索方向を再帰的に、各親要素で定義されているリソースとは異なるです。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Resources can also be referenced by code from within the collection, but be aware that resources created in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> will definitely not be accessible until after <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> is raised by the element that declares the dictionary.</source>
          <target state="translated">リソースは、コレクション内からコードで参照することもできますでリソースが作成されたことに注意してください<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>確実アクセスできなくなりますまで後<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>ディクショナリを宣言する要素で発生します。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>In fact, resources are parsed asynchronously and not even the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event is an assurance that you can reference a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> defined resource.</source>
          <target state="translated">実際には、リソースが解析されるに非同期的におよび not であっても、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>イベントが参照できるように保証、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>リソースを定義します。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>For this reason you should generally only access <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> defined resources as part of run-time code, or through other <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> techniques such as styles or resource extension references for attribute values.</source>
          <target state="translated">このため、通常のみにアクセスする<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>またはその他の実行時のコードの一部としてリソースを定義<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>スタイルや属性の値をリソース拡張機能の参照などの手法です。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>When you access resources through code, it is essentially equivalent to a  reference made from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">コードによって、リソースにアクセスするときに基本的と等価であるから行われます。 参照に<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The underlying <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> supports the methods required to add, remove or query resources from within the collection by using code.</source>
          <target state="translated">基になる<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>追加、削除、またはコードを使用してから、コレクション内のリソースを照会するために必要なメソッドをサポートします。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph>プロパティは、要素を新規または別のリソースのコレクションを完全に置き換えるのシナリオをサポートする設定<ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Notice that the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax shown does not include an element for the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">注意して、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>に示す構文の要素を含まない、<ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</source>
          <target state="translated">これは、暗黙の型のコレクション構文の例コレクションの要素を表すタグを省略できます。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The elements that are added as items to the collection are specified instead.</source>
          <target state="translated">代わりに、コレクションに項目として追加される要素を指定します。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>For more information about implicit collections and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
          <target state="translated">暗黙の型のコレクションの詳細については、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>を参照してください<bpt id="p1">[</bpt>XAML 構文の詳細<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>One case where a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">1 つのケースで、<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>要素がマージされたディクショナリを導入する場合ではありません通常その子要素として明示的に指定がまだ<ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>For details, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>リソース ディクショナリのトピックとマージ<ept id="p1">](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source><bpt id="p1">*</bpt>oneOrMoreResourceElements<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreResourceElements<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>One or more object elements, each of which defines a resource.</source>
          <target state="translated">1 つまたは複数のオブジェクト要素定義されているリソース。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Each resource property element within each <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> must have a unique value for the <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](~/docs/framework/xaml-services/x-key-directive.md)</ept>, which serves as the unique key when values are retrieved from the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">各リソースのプロパティ要素内で各<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>に一意の値を持つ必要があります、 <bpt id="p1">[</bpt>X:key ディレクティブ<ept id="p1">](~/docs/framework/xaml-services/x-key-directive.md)</ept>、値がから取得されたときに、一意のキーとして機能する、<ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Attaches a binding to this element for the specified dependency property.</source>
          <target state="translated">指定した依存関係プロパティのためのバインディングをこの要素に添付します。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>Identifies the destination property where the binding should be established.</source>
          <target state="translated">バインディングを確立する必要がある対象のプロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>The source property name or the path to the property used for the binding.</source>
          <target state="translated">ソース プロパティ名、またはバインドに使用されているプロパティへのパス。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</source>
          <target state="translated">指定したソース プロパティ名をデータ ソースへのパスの修飾として使用して、この要素にバインディングを添付します。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>Records the conditions of the binding.</source>
          <target state="translated">バインドの条件を記録します。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">この戻り値は、エラーをチェックするために役立ちます。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>This method is a convenience method for calling <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>, which passes the current instance as the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>, and creates a new <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> based on the provided <ph id="ph4">`path`</ph> parameter.</source>
          <target state="translated">このメソッドは、便利なメソッドを呼び出す<ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>、として現在のインスタンスを渡しますが、 <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>、新たに作成および<ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph>に基づいて、指定した<ph id="ph4">`path`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>This signature is more convenient if you are establishing a simple default binding.</source>
          <target state="translated">この署名は、単純な既定のバインディングを確立する場合に便利です。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>If you need to specify any binding properties to non-default conditions, or want to use a <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>,you should use the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;</ph> signature.</source>
          <target state="translated">既定以外の条件へのバインディング プロパティを指定するか、使用する必要がある場合、<ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>、使用する必要があります、<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;</ph>署名します。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>The following example sets a binding using a specific path.</source>
          <target state="translated">次の例では、特定のパスを使用してバインドを設定します。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Identifies the property where the binding should be established.</source>
          <target state="translated">バインドを確立する必要があるプロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Represents the specifics of the data binding.</source>
          <target state="translated">データ バインディングの詳細を表します。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Attaches a binding to this element, based on the provided binding object.</source>
          <target state="translated">指定したバインディング オブジェクトに基づいて、この要素にバインドをアタッチします。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Records the conditions of the binding.</source>
          <target state="translated">バインドの条件を記録します。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">この戻り値は、エラーをチェックするために役立ちます。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>This method is a convenience method for calling <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>, which passes the current instance as the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">このメソッドは、便利なメソッドを呼び出す<ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>、現在のインスタンスに渡されます<ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>The element that specifies a flow direction.</source>
          <target state="translated">フロー方向を指定する要素。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>A value of the enumeration, specifying the direction.</source>
          <target state="translated">方向を指定する列挙値。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>Sets the value of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> attached property for the provided element.</source>
          <target state="translated">指定された要素の <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> 添付プロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>This method supports attached property syntax for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property, therefore allowing child elements of a provided <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">このメソッドは、の添付プロパティの構文をサポートしている、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>プロパティ、したがって、指定された要素を子に許可<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>を親要素内での配置のフローの方向を指定します。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>To set the value on the current <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, use the direct <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> accessor <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
          <target state="translated">現在の値を設定する<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>、ダイレクトを使用して<ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>アクセサー<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The property to which the resource is bound.</source>
          <target state="translated">リソースのバインド先のプロパティ。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The name of the resource.</source>
          <target state="translated">リソースの名前。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</source>
          <target state="translated">指定した名前のリソースを検索し、指定したプロパティにそのリソースへのリソース参照を設定します。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>A resource reference is similar to the use of a <bpt id="p1">[</bpt>DynamicResource Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept> in markup.</source>
          <target state="translated">リソースの参照の使用に似ていますが、 <bpt id="p1">[</bpt>DynamicResource マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept>マークアップでします。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</source>
          <target state="translated">リソース参照では、実行時の遅延単位で指定したプロパティの値を提供する内部式を作成します。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</source>
          <target state="translated">式は、現在の要素が親を再指定する場合や、リソース ディクショナリが内部のイベントによって変更された値が示すされるたびに再評価されます (親の変更は、ディクショナリの検索パスを変更は)。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeResources">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> property.</source>
          <target state="translated">シリアル化プロセスが、<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeResources">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> プロパティ値をシリアル化する必要がある場合は <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ShouldSerializeResources">
          <source>This will return <ph id="ph1">`true`</ph> as long as there is at least one keyed resource in the local <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph>.</source>
          <target state="translated">これは、戻り値は<ph id="ph1">`true`</ph>、ローカルの少なくとも 1 つのキーを持つリソースがある限り、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeStyle">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> property.</source>
          <target state="translated">シリアル化プロセスが、<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeStyle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> プロパティ値をシリアル化する必要がある場合は <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ShouldSerializeStyle">
          <source>This will return <ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> is locally set.</source>
          <target state="translated">返されます<ph id="ph1">`true`</ph>場合、<ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>ローカルに設定します。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeTriggers">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> property.</source>
          <target state="translated">シリアル化プロセスが、<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeTriggers">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> プロパティ値をシリアル化する必要がある場合は <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ShouldSerializeTriggers">
          <source>This method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> property is locally set.</source>
          <target state="translated">このメソッドが戻る<ph id="ph1">`true`</ph>場合、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph>プロパティがローカルに設定します。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Occurs when either the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> or the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> properties change value on this element.</source>
          <target state="translated">この要素の <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> プロパティまたは <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> プロパティの値が変更されると発生します。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでします。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>The layout system reads properties within the <ph id="ph1">&lt;xref:System.Windows.SizeChangedEventArgs&gt;</ph> argument class of this event, to  determine whether the reported size changes should be considered significant.</source>
          <target state="translated">レイアウト システム内のプロパティを読み取り、<ph id="ph1">&lt;xref:System.Windows.SizeChangedEventArgs&gt;</ph>報告されるサイズの変更を重要な考慮するかどうかを決定する、このイベントの引数のクラスです。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</source>
          <target state="translated">これにより、レイアウト システムや、コントロールに固有のレイアウトの実装を強制的に新旧の高さまたは幅の値の視覚的にこうしたわずかな違いのためのレイアウト変更を回避します。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</source>
          <target state="translated">こうしたわずかな違いは、浮動小数点データ型の丸め処理を行うか、同じ結果の計算があります。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.SourceUpdated">
          <source>Occurs when the source value changes for any existing property binding on this element.</source>
          <target state="translated">この要素の既存のプロパティ バインディングのソース値が変更されると発生します。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SourceUpdated">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.SourceUpdated&gt;</ph> event that is raised by any <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> associated with this element.</source>
          <target state="translated">このイベントのエイリアスを作成する、<ph id="ph1">&lt;xref:System.Windows.Data.Binding.SourceUpdated&gt;</ph>いずれかが発生するイベントを<ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>この要素に関連付けられています。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SourceUpdated">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Style">
          <source>Gets or sets the style used by this element when it is rendered.</source>
          <target state="translated">この要素が使用するスタイルを、表示されるときに取得または設定します。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The applied, nondefault style for the element, if present.</source>
          <target state="translated">要素に適用される既定以外のスタイル (存在する場合)。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">それ以外の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The default for a default-constructed <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">既定で構築された <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> の既定値は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</source>
          <target state="translated">コントロールの現在のスタイルは多くの場合、コントロール テーマから既定のスタイルによって提供されるまたはスタイルから通常によって適用されるその種類のコントロールにページまたはアプリケーション レベル (暗黙的なスタイル) のリソース。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</source>
          <target state="translated">このプロパティは既定の設定したり返したり (テーマ) のスタイルが、暗黙的なスタイルまたは明示的なスタイル要素で動作しているのか、返します。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</source>
          <target state="translated">暗黙的または明示的なスタイルの場合、スタイルをリソースとして指定またはローカルに定義されているかどうかは関係ありません。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Setting the styles has some restrictions.</source>
          <target state="translated">スタイルの設定の制限があります。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>You can reset the entire <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property to a new <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> at any time, which will force a layout recomposition.</source>
          <target state="translated">全体をリセットする<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>プロパティを新しい<ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>、いつでもレイアウト再構成を強制します。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>However, as soon as that style is placed in use by a loaded element, the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> should be considered sealed.</source>
          <target state="translated">ただし、そのスタイルが使用中で読み込まれた要素で配置されるとすぐとして、<ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph>と見なすべきシールします。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph>) causes an exception to be thrown.</source>
          <target state="translated">使用するスタイルの個々 のプロパティを変更しようとしています (などのコレクション内のすべて<ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph>) 例外がスローされます。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</source>
          <target state="translated">マークアップで定義されているスタイルは、(リソース) のリソース ディクショナリから読み込まれるか (インライン スタイル) に含まれているページが読み込まれるとすぐに使用すると見なされます。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> is a dependency property with special precedence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 特殊な優先順位を持つ依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The locally set style generally operates at the highest precedence in the property system.</source>
          <target state="translated">ローカルに設定スタイルが通常プロパティ システムに最高の優先順位で動作します。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>プロパティ システムは、そのタイプが指定されたローカルまたはアプリケーションのリソースで暗黙的なスタイルのチェックの読み込み中にこの時点では、null がします。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property value.</source>
          <target state="translated">スタイルは、この手順の後にも null し、動作するスタイル プレゼンテーションのため、通常に由来 (テーマ) の既定のスタイルもに既定のスタイルが返されない場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>プロパティの値。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>See <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept> or <bpt id="p2">[</bpt>Styling and Templating<ept id="p2">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>依存関係プロパティの値の優先順位<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>または<bpt id="p2">[</bpt>スタイルとテンプレート<ept id="p2">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>One of the following: , or .</source>
          <target state="translated">次のいずれかの: または。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The key that identifies the style being requested.</source>
          <target state="translated">要求されているスタイルを識別するキー。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The key refers to an existing resource in a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">このキーは既存のリソースを<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Property element syntax is technically possible, but not recommended for most style scenarios.</source>
          <target state="translated">プロパティ要素構文は技術的に可能であれば、ほとんどのシナリオでスタイルをお勧めしません。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>インライン スタイルとテンプレート<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>A binding reference using  or <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> is also possible, but uncommon.</source>
          <target state="translated">バインドの参照を使用して、または<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>も可能ですが、一般的ではないです。</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The following example defines a style in a resource dictionary.</source>
          <target state="translated">次の例では、リソース ディクショナリにスタイルを定義します。</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.StyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>The name of the requested ambient property.</source>
          <target state="translated">要求されたアンビエント プロパティの名前。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>For a description of this member, see the <ph id="ph1">&lt;see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /&gt;</ph> method.</source>
          <target state="translated">このメンバーの説明については、<ph id="ph1">&lt;see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /&gt;</ph> メソッドのトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="propertyName" /&gt;</ph> is available; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="propertyName" /&gt;</ph> を使用できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Gets or sets an arbitrary object value that can be used to store custom information about this element.</source>
          <target state="translated">この要素に関するユーザー定義情報の格納に使用できる任意のオブジェクト値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>The intended value.</source>
          <target state="translated">任意の値。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>This property has no default value.</source>
          <target state="translated">このプロパティには既定値はありません。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</source>
          <target state="translated">このプロパティは、その他の Microsoft のプログラミング モデルで、アプリケーションまたは Windows フォームの Visual Basic などのタグのプロパティに似ています。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> is intended to provide a pre-existing property location where you can store some basic custom information about any <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> without requiring you to subclass an element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> いずれかに関する基本的なカスタム情報を格納する既存プロパティ場所を指定するためのものでは<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>しなくてをサブクラス化要素です。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Because this property takes an object, you need to use the property element usage in order to set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</source>
          <target state="translated">プロパティ要素の使用を設定するために使用する必要があるため、このプロパティは、オブジェクトを受け取り、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph>文字列などの組み込みの既知の型コンバーターを使用したオブジェクト以外に XAML のプロパティです。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Objects used in this manner are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</source>
          <target state="translated">この方法で使用されるオブジェクトは通常されませんが、標準の WPF 名前空間内で短くてしたがって可能性がありますを外部の名前空間の名前空間のマッピングの XAML 要素として導入するためにします。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>For details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept> and <bpt id="p2">[</bpt>XAML and Custom Classes for WPF<ept id="p2">](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept>.</source>
          <target state="translated">詳細については、「 <bpt id="p1">[</bpt>XAML 名前空間と WPF XAML のマッピングの Namespace<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>と<bpt id="p2">[</bpt>XAML と WPF のカスタム クラス<ept id="p2">](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.TagProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Tag" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Tag" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>Occurs when the target value changes for any property binding on this element.</source>
          <target state="translated">この要素のプロパティ バインディングのターゲット値が変更されると発生します。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.TargetUpdated&gt;</ph> event that is raised by any <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> associated with this element.</source>
          <target state="translated">このイベントのエイリアスを作成する、<ph id="ph1">&lt;xref:System.Windows.Data.Binding.TargetUpdated&gt;</ph>いずれかが発生するイベントを<ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>この要素に関連付けられています。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</source>
          <target state="translated">通常つまり、対象のバインディングは双方向のバインドおよびバインドされた依存関係プロパティが確認された、以前プロパティの値が現在の検証またはプロパティまたはデータ ソースをサポートするキャッシュのスキームに従った有効なです。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>Use the event data of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TargetUpdated&gt;</ph> event to determine the specific property that is reporting the target value update.</source>
          <target state="translated">イベント データを使用して、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TargetUpdated&gt;</ph>ターゲット値の更新を報告している特定のプロパティを決定するイベントです。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Gets a reference to the template parent of this element.</source>
          <target state="translated">この要素の親テンプレートへの参照を取得します。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>This property is not relevant if the element was not created through a template.</source>
          <target state="translated">このプロパティは、要素がテンプレートによって作成されていない場合は無効です。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>The element whose <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkTemplate" /&gt;</ph><ph id="ph2">&lt;see cref="P:System.Windows.FrameworkTemplate.VisualTree" /&gt;</ph> caused this element to be created.</source>
          <target state="translated">要素が<ph id="ph1">&lt;see cref="T:System.Windows.FrameworkTemplate" /&gt;</ph><ph id="ph2">&lt;see cref="P:System.Windows.FrameworkTemplate.VisualTree" /&gt;</ph>を作成するには、この要素を発生します。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>This value is frequently <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この値は、頻繁に<ph id="ph1">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> is frequently <ph id="ph2">`null`</ph> for objects that are created in your application markup or code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> 多くの場合は、<ph id="ph2">`null`</ph>アプリケーション マークアップやコード内に作成されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>This is because you create those objects directly, not via a template.</source>
          <target state="translated">これは、テンプレートではなく、それらのオブジェクトを直接作成するためです。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</source>
          <target state="translated">オブジェクト参照を取得するかの一般的な名前参照で、ルートから論理ツリーをウォークすることによって、テンプレートから付属していません。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Cases where <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> might not be <ph id="ph2">`null`</ph> include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <ph id="ph3">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>, or working with enumerators, which might return elements that came from templates.</source>
          <target state="translated">あるケース<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>できない可能性があります<ph id="ph2">`null`</ph>visual を使用してツリーをウォーク特定低水準入力イベントのイベント処理のヒット テストなどの操作を含める<ph id="ph3">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>、または列挙子を使用する場合があります戻り値のテンプレートから得られた要素。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Another case is if you specifically call <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt;</ph> against an existing <ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph> and are work with the returned object.</source>
          <target state="translated">別の場合は、明示的に呼び出すかどうか<ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt;</ph>既存に対して<ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph>され、返されたオブジェクトを操作します。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Templates are actually shared objects, where the contents of the template are created only once.</source>
          <target state="translated">テンプレートは、実際には共有オブジェクト、テンプレートの内容が 1 回だけ作成される場所です。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</source>
          <target state="translated">そのため、テンプレートから得られた要素へのオブジェクト参照を取得する場合があります、見かけ上の論理ツリーは、ページのルートには到達できません。</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>In order to connect such a template reference to the page's logical tree, you should get the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> value and continue to navigate that element tree as desired.</source>
          <target state="translated">このようなテンプレートへの参照をページの論理ツリーを接続するために取得する必要があります、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>値し、必要に応じて、その要素ツリーのナビゲーションを続行します。</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Gets or sets the tool-tip object that is displayed for this element in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> でこの要素に対して表示されるツールヒント オブジェクトを取得または設定します。</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>The tooltip object.</source>
          <target state="translated">ツールヒント オブジェクト。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>If the value of this property is of type <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>, then that value is the tool-tip that will be used in the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">このプロパティの値が型の場合<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>、その値は、ツール ヒントで使用される、<ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>If the value is of any other type, then that value will be used as the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> for a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> provided (constructed) by the system.</source>
          <target state="translated">値は、他の任意の型のかどうかは、その値として使用されます、<bpt id="p1">*</bpt>コンテンツ<ept id="p1">*</ept>の<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>提供システムによって (作成) します。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTipService&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTipService&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>The service class provides attached properties that can be used to further customize a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>.</source>
          <target state="translated">サービス クラスはさらにカスタマイズするために使用する添付プロパティを提供する<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source><bpt id="p1">*</bpt>toolTipContent<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>toolTipContent<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>A string that becomes the display text for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>.</source>
          <target state="translated">文字列の表示テキストになる、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Some object, provided in object element form, that should be used as the content for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> .</source>
          <target state="translated">コンテンツとして使用されるオブジェクト要素の形式で提供される一部のオブジェクト、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Typically this would be a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or some other element that creates layout compositing for the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>, eventually containing text content within the compositing.</source>
          <target state="translated">通常、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>またはその他の要素のレイアウトの合成を作成する、 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>、最終的に、合成内のテキスト コンテンツを格納します。</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>In this usage, the <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> element is created implicitly from the parsed <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, and the <bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> content is set as its <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">この使用率、<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>要素が作成、解析されたから暗黙的に<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、および<bpt id="p1">*</bpt>方法<ept id="p1">*</ept>としてコンテンツを設定その<ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`ToolTip`</ph> .../&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`ToolTip`</ph> .../&gt;</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> in code and then sets the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> property on a <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.StatusBar&gt;</ph> control.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>コードとし、セットで、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>プロパティを<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.StatusBar&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Occurs just before any tooltip on the element is closed.</source>
          <target state="translated">要素のツールヒントが閉じる直前に発生します。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Marking the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipClosing&gt;</ph> event as handled does not cancel closing the tooltip.</source>
          <target state="translated">マーク、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipClosing&gt;</ph>イベントを処理が、ツールヒントの終了をキャンセルしていません。</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</source>
          <target state="translated">ツールヒントが表示されたらは、UI でのユーザー操作への応答でのみ行われますツールヒントを終了します。</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>This event cannot be an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">このイベントをすることはできません、<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでします。</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">オーバーライド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph>を派生クラスでは、このイベントに対するクラス処理を実装します。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Occurs when any tooltip on the element is opened.</source>
          <target state="translated">要素のツールヒントが開かれたときに発生します。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>To prevent a tooltip from appearing in the UI, your handler for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> can mark the <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTipEventArgs&gt;</ph> event data handled.</source>
          <target state="translated">ツールヒントが表示されないように、ui で、ハンドラーを<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph>マークを付けることができます、<ph id="ph2">&lt;xref:System.Windows.Controls.ToolTipEventArgs&gt;</ph>イベント データを処理します。</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Otherwise, the tooltip is displayed, using the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> property as the tooltip content.</source>
          <target state="translated">それ以外の場合、ツールヒントが表示されるの値を使用して、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>ツールヒントのコンテンツとプロパティ。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Another possible scenario is that you could write a handler that resets the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> property for the element that is the event source, just before the tooltip is displayed.</source>
          <target state="translated">もう 1 つの可能なシナリオは、の値をリセットするハンドラーを記述することも、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>ツールヒントが表示される直前にイベント ソースである要素のプロパティです。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> will not be raised if the value of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> is <ph id="ph3">`null`</ph> or otherwise unset.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> 発生しません。 場合の値<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>は<ph id="ph3">`null`</ph>それ以外の場合、または設定解除します。</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Do not deliberately set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> to <ph id="ph2">`null`</ph> while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</source>
          <target state="translated">意図的に設定しないでください<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>に<ph id="ph2">`null`</ph>tooltip が開いているか、; これは、ツールヒントを閉じるための効果がありませんを開き、UI に望ましくない visual アーティファクトを作成、代わりにします。</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> event cannot be an <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph>イベントをすることはできません、<ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでします。</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">オーバーライド<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph>を派生クラスでは、このイベントに対するクラス処理を実装します。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ToolTipProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ToolTip" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ToolTip" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Gets the collection of triggers established directly on this element, or in child elements.</source>
          <target state="translated">この要素に直接、または子要素で設定されているトリガーのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>A strongly typed collection of <ph id="ph1">&lt;see cref="T:System.Windows.Trigger" /&gt;</ph> objects.</source>
          <target state="translated">厳密に型指定された <ph id="ph1">&lt;see cref="T:System.Windows.Trigger" /&gt;</ph> オブジェクトのコレクション。</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>This property can only be set in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</source>
          <target state="translated">このプロパティのみ設定できます<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>コレクション オブジェクトにアクセスして、追加などのさまざまなメソッドを使用して、表示、コレクション構文を使用します。</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>The property to access the collection object itself is read-only, the collection itself is read-write.</source>
          <target state="translated">コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込みです。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</source>
          <target state="translated">プロパティは、ルート要素にのみ存在します。検索や他の場所で設定しようとしています。 には、スローされる例外が発生します。</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>This property does not enable you to examine triggers that exist as part of styles in use on this element.</source>
          <target state="translated">このプロパティでは、この要素で使用されているスタイルの一部として存在するトリガーを確認できません。</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>It only reports the collection of triggers that are literally added to the collection, either in markup or code.</source>
          <target state="translated">マークアップまたはコードで、このコレクションに追加されることはトリガーのコレクションを報告するだけです。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</source>
          <target state="translated">要素は、既存の既定では、このような要素を通常必要はありません (テンプレートからのインスタンス)。コントロールの複合スタイルの代わりに確立されるまでに由来するトリガーの一般的なであります。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>In terms of behavior (and trying to establish which effect came from which element's declared <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</source>
          <target state="translated">動作の観点から (のどの要素の宣言元のどちらの効果を確立しようとして<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph>コレクション)、トリガーを起動する条件とトリガーの影響の両方でこの要素がありますまたは論理ツリー内には、その子要素があります。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Note that if you use lifetime events such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</source>
          <target state="translated">などの有効期間イベントを使用する場合は、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>をこのコレクションを取得するには、子要素のトリガーできない可能性がありますまだ完全に読み込まれると、コレクションが実行時に真にするより小さくなります。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Note that the collection of triggers established on an element only supports <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>, not property triggers (<ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph>).</source>
          <target state="translated">要素に設定されているトリガーのコレクションのみをサポートする注<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>、ありませんプロパティ トリガー (<ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property, or indirectly through an implicit style reference.</source>
          <target state="translated">プロパティ トリガーを必要とする場合は、スタイルまたはテンプレート内でこれらを挿入し、し、そのスタイルまたはテンプレートの要素に代入するかする必要があります経由で直接、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>プロパティ、または暗黙的なスタイル参照を通じて間接的にします。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML プロパティ要素の使用</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source><bpt id="p1">*</bpt>oneOrMoreTriggers<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreTriggers<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>One or more defined <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> elements.</source>
          <target state="translated">1 つ以上定義されている<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>要素。</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Each such trigger is expected to contain valid storyboard actions and references.</source>
          <target state="translated">このような個々 のトリガーは、有効なストーリー ボード操作および参照を格納すると想定されます。</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Note that this collection can only be established on the root element of a page.</source>
          <target state="translated">このコレクションは、ページのルート要素でのみ設定できますに注意してください。</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The key identifier of the resource to be found.</source>
          <target state="translated">検索するリソースのキー識別子。</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>Searches for a resource with the specified key, and returns that resource if found.</source>
          <target state="translated">指定されたキーを使用してリソースを検索し、見つかった場合はそのリソースを返します。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The found resource, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no resource with the provided <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is found.</source>
          <target state="translated">見つかったリソース。指定した <ph id="ph2">&lt;paramref name="key" /&gt;</ph> のリソースが見つからない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</source>
          <target state="translated">呼び出し元の要素で、リソースが見つからない場合は、親リソースのツリーが論理ツリーを上方向へ検索ツリーになる同じ方法で検索すると、リソースが要求されたキーによって実行時にします。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The method returns <ph id="ph1">`null`</ph> only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> is called.</source>
          <target state="translated">このメソッドを返します<ph id="ph1">`null`</ph>そのキーのリソースが存在しない任意の場所リソース ツリーで、時に、ツリーの既存の条件ごとの場合にのみを<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</source>
          <target state="translated">通常返されたリソース値に設定しようとしているプロパティの型を戻り値をキャストするとすぐにします。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph>メソッドが指定されたキーを持つリソースが返されない場合、例外をスローする点を除いて、同様の動作がします。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> on itself.</source>
          <target state="translated">次の例は、ここで設定されているクリックされたボタン、背景ブラシ リソース定義が呼び出すことによって取得ボタンとして実装<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph>自体にします。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>This walks the element tree and finds the resource (the resource itself is defined in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and is not shown).</source>
          <target state="translated">これは、要素のツリーされ、リソースを検索 (で、リソースそれ自体が定義されている<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>は表示されません)。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Occurs when the element is removed from within an element tree of loaded elements.</source>
          <target state="translated">読み込まれた要素の要素ツリーから要素が削除されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>スタイルでします。</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> および<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph>両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Therefore <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> cannot be assumed to occur only on navigation away from the page.</source>
          <target state="translated">したがって<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph>そのページから移動したときにのみ発生すると見なされますことはできません。</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Note that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> event is not raised after an application begins shutting down.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph>アプリケーションがシャット ダウンを開始した後、イベントは発生しません。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Application shutdown occurs when the condition defined by the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property occurs.</source>
          <target state="translated">によって、条件が定義されているときに、アプリケーションのシャット ダウンが発生、<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>プロパティが発生します。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>If you place cleanup code within a handler for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> event, such as for a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>, it may not be called as expected.</source>
          <target state="translated">ハンドラー内でクリーンアップ コードを配置する場合、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph>など、イベント、<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>または<ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>に呼び出すことはできません期待どおりにします。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Routed Event Information</source>
          <target state="translated">ルーティングされたイベント情報</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Routing strategy</source>
          <target state="translated">ルーティング方法</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Delegate</source>
          <target state="translated">Delegate</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Unloaded" /&gt;</ph> routed event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Unloaded" /&gt;</ph> ルーティング イベントを識別します。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用して、クラスのハンドラーを追加できます。</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの登録方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.UnregisterName(System.String)">
          <source>Name of the name-object pair to remove from the current scope.</source>
          <target state="translated">現在のスコープから削除する名前とオブジェクトのペアの名前。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.UnregisterName(System.String)">
          <source>Simplifies access to the <ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> de-registration method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> の登録解除メソッドへのアクセスを簡略化します。</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.UnregisterName(System.String)">
          <source>You only need to un-register names if you intend to re-register another element with that same name.</source>
          <target state="translated">だけで済みます名の登録解除に同じ名前の別の要素を再登録する場合。</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.UpdateDefaultStyle">
          <source>Reapplies the default style to the current <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> に既定のスタイルを再度適用します。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</source>
          <target state="translated">レイアウトの間に、この要素のサイズおよび位置にレイアウトの丸めを適用するかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if layout rounding is applied; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">レイアウトの丸めを適用する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> property for an element is <ph id="ph2">`true`</ph>, all non-integral pixel values that are calculated during the <ph id="ph3">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> passes are rounded to whole pixel values.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph>要素のプロパティは<ph id="ph2">`true`</ph>、中に計算されるすべての整数以外のピクセル値、<ph id="ph3">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>パスは全体のピクセル値に丸められます。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>This property is inherited by child elements.</source>
          <target state="translated">このプロパティは、子要素によって継承されます。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>You should set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> to <ph id="ph2">`true`</ph> on the root element.</source>
          <target state="translated">設定する必要があります<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph>に<ph id="ph2">`true`</ph>ルート要素にします。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</source>
          <target state="translated">レイアウト システム子座標を親座標; に追加します。そのため、親座標がピクセルの境界にない場合は、子座標もいないピクセルの境界にします。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>If <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> cannot be set at the root, set <ph id="ph2">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> on the child to obtain the effect that you want.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph>ルートにある設定を設定できません<ph id="ph2">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph>を希望する効果を取得する子にします。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</source>
          <target state="translated">半透明のエッジ デバイス ピクセルの途中で、エッジになった場合に、アンチ エイリアス処理によって生成されるを排除するピクセルの境界にオブジェクトを描画します。</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</source>
          <target state="translated">次の図は、デバイスのピクセルの中央にある単一のピクセル幅の行の出力を示します。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The line on the left does not use layout rounding and is anti-aliased.</source>
          <target state="translated">左側の線はレイアウトの丸めが使用されないため、アンチ エイリアス処理します。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The line on the right uses layout rounding.</source>
          <target state="translated">右側の線は、レイアウトの丸めを使用します。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source><bpt id="p1">![</bpt>Anti&amp;#45;aliased line compared to single pixel line.<ept id="p1">]</ept><bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>Anti-aliased line compared to single pixel line.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>アンチ&amp;#45;エイリアス線が単一のピクセル線と比較します。<ept id="p1">]</ept><bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>単一のピクセル線と比較したアンチ エイリアス線。<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>When you use layout rounding and <ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</source>
          <target state="translated">レイアウトの丸めを使用する場合と<ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph>サイズ変更、レイアウト システムを作成小さな違いサブピクセル レンダリングを避けるために、列または行の計測結果にします。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>For example, if a grid has a total width of 100 with 3 columns each of size <ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</source>
          <target state="translated">たとえば、グリッドがある 3 列のサイズの 100 の合計幅<ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph>、3 つの列を作成する代わりに 33.3 の幅が同じ、レイアウト システムは、幅が 33 と 34 の幅を持つ 2 つの列を作成します。</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</source>
          <target state="translated">.NET 4.6 での変更にはレイアウトの境界線を持つコントロールのクリッピングの発生を削減する丸め処理が行われました。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</source>
          <target state="translated">既定では、この機能は、ターゲット フレームワークが .NET Framework 4.6 以降である場合に有効にします。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: <ph id="ph1">`&lt;runtime&gt;&lt;AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;&lt;/runtime&gt;`</ph> The setting only takes effect when the application is running on the .NET Framework 4.6.</source>
          <target state="translated">App.config ファイルに次の設定を追加することで、新しい動作を以前のバージョンの framework を対象とするアプリケーションで選択できます:<ph id="ph1">`&lt;runtime&gt;&lt;AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;&lt;/runtime&gt;`</ph>設定は、のみ、アプリケーションが .NET Framework 4.6 で実行されているときにします。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The following example demonstrates the effect that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> property has on a single pixel-width line.</source>
          <target state="translated">次の例では、影響を<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph>プロパティは、単一のピクセル幅の行にします。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The line on the left does not use layout rounding and the line on the right uses layout rounding.</source>
          <target state="translated">左側の線がレイアウトの丸めを使用していませんし、右側の線がレイアウトの丸めを使用します。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>If you slowly resize the window, you can see the difference that layout rounding makes.</source>
          <target state="translated">緩やかに変化は、ウィンドウをサイズ変更、レイアウトの丸めによる、違いを確認します。</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</source>
          <target state="translated">この要素が、Panel またはアイテム コントロールのような親要素内に作成されるときに適用される垂直方向の配置特性を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>A vertical alignment setting.</source>
          <target state="translated">垂直方向の配置の設定。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.VerticalAlignment.Stretch" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.VerticalAlignment.Stretch" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>When <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Stretch&gt;</ph>.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>要素にプロパティが明示的に設定されている、これらの測定値はこのプロパティの設定通常の効果をキャンセル、レイアウトで優先<ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Stretch&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> is the <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph>新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</source>
          <target state="translated">この特定の依存関係プロパティでは、派生した要素のクラス、特にコントロールで設定が異なります見かけ上の「既定」値がよくあります。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">これは、2 つの方法のいずれかで一般的に発生します特定の派生クラスがその既定値を設定するためのさまざまなメタデータ、依存関係プロパティが再登録されている。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>For example, the apparent "default" of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> control will be <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>, even though <ph id="ph4">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> inherits <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> direct from <ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">たとえば、明確な「既定」の<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph>の<ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>コントロールになります<ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>場合でも、<ph id="ph4">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>継承<ph id="ph5">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph>から直接<ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>This is because that value was reset within the default style of <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>, within the style's control template.</source>
          <target state="translated">これは、既定のスタイル内でその値がリセットされたため<ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>スタイルのコントロール テンプレート内で。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> does not use <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> when composing layout, because <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is based on absolute positioning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 使用しません<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph>ためのレイアウトを作成するときに<ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>絶対位置に基づきます。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> or any derived classes, <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> redefines the default value of this property to be <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>.</source>
          <target state="translated">継承された場合<ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>またはその派生クラス、<ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>にするには、このプロパティの既定値を再定義<ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.VerticalAlignmentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>Gets the number of visual child elements within this element.</source>
          <target state="translated">この要素内でビジュアル子要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>The number of visual child elements for this element.</source>
          <target state="translated">この要素のビジュアル子要素の数。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> always returns either zero or one.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>の実装<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph>常に 0 または 1 個のいずれかを返します。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>Classes that maintain a visual child collection that might exceed one must override both this property and <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>.</source>
          <target state="translated">1 つを超える可能性がある子ビジュアル コレクションを保持するクラスは、この両方のプロパティをオーバーライドする必要がありますと<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>).</source>
          <target state="translated">このプロパティは、現在の子コレクションのレイアウトのオーバーライドを実装するための上限を決定する使用一般的に (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>The following example shows how a custom adorner uses the values declared by a <ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> that it maintains for its multiple visual children and reports these values through overrides of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>.</source>
          <target state="translated">次の例は、カスタムの装飾がで宣言されている値を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph>のオーバーライドを値は、複数のビジュアルの子を保持し、これらを報告する<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</source>
          <target state="translated">クラスは、子要素のコレクションで複数のビジュアルの子をサポートする場合は、そのコレクション内の要素の数を返すには、このプロパティをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>You must do this even if the collection object itself returns a count.</source>
          <target state="translated">これは、コレクション オブジェクト自体が、カウントを返す場合でも行う必要があります。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph> property.</source>
          <target state="translated">WPF フレームワーク レベルの要素のレイアウト ロジックは、すべての要素がを通じて有効なカウントを返すことを前提、<ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Width">
          <source>Gets or sets the width of the element.</source>
          <target state="translated">要素の幅を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">要素の幅 (<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">この値は 0.0 以上にする必要があります。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify width information.</source>
          <target state="translated">これには 3 つのプロパティのいずれかの<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>幅情報を指定します。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</source>
          <target state="translated">その他の 2 つは<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>If there is a conflict between these values, the order of application for actual width determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph>、受け入れられ、する必要があります<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>、最後に、境界内にある場合のこれら各<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In contrast, the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> may vary.</source>
          <target state="translated">これに対しての値、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>異なる場合があります。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The layout may have rejected the suggested size for some reason.</source>
          <target state="translated">レイアウトが、何らかの理由により推奨されるサイズを拒否している可能性がありますがします。</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Also, the layout system itself works asynchronously relative to the property system set of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and may not have processed that particular sizing property change yet.</source>
          <target state="translated">また、レイアウト システム自体が、システムのプロパティ セット<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>処理されない可能性がある特定のプロパティの変更をまだサイジングとします。</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In addition to acceptable <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, this property can also be <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">さらに許容される<ph id="ph1">&lt;xref:System.Double&gt;</ph>値、このプロパティにすることができますも<ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This is how you specify auto sizing behavior.</source>
          <target state="translated">これは、自動サイズ変更動作を指定する方法です。</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Auto sizing behavior implies that the element will fill the width available to it.</source>
          <target state="translated">自動サイズ変更動作は、要素が利用できる幅いっぱいになることを意味します。</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のスタイルでの既定値を頻繁に指定します。</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> that is enforced by the layout system (this is a very large number, larger than <ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph> but smaller than <ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">だけでなく、検証チェックは、非決定的の上限値にバインドされている<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>レイアウト システムにより強制適用されている (これは非常に大きな数よりも大きい<ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph>がよりも小さい<ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">この上限値を超えた場合は、要素は表示されませんし、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Do not set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">設定しない<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>の表示可能な最大サイズは、この非決定的の上限を超える可能性がありますよりも大幅に大きい値にします。</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">文字列表現を<ph id="ph1">&lt;xref:System.Double&gt;</ph>0.0 以上の値。</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">この値として解釈されます、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A<bpt id="p1">*</bpt>二重<ept id="p1">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (既定値) <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> インチです。1 96px を = =</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> センチメートル; は、します。1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> ポイントです。1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Enables autosizing behavior.</source>
          <target state="translated">自動サイズ変更を有効にします。</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.WidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Width" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Width" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>