<Type Name="Window" FullName="System.Windows.Window">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7fb443b6a52f587d274ec4a644c7ec8fd50eb8cf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6dbec-101">ウィンドウおよびダイアログ ボックスの作成、構成、表示、および有効期間の管理を可能にします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6dbec-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-102">ユーザーとスタンドアロンのアプリケーション間の相互作用のポイントは、ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="6dbec-103">A[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]ウィンドウは、2 つの領域で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="6dbec-104">アイコン、タイトル、システム メニューの windows の表示要素をホストする非クライアント領域は、最小化ボタン、ボタン、[復元] ボタン、閉じるボタン、および罫線を最大化します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="6dbec-105">アプリケーション固有のコンテンツをホストしているクライアント領域。</span><span class="sxs-lookup"><span data-stu-id="6dbec-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="6dbec-106">次の図に、標準的なウィンドウが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="6dbec-107">![ウィンドウ要素](~/add/media/windowoverviewfigure1.PNG "ウィンドウ要素")</span><span class="sxs-lookup"><span data-stu-id="6dbec-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="6dbec-108"><xref:System.Windows.Window> 作成、構成、表示、およびウィンドウおよびダイアログ ボックスの両方の有効期間を管理する機能をカプセル化し、次のキーのサービスを提供します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="6dbec-109">**継続時間管理**: <xref:System.Windows.Window.Activate%2A>、 <xref:System.Windows.Window.Activated>、 <xref:System.Windows.Window.Close%2A>、 <xref:System.Windows.Window.Closed>、 <xref:System.Windows.Window.Closing>、 <xref:System.Windows.Window.Deactivated>、 <xref:System.Windows.Window.Hide%2A>、 <xref:System.Windows.Window.IsActive%2A>、 <xref:System.Windows.Window.Show%2A>、<xref:System.Windows.Window.SourceInitialized>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="6dbec-110">**ウィンドウ管理**: <xref:System.Windows.Window.GetWindow%2A>、 <xref:System.Windows.Window.OwnedWindows%2A>、<xref:System.Windows.Window.Owner%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-111">**外観と動作**: <xref:System.Windows.Window.AllowsTransparency%2A>、 <xref:System.Windows.Window.ContentRendered>、 <xref:System.Windows.Window.DragMove%2A>、 <xref:System.Windows.Window.Icon%2A>、 <xref:System.Windows.Window.Left%2A>、 <xref:System.Windows.Window.LocationChanged>、 <xref:System.Windows.Window.ResizeMode%2A>、 <xref:System.Windows.Window.RestoreBounds%2A>、 <xref:System.Windows.Window.ShowActivated%2A>、 <xref:System.Windows.Window.ShowInTaskbar%2A>、 <xref:System.Windows.Window.SizeToContent%2A>、<xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="6dbec-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="6dbec-112">**ダイアログ ボックス**: <xref:System.Windows.Window.DialogResult%2A>、<xref:System.Windows.Window.ShowDialog%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-113">さらに、<xref:System.Windows.Application>のすべてのアプリケーションでウィンドウを管理するための特別なサポートが公開します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="6dbec-114">アプリケーションでは、アプリケーションで現在インスタンス化されるすべてのウィンドウの一覧を保持します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="6dbec-115">この一覧がによって公開されている、<xref:System.Windows.Application.Windows%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="6dbec-116">既定では、<xref:System.Windows.Application.MainWindow%2A>最初への参照で自動的に設定されている<xref:System.Windows.Window>がアプリケーションでインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="6dbec-117">そのため、このウィンドウ アプリケーションのメイン ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="6dbec-118">A<xref:System.Windows.Window>マークアップ、マークアップと分離コード、またはコードを使用して実装することができます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="6dbec-119"><xref:System.Windows.Window> windows およびスタンドアロン アプリケーションのダイアログ ボックスを表示する、主に使用します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="6dbec-120">ただし、レベル、ウィンドウ、ウィザードなどのナビゲーションを必要とするアプリケーションを使用できます<xref:System.Windows.Navigation.NavigationWindow>代わりにします。<xref:System.Windows.Navigation.NavigationWindow>から派生した<xref:System.Windows.Window>およびブラウザー スタイルのナビゲーションのサポートを拡張します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-121">使用して他のコンテンツおよびコンテンツのコンテナーにナビゲート可能なコンテンツのアイランドを組み込むことが<xref:System.Windows.Controls.Frame>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="6dbec-122"><xref:System.Windows.Window> 必要な`UnmanagedCode`インスタンス化するセキュリティのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="6dbec-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="6dbec-123">これは、次のような影響があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="6dbec-124">-展開されたスタンドアロンのアプリケーションは、インターネットまたはローカル イントラネット ゾーンから起動されたときに、アクセス許可の昇格を要求します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]<span data-ttu-id="6dbec-125"> 何も依頼未満の完全なアクセス許可では、ウィンドウやダイアログ ボックスのインスタンスを作成できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-125"> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="6dbec-126">スタンドアロン アプリケーションの配置とセキュリティの考慮事項については、次を参照してください。 [WPF のセキュリティ方針 - プラットフォーム セキュリティ](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="6dbec-127">A<xref:System.Windows.Window>は、 <xref:System.Windows.Controls.ContentControl>、任意の型 (文字列、画像、パネルなど) の 1 つのオブジェクトに含めることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="6dbec-128">詳細については、<xref:System.Windows.Controls.ContentControl> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dbec-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="6dbec-129">また、<xref:System.Windows.Window>はルート要素であり、そのため、別の要素のコンテンツの一部をすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-130"><xref:System.Windows.FrameworkElement.Height%2A>、 <xref:System.Windows.FrameworkElement.Width%2A>、 <xref:System.Windows.Window.Top%2A>、および<xref:System.Windows.Window.Left%2A>に設定されたプロパティ、<xref:System.Windows.Window>スタイルでは適用されません実行時にします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="6dbec-131">ウィンドウ コントロールのカスタマイズ</span><span class="sxs-lookup"><span data-stu-id="6dbec-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="6dbec-132">設定を適用する、同じプロパティを複数<xref:System.Windows.Window>、コントロールを使用して、<xref:System.Windows.FrameworkElement.Style%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="6dbec-133">既定値を変更することができます<xref:System.Windows.Controls.ControlTemplate>コントロールの外観を一意にします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="6dbec-134">作成の詳細については、<xref:System.Windows.Controls.ControlTemplate>を参照してください[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="6dbec-135">部分とに固有の状態を表示する、<xref:System.Windows.Window>を参照してください[ウィンドウ スタイルとテンプレート](~/docs/framework/wpf/controls/window-styles-and-templates.md)です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="6dbec-136">コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-136">Dependency properties for this control might be set by the control’s default style.</span></span>  <span data-ttu-id="6dbec-137">プロパティが既定のスタイルが設定されている場合は、アプリケーションでコントロールが表示されたら既定値から、プロパティが変更可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="6dbec-138">既定のスタイルは、いるデスクトップ テーマによっては、アプリケーションが実行されている場合は使用が決定されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="6dbec-139">詳細については、次を参照してください。 [WPF テーマの既定の](http://go.microsoft.com/fwlink/?LinkID=158252)します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-139">For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-140">Visual プロパティの設定はのみに効果が場合、このプロパティは、両方に存在<xref:System.Windows.Window>コントロールの既定のテンプレートとを使用して設定をします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-140">Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a .</span></span> <span data-ttu-id="6dbec-141">「を変更する、Visual 構造の制御」 セクションで visual のプロパティの一覧を検索できる[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-141">You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-142">次の例は、標準的なウィンドウのマークアップのみを使用して定義します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-142">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="6dbec-143">コードのみを使用して標準のウィンドウを定義する方法を次の例。</span><span class="sxs-lookup"><span data-stu-id="6dbec-143">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="6dbec-144">次の例は、標準的なウィンドウのマークアップと分離コードとの組み合わせを使用して定義します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-144">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-145">
            <see cref="T:System.Windows.Window" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-145">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-146">コンス トラクターは、 <xref:System.Windows.FrameworkElement.Width%2A>、 <xref:System.Windows.FrameworkElement.Height%2A>、 <xref:System.Windows.Window.Top%2A>、および<xref:System.Windows.Window.Left%2A>プロパティの既定値に<xref:System.Windows.Window>値。</span><span class="sxs-lookup"><span data-stu-id="6dbec-146">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="6dbec-147">内で、ウィンドウを作成する場合、<xref:System.AppDomain>を持つ、<xref:System.Windows.Application>オブジェクトのコンス トラクターを追加、<xref:System.Windows.Window>オブジェクトのセットを<xref:System.Windows.Application>-経由で windows を管理、<xref:System.Windows.Application.Windows%2A>のプロパティ、<xref:System.Windows.Application>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6dbec-147">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6dbec-148">安全でないネイティブ メソッドを呼び出すには、このオブジェクトのアクセスを許可します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-148">for permission for this object to call unsafe native methods.</span>
          </span>
          <span data-ttu-id="6dbec-149">関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-149">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-150">ウィンドウを前面にしてアクティブ化することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-150">Attempts to bring the window to the foreground and activates it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6dbec-151">
            <see cref="T:System.Windows.Window" /> が正常にアクティブにされた場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-151">
              <see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-152">使用されるものと同じウィンドウがアクティブかどうかを決定するルールは、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow`関数 (User32.dll)。</span><span class="sxs-lookup"><span data-stu-id="6dbec-152">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="6dbec-153">ウィンドウがアクティブ化する場合、[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]ユーザーの前景色のアプリケーションではないアプリケーション<xref:System.Windows.Application.Activated>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-153">If the window is activated in a [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-154">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-154">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-155">ウィンドウをアクティブ化する権限です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-155">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="6dbec-156">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-156">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-157">ウィンドウがフォアグラウンド ウィンドウになったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-157">Occurs when a window becomes the foreground window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-158">ウィンドウがアクティブに (手前のウィンドウになります) とき。</span><span class="sxs-lookup"><span data-stu-id="6dbec-158">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="6dbec-159">ウィンドウを最初に開きます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-159">The window is first opened.</span></span>  
  
-   <span data-ttu-id="6dbec-160">ユーザーは、alt キーを押しながら TAB キーを押す、マウスまたはタスク マネージャーからを選択して、ウィンドウに切り替わります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-160">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="6dbec-161">ユーザーは、ウィンドウのタスク バー ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-161">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="6dbec-162">Windows ライセンス認証になることを検出する必要があるが処理できる、<xref:System.Windows.Window.Activated>イベント。</span><span class="sxs-lookup"><span data-stu-id="6dbec-162">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="6dbec-163">ウィンドウが初めてアクティブになった後に非アクティブ化し、その有効期間中に何度も再アクティブ化する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-163">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="6dbec-164">検査できる場合は、アプリケーションの動作または状態のアクティブ化状態に依存する<xref:System.Windows.Window.IsActive%2A>内にあるどのライセンス認証状態を判断します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-164">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="6dbec-165">アプリケーションがすることもできます<xref:System.Windows.Application.Activated>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-165">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-166">ウィンドウのクライアント領域が透過性をサポートするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-166">Gets or sets a value that indicates whether a window's client area supports transparency.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-167">ウィンドウで透過性がサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-167">
              <see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-168">ときに、<xref:System.Windows.Controls.Control.Background%2A>ウィンドウのプロパティが、透過的に設定を使用したカラー<xref:System.Windows.Media.Brushes.Transparent%2A>たとえば、ウィンドウの不透明なままです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-168">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="6dbec-169">これは、デスクトップと、実行中のアプリケーション"beneath"、ウィンドウを表示できないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-169">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="6dbec-170">この種類の透過性を有効にする<xref:System.Windows.Window.AllowsTransparency%2A>に設定する必要があります`true`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-170">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="6dbec-171"><xref:System.Windows.Window.AllowsTransparency%2A> 四角形以外の windows の作成を支援するが存在して、その結果、ときに<xref:System.Windows.Window.AllowsTransparency%2A>に設定されている`true`、ウィンドウの<xref:System.Windows.Window.WindowStyle%2A>プロパティに設定する必要があります<xref:System.Windows.WindowStyle.None>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-171"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-172">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-172">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-173">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-173">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="6dbec-174">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-174">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-175">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-175">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-176">
            <see cref="P:System.Windows.Window.WindowStyle" /> 値が <see cref="F:System.Windows.WindowStyle.None" /> 以外に設定されたウィンドウ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-176">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-177">
            <see cref="P:System.Windows.Window.AllowsTransparency" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-177">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds">
          <span data-ttu-id="6dbec-178">ウィンドウがウィンドウ自体とその子を配置するために使用する、最終的なサイズを反映する <see cref="T:System.Windows.Size" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-178">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-179">ウィンドウとその子要素を配置したり、サイズを設定したりするには、このメソッドをオーバーライドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-179">Override this method to arrange and size a window and its child elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6dbec-180">使用された実際のサイズを反映する <see cref="T:System.Windows.Size" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-180">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-181"><xref:System.Windows.Window.ArrangeOverride%2A> ときに呼び出されません、<xref:System.Windows.UIElement.Visibility%2A>プロパティの値を持つ<xref:System.Windows.Visibility.Collapsed>します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-181"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="6dbec-182">場合の値、<xref:System.Windows.UIElement.Visibility%2A>プロパティが、<xref:System.Windows.Visibility.Hidden>または<xref:System.Windows.Visibility.Visible>、<xref:System.Windows.Window.ArrangeOverride%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-182">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-183">ときに、<xref:System.Windows.Window.Show%2A>または<xref:System.Windows.Window.ShowDialog%2A>が呼び出される、<xref:System.Windows.UIElement.Visibility%2A>のプロパティ、<xref:System.Windows.Window>に設定されている<xref:System.Windows.Visibility.Visible>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-183">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-184">
            <see cref="T:System.Windows.Window" /> を手動で閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-184">Manually closes a <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-185">A<xref:System.Windows.Window>のいくつかは、1 つを使用して閉じることがよく知られている、システム指定のメカニズムがそのなど、タイトル バーにあります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-185">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="6dbec-186">ALT キーを押しながら F4 キー。</span><span class="sxs-lookup"><span data-stu-id="6dbec-186">ALT+F4.</span></span>  
  
-   <span data-ttu-id="6dbec-187">システム メニュー &#124; **閉じる**です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-187">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="6dbec-188">**閉じる**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-188">**Close** button.</span></span>  
  
 <span data-ttu-id="6dbec-189">A<xref:System.Windows.Window>開発者から提供されているクライアント領域内のいくつかのよく知られたメカニズムのいずれかを使用して終了することもできます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-189">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="6dbec-190">**ファイル** &#124; **終了**メイン ウィンドウにします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-190">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="6dbec-191">**ファイル** &#124; **閉じる**または**閉じる**子ウィンドウのボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-191">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-192">**Ok**と**キャンセル** ダイアログ ボックスのボタンのでは開発者が提供したもが可能性は<xref:System.Windows.Window.DialogResult%2A>、呼び出すことによって開かれたウィンドウを自動的に終了する<xref:System.Windows.Window.ShowDialog%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-192">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-193">これらのメカニズムを必要とすると、明示的に呼び出す<xref:System.Windows.Window.Close%2A>ウィンドウを閉じます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-193">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-194">呼び出して、ウィンドウが開かれている場合<xref:System.Windows.Window.ShowDialog%2A>を使用して、<xref:System.Windows.Controls.Button>でその<xref:System.Windows.Controls.Button.IsCancel%2A>ボタンをクリックするか、または esc キーが押されたときにプロパティが true に設定を自動的に閉じます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-194">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="6dbec-195">使用して、ウィンドウが開かれた場合<xref:System.Windows.Window.Show%2A>、ただし、<xref:System.Windows.Window.Close%2A>からなどの明示的に呼び出す必要があります<xref:System.Windows.Controls.Primitives.ButtonBase.Click>のイベント ハンドラー、<xref:System.Windows.Controls.Button>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-195">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="6dbec-196">ウィンドウを閉じると、<xref:System.Windows.Window.Closing>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-196">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="6dbec-197">場合、<xref:System.Windows.Window.Closing>次のように、イベントがキャンセルされていません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-197">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="6dbec-198"><xref:System.Windows.Window>から削除<xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType>(場合、<xref:System.Windows.Application>オブジェクトが存在する)。</span><span class="sxs-lookup"><span data-stu-id="6dbec-198">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="6dbec-199"><xref:System.Windows.Window>所有者から削除されます<xref:System.Windows.Window>/所有した所有者のリレーションシップが確立された場合、所有する前に<xref:System.Windows.Window>が表示されたと所有者後<xref:System.Windows.Window>が開かれました。</span><span class="sxs-lookup"><span data-stu-id="6dbec-199">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="6dbec-200"><xref:System.Windows.Window.Closed> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-200">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="6dbec-201">アンマネージ リソースによって作成された、<xref:System.Windows.Window>に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-201">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="6dbec-202">場合<xref:System.Windows.Window.ShowDialog%2A>表示に対して呼び出された、 <xref:System.Windows.Window>、<xref:System.Windows.Window.ShowDialog%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-202">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="6dbec-203">閉じる、<xref:System.Windows.Window>閉じなければを所有している任意の windows が発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-203">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="6dbec-204">さらに、終了、<xref:System.Windows.Window>方法に応じて実行を停止するアプリケーションが発生する可能性があります<xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType>プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-204">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-205">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-205">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-206">次の例は、**ファイル** &#124; **終了**を明示的に呼び出す処理されているメニュー<xref:System.Windows.Window.Close%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-206">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-207">すべての windows とユーザー入力イベントを制限なく使用する権限です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-207">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="6dbec-208">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-208">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-209">ウィンドウが閉じるときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-209">Occurs when the window is about to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-210">このイベントが発生した後、ウィンドウを閉じるを防ぐことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-210">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-211">
            <see cref="P:System.Windows.UIElement.Visibility" /> が設定されているか、ウィンドウを閉じている間に <see cref="M:System.Windows.Window.Show" />、<see cref="M:System.Windows.Window.ShowDialog" />、または <see cref="M:System.Windows.Window.Hide" /> が呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-211">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-212">
            <see cref="M:System.Windows.Window.Close" /> が呼び出された直後に発生します。これを処理して、ウィンドウが閉じるのをキャンセルすることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-212">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-213"><xref:System.Windows.Window.Closing> ウィンドウが閉じられるときを検出するために処理することができます (たとえば、<xref:System.Windows.Window.Close%2A>と呼びます)。</span><span class="sxs-lookup"><span data-stu-id="6dbec-213"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="6dbec-214">さらに、<xref:System.Windows.Window.Closing>ウィンドウが終了されないようにするために使用できます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-214">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="6dbec-215">ウィンドウの終了を回避するのに設定することができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.ComponentModel.CancelEventArgs>引数`true`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-215">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="6dbec-216"><xref:System.Windows.Window.Closing>イベントが発生したときに<xref:System.Windows.Window.Close%2A>と呼ばれる場合は、ウィンドウの閉じるボタンがクリックされた場合、または alt キーを押しながら f4 キーを押す場合。</span><span class="sxs-lookup"><span data-stu-id="6dbec-216">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="6dbec-217">ウィンドウでその所有者によって所有されているウィンドウが開かれたかどうか<xref:System.Windows.Window.Show%2A>、および所有者は、ウィンドウが閉じられる、所有されているウィンドウの<xref:System.Windows.Window.Closing>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-217">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="6dbec-218">ウィンドウの所有者が閉じている場合 (を参照してください<xref:System.Windows.Window.Owner%2A>)、<xref:System.Windows.Window.Closing>所有されるウィンドウでは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-218">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="6dbec-219">場合<xref:System.Windows.Application.Shutdown%2A>が呼び出されたが、<xref:System.Windows.Window.Closing>各ウィンドウのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-219">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="6dbec-220">ただし場合、<xref:System.Windows.Window.Closing>が取り消されると、キャンセルが無視されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-220">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="6dbec-221">場合は、ユーザーがログオフまたはシャット ダウンするため、セッションが終了<xref:System.Windows.Window.Closing>は発生しません。 処理<xref:System.Windows.Application.SessionEnding>アプリケーションのクロージャをキャンセルするコードを実装します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-221">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="6dbec-222">表示し、アプリケーションの有効期間中に複数回ウィンドウを非表示にして、ウィンドウのたびに再インスタンス化したくない場合は、これを表示する、処理することができます、<xref:System.Windows.Window.Closing>イベント、キャンセルするか、および呼び出し、<xref:System.Windows.Window.Hide%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-222">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="6dbec-223">その後、呼び出すことができます<xref:System.Windows.Window.Show%2A>それを再度開くには、同じインスタンスでします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-223">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-224">次の例で、<xref:System.Windows.Window>ユーザーの介入を閉じる必要があるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-224">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-225">
            <see cref="P:System.Windows.UIElement.Visibility" /> が設定されているか、ウィンドウを閉じている間に <see cref="M:System.Windows.Window.Show" />、<see cref="M:System.Windows.Window.ShowDialog" />、または <see cref="M:System.Windows.Window.Close" /> が呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-225">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-226">ウィンドウのコンテンツがレンダリングされた後に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-226">Occurs after a window's content has been rendered.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-227">コンテンツ ウィンドウがない場合は、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-227">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-228">ウィンドウが背景ウィンドウになったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-228">Occurs when a window becomes a background window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-229">ウィンドウが非アクティブ化 (バック グラウンド ウィンドウになります) とき。</span><span class="sxs-lookup"><span data-stu-id="6dbec-229">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="6dbec-230">ユーザーは、現在のアプリケーションの別のウィンドウに切り替わります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-230">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="6dbec-231">ユーザーは、ALT + TAB キーを使用して、またはタスク マネージャーを使用して、別のアプリケーションでのウィンドウに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-231">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="6dbec-232">ユーザーは、別のアプリケーションでのウィンドウのタスク バー ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-232">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="6dbec-233">処理することにより、非アクティブになることを検出する必要がある Windows、<xref:System.Windows.Window.Deactivated>イベント。</span><span class="sxs-lookup"><span data-stu-id="6dbec-233">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="6dbec-234">ウィンドウが非アクティブ化された後最初を再アクティブ化し、その有効期間中に何度も非アクティブ化することがあります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-234">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="6dbec-235">検査できる場合は、アプリケーションの動作または状態のアクティブ化状態に依存する<xref:System.Windows.Window.IsActive%2A>内にあるどのライセンス認証状態を判断します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-235">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="6dbec-236">アプリケーションがすることもできます<xref:System.Windows.Application.Deactivated>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-236">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-237">ダイアログ ボックスの結果値を取得または設定します。この値は、<see cref="M:System.Windows.Window.ShowDialog" /> メソッドから返される値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-237">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-238">
            <see cref="T:System.Nullable`1" /> 型の <see cref="T:System.Boolean" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-238">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="6dbec-239">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-239">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-240"><xref:System.Windows.Window.DialogResult%2A> ユーザーが受け入れるかどうかを確認するダイアログ ボックスを表示するコードから使用できます (`true`)、またはキャンセルされた (`false`) ダイアログ ボックス。</span><span class="sxs-lookup"><span data-stu-id="6dbec-240"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="6dbec-241">ダイアログ ボックスが受け入れられた場合は、ユーザーによって収集されたデータを取得し、それを処理するダイアログ ボックスを開いたコードにこのことを示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-241">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="6dbec-242">ダイアログ ボックスが取り消された場合ただし、このことを示しますコードの呼び出しを停止する、さらに処理します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-242">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="6dbec-243">既定では、ユーザーが実行すると、次のいずれかのダイアログ ボックスが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="6dbec-243">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="6dbec-244">PressesALT ながら f4 キー。</span><span class="sxs-lookup"><span data-stu-id="6dbec-244">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="6dbec-245">クリックする、**閉じる**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-245">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="6dbec-246">選択**閉じる**システム メニューからです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-246">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="6dbec-247">このような場合は、のすべてのページで<xref:System.Windows.Window.DialogResult%2A>は`false`既定です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-247">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="6dbec-248">ダイアログ ボックスは、通常、ボタンは、ダイアログ ボックスをキャンセルする特殊なボタンを提供します。 が<xref:System.Windows.Controls.Button.IsCancel%2A>プロパティがに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-248">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="6dbec-249">このように構成されているボタンが押されたか、または ESC キーが押されたときにウィンドウは自動的に閉じる。</span><span class="sxs-lookup"><span data-stu-id="6dbec-249">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="6dbec-250">このような場合は、のいずれかで<xref:System.Windows.Window.DialogResult%2A>まま`false`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-250">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="6dbec-251">ダイアログ ボックスも通常のボタン、[accept] ボタンを提供しますが<xref:System.Windows.Controls.Button.IsDefault%2A>プロパティに設定されている`true`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-251">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="6dbec-252">このように構成されているボタンを発生させるその<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベントか、ENTER キーが押されたときにします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-252">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="6dbec-253">ただし、ダイアログ ボックスに自動的に閉じないも設定されます<xref:System.Windows.Window.DialogResult%2A>に`true`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-253">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="6dbec-254">このコードは、通常からする必要があります、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>既定のボタンのイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="6dbec-254">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="6dbec-255"><xref:System.Windows.Window.DialogResult%2A> `null`  ダイアログ ボックスが表示されている場合、承認済みでも処理が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="6dbec-255"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="6dbec-256">によって返される値からダイアログの結果を取得するには、ダイアログ ボックスを閉じた後<xref:System.Windows.Window.ShowDialog%2A>メソッド、またはを調べることによって、<xref:System.Windows.Window.DialogResult%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-256">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="6dbec-257"><xref:System.Windows.Window.DialogResult%2A> ときのみ設定可能、<xref:System.Windows.Window>を呼び出すことによって開くその<xref:System.Windows.Window.ShowDialog%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-257"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-258">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-258">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-259">次の例は、[ok] ボタンと [キャンセル] ボタンを返す、適切なを構成する方法を示しています。<xref:System.Windows.Window.DialogResult%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-259">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-260">
            <see cref="P:System.Windows.Window.DialogResult" /> を呼び出すことによってウィンドウが開かれる前に <see cref="M:System.Windows.Window.ShowDialog" /> が設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-260">
              <see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          </span>
          <span data-ttu-id="6dbec-261">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-261">-or-</span>
          </span>
          <span data-ttu-id="6dbec-262">
            <see cref="P:System.Windows.Window.DialogResult" /> を呼び出すことによって開かれたウィンドウに <see cref="M:System.Windows.Window.Show" /> が設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-262">
              <see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-263">Window が表示されている画面の DPI が変更されたあとに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-263">Occurs after the DPI of the screen on which the Window is displayed changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-264">画面 Window の DPI が変更中であるときの <see cref="T:System.Windows.RoutedEvent" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-264">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-265">ウィンドウのクライアント領域の表示部分でマウスの左ボタンを押したままにすることにより、ウィンドウをドラッグできるようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-265">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-266">マウスの左ボタンがダウンする必要があります<xref:System.Windows.Window.DragMove%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-266">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="6dbec-267">マウスの左ボタンが押されたときを検出する方法の 1 つは処理する、<xref:System.Windows.UIElement.MouseLeftButtonDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="6dbec-267">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="6dbec-268">ときに<xref:System.Windows.Window.DragMove%2A>が呼び出されると、左側のウィンドウのクライアント領域の表示部分でマウス ボタンが押される必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-268">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-269">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-269">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-270">次の例は、オーバーライドする方法を示します<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>を呼び出す<xref:System.Windows.Window.DragMove%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-270">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-271">マウスの左ボタンが押されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-271">The left mouse button is not down.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-272">アクセス権をウィンドウをドラッグします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-272">for permission to drag a window.</span>
          </span>
          <span data-ttu-id="6dbec-273">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-273">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="6dbec-274">依存関係オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-274">The dependency object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-275">依存関係オブジェクトが存在するコンテンツ ツリーをホストする <see cref="T:System.Windows.Window" /> オブジェクトへの参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-275">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6dbec-276">ホスト ウィンドウへの <see cref="T:System.Windows.Window" /> 参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-276">A <see cref="T:System.Windows.Window" /> reference to the host window.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6dbec-277">
            <paramref name="dependencyObject" /> が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-277">
              <paramref name="dependencyObject" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-278">ウィンドウを非表示にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-278">Makes a window invisible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-279">非表示にされて、ときに、ウィンドウが閉じられていませんし、どちらも、<xref:System.Windows.Window.Closing>も<xref:System.Windows.Window.Closed>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-279">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="6dbec-280">代わりに、ウィンドウの<xref:System.Windows.UIElement.Visibility%2A>プロパティに設定されている<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-280">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6dbec-281">ウィンドウを場合は、アプリケーションの<xref:System.Windows.Application.MainWindow%2A>およびアプリケーションの<xref:System.Windows.Application.ShutdownMode%2A>は<xref:System.Windows.ShutdownMode.OnMainWindowClose>アプリケーションはシャット ダウンしません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-281">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="6dbec-282">同様に、アプリケーションはシャット ダウンしませんウィンドウのみ ウィンドウで、アプリケーションのシャット ダウン モード場合<xref:System.Windows.ShutdownMode.OnLastWindowClose>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-282">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="6dbec-283">複数回、アプリケーションの有効期間中にウィンドウを非表示にしたりするたびに、ウィンドウの再インスタンス化したくない場合を表示する、処理することができます、<xref:System.Windows.Window.Closing>イベント、キャンセルするか、および呼び出し、<xref:System.Windows.Window.Hide%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-283">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="6dbec-284">その後、呼び出すことができます<xref:System.Windows.Window.Show%2A>開き直す同じインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-284">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-285">閉じている途中 (<see cref="M:System.Windows.Window.Hide" />) または閉じた (<see cref="E:System.Windows.Window.Closing" />) ウィンドウに対して <see cref="E:System.Windows.Window.Closed" /> が呼び出されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-285">
              <see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-286">ウィンドウのアイコンを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-286">Gets or sets a window's icon.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-287">アイコンを表す <see cref="T:System.Windows.Media.ImageSource" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-287">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]<span data-ttu-id="6dbec-288"> スタンドアロン アプリケーションでは、2 種類のアイコンがあります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-288"> standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="6dbec-289">1 つのアセンブリのアイコンを使用して指定されている、`<ApplicationIcon>`アプリケーションのプロジェクト内のプロパティは、ファイルをビルドします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-289">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="6dbec-290">このアイコンは、アセンブリのデスクトップ アイコンとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-290">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6dbec-291">Visual Studio でのデバッグ時に、ホスト プロセスのため、アイコンが表示されません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-291">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="6dbec-292">実行可能ファイルを実行する場合は、アイコンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-292">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="6dbec-293">詳細については、「[ホスト プロセス (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dbec-293">For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="6dbec-294">1 つのアイコンを設定して指定されているウィンドウごと<xref:System.Windows.Window.Icon%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-294">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="6dbec-295">各ウィンドウのタイトル バー、タスク バー ボタン、およびその ALT TAB アプリケーション選択リストのエントリにこのアイコンが使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-295">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="6dbec-296">A[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]ウィンドウには、常にアイコンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-296">A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon.</span></span> <span data-ttu-id="6dbec-297">ときにいずれかの設定によって提供されていない<xref:System.Windows.Window.Icon%2A>、[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]次のルールに基づいて表示するアイコンを選択します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-297">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="6dbec-298">指定した場合は、アセンブリのアイコンを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-298">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="6dbec-299">アセンブリのアイコンが指定されていない場合は、既定値を使用して[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]アイコン。</span><span class="sxs-lookup"><span data-stu-id="6dbec-299">If the assembly icon is not specified, use the default [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] icon.</span></span>  
  
 <span data-ttu-id="6dbec-300">使用する場合<xref:System.Windows.Window.Icon%2A>カスタム ウィンドウ アイコンを指定するには、設定して既定のアプリケーション アイコンを戻すことができます<xref:System.Windows.Window.Icon%2A>に`null`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-300">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="6dbec-301">1 つのアイコンは、さまざまな方法で使用できます[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]ALT + タブが選択リストをファイルなどのウィンドウで、ウィンドウのタスク バーのタイトル バーに表示されています。</span><span class="sxs-lookup"><span data-stu-id="6dbec-301">A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="6dbec-302">これらの各サイズが異なりますを使用してアイコンが表示します。ALT + TAB ファイルの選択リストのサイズは 32 x 32 ピクセルのアイコンが表示されている間、ウィンドウのタイトル バーでは、タスク バーで、16 x 16 ピクセルのアイコンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-302">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="6dbec-303">一部のアプリケーションと同様に[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]、提供、**ビュー**メニューを表示するアイコンのサイズを選択することができます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-303">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="6dbec-304">さまざまな画面サイズに対応する、アイコン ファイルが 1 つまたは複数の実際アイコンを使用して、それぞれが特定のサイズや色深度を対象とするアイコンのバージョンを表すので構成されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-304">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="6dbec-305">たとえば、1 つのアイコンのみがありますの 16 色は、1 つの 16 x 16 ピクセル アイコン、16 x 16 ピクセルと 16 色と 256 色の両方で 32 x 32 ピクセルのアイコンが含まれている可能性。</span><span class="sxs-lookup"><span data-stu-id="6dbec-305">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="6dbec-306">アイコン ファイル内のすべての使用可能なサイズと色深度を示すアイコンが存在する場合<xref:System.Windows.Window>該当するアイコンを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-306">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="6dbec-307">アイコン ファイルには、すべての可能なアイコンのサブセットのみが含まれている場合<xref:System.Windows.Window>サイズと色深度を減らすの順序で [次へ] の最適なアイコンを使用します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-307">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="6dbec-308">結果はアイコンが常にで使用される<xref:System.Windows.Window>に使用されるアイコンが必要なサイズや色深度を対象可能性がありますが、します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-308">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="6dbec-309">たとえば、表示の場合、256 色で 32 x 32 ピクセルのアイコンとして 16 色の 16 x 16 ピクセルのアイコンを使用可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-309">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="6dbec-310">これは保たれますなどの視覚効果が望ましくない可能性がありますのすべての対象のサイズと色深度を示すアイコンを作成することで回避することがあります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-310">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-311">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-311">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-312">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-313">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-313">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="6dbec-314">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-315">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-315">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-316">次の例では、ウィンドウのアイコンを設定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-316">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-317">アイコンを設定する権限です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-317">for permission to set the icon.</span>
          </span>
          <span data-ttu-id="6dbec-318">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-318">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-319">
            <see cref="P:System.Windows.Window.Icon" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-319">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-320">ウィンドウがアクティブかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-320">Gets a value that indicates whether the window is active.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-321">ウィンドウがアクティブの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-321">
              <see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6dbec-322">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-322">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-323">アクティブなウィンドウは、ユーザーの現在の前面のウィンドウで、フォーカスは、タイトル バーのアクティブな外観では表されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-323">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="6dbec-324">アクティブなウィンドウは明示的に設定されていないすべてのトップレベル ウィンドウの最上部にもなります、<xref:System.Windows.Window.Topmost%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-324">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-325">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-325">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-326">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-326">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="6dbec-327">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-327">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-328">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-328">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-329">
            <see cref="P:System.Windows.Window.IsActive" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-329">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-330">ウィンドウの左端の位置を、デスクトップとの関係で取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-330">Gets or sets the position of the window's left edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-331">ウィンドウの左端の位置。単位は論理単位 (1/96 インチ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-331">The position of the window's left edge, in logical units (1/96th of an inch).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-332">ときに、<xref:System.Windows.Window>が最大化または最小化、この値は、復元の左端のポイントを<xref:System.Windows.Window>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-332">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="6dbec-333">このプロパティは、スタイルを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-333">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="6dbec-334">値を指定しない場合<xref:System.Windows.Window.Left%2A>がシステムの既定値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-334">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="6dbec-335">設定して、システムの既定値を指定することも<xref:System.Windows.Window.Left%2A>に<xref:System.Double.NaN>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-335">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="6dbec-336">どちらも<xref:System.Double.NegativeInfinity>も<xref:System.Double.PositiveInfinity>の有効な値は、<xref:System.Windows.Window.Left%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-336">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-337">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-337">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-338">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-338">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-339">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-339">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="6dbec-340">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-340">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-341">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-341">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-342">
            <see cref="P:System.Windows.Window.Left" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-342">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-343">ウィンドウの場所が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-343">Occurs when the window's location changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-344">ウィンドウの場所を変更時にします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-344">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="6dbec-345">ユーザーは、ウィンドウのタイトル バーをドラッグして、ウィンドウを移動します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-345">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="6dbec-346">後に、ウィンドウを移動<xref:System.Windows.Window.DragMove%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-346">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="6dbec-347">いずれか、<xref:System.Windows.Window.Left%2A>または<xref:System.Windows.Window.Top%2A>プロパティをプログラムで設定します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-347">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="6dbec-348">**移動**ウィンドウのシステム メニューのメニュー項目を選択します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-348">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="6dbec-349"><xref:System.Windows.Window.WindowState%2A>プロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-349">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-350">ウィンドウの論理上の子要素に対する列挙子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-350">Gets an enumerator for a window's logical child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-351">ウィンドウの論理上の子要素に対する <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-351">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="6dbec-352">このウィンドウが子に提供できる有効なサイズを反映する <see cref="T:System.Windows.Size" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-352">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span>
          </span>
          <span data-ttu-id="6dbec-353">値として無限大を指定すると、ウィンドウのサイズをあらゆるコンテンツに合わせることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-353">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-354">ウィンドウのサイズを測定するには、このメソッドをオーバーライドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-354">Override this method to measure the size of a window.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6dbec-355">このウィンドウが、子のサイズの計算に基づいて、レイアウト時に必要だと判断するサイズを反映する <see cref="T:System.Windows.Size" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-355">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-356"><xref:System.Windows.Window.MeasureOverride%2A> ときに呼び出されません、<xref:System.Windows.UIElement.Visibility%2A>プロパティの値を持つ<xref:System.Windows.Visibility.Collapsed>します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-356"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="6dbec-357">場合の値、<xref:System.Windows.UIElement.Visibility%2A>プロパティが、<xref:System.Windows.Visibility.Hidden>または<xref:System.Windows.Visibility.Visible>、<xref:System.Windows.Window.MeasureOverride%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-357">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-358">ときに、<xref:System.Windows.Window.Show%2A>または<xref:System.Windows.Window.ShowDialog%2A>が呼び出される、<xref:System.Windows.UIElement.Visibility%2A>のプロパティ、<xref:System.Windows.Window>に設定されている<xref:System.Windows.Visibility.Visible>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-358">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-359">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-359">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-360">
            <see cref="E:System.Windows.Window.Activated" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-360">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-361"><xref:System.Windows.Window.OnActivated%2A> は、<xref:System.Windows.Window.Activated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-361"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="6dbec-362">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnActivated%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-362">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="6dbec-363">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnActivated%2A>基本クラスの場合は<xref:System.Windows.Window.Activated>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-363">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-364">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-364">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-365">
            <see cref="E:System.Windows.Window.Closed" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-365">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-366"><xref:System.Windows.Window.OnClosed%2A> は、<xref:System.Windows.Window.Closed> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-366"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="6dbec-367">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnClosed%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-367">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="6dbec-368">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnClosed%2A>基本クラスの場合は<xref:System.Windows.Window.Closed>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-368">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-369">イベント データを格納している <see cref="T:System.ComponentModel.CancelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-369">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-370">
            <see cref="E:System.Windows.Window.Closing" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-370">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-371"><xref:System.Windows.Window.OnClosing%2A> は、<xref:System.Windows.Window.Closing> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-371"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="6dbec-372">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnClosing%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-372">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="6dbec-373">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnClosing%2A>基本クラスの場合は<xref:System.Windows.Window.Closing>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-373">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">
          <span data-ttu-id="6dbec-374">古いコンテンツ ツリーのルートへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-374">A reference to the root of the old content tree.</span>
          </span>
        </param>
        <param name="newContent">
          <span data-ttu-id="6dbec-375">新しいコンテンツ ツリーのルートへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-375">A reference to the root of the new content tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-376">
            <see cref="P:System.Windows.Controls.ContentControl.Content" /> プロパティが変更されたときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-376">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-377">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-377">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-378">
            <see cref="E:System.Windows.Window.ContentRendered" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-378">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-379"><xref:System.Windows.Window.OnContentRendered%2A> は、<xref:System.Windows.Window.ContentRendered> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-379"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="6dbec-380">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnContentRendered%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-380">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="6dbec-381">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnContentRendered%2A>基本クラスの場合は<xref:System.Windows.Window.ContentRendered>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-381">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-382">この <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> に対応する <see cref="T:System.Windows.Window" /> オブジェクトを作成して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-382">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6dbec-383">この <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> に対応する <see cref="T:System.Windows.Window" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-383">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-384">このメソッドは、<xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-384">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-385">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-385">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-386">
            <see cref="E:System.Windows.Window.Deactivated" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-386">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-387"><xref:System.Windows.Window.OnDeactivated%2A> は、<xref:System.Windows.Window.Deactivated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-387"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="6dbec-388">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnDeactivated%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-388">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="6dbec-389">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnDeactivated%2A>基本クラスの場合は<xref:System.Windows.Window.Deactivated>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-389">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpi">
          <span data-ttu-id="6dbec-390">以前の DPI スケール設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-390">The previous DPI scale setting.</span>
          </span>
        </param>
        <param name="newDpi">
          <span data-ttu-id="6dbec-391">新規の DPI スケール設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-391">The new DPI scale setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-392">このウィンドウが表示される DPI が変更するときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-392">Called when the DPI at which this window is rendered changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-393">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-393">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-394">
            <see cref="E:System.Windows.Window.LocationChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-394">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-395"><xref:System.Windows.Window.OnLocationChanged%2A> は、<xref:System.Windows.Window.LocationChanged> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-395"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="6dbec-396">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnLocationChanged%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-396">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="6dbec-397">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnLocationChanged%2A>基本クラスの場合は<xref:System.Windows.Window.LocationChanged>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-397">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-398">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-398">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-399">
            <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> イベントが発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-399">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-400">この実装では、処理済みの状態は変更されません (、<xref:System.Windows.RoutedEventArgs.Handled%2A>プロパティ) の<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>イベント データ。</span><span class="sxs-lookup"><span data-stu-id="6dbec-400">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6dbec-401">オーバーライドする場合は<see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6dbec-401">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="6dbec-402">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性がありますイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6dbec-402">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="6dbec-403">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6dbec-403">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-404">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-404">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-405">
            <see cref="E:System.Windows.Window.SourceInitialized" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-405">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-406"><xref:System.Windows.Window.OnSourceInitialized%2A> は、<xref:System.Windows.Window.SourceInitialized> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-406"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="6dbec-407">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnSourceInitialized%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-407">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="6dbec-408">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnSourceInitialized%2A>基本クラスの場合は<xref:System.Windows.Window.SourceInitialized>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-408">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6dbec-409">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-409">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-410">
            <see cref="E:System.Windows.Window.StateChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-410">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-411"><xref:System.Windows.Window.OnStateChanged%2A> は、<xref:System.Windows.Window.StateChanged> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-411"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="6dbec-412">派生する型<xref:System.Windows.Window>よりも優先<xref:System.Windows.Window.OnStateChanged%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-412">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="6dbec-413">オーバーライドされたメソッドを呼び出す必要があります<xref:System.Windows.Window.OnStateChanged%2A>基本クラスの場合は<xref:System.Windows.Window.StateChanged>を発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-413">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="6dbec-414">直前の親。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-414">The previous parent.</span>
          </span>
          <span data-ttu-id="6dbec-415">
            <see cref="T:System.Windows.DependencyObject" /> の直前の親が存在しない場合は null に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-415">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6dbec-416">ウィンドウの親が変更されると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-416">Called when the parent of the window is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-417">このウィンドウがオーナー ウィンドウとなっているウィンドウのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-417">Gets a collection of windows for which this window is the owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-418">このウィンドウがオーナー ウィンドウとなっているウィンドウへの参照を含む <see cref="T:System.Windows.WindowCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-418">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-419">所有されているウィンドウは 1 つ持つ<xref:System.Windows.Window.Owner%2A>プロパティは、オーナー ウィンドウと呼ばれる別のウィンドウへの参照。</span><span class="sxs-lookup"><span data-stu-id="6dbec-419">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="6dbec-420">列挙することができますをオーナー ウィンドウが所有するすべてのウィンドウを検索する<xref:System.Windows.WindowCollection>によって返される、<xref:System.Windows.Window.OwnedWindows%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-420">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-421">次の例は、列挙する方法を示しています。<xref:System.Windows.Window.OwnedWindows%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-421">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-422">この <see cref="T:System.Windows.Window" /> を所有する <see cref="T:System.Windows.Window" /> を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-422">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-423">この <see cref="T:System.Windows.Window" /> のオーナー ウィンドウを表す <see cref="T:System.Windows.Window" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-423">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-424">呼び出して親ウィンドウによって子ウィンドウが開かれたときに<xref:System.Windows.Window.ShowDialog%2A>親と子の両方のウィンドウ間の暗黙的なリレーションシップが確立します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-424">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="6dbec-425">このリレーションシップは、最小限に抑え、最大限に高めること、および復元するに関してなど、特定の動作を適用します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-425">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="6dbec-426">呼び出して親ウィンドウによって子ウィンドウが作成されたときに<xref:System.Windows.Window.Show%2A>、ただし、子ウィンドウには、親ウィンドウとの関係はありません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-426">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="6dbec-427">これによって、次のことが起こります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-427">This means that:</span></span>  
  
-   <span data-ttu-id="6dbec-428">子ウィンドウには、親ウィンドウへの参照がありません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-428">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="6dbec-429">子ウィンドウの動作は、親ウィンドウの動作に依存しません。いずれかのウィンドウは、その他を含めることができます。 または最小限に抑える、最大化し、他方とは無関係に復元します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-429">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="6dbec-430">子ウィンドウと、親ウィンドウの間のリレーションシップを作成できるようにする<xref:System.Windows.Window>所有権の概念をサポートします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-430">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="6dbec-431">所有権が確立されるときに、<xref:System.Windows.Window.Owner%2A>ウィンドウ (所有しているウィンドウ) のプロパティは、別のウィンドウ (オーナー ウィンドウ) への参照で設定されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-431">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="6dbec-432">このリレーションシップが確立されると、次の動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-432">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="6dbec-433">オーナー ウィンドウが最小化されている場合、所有されているすべての windows も最小化します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-433">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="6dbec-434">所有されているウィンドウを最小化されている場合、その所有者は最小化されません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-434">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="6dbec-435">オーナー ウィンドウを最大表示している場合は、オーナー ウィンドウと、所有されている windows の両方が復元されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-435">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="6dbec-436">オーナー ウィンドウでは、所有されているウィンドウをカバーできることはありません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-436">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="6dbec-437">使用していない開いているウィンドウを所有している<xref:System.Windows.Window.ShowDialog%2A>モーダルではありません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-437">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="6dbec-438">ユーザーは、オーナー ウィンドウと対話できることができます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-438">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="6dbec-439">オーナー ウィンドウを閉じると、所有されるウィンドウも閉じます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-439">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="6dbec-440">ウィンドウでその所有者によって所有されているウィンドウが開かれたかどうか<xref:System.Windows.Window.Show%2A>、および所有者は、ウィンドウが閉じられる、所有されているウィンドウの<xref:System.Windows.Window.Closing>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-440">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="6dbec-441">呼び出して子ウィンドウを開くと<xref:System.Windows.Window.ShowDialog%2A>も設定する必要があります、<xref:System.Windows.Window.Owner%2A>子ウィンドウのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-441">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="6dbec-442">ない場合は、ユーザーことはできません、タスク バー ボタンを押して子ウィンドウと親ウィンドウの両方を復元します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-442">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="6dbec-443">タスク バー ボタンを押してして; を選択し、子と親の両方 ウィンドウなど、windows のリストを生成する代わりに、選択した期間のみが復元されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-443">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6dbec-444">設定することも必要があります、<xref:System.Windows.Window.Owner%2A>プロパティを呼び出しているが開かれているウィンドウを<xref:System.Windows.Window.ShowDialog%2A>と動作が正しいことを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-444">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-445">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-445">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-446">次の例では、所有者/所有関係を確立する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-446">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6dbec-447">ウィンドウがそのウィンドウ自体を所有しようとしています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-447">A window tries to own itself</span>
          </span>
          <span data-ttu-id="6dbec-448">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-448">-or-</span>
          </span>
          <span data-ttu-id="6dbec-449">2 つのウィンドウが相互に所有しようとしています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-449">Two windows try to own each other.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-450">
            <see cref="P:System.Windows.Window.Owner" /> プロパティが、表示されているウィンドウで <see cref="M:System.Windows.Window.ShowDialog" /> を使用して設定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-450">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span>
          </span>
          <span data-ttu-id="6dbec-451">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-451">-or-</span>
          </span>
          <span data-ttu-id="6dbec-452">
            <see cref="P:System.Windows.Window.Owner" /> プロパティが、まだ表示されていないウィンドウに設定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-452">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-453">すべての windows とユーザー入力イベントを制限なく使用する権限です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-453">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="6dbec-454">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-454">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-455">サイズ変更モードを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-455">Gets or sets the resize mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-456">サイズ変更モードを指定する <see cref="T:System.Windows.ResizeMode" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-456">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-457">次の 4 つのオプションがあります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-457">There are four options:</span></span>  
  
-   <span data-ttu-id="6dbec-458">**NoResize**です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-458">**NoResize**.</span></span> <span data-ttu-id="6dbec-459">ユーザー、ウィンドウ サイズを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-459">The user cannot resize the window.</span></span> <span data-ttu-id="6dbec-460">最大化し、最小化ボタンは表示されません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-460">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="6dbec-461">**CanMinimize**です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-461">**CanMinimize**.</span></span> <span data-ttu-id="6dbec-462">ユーザーは、ウィンドウを最小化され、タスク バーから復元することができますのみ。</span><span class="sxs-lookup"><span data-stu-id="6dbec-462">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="6dbec-463">[最小および最大化] ボックスは表示されますが、最小化ボックスのみが有効にします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-463">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="6dbec-464">**CanResize**です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-464">**CanResize**.</span></span> <span data-ttu-id="6dbec-465">ユーザーは、ウィンドウの周囲の最小と最大化ボタン、およびドラッグ可能なアウトラインを使用して、ウィンドウのサイズを変更する全権限を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-465">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="6dbec-466">[最小および最大化] ボックスが表示され、有効になっています。</span><span class="sxs-lookup"><span data-stu-id="6dbec-466">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="6dbec-467">(既定)。</span><span class="sxs-lookup"><span data-stu-id="6dbec-467">(Default).</span></span>  
  
-   <span data-ttu-id="6dbec-468">**CanResizeWithGrip**です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-468">**CanResizeWithGrip**.</span></span> <span data-ttu-id="6dbec-469">このオプションと同じ機能には<xref:System.Windows.ResizeMode.CanResize>がウィンドウの右下隅に「サイズ変更グリップ」を追加します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-469">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-470">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-470">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-471">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-471">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-472">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-472">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="6dbec-473">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-473">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-474">
            <see cref="P:System.Windows.Window.ResizeMode" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-474">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-475">最小化または最大化される前のウィンドウのサイズと位置を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-475">Gets the size and location of a window before being either minimized or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-476">最小化または最大化される前のウィンドウのサイズと位置を指定する <see cref="T:System.Windows.Rect" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-476">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-477">復元の四角形が最小化または最大化する前に、ウィンドウによって占有される領域です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-477">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="6dbec-478">使用することができます<xref:System.Windows.Window.RestoreBounds%2A>をアプリケーションを閉じる前に、最後のサイズとウィンドウの位置を保存し、次回のため、ユーザーの状態にする方法をウィンドウを復元するアプリケーションの起動時にそれらの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-478">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="6dbec-479">クエリを実行する場合<xref:System.Windows.Window.RestoreBounds%2A>ウィンドウが表示する前に、または閉じられた後<xref:System.Windows.Rect.Empty%2A>が返されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-479">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-480">ウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-480">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-481">次の例では<xref:System.Windows.Window.RestoreBounds%2A>およびウィンドウの位置とサイズは同じように、前回、ウィンドウが表示された場合と同様にストレージを分離します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-481">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-482">ウィンドウの位置とサイズを照会するアクセス許可の外接する四角形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-482">for permission to query for the size and location of a window's bounding rectangle.</span>
          </span>
          <span data-ttu-id="6dbec-483">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-483">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-484">ウィンドウを開き、開いたウィンドウが閉じるのを待機せずに制御を戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-484">Opens a window and returns without waiting for the newly opened window to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-485">ときに、<xref:System.Windows.Window>クラスをインスタンス化は既定では表示されません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-485">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="6dbec-486"><xref:System.Windows.Window.Show%2A> ウィンドウを表示し、終了するウィンドウを待たずにすぐを返します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-486"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="6dbec-487">その結果、開かれたウィンドウは、アプリケーションの他のウィンドウとの対話ユーザーを妨げません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-487">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="6dbec-488">この種類のウィンドウと呼ばれる、*モードレス*ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-488">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="6dbec-489">モードレスの windows の一般的な例は、[プロパティ] ウィンドウ、ツールボックス、およびパレットです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-489">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="6dbec-490">特定のウィンドウと対話するユーザーを制限するには、呼び出すことによって、ウィンドウを開いた<xref:System.Windows.Window.ShowDialog%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-490">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-491">呼び出しによって開かれたウィンドウ<xref:System.Windows.Window.Show%2A>はそれを開いているウィンドウとのリレーションシップを自動的には具体的には、開かれたウィンドウが認識していないどのウィンドウを開くことです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-491">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="6dbec-492">使用してこの関係を確立することができます、<xref:System.Windows.Window.Owner%2A>プロパティと管理を使用して、<xref:System.Windows.Window.OwnedWindows%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-492">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="6dbec-493">呼び出す<xref:System.Windows.Window.Show%2A>の設定と同じ結果を達成<xref:System.Windows.UIElement.Visibility%2A>のプロパティ、<xref:System.Windows.Window>オブジェクトを<xref:System.Windows.Visibility.Visible>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-493">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="6dbec-494">ただし、タイミングの観点から 2 つの差があります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-494">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="6dbec-495">呼び出す<xref:System.Windows.Window.Show%2A>にした場合のみを返す同期操作は、<xref:System.Windows.FrameworkElement.Loaded>子ウィンドウのイベントが発生しました。</span><span class="sxs-lookup"><span data-stu-id="6dbec-495">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="6dbec-496">設定<xref:System.Windows.UIElement.Visibility%2A>、ただし、非同期操作をすぐに返すには。</span><span class="sxs-lookup"><span data-stu-id="6dbec-496">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="6dbec-497">設定するときに<xref:System.Windows.UIElement.Visibility%2A>、ウィンドウのイベントを設定する前に登録する<xref:System.Windows.UIElement.Visibility%2A>は発生しません。 設定するメソッドが終了するまで<xref:System.Windows.UIElement.Visibility%2A>実行が完了しました。</span><span class="sxs-lookup"><span data-stu-id="6dbec-497">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-498">次の例では、モードレス ウィンドウを開く方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-498">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-499">閉じている途中 (<see cref="M:System.Windows.Window.Show" />) または閉じた (<see cref="E:System.Windows.Window.Closing" />) ウィンドウに対して <see cref="E:System.Windows.Window.Closed" /> が呼び出されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-499">
              <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-500">ウィンドウをアクティブ状態で初期表示するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-500">Gets or sets a value that indicates whether a window is activated when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-501">ウィンドウを初期表示するときにアクティブ化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-501">
              <see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6dbec-502">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-502">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-503">ときにウィンドウ、<xref:System.Windows.Window.ShowActivated%2A>プロパティに設定`false`が開くと、ウィンドウがアクティブでないと、その<xref:System.Windows.Window.Activated>イベントは、ユーザーが手動で選択して、ウィンドウを起動するまでは発生しません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-503">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="6dbec-504">ウィンドウを選択すると、後にアクティブにし、通常を非アクティブ化します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-504">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="6dbec-505">ウィンドウが開くときにアクティブ化されていることを防ぐため、<xref:System.Windows.Window.ShowActivated%2A>プロパティに設定する必要があります`false`ウィンドウが表示される前に (を呼び出して<xref:System.Windows.Window.Show%2A>) 以外の場合は設定<xref:System.Windows.Window.ShowActivated%2A>に`false`後、ウィンドウが表示される場合は、影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-505">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="6dbec-506">設定<xref:System.Windows.Window.ShowActivated%2A>に`false`を呼び出して、モーダルで開かれているウィンドウの<xref:System.Windows.Window.ShowDialog%2A>、実際の影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-506">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="6dbec-507">モーダル ウィンドウは有効になりませんが、モーダル ウィンドウは、他のアプリケーションの開いている windows のライセンス認証をユーザーをできなくなります。</span><span class="sxs-lookup"><span data-stu-id="6dbec-507">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-508">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-508">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-509">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-509">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="6dbec-510">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-510">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-511">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-511">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-512">次の例では、マークアップを使用してアクティブにすることがなく開かれるウィンドウを構成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-512">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="6dbec-513">次の例では、コードを使用してアクティブ化されているが開かれるウィンドウを構成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-513">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-514">
            <see cref="P:System.Windows.Window.ShowActivated" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-514">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-515">ウィンドウを開き、開いたウィンドウが閉じた場合にのみ制御を戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-515">Opens a window and returns only when the newly opened window is closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6dbec-516">アクティビティが受け入れられた (<see langword="true" />) か、取り消された (<see langword="false" />) かを示す <see cref="T:System.Nullable`1" /> 型の <see cref="T:System.Boolean" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-516">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span>
          </span>
          <span data-ttu-id="6dbec-517">この戻り値は、ウィンドウが閉じる前の <see cref="P:System.Windows.Window.DialogResult" /> プロパティの値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-517">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-518">ときに、<xref:System.Windows.Window>クラスをインスタンス化は既定では表示されません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-518">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="6dbec-519"><xref:System.Windows.Window.ShowDialog%2A> ウィンドウを示しています、アプリケーションでは、その他のすべての windows を無効にし、ウィンドウが閉じられたときにのみを返します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-519"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="6dbec-520">この種類のウィンドウと呼ばれる、*モーダル*ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-520">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="6dbec-521">モーダル ウィンドウは、ダイアログ ボックスとして、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-521">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="6dbec-522">ダイアログ ボックスは、特殊な種類のアプリケーション ファイルを開く、またはドキュメントの印刷などのタスクを実行するユーザーとの対話に使用するウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-522">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="6dbec-523">ダイアログ ボックスを受け入れるか、ダイアログ ボックスを閉じる前に、表示されているタスクを取り消すことよくようにします。</span><span class="sxs-lookup"><span data-stu-id="6dbec-523">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="6dbec-524"><xref:System.Windows.Window.ShowDialog%2A> 返します、 <xref:System.Nullable%601> <xref:System.Boolean>アクティビティが承認または取り消されたかどうかを指定する値。</span><span class="sxs-lookup"><span data-stu-id="6dbec-524"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="6dbec-525">この戻り値は、ウィンドウが閉じる前の <xref:System.Windows.Window.DialogResult%2A> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-525">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="6dbec-526">詳細については、「<xref:System.Windows.Window.DialogResult%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6dbec-526">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-527">呼び出しによって開かれたウィンドウ、<xref:System.Windows.Window.ShowDialog%2A>メソッドでは、開いているウィンドウとのリレーションシップが自動的がありません。 具体的には、開かれたウィンドウが認識していないどのウィンドウを開くことです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-527">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="6dbec-528">使用してこの関係を確立することができます、<xref:System.Windows.Window.Owner%2A>プロパティと管理を使用して、<xref:System.Windows.Window.OwnedWindows%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-528">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="6dbec-529">サポートする[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]オートメーション (を参照してください[UI オートメーションの概要](~/docs/framework/ui-automation/ui-automation-overview.md))、<xref:System.Windows.Window.Owner%2A>呼び出しによって開いたウィンドウを設定する必要があります<xref:System.Windows.Window.ShowDialog%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-529">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-530">ときに、モーダル[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]ウィンドウ (を呼び出して、ウィンドウが開かれた<xref:System.Windows.Window.ShowDialog%2A>) が閉じている場合にアクティブだったウィンドウが再アクティブ化します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-530">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="6dbec-531">場合、モーダル[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]ウィンドウがオーナー ウィンドウ (を参照してください<xref:System.Windows.Window.Owner%2A>)、オーナー ウィンドウが再アクティブ化したときに、モーダル[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]にアクティブだったウィンドウが場合を除いて、ウィンドウが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-531">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-532">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-532">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-533">次の例では、モーダル ウィンドウを開く方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-533">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6dbec-534">閉じている途中 (<see cref="M:System.Windows.Window.ShowDialog" />) または閉じた (<see cref="E:System.Windows.Window.Closing" />) ウィンドウに対して <see cref="E:System.Windows.Window.Closed" /> が呼び出されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-534">
              <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="6dbec-535">ウィンドウをアクティブ化する権限です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-535">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="6dbec-536">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-536">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-537">ウィンドウにタスク バー ボタンがあるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-537">Gets or sets a value that indicates whether the window has a task bar button.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-538">ウィンドウにタスク バー ボタンがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-538">
              <see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6dbec-539">ブラウザー内でウィンドウがホストされている場合は適用されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-539">Does not apply when the window is hosted in a browser.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-540">場合<xref:System.Windows.Window.ShowInTaskbar%2A>に設定されている`true`ウィンドウは、alt キーを押しながら TAB アプリケーションの選択リストにも表示されます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-540">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="6dbec-541">タスク バー ボタンと alt キーを押しながら TAB アプリケーションの選択リストの両方に使用されるアイコンがの値、<xref:System.Windows.Window.Icon%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-541">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-542">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-542">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-543">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-544">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-544">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="6dbec-545">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-546">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-546">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-547">
            <see cref="P:System.Windows.Window.ShowInTaskbar" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-547">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-548">ウィンドウのサイズがコンテンツのサイズに合わせて自動的に調整されるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-548">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-549">
            <see cref="T:System.Windows.SizeToContent" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-549">A <see cref="T:System.Windows.SizeToContent" /> value.</span>
          </span>
          <span data-ttu-id="6dbec-550">既定値は、<see cref="F:System.Windows.SizeToContent.Manual" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-550">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-551">ときに<xref:System.Windows.Window.SizeToContent%2A>に設定されている<xref:System.Windows.SizeToContent.WidthAndHeight>、いずれかの設定<xref:System.Windows.FrameworkElement.Height%2A>または<xref:System.Windows.FrameworkElement.Width%2A>は影響しませんが、両方のプロパティを設定することができます、以外の場合は、設定された値は、ウィンドウには適用されません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-551">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="6dbec-552">ときに<xref:System.Windows.Window.SizeToContent%2A>に設定されている<xref:System.Windows.SizeToContent.Height>、設定<xref:System.Windows.FrameworkElement.Height%2A>ウィンドウの高さを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="6dbec-553">ときに<xref:System.Windows.Window.SizeToContent%2A>に設定されている<xref:System.Windows.SizeToContent.Width>、設定<xref:System.Windows.FrameworkElement.Width%2A>ウィンドウの幅を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="6dbec-554">場合<xref:System.Windows.Window.SizeToContent%2A>以外の値を持つ<xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="6dbec-554">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="6dbec-555"><xref:System.Windows.Window.SizeToContent%2A> 自動的に設定されている<xref:System.Windows.SizeToContent.Manual>場合は、ユーザーは、サイズ変更グリップを使用して、境界線をドラッグするかによって、ウィンドウをサイズ変更します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-555"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="6dbec-556">により、ウィンドウ自体のサイズを変更する方法でコンテンツのサイズが変更された場合は<xref:System.Windows.FrameworkElement.SizeChanged>が発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-556">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="6dbec-557">ウィンドウが透過的な場合 (を参照してください<xref:System.Windows.Window.AllowsTransparency%2A>)、設定を考慮する必要があります<xref:System.Windows.Window.SizeToContent%2A>に<xref:System.Windows.SizeToContent.WidthAndHeight>ウィンドウが表示されているそのコンテンツを超えないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-557">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-558">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-558">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-559">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-559">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-560">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-560">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="6dbec-561">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-561">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-562">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-562">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6dbec-563">次の例は、設定する方法を示します、<xref:System.Windows.Window.SizeToContent%2A>コンテンツに合わせてウィンドウのサイズを変更する方法を指定するコード内のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-563">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-564">
            <see cref="P:System.Windows.Window.SizeToContent" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-564">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-565">このイベントは、[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] との相互運用をサポートするために発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-565">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          </span>
          <span data-ttu-id="6dbec-566">「<see cref="T:System.Windows.Interop.HwndSource" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-566">See <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-567">ウィンドウの <see cref="P:System.Windows.Window.WindowState" /> プロパティが変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-567">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-568">
            <see cref="T:System.Windows.Window" /> の [!INCLUDE[win7](~/includes/win7-md.md)] タスク バーのサムネイルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-568">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-569">
            <see cref="T:System.Windows.Window" /> の [!INCLUDE[win7](~/includes/win7-md.md)] タスク バーのサムネイル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-569">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-570">使用する方法についての詳細、[!INCLUDE[win7](~/includes/win7-md.md)]タスク バーのサムネイルを参照してください、<xref:System.Windows.Shell.TaskbarItemInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-570">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-571">
            <see cref="P:System.Windows.Window.TaskbarItemInfo" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-571">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-572">ウィンドウのタイトルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-572">Gets or sets a window's title.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-573">ウィンドウのタイトルを格納する <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-573">A <see cref="T:System.String" /> that contains the window's title.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-574">タイトル、 <xref:System.Windows.Window>、 <xref:System.Windows.Navigation.NavigationWindow>、または[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]を使用して設定することも<xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-574">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-575">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-575">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-576">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-576">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="6dbec-577">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-577">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-578">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-578">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-579">
            <see cref="P:System.Windows.Window.Title" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-579">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-580">ウィンドウの上端の位置を、デスクトップとの関係で取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-580">Gets or sets the position of the window's top edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-581">ウィンドウの上端の位置。単位は論理単位 (1/96 インチ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-581">The position of the window's top, in logical units (1/96").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-582">ときに、<xref:System.Windows.Window>が最大化または最小化、この値は、復元の上端のポイントを<xref:System.Windows.Window>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-582">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="6dbec-583">このプロパティは、スタイルを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-583">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="6dbec-584">値を指定しない場合<xref:System.Windows.Window.Top%2A>がシステムの既定値に設定します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-584">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="6dbec-585">設定して、システムの既定値を指定することも<xref:System.Windows.Window.Top%2A>に<xref:System.Double.NaN>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-585">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="6dbec-586">どちらも<xref:System.Double.NegativeInfinity>も<xref:System.Double.PositiveInfinity>の有効な値は、<xref:System.Windows.Window.Top%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-586">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-587">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-587">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-588">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-588">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-589">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-589">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="6dbec-590">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-590">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-591">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-591">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-592">ウィンドウが最上位 z オーダーで表示されるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-592">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-593">ウィンドウが最上位の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-593">
              <see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-594">ウィンドウが<xref:System.Windows.Window.Topmost%2A>プロパティに設定されている`true`すべてのウィンドウの上に表示される<xref:System.Windows.Window.Topmost%2A>プロパティに設定されます`false`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-594">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="6dbec-595">Windows のグループに<xref:System.Windows.Window.Topmost%2A>プロパティに設定されている`true`、現在アクティブになっているウィンドウが最上位ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-595">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="6dbec-596">同様を持つ windows のグループに対して<xref:System.Windows.Window.Topmost%2A>プロパティに設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-596">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-597">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-597">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-598">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-598">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-599">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-599">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="6dbec-600">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-600">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-601">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-601">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-602">
            <see cref="P:System.Windows.Window.Topmost" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-602">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-603">
            <see cref="P:System.Windows.Window.Top" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-603">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-604">最初に表示するときのウィンドウの位置を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-604">Gets or sets the position of the window when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-605">ウィンドウが最初に表示されたときの左上の位置を指定する <see cref="T:System.Windows.WindowStartupLocation" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-605">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span>
          </span>
          <span data-ttu-id="6dbec-606">既定値は、<see cref="F:System.Windows.WindowStartupLocation.Manual" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-606">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-607">設定<xref:System.Windows.WindowStartupLocation>に<xref:System.Windows.WindowStartupLocation.Manual>によってをに従って配置するウィンドウの<xref:System.Windows.Window.Left%2A>と<xref:System.Windows.Window.Top%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="6dbec-607">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="6dbec-608">どちらの場合、<xref:System.Windows.Window.Left%2A>または<xref:System.Windows.Window.Top%2A>プロパティが指定されていない、その値によって決まります[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-608">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)].</span></span>  
  
 <span data-ttu-id="6dbec-609">設定<xref:System.Windows.WindowStartupLocation.CenterScreen>によって、マウス カーソルを含む画面の中央に配置するウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="6dbec-609">Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="6dbec-610">設定<xref:System.Windows.WindowStartupLocation>に<xref:System.Windows.WindowStartupLocation.CenterOwner>によって、オーナー ウィンドウの中央に配置するウィンドウ (を参照してください<xref:System.Windows.Window.Owner%2A>) 指定されて 場合。</span><span class="sxs-lookup"><span data-stu-id="6dbec-610">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified.</span></span> <span data-ttu-id="6dbec-611">オーナー ウィンドウには、別の WPF ウィンドウまたは非 WPF ウィンドウのいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="6dbec-611">The owner window can be either another WPF window or a non-WPF window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-612">非 WPF windows での WPF ウィンドウの詳細については、次を参照してください。 [WPF および Win32 の相互運用](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)と<xref:System.Windows.Interop.WindowInteropHelper>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-612">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span>  
  
 <span data-ttu-id="6dbec-613">オーナー ウィンドウが指定されていないウィンドウの位置は同じ方法で決定されます。 として<xref:System.Windows.WindowStartupLocation>に設定されている<xref:System.Windows.WindowStartupLocation.Manual>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-613">If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-614">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティの値を取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-614">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-615">ウィンドウが元のサイズに戻されているか、最小化されているか、最大化されているかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-615">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-616">ウィンドウが元のサイズに戻されているか、最小化されているか、最大化されているかを判断する <see cref="T:System.Windows.WindowState" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-616">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span>
          </span>
          <span data-ttu-id="6dbec-617">既定値は、<see cref="F:System.Windows.WindowState.Normal" /> (元のサイズに戻されている) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-617">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-618">そのサイズと場所が格納されているウィンドウを最小化または最大化、前に<xref:System.Windows.Window.RestoreBounds%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-618">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="6dbec-619">値を使用してそのサイズと場所の値が復元されたウィンドウが復旧し次第、その後、<xref:System.Windows.Window.RestoreBounds%2A>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-619">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="6dbec-620">ときに、<xref:System.Windows.Window.WindowState%2A>プロパティを変更すると、<xref:System.Windows.Window.StateChanged>が発生します。</span><span class="sxs-lookup"><span data-stu-id="6dbec-620">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-621">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-621">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-622">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-622">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-623">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-623">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="6dbec-624">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-624">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-625">
            <see cref="P:System.Windows.Window.WindowState" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-625">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-626">ウィンドウの枠線のスタイルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-626">Gets or sets a window's border style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6dbec-627">ウィンドウの境界線スタイルを指定する <see cref="T:System.Windows.WindowStyle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-627">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span>
          </span>
          <span data-ttu-id="6dbec-628">既定値は、<see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-628">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6dbec-629"><xref:System.Windows.Window.WindowStyle%2A> いずれか、<xref:System.Windows.WindowStyle>列挙値を含む<xref:System.Windows.WindowStyle.None>、 <xref:System.Windows.WindowStyle.ToolWindow>、 <xref:System.Windows.WindowStyle.SingleBorderWindow> (既定)、および<xref:System.Windows.WindowStyle.ThreeDBorderWindow>です。</span><span class="sxs-lookup"><span data-stu-id="6dbec-629"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="6dbec-630">次の図は、上ウィンドウ スタイルを示します[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)](Windows Vista Aero テーマを有効になっている透明なガラス)。</span><span class="sxs-lookup"><span data-stu-id="6dbec-630">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="6dbec-631">![ウィンドウ スタイル](~/add/media/windowoverviewfigure6.PNG "ウィンドウ スタイル")</span><span class="sxs-lookup"><span data-stu-id="6dbec-631">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6dbec-632">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</span><span class="sxs-lookup"><span data-stu-id="6dbec-632">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="6dbec-633">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="6dbec-633">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="6dbec-634">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="6dbec-634">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="6dbec-635">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="6dbec-635">Metadata properties set to `true`</span></span>|<span data-ttu-id="6dbec-636">なし</span><span class="sxs-lookup"><span data-stu-id="6dbec-636">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6dbec-637">
            <see cref="P:System.Windows.Window.WindowStyle" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6dbec-637">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>