<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Window.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57fb443b6a52f587d274ec4a644c7ec8fd50eb8cf.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fb443b6a52f587d274ec4a644c7ec8fd50eb8cf</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Window">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
          <target state="translated">ウィンドウおよびダイアログ ボックスの作成、構成、表示、および有効期間の管理を可能にします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The point of interaction between a user and a standalone application is a window.</source>
          <target state="translated">ユーザーとスタンドアロンのアプリケーション間の相互作用のポイントは、ウィンドウです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window consists of two distinct areas:</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>ウィンドウは、2 つの領域で構成されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
          <target state="translated">アイコン、タイトル、システム メニューの windows の表示要素をホストする非クライアント領域は、最小化ボタン、ボタン、[復元] ボタン、閉じるボタン、および罫線を最大化します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A client area, which hosts application-specific content.</source>
          <target state="translated">アプリケーション固有のコンテンツをホストしているクライアント領域。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A standard window is shown in the following figure:</source>
          <target state="translated">次の図に、標準的なウィンドウが表示されます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ウィンドウ要素<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>ウィンドウ要素<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 作成、構成、表示、およびウィンドウおよびダイアログ ボックスの両方の有効期間を管理する機能をカプセル化し、次のキーのサービスを提供します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Lifetime Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>継続時間管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>、 <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>、 <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>、<ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ウィンドウ管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>、<ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></source>
          <target state="translated"><bpt id="p1">**</bpt>外観と動作<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>、 <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>、 <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>、 <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>、<ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Dialog Boxes<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ダイアログ ボックス<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes special support for managing all of the windows in an application:</source>
          <target state="translated">さらに、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>のすべてのアプリケーションでウィンドウを管理するための特別なサポートが公開します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Application maintains a list of all the windows that are currently instantiated in the application.</source>
          <target state="translated">アプリケーションでは、アプリケーションで現在インスタンス化されるすべてのウィンドウの一覧を保持します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This list is exposed by the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property.</source>
          <target state="translated">この一覧がによって公開されている、<ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> that is instantiated in an application.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>最初への参照で自動的に設定されている<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>がアプリケーションでインスタンス化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This thereby making the window the main application window.</source>
          <target state="translated">そのため、このウィンドウ アプリケーションのメイン ウィンドウです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be implemented using markup, markup and code-behind, or code.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>マークアップ、マークアップと分離コード、またはコードを使用して実装することができます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is primarily used to display windows and dialog boxes for standalone applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> windows およびスタンドアロン アプリケーションのダイアログ ボックスを表示する、主に使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> instead; <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> and extends it with browser-style navigation support.</source>
          <target state="translated">ただし、レベル、ウィンドウ、ウィザードなどのナビゲーションを必要とするアプリケーションを使用できます<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>代わりにします。<ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>から派生した<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>およびブラウザー スタイルのナビゲーションのサポートを拡張します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Islands of navigable content can be incorporated into other content and content containers using <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">使用して他のコンテンツおよびコンテンツのコンテナーにナビゲート可能なコンテンツのアイランドを組み込むことが<ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> needs <ph id="ph2">`UnmanagedCode`</ph> security permission to be instantiated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 必要な<ph id="ph2">`UnmanagedCode`</ph>インスタンス化するセキュリティのアクセス許可。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This has the following consequences:</source>
          <target state="translated">これは、次のような影響があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-展開されたスタンドアロンのアプリケーションは、インターネットまたはローカル イントラネット ゾーンから起動されたときに、アクセス許可の昇格を要求します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> 何も依頼未満の完全なアクセス許可では、ウィンドウやダイアログ ボックスのインスタンスを作成できません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.</source>
          <target state="translated">スタンドアロン アプリケーションの配置とセキュリティの考慮事項については、次を参照してください。 <bpt id="p1">[</bpt>WPF のセキュリティ方針 - プラットフォーム セキュリティ<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>は、 <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>、任意の型 (文字列、画像、パネルなど) の 1 つのオブジェクトに含めることを意味します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> クラスを参照してください。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a root element and, therefore, cannot be part of another element's content.</source>
          <target state="translated">また、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>はルート要素であり、そのため、別の要素のコンテンツの一部をすることはできません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties set on a <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> through a style will not be applied at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>に設定されたプロパティ、<ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph>スタイルでは適用されません実行時にします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Customizing the Window Control</source>
          <target state="translated">ウィンドウ コントロールのカスタマイズ</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To apply the same property settings to multiple <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> controls, use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
          <target state="translated">設定を適用する、同じプロパティを複数<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>、コントロールを使用して、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can modify the default <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to give the control a unique appearance.</source>
          <target state="translated">既定値を変更することができます<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>コントロールの外観を一意にします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information about creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">作成の詳細については、<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>を参照してください<bpt id="p1">[</bpt>、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To see the parts and states that are specific to the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>.</source>
          <target state="translated">部分とに固有の状態を表示する、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>を参照してください<bpt id="p1">[</bpt>ウィンドウ スタイルとテンプレート<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
          <target state="translated">コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
          <target state="translated">プロパティが既定のスタイルが設定されている場合は、アプリケーションでコントロールが表示されたら既定値から、プロパティが変更可能性があります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
          <target state="translated">既定のスタイルは、いるデスクトップ テーマによっては、アプリケーションが実行されている場合は使用が決定されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF テーマの既定の<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Setting a visual property will only have an effect if that property is both present in <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> control's default template and is set by using a .</source>
          <target state="translated">Visual プロパティの設定はのみに効果が場合、このプロパティは、両方に存在<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>コントロールの既定のテンプレートとを使用して設定をします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">「を変更する、Visual 構造の制御」 セクションで visual のプロパティの一覧を検索できる<bpt id="p1">[</bpt>、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only markup:</source>
          <target state="translated">次の例は、標準的なウィンドウのマークアップのみを使用して定義します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only code:</source>
          <target state="translated">コードのみを使用して標準のウィンドウを定義する方法を次の例。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using a combination of markup and code-behind.</source>
          <target state="translated">次の例は、標準的なウィンドウのマークアップと分離コードとの組み合わせを使用して定義します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties to their default <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> values.</source>
          <target state="translated">コンス トラクターは、 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>プロパティの既定値に<ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph>値。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>If a window is created within an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that has an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object, the constructor adds the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to the set of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-managed windows via the <ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">内で、ウィンドウを作成する場合、<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>を持つ、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>オブジェクトのコンス トラクターを追加、<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>オブジェクトのセットを<ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-経由で windows を管理、<ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>のプロパティ、<ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>for permission for this object to call unsafe native methods.</source>
          <target state="translated">安全でないネイティブ メソッドを呼び出すには、このオブジェクトのアクセスを許可します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source>Attempts to bring the window to the foreground and activates it.</source>
          <target state="translated">ウィンドウを前面にしてアクティブ化することを試みます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> was successfully activated; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> が正常にアクティブにされた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返します。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
          <target state="translated">使用されるものと同じウィンドウがアクティブかどうかを決定するルールは、 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph>関数 (User32.dll)。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>If the window is activated in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> event is raised.</source>
          <target state="translated">ウィンドウがアクティブ化する場合、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>ユーザーの前景色のアプリケーションではないアプリケーション<ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>for permission to activate a window.</source>
          <target state="translated">ウィンドウをアクティブ化する権限です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Activated">
          <source>Occurs when a window becomes the foreground window.</source>
          <target state="translated">ウィンドウがフォアグラウンド ウィンドウになったときに発生します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A window is activated (becomes the foreground window) when:</source>
          <target state="translated">ウィンドウがアクティブに (手前のウィンドウになります) とき。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>The window is first opened.</source>
          <target state="translated">ウィンドウを最初に開きます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
          <target state="translated">ユーザーは、alt キーを押しながら TAB キーを押す、マウスまたはタスク マネージャーからを選択して、ウィンドウに切り替わります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user clicks the window's taskbar button.</source>
          <target state="translated">ユーザーは、ウィンドウのタスク バー ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>Windows that need to detect when they become activate can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated">Windows ライセンス認証になることを検出する必要があるが処理できる、<ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">ウィンドウが初めてアクティブになった後に非アクティブ化し、その有効期間中に何度も再アクティブ化する可能性があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">検査できる場合は、アプリケーションの動作または状態のアクティブ化状態に依存する<ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>内にあるどのライセンス認証状態を判断します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>.</source>
          <target state="translated">アプリケーションがすることもできます<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
          <target state="translated">ウィンドウのクライアント領域が透過性をサポートするかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window supports transparency; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ウィンドウで透過性がサポートされる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a window is set to a transparent color, using <ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> for example, the window remains opaque.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>ウィンドウのプロパティが、透過的に設定を使用したカラー<ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>たとえば、ウィンドウの不透明なままです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
          <target state="translated">これは、デスクトップと、実行中のアプリケーション"beneath"、ウィンドウを表示できないことを意味します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>To enable this type of transparency, <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">この種類の透過性を有効にする<ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>に設定する必要があります<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> exists to facilitate the creation of non-rectangular windows, and, consequently, when <ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>, a window's <ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property must be set to <ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> 四角形以外の windows の作成を支援するが存在して、その結果、ときに<ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>に設定されている<ph id="ph3">`true`</ph>、ウィンドウの<ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph>プロパティに設定する必要があります<ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>A window that has a <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> value of anything other than <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 値が <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph> 以外に設定されたウィンドウ。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.AllowsTransparencyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the final size that the window should use to arrange itself and its children.</source>
          <target state="translated">ウィンドウがウィンドウ自体とその子を配置するために使用する、最終的なサイズを反映する <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>Override this method to arrange and size a window and its child elements.</source>
          <target state="translated">ウィンドウとその子要素を配置したり、サイズを設定したりするには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the actual size that was used.</source>
          <target state="translated">使用された実際のサイズを反映する <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> ときに呼び出されません、<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>プロパティの値を持つ<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is called.</source>
          <target state="translated">場合の値、<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>プロパティが、<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph>または<ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>、<ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>が呼び出される、<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>のプロパティ、<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>に設定されている<ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Close">
          <source>Manually closes a <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> を手動で閉じます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>のいくつかは、1 つを使用して閉じることがよく知られている、システム指定のメカニズムがそのなど、タイトル バーにあります。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>ALT+F4.</source>
          <target state="translated">ALT キーを押しながら F4 キー。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
          <target state="translated">システム メニュー &amp;#124; <bpt id="p1">**</bpt>閉じる<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated"><bpt id="p1">**</bpt>閉じる<ept id="p1">**</ept>ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>開発者から提供されているクライアント領域内のいくつかのよく知られたメカニズムのいずれかを使用して終了することもできます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
          <target state="translated"><bpt id="p1">**</bpt>ファイル<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>終了<ept id="p2">**</ept>メイン ウィンドウにします。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
          <target state="translated"><bpt id="p1">**</bpt>ファイル<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>閉じる<ept id="p2">**</ept>または<bpt id="p3">**</bpt>閉じる<ept id="p3">**</ept>子ウィンドウのボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, which automatically closes a window that was opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Ok<ept id="p1">**</ept>と<bpt id="p2">**</bpt>キャンセル<ept id="p2">**</ept> ダイアログ ボックスのボタンのでは開発者が提供したもが可能性は<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>、呼び出すことによって開かれたウィンドウを自動的に終了する<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>These mechanisms require you to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> to close a window.</source>
          <target state="translated">これらのメカニズムを必要とすると、明示的に呼び出す<ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>ウィンドウを閉じます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If a window, opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, and with a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> with its <ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
          <target state="translated">呼び出して、ウィンドウが開かれている場合<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>でその<ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph>ボタンをクリックするか、または esc キーが押されたときにプロパティが true に設定を自動的に閉じます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the window was opened using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> must be explicitly called, such as from <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">使用して、ウィンドウが開かれた場合<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>、ただし、<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>からなどの明示的に呼び出す必要があります<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>のイベント ハンドラー、<ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a window causes the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event to be raised.</source>
          <target state="translated">ウィンドウを閉じると、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event isn't canceled, the following occurs:</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>次のように、イベントがキャンセルされていません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph> (if an <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> object exists).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>から削除<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph>(場合、<ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph>オブジェクトが存在する)。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from the owner <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> if the owner/owned relationship was established before the owned <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> was shown and after the owner <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> was opened.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>所有者から削除されます<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>/所有した所有者のリレーションシップが確立された場合、所有する前に<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>が表示されたと所有者後<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>が開かれました。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> イベントが発生します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Unmanaged resources created by the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> are disposed.</source>
          <target state="translated">アンマネージ リソースによって作成された、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>に破棄されます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> was called to show the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>表示に対して呼び出された、 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>、<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>を返します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> causes any windows that it owns to be closed.</source>
          <target state="translated">閉じる、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>閉じなければを所有している任意の windows が発生します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Furthermore, closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may cause an application to stop running depending on how the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph> property is set.</source>
          <target state="translated">さらに、終了、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>方法に応じて実行を停止するアプリケーションが発生する可能性があります<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph>プロパティを設定します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The following example shows a <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> menu being handled to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>.</source>
          <target state="translated">次の例は、<bpt id="p1">**</bpt>ファイル<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>終了<ept id="p2">**</ept>を明示的に呼び出す処理されているメニュー<ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">すべての windows とユーザー入力イベントを制限なく使用する権限です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source>Occurs when the window is about to close.</source>
          <target state="translated">ウィンドウが閉じるときに発生します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closed">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
          <target state="translated">このイベントが発生した後、ウィンドウを閉じるを防ぐことはできません。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> が設定されているか、ウィンドウを閉じている間に <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>、または <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> が呼び出されました。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source>Occurs directly after <ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called, and can be handled to cancel window closure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> が呼び出された直後に発生します。これを処理して、ウィンドウが閉じるのをキャンセルすることができます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be handled to detect when a window is being closed (for example, when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> ウィンドウが閉じられるときを検出するために処理することができます (たとえば、<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>と呼びます)。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Furthermore, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be used to prevent a window from closing.</source>
          <target state="translated">さらに、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>ウィンドウが終了されないようにするために使用できます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>To prevent a window from closing, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">ウィンドウの終了を回避するのに設定することができます、<ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph>引数<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is raised when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベントが発生したときに<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>と呼ばれる場合は、ウィンドウの閉じるボタンがクリックされた場合、または alt キーを押しながら f4 キーを押す場合。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">ウィンドウでその所有者によって所有されているウィンドウが開かれたかどうか<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>、および所有者は、ウィンドウが閉じられる、所有されているウィンドウの<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベントは発生しません。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If the owner of a window is closed (see <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised on the owned window.</source>
          <target state="translated">ウィンドウの所有者が閉じている場合 (を参照してください<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)、<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>所有されるウィンドウでは発生しません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event for each window is raised.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>が呼び出されたが、<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>各ウィンドウのイベントが発生します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is canceled, cancellation is ignored.</source>
          <target state="translated">ただし場合、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>が取り消されると、キャンセルが無視されます。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If a session ends because a user logs off or shuts down, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised; handle <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> to implement code that cancels application closure.</source>
          <target state="translated">場合は、ユーザーがログオフまたはシャット ダウンするため、セッションが終了<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>は発生しません。 処理<ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>アプリケーションのクロージャをキャンセルするコードを実装します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">表示し、アプリケーションの有効期間中に複数回ウィンドウを非表示にして、ウィンドウのたびに再インスタンス化したくない場合は、これを表示する、処理することができます、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベント、キャンセルするか、および呼び出し、<ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to reopen it.</source>
          <target state="translated">その後、呼び出すことができます<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>それを再度開くには、同じインスタンスでします。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The following example demonstrates a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> that determines whether it needs user intervention to close.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>ユーザーの介入を閉じる必要があるかどうかを決定します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> が設定されているか、ウィンドウを閉じている間に <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>、または <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> が呼び出されました。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.ContentRendered">
          <source>Occurs after a window's content has been rendered.</source>
          <target state="translated">ウィンドウのコンテンツがレンダリングされた後に発生します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.ContentRendered">
          <source>If the window has no content, this event is not raised.</source>
          <target state="translated">コンテンツ ウィンドウがない場合は、このイベントは発生しません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Deactivated">
          <source>Occurs when a window becomes a background window.</source>
          <target state="translated">ウィンドウが背景ウィンドウになったときに発生します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A window is deactivated (becomes a background window) when:</source>
          <target state="translated">ウィンドウが非アクティブ化 (バック グラウンド ウィンドウになります) とき。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to another window in the current application.</source>
          <target state="translated">ユーザーは、現在のアプリケーションの別のウィンドウに切り替わります。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">ユーザーは、ALT + TAB キーを使用して、またはタスク マネージャーを使用して、別のアプリケーションでのウィンドウに切り替えます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user clicks the taskbar button for a window in another application.</source>
          <target state="translated">ユーザーは、別のアプリケーションでのウィンドウのタスク バー ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>Windows that need to detect when they become deactivated by handling the <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated">処理することにより、非アクティブになることを検出する必要がある Windows、<ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
          <target state="translated">ウィンドウが非アクティブ化された後最初を再アクティブ化し、その有効期間中に何度も非アクティブ化することがあります。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">検査できる場合は、アプリケーションの動作または状態のアクティブ化状態に依存する<ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>内にあるどのライセンス認証状態を判断します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>.</source>
          <target state="translated">アプリケーションがすることもできます<ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>Gets or sets the dialog result value, which is the value that is returned from the <ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> method.</source>
          <target state="translated">ダイアログ ボックスの結果値を取得または設定します。この値は、<ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> メソッドから返される値です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 型の <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph2">`true`</ph>) or canceled (<ph id="ph3">`false`</ph>) the dialog box.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> ユーザーが受け入れるかどうかを確認するダイアログ ボックスを表示するコードから使用できます (<ph id="ph2">`true`</ph>)、またはキャンセルされた (<ph id="ph3">`false`</ph>) ダイアログ ボックス。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
          <target state="translated">ダイアログ ボックスが受け入れられた場合は、ユーザーによって収集されたデータを取得し、それを処理するダイアログ ボックスを開いたコードにこのことを示します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
          <target state="translated">ダイアログ ボックスが取り消された場合ただし、このことを示しますコードの呼び出しを停止する、さらに処理します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>By default, a dialog box is canceled when a user does one of the following:</source>
          <target state="translated">既定では、ユーザーが実行すると、次のいずれかのダイアログ ボックスが取り消されました。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>PressesALT+F4.</source>
          <target state="translated">PressesALT ながら f4 キー。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">クリックする、<bpt id="p1">**</bpt>閉じる<ept id="p1">**</ept>ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
          <target state="translated">選択<bpt id="p1">**</bpt>閉じる<ept id="p1">**</ept>システム メニューからです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In all of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">このような場合は、のすべてのページで<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>は<ph id="ph2">`false`</ph>既定です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">ダイアログ ボックスは、通常、ボタンは、ダイアログ ボックスをキャンセルする特殊なボタンを提供します。 が<ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph>プロパティがに設定されている<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
          <target state="translated">このように構成されているボタンが押されたか、または ESC キーが押されたときにウィンドウは自動的に閉じる。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In either of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> remains <ph id="ph2">`false`</ph>.</source>
          <target state="translated">このような場合は、のいずれかで<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>まま<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box also typically provides an accept button, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">ダイアログ ボックスも通常のボタン、[accept] ボタンを提供しますが<ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will raise its <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when either it or the ENTER key is pressed.</source>
          <target state="translated">このように構成されているボタンを発生させるその<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>イベントか、ENTER キーが押されたときにします。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>However, it won't automatically close the dialog box, nor will it set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">ただし、ダイアログ ボックスに自動的に閉じないも設定されます<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>に<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You need to manually write this code, usually from the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the default button.</source>
          <target state="translated">このコードは、通常からする必要があります、<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>既定のボタンのイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> <ph id="ph2">`null`</ph>  ダイアログ ボックスが表示されている場合、承認済みでも処理が取り消されました。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>After a dialog box closes, you can get the dialog result from the value returned by <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method, or by inspecting the <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.</source>
          <target state="translated">によって返される値からダイアログの結果を取得するには、ダイアログ ボックスを閉じた後<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>メソッド、またはを調べることによって、<ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can only be set when a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> is opened by calling its <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> ときのみ設定可能、<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>を呼び出すことによって開くその<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The following example shows how to configure an OK button and a Cancel button to return the appropriate <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">次の例は、[ok] ボタンと [キャンセル] ボタンを返す、適切なを構成する方法を示しています。<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set before a window is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> を呼び出すことによってウィンドウが開かれる前に <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> が設定されます。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set on a window that is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> を呼び出すことによって開かれたウィンドウに <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> が設定されます。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.DpiChanged">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
          <target state="translated">Window が表示されている画面の DPI が変更されたあとに発生します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.DpiChangedEvent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> for when the DPI of the screen the Window is on changes.</source>
          <target state="translated">画面 Window の DPI が変更中であるときの <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
          <target state="translated">ウィンドウのクライアント領域の表示部分でマウスの左ボタンを押したままにすることにより、ウィンドウをドラッグできるようにします。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button must be down when <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">マウスの左ボタンがダウンする必要があります<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>One way to detect when the left mouse button is pressed is to handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event.</source>
          <target state="translated">マウスの左ボタンが押されたときを検出する方法の 1 つは処理する、<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>が呼び出されると、左側のウィンドウのクライアント領域の表示部分でマウス ボタンが押される必要があります。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The following example shows how to override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to call <ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>.</source>
          <target state="translated">次の例は、オーバーライドする方法を示します<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>を呼び出す<ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button is not down.</source>
          <target state="translated">マウスの左ボタンが押されていません。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>for permission to drag a window.</source>
          <target state="translated">アクセス権をウィンドウをドラッグします。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>The dependency object.</source>
          <target state="translated">依存関係オブジェクト。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>Returns a reference to the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that hosts the content tree within which the dependency object is located.</source>
          <target state="translated">依存関係オブジェクトが存在するコンテンツ ツリーをホストする <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> オブジェクトへの参照を返します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> reference to the host window.</source>
          <target state="translated">ホスト ウィンドウへの <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 参照。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> が null です。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source>Makes a window invisible.</source>
          <target state="translated">ウィンドウを非表示にします。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>A window is not closed when it is hidden, and neither the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> nor <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">非表示にされて、ときに、ウィンドウが閉じられていませんし、どちらも、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>も<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Instead, the window's <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">代わりに、ウィンドウの<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>プロパティに設定されている<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If a window is the application's <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> and the application's <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, the application does not shut down.</source>
          <target state="translated">ウィンドウを場合は、アプリケーションの<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>およびアプリケーションの<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>は<ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>アプリケーションはシャット ダウンしません。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
          <target state="translated">同様に、アプリケーションはシャット ダウンしませんウィンドウのみ ウィンドウで、アプリケーションのシャット ダウン モード場合<ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">複数回、アプリケーションの有効期間中にウィンドウを非表示にしたりするたびに、ウィンドウの再インスタンス化したくない場合を表示する、処理することができます、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベント、キャンセルするか、および呼び出し、<ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to re-open it.</source>
          <target state="translated">その後、呼び出すことができます<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>開き直す同じインスタンスにします。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">閉じている途中 (<ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph>) または閉じた (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) ウィンドウに対して <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> が呼び出されている。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Icon">
          <source>Gets or sets a window's icon.</source>
          <target state="translated">ウィンドウのアイコンを取得または設定します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> object that represents the icon.</source>
          <target state="translated">アイコンを表す <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> スタンドアロン アプリケーションでは、2 種類のアイコンがあります。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One assembly icon, which is specified by using the <ph id="ph1">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
          <target state="translated">1 つのアセンブリのアイコンを使用して指定されている、<ph id="ph1">`&lt;ApplicationIcon&gt;`</ph>アプリケーションのプロジェクト内のプロパティは、ファイルをビルドします。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This icon is used as the desktop icon for an assembly.</source>
          <target state="translated">このアイコンは、アセンブリのデスクトップ アイコンとして使用されます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
          <target state="translated">Visual Studio でのデバッグ時に、ホスト プロセスのため、アイコンが表示されません。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you run the executable, the icon will appear.</source>
          <target state="translated">実行可能ファイルを実行する場合は、アイコンが表示されます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>ホスト プロセス (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One icon per window that is specified by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.</source>
          <target state="translated">1 つのアイコンを設定して指定されているウィンドウごと<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
          <target state="translated">各ウィンドウのタイトル バー、タスク バー ボタン、およびその ALT TAB アプリケーション選択リストのエントリにこのアイコンが使用されます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window always displays an icon.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>ウィンドウには、常にアイコンが表示されます。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When one is not provided by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> chooses an icon to display based on the following rules:</source>
          <target state="translated">ときにいずれかの設定によって提供されていない<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>次のルールに基づいて表示するアイコンを選択します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Use the assembly icon, if specified.</source>
          <target state="translated">指定した場合は、アセンブリのアイコンを使用します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If the assembly icon is not specified, use the default <ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph> icon.</source>
          <target state="translated">アセンブリのアイコンが指定されていない場合は、既定値を使用して<ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph>アイコン。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to specify a custom window icon, you can restore the default application icon by setting <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to <ph id="ph3">`null`</ph>.</source>
          <target state="translated">使用する場合<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>カスタム ウィンドウ アイコンを指定するには、設定して既定のアプリケーション アイコンを戻すことができます<ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>に<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A single icon can be used in a variety of ways in <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
          <target state="translated">1 つのアイコンは、さまざまな方法で使用できます<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>ALT + タブが選択リストをファイルなどのウィンドウで、ウィンドウのタスク バーのタイトル バーに表示されています。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
          <target state="translated">これらの各サイズが異なりますを使用してアイコンが表示します。ALT + TAB ファイルの選択リストのサイズは 32 x 32 ピクセルのアイコンが表示されている間、ウィンドウのタイトル バーでは、タスク バーで、16 x 16 ピクセルのアイコンが表示されます。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
          <target state="translated">一部のアプリケーションと同様に<ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>、提供、<bpt id="p1">**</bpt>ビュー<ept id="p1">**</ept>メニューを表示するアイコンのサイズを選択することができます。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
          <target state="translated">さまざまな画面サイズに対応する、アイコン ファイルが 1 つまたは複数の実際アイコンを使用して、それぞれが特定のサイズや色深度を対象とするアイコンのバージョンを表すので構成されます。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
          <target state="translated">たとえば、1 つのアイコンのみがありますの 16 色は、1 つの 16 x 16 ピクセル アイコン、16 x 16 ピクセルと 16 色と 256 色の両方で 32 x 32 ピクセルのアイコンが含まれている可能性。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If icons for all possible sizes and color depths exist within an icon file, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> will use the appropriate icon.</source>
          <target state="translated">アイコン ファイル内のすべての使用可能なサイズと色深度を示すアイコンが存在する場合<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>該当するアイコンを使用します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If an icon file contains only a subset of all the possible icons, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
          <target state="translated">アイコン ファイルには、すべての可能なアイコンのサブセットのみが含まれている場合<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>サイズと色深度を減らすの順序で [次へ] の最適なアイコンを使用します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The result is that an icon will always be used by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, although the icon used may not target the required size and color depth.</source>
          <target state="translated">結果はアイコンが常にで使用される<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>に使用されるアイコンが必要なサイズや色深度を対象可能性がありますが、します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
          <target state="translated">たとえば、表示の場合、256 色で 32 x 32 ピクセルのアイコンとして 16 色の 16 x 16 ピクセルのアイコンを使用可能性があります。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
          <target state="translated">これは保たれますなどの視覚効果が望ましくない可能性がありますのすべての対象のサイズと色深度を示すアイコンを作成することで回避することがあります。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The following example shows how to set a window icon.</source>
          <target state="translated">次の例では、ウィンドウのアイコンを設定する方法を示します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>for permission to set the icon.</source>
          <target state="translated">アイコンを設定する権限です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IconProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.IsActive">
          <source>Gets a value that indicates whether the window is active.</source>
          <target state="translated">ウィンドウがアクティブかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ウィンドウがアクティブの場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
          <target state="translated">アクティブなウィンドウは、ユーザーの現在の前面のウィンドウで、フォーカスは、タイトル バーのアクティブな外観では表されます。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property.</source>
          <target state="translated">アクティブなウィンドウは明示的に設定されていないすべてのトップレベル ウィンドウの最上部にもなります、<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IsActiveProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Left">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
          <target state="translated">ウィンドウの左端の位置を、デスクトップとの関係で取得または設定します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
          <target state="translated">ウィンドウの左端の位置。単位は論理単位 (1/96 インチ)。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the left edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>が最大化または最小化、この値は、復元の左端のポイントを<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>This property cannot be set through a style.</source>
          <target state="translated">このプロパティは、スタイルを設定することはできません。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">値を指定しない場合<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>がシステムの既定値に設定します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">設定して、システムの既定値を指定することも<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>に<ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>.</source>
          <target state="translated">どちらも<ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>も<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>の有効な値は、<ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.LeftProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.LocationChanged">
          <source>Occurs when the window's location changes.</source>
          <target state="translated">ウィンドウの場所が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window's location changes when:</source>
          <target state="translated">ウィンドウの場所を変更時にします。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A user moves a window by dragging it with the window's title bar.</source>
          <target state="translated">ユーザーは、ウィンドウのタイトル バーをドラッグして、ウィンドウを移動します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window is moved after <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">後に、ウィンドウを移動<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property is set programmatically.</source>
          <target state="translated">いずれか、<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>プロパティをプログラムで設定します。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
          <target state="translated"><bpt id="p1">**</bpt>移動<ept id="p1">**</ept>ウィンドウのシステム メニューのメニュー項目を選択します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>プロパティを変更します。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.LogicalChildren">
          <source>Gets an enumerator for a window's logical child elements.</source>
          <target state="translated">ウィンドウの論理上の子要素に対する列挙子を取得します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.LogicalChildren">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> a window's logical child elements.</source>
          <target state="translated">ウィンドウの論理上の子要素に対する <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the available size that this window can give to the child.</source>
          <target state="translated">このウィンドウが子に提供できる有効なサイズを反映する <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
          <target state="translated">値として無限大を指定すると、ウィンドウのサイズをあらゆるコンテンツに合わせることができます。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Override this method to measure the size of a window.</source>
          <target state="translated">ウィンドウのサイズを測定するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
          <target state="translated">このウィンドウが、子のサイズの計算に基づいて、レイアウト時に必要だと判断するサイズを反映する <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> ときに呼び出されません、<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>プロパティの値を持つ<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is called.</source>
          <target state="translated">場合の値、<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>プロパティが、<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph>または<ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>、<ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>が呼び出される、<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>のプロパティ、<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>に設定されている<ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the old content tree.</source>
          <target state="translated">古いコンテンツ ツリーのルートへの参照。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the new content tree.</source>
          <target state="translated">新しいコンテンツ ツリーのルートへの参照。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>Called when the <ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> プロパティが変更されたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>Creates and returns a <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> に対応する <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> オブジェクトを作成して返します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> に対応する <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The previous DPI scale setting.</source>
          <target state="translated">以前の DPI スケール設定。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The new DPI scale setting.</source>
          <target state="translated">新規の DPI スケール設定。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>Called when the DPI at which this window is rendered changes.</source>
          <target state="translated">このウィンドウが表示される DPI が変更するときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">イベントのデータ。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> イベントが発生すると呼び出されます。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>This implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event data.</source>
          <target state="translated">この実装では、処理済みの状態は変更されません (、<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph>プロパティ) の<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>イベント データ。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>If you override <ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>, always call the base implementation in your <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph> implementation.</source>
          <target state="translated">オーバーライドする場合は<ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>、常の基本実装を呼び出す、<ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</source>
          <target state="translated">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性がありますイベントを処理できなくなります。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>You can call the base implementation either before or after your special handling, depending on your requirements.</source>
          <target state="translated">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The previous parent.</source>
          <target state="translated">直前の親。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Set to null if the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> did not have a previous parent.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> の直前の親が存在しない場合は null に設定されます。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Called when the parent of the window is changed.</source>
          <target state="translated">ウィンドウの親が変更されると呼び出されます。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.OwnedWindows">
          <source>Gets a collection of windows for which this window is the owner.</source>
          <target state="translated">このウィンドウがオーナー ウィンドウとなっているウィンドウのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph> that contains references to the windows for which this window is the owner.</source>
          <target state="translated">このウィンドウがオーナー ウィンドウとなっているウィンドウへの参照を含む <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>An owned window is one whose <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property is set with a reference to another window, which is known as the owner window.</source>
          <target state="translated">所有されているウィンドウは 1 つ持つ<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>プロパティは、オーナー ウィンドウと呼ばれる別のウィンドウへの参照。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>To find all the windows that an owner window owns, you can enumerate <ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">列挙することができますをオーナー ウィンドウが所有するすべてのウィンドウを検索する<ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>The following example shows how to enumerate <ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>.</source>
          <target state="translated">次の例は、列挙する方法を示しています。<ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> that owns this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> を所有する <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that represents the owner of this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> のオーナー ウィンドウを表す <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is opened by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, an implicit relationship is established between both parent and child window.</source>
          <target state="translated">呼び出して親ウィンドウによって子ウィンドウが開かれたときに<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>親と子の両方のウィンドウ間の暗黙的なリレーションシップが確立します。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
          <target state="translated">このリレーションシップは、最小限に抑え、最大限に高めること、および復元するに関してなど、特定の動作を適用します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is created by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, the child window does not have a relationship with the parent window.</source>
          <target state="translated">呼び出して親ウィンドウによって子ウィンドウが作成されたときに<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>、ただし、子ウィンドウには、親ウィンドウとの関係はありません。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This means that:</source>
          <target state="translated">これによって、次のことが起こります。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The child window does not have a reference to the parent window.</source>
          <target state="translated">子ウィンドウには、親ウィンドウへの参照がありません。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
          <target state="translated">子ウィンドウの動作は、親ウィンドウの動作に依存しません。いずれかのウィンドウは、その他を含めることができます。 または最小限に抑える、最大化し、他方とは無関係に復元します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>To allow you to create a relationship between a child window and a parent window, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> supports the notion of ownership.</source>
          <target state="translated">子ウィンドウと、親ウィンドウの間のリレーションシップを作成できるようにする<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>所有権の概念をサポートします。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Ownership is established when the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of a window (the owned window) is set with a reference to another window (the owner window).</source>
          <target state="translated">所有権が確立されるときに、<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>ウィンドウ (所有しているウィンドウ) のプロパティは、別のウィンドウ (オーナー ウィンドウ) への参照で設定されます。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Once this relationship is established, the following behaviors are exhibited:</source>
          <target state="translated">このリレーションシップが確立されると、次の動作が発生します。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is minimized, all its owned windows are minimized as well.</source>
          <target state="translated">オーナー ウィンドウが最小化されている場合、所有されているすべての windows も最小化します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window is minimized, its owner is not minimized.</source>
          <target state="translated">所有されているウィンドウを最小化されている場合、その所有者は最小化されません。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is maximized, both the owner window and its owned windows are restored.</source>
          <target state="translated">オーナー ウィンドウを最大表示している場合は、オーナー ウィンドウと、所有されている windows の両方が復元されます。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>An owner window can never cover an owned window.</source>
          <target state="translated">オーナー ウィンドウでは、所有されているウィンドウをカバーできることはありません。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Owned windows that were not opened using <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are not modal.</source>
          <target state="translated">使用していない開いているウィンドウを所有している<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>モーダルではありません。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The user can still interact with the owner window.</source>
          <target state="translated">ユーザーは、オーナー ウィンドウと対話できることができます。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you close an owner window, its owned windows are also closed.</source>
          <target state="translated">オーナー ウィンドウを閉じると、所有されるウィンドウも閉じます。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">ウィンドウでその所有者によって所有されているウィンドウが開かれたかどうか<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>、および所有者は、ウィンドウが閉じられる、所有されているウィンドウの<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベントは発生しません。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When you open a child window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, you should also set the <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the child window.</source>
          <target state="translated">呼び出して子ウィンドウを開くと<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>も設定する必要があります、<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>子ウィンドウのプロパティです。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
          <target state="translated">ない場合は、ユーザーことはできません、タスク バー ボタンを押して子ウィンドウと親ウィンドウの両方を復元します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
          <target state="translated">タスク バー ボタンを押してして; を選択し、子と親の両方 ウィンドウなど、windows のリストを生成する代わりに、選択した期間のみが復元されます。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You should also set the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property on a window that that is opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> to ensure correct behavior with .</source>
          <target state="translated">設定することも必要があります、<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>プロパティを呼び出しているが開かれているウィンドウを<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>と動作が正しいことを確認します。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The following example shows how to establish the owner/owned relationship.</source>
          <target state="translated">次の例では、所有者/所有関係を確立する方法を示します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>A window tries to own itself</source>
          <target state="translated">ウィンドウがそのウィンドウ自体を所有しようとしています。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Two windows try to own each other.</source>
          <target state="translated">2 つのウィンドウが相互に所有しようとしています。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set on a visible window shown using <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> プロパティが、表示されているウィンドウで <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> を使用して設定されています。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set with a window that has not been previously shown.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> プロパティが、まだ表示されていないウィンドウに設定されています。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">すべての windows とユーザー入力イベントを制限なく使用する権限です。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ResizeMode">
          <source>Gets or sets the resize mode.</source>
          <target state="translated">サイズ変更モードを取得または設定します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> value specifying the resize mode.</source>
          <target state="translated">サイズ変更モードを指定する <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>There are four options:</source>
          <target state="translated">次の 4 つのオプションがあります。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user cannot resize the window.</source>
          <target state="translated">ユーザー、ウィンドウ サイズを変更することはできません。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Maximize and Minimize boxes are not shown.</source>
          <target state="translated">最大化し、最小化ボタンは表示されません。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
          <target state="translated">ユーザーは、ウィンドウを最小化され、タスク バーから復元することができますのみ。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
          <target state="translated">[最小および最大化] ボックスは表示されますが、最小化ボックスのみが有効にします。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
          <target state="translated">ユーザーは、ウィンドウの周囲の最小と最大化ボタン、およびドラッグ可能なアウトラインを使用して、ウィンドウのサイズを変更する全権限を持ちます。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
          <target state="translated">[最小および最大化] ボックスが表示され、有効になっています。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>(Default).</source>
          <target state="translated">(既定)。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>This option has the same functionality as <ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, but adds a "resize grip" to the lower right corner of the window.</source>
          <target state="translated">このオプションと同じ機能には<ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>がウィンドウの右下隅に「サイズ変更グリップ」を追加します。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ResizeModeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.RestoreBounds">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">最小化または最大化される前のウィンドウのサイズと位置を取得します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> that specifies the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">最小化または最大化される前のウィンドウのサイズと位置を指定する <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
          <target state="translated">復元の四角形が最小化または最大化する前に、ウィンドウによって占有される領域です。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
          <target state="translated">使用することができます<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>をアプリケーションを閉じる前に、最後のサイズとウィンドウの位置を保存し、次回のため、ユーザーの状態にする方法をウィンドウを復元するアプリケーションの起動時にそれらの値を取得します。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>If you query <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> before the window has been shown or after it has been closed, <ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> is returned.</source>
          <target state="translated">クエリを実行する場合<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>ウィンドウが表示する前に、または閉じられた後<ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You cannot get this property when a window is hosted in a browser.</source>
          <target state="translated">ウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</source>
          <target state="translated">次の例では<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>およびウィンドウの位置とサイズは同じように、前回、ウィンドウが表示された場合と同様にストレージを分離します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>for permission to query for the size and location of a window's bounding rectangle.</source>
          <target state="translated">ウィンドウの位置とサイズを照会するアクセス許可の外接する四角形。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
          <target state="translated">ウィンドウを開き、開いたウィンドウが閉じるのを待機せずに制御を戻します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>クラスをインスタンス化は既定では表示されません。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> shows a window and returns immediately, without waiting for the window to be closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> ウィンドウを表示し、終了するウィンドウを待たずにすぐを返します。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
          <target state="translated">その結果、開かれたウィンドウは、アプリケーションの他のウィンドウとの対話ユーザーを妨げません。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
          <target state="translated">この種類のウィンドウと呼ばれる、<bpt id="p1">*</bpt>モードレス<ept id="p1">*</ept>ウィンドウです。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
          <target state="translated">モードレスの windows の一般的な例は、[プロパティ] ウィンドウ、ツールボックス、およびパレットです。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">特定のウィンドウと対話するユーザーを制限するには、呼び出すことによって、ウィンドウを開いた<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>A window that is opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">呼び出しによって開かれたウィンドウ<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>はそれを開いているウィンドウとのリレーションシップを自動的には具体的には、開かれたウィンドウが認識していないどのウィンドウを開くことです。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">使用してこの関係を確立することができます、<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>プロパティと管理を使用して、<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> achieves the same end result as setting <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to <ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>の設定と同じ結果を達成<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>のプロパティ、<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>オブジェクトを<ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>However, there is a difference between the two from a timing perspective.</source>
          <target state="translated">ただし、タイミングの観点から 2 つの差があります。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a synchronous operation that returns only after the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on the child window has been raised:</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>にした場合のみを返す同期操作は、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>子ウィンドウのイベントが発生しました。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, however, is an asynchronous operation that returns immediately:</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>、ただし、非同期操作をすぐに返すには。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, any window events you register before you set <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> may not be raised until after the method in which you set <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> has completed execution.</source>
          <target state="translated">設定するときに<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>、ウィンドウのイベントを設定する前に登録する<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>は発生しません。 設定するメソッドが終了するまで<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>実行が完了しました。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>The following sample demonstrates how to open a modeless window.</source>
          <target state="translated">次の例では、モードレス ウィンドウを開く方法を示します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">閉じている途中 (<ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>) または閉じた (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) ウィンドウに対して <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> が呼び出されている。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowActivated">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
          <target state="translated">ウィンドウをアクティブ状態で初期表示するかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a window is activated when first shown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ウィンドウを初期表示するときにアクティブ化する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>When a window with its <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property set to <ph id="ph2">`false`</ph> is opened, the window is not activated and its <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised until a user manually activates the window by selecting it.</source>
          <target state="translated">ときにウィンドウ、<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>プロパティに設定<ph id="ph2">`false`</ph>が開くと、ウィンドウがアクティブでないと、その<ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph>イベントは、ユーザーが手動で選択して、ウィンドウを起動するまでは発生しません。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>After the window is selected, it activates and deactivates normally.</source>
          <target state="translated">ウィンドウを選択すると、後にアクティブにし、通常を非アクティブ化します。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>To prevent a window from being activated when it opens, the <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property must be set to <ph id="ph2">`false`</ph> before the window is shown (by calling <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); setting <ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph5">`false`</ph> after a window is shown has no effect.</source>
          <target state="translated">ウィンドウが開くときにアクティブ化されていることを防ぐため、<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>プロパティに設定する必要があります<ph id="ph2">`false`</ph>ウィンドウが表示される前に (を呼び出して<ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>) 以外の場合は設定<ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>に<ph id="ph5">`false`</ph>後、ウィンドウが表示される場合は、影響を与えません。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a window that is opened modally, by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, has no real impact.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>に<ph id="ph2">`false`</ph>を呼び出して、モーダルで開かれているウィンドウの<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>、実際の影響を与えません。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
          <target state="translated">モーダル ウィンドウは有効になりませんが、モーダル ウィンドウは、他のアプリケーションの開いている windows のライセンス認証をユーザーをできなくなります。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use markup to configure a window to be opened without being activated.</source>
          <target state="translated">次の例では、マークアップを使用してアクティブにすることがなく開かれるウィンドウを構成する方法を示します。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use code to configure a window to be opened without it being activated.</source>
          <target state="translated">次の例では、コードを使用してアクティブ化されているが開かれるウィンドウを構成する方法を示します。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowActivatedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
          <target state="translated">ウィンドウを開き、開いたウィンドウが閉じた場合にのみ制御を戻します。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> that specifies whether the activity was accepted (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) or canceled (<ph id="ph4">&lt;see langword="false" /&gt;</ph>).</source>
          <target state="translated">アクティビティが受け入れられた (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) か、取り消された (<ph id="ph4">&lt;see langword="false" /&gt;</ph>) かを示す <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 型の <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> property before a window closes.</source>
          <target state="translated">この戻り値は、ウィンドウが閉じる前の <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> プロパティの値です。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>クラスをインスタンス化は既定では表示されません。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> ウィンドウを示しています、アプリケーションでは、その他のすべての windows を無効にし、ウィンドウが閉じられたときにのみを返します。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
          <target state="translated">この種類のウィンドウと呼ばれる、<bpt id="p1">*</bpt>モーダル<ept id="p1">*</ept>ウィンドウです。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Modal windows are primarily used as dialog boxes.</source>
          <target state="translated">モーダル ウィンドウは、ダイアログ ボックスとして、主に使用されます。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
          <target state="translated">ダイアログ ボックスは、特殊な種類のアプリケーション ファイルを開く、またはドキュメントの印刷などのタスクを実行するユーザーとの対話に使用するウィンドウです。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
          <target state="translated">ダイアログ ボックスを受け入れるか、ダイアログ ボックスを閉じる前に、表示されているタスクを取り消すことよくようにします。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that specifies whether the activity was accepted or canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 返します、 <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> <ph id="ph3">&lt;xref:System.Boolean&gt;</ph>アクティビティが承認または取り消されたかどうかを指定する値。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property before a window closes.</source>
          <target state="translated">この戻り値は、ウィンドウが閉じる前の <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> プロパティの値です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A window that is opened by calling the <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">呼び出しによって開かれたウィンドウ、<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>メソッドでは、開いているウィンドウとのリレーションシップが自動的がありません。 具体的には、開かれたウィンドウが認識していないどのウィンドウを開くことです。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">使用してこの関係を確立することができます、<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>プロパティと管理を使用して、<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> must be set for a window opened by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">サポートする<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>オートメーション (を参照してください<bpt id="p1">[</bpt>UI オートメーションの概要<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>)、<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>呼び出しによって開いたウィンドウを設定する必要があります<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window (a window opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) is closed, the previously activated window is reactivated.</source>
          <target state="translated">ときに、モーダル<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>ウィンドウ (を呼び出して、ウィンドウが開かれた<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) が閉じている場合にアクティブだったウィンドウが再アクティブ化します。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window has an owner window (see <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), the owner window is not reactivated when the modal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window is closed unless it was the previously activated window.</source>
          <target state="translated">場合、モーダル<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>ウィンドウがオーナー ウィンドウ (を参照してください<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)、オーナー ウィンドウが再アクティブ化したときに、モーダル<ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>にアクティブだったウィンドウが場合を除いて、ウィンドウが閉じられます。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The following sample demonstrates how to open a modal window.</source>
          <target state="translated">次の例では、モーダル ウィンドウを開く方法を示します。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">閉じている途中 (<ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>) または閉じた (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) ウィンドウに対して <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> が呼び出されている。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>for permission to activate a window.</source>
          <target state="translated">ウィンドウをアクティブ化する権限です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
          <target state="translated">ウィンドウにタスク バー ボタンがあるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window has a task bar button; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ウィンドウにタスク バー ボタンがある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Does not apply when the window is hosted in a browser.</source>
          <target state="translated">ブラウザー内でウィンドウがホストされている場合は適用されません。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>に設定されている<ph id="ph2">`true`</ph>ウィンドウは、alt キーを押しながら TAB アプリケーションの選択リストにも表示されます。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> property.</source>
          <target state="translated">タスク バー ボタンと alt キーを押しながら TAB アプリケーションの選択リストの両方に使用されるアイコンがの値、<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowInTaskbarProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.SizeToContent">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
          <target state="translated">ウィンドウのサイズがコンテンツのサイズに合わせて自動的に調整されるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, setting either <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>、いずれかの設定<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>または<ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>は影響しませんが、両方のプロパティを設定することができます、以外の場合は、設定された値は、ウィンドウには適用されません。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> does not change the height of the window.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>、設定<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>ウィンドウの高さを変更することはできません。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> does not change the width of the window.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>、設定<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>ウィンドウの幅を変更することはできません。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> has a value other than <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>以外の値を持つ<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is automatically set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> if a user resizes the window by using the resize grip or dragging the border.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 自動的に設定されている<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>場合は、ユーザーは、サイズ変更グリップを使用して、境界線をドラッグするかによって、ウィンドウをサイズ変更します。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If the size of the content changes in a way that causes the window to resize itself, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> is raised.</source>
          <target state="translated">により、ウィンドウ自体のサイズを変更する方法でコンテンツのサイズが変更された場合は<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph>が発生します。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If a window is transparent (see <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), you should consider setting <ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> to ensure the window is no larger than its visible content.</source>
          <target state="translated">ウィンドウが透過的な場合 (を参照してください<ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>)、設定を考慮する必要があります<ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>に<ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>ウィンドウが表示されているそのコンテンツを超えないことを確認します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property in code to specify how a window resizes to fit its content.</source>
          <target state="translated">次の例は、設定する方法を示します、<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>コンテンツに合わせてウィンドウのサイズを変更する方法を指定するコード内のプロパティです。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.SizeToContentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>.</source>
          <target state="translated">このイベントは、<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> との相互運用をサポートするために発生します。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.StateChanged">
          <source>Occurs when the window's <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> property changes.</source>
          <target state="translated">ウィンドウの <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> プロパティが変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> の <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> タスク バーのサムネイルを取得または設定します。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> の <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> タスク バーのサムネイル。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail, see the <ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> class.</source>
          <target state="translated">使用する方法についての詳細、<ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph>タスク バーのサムネイルを参照してください、<ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TaskbarItemInfoProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Title">
          <source>Gets or sets a window's title.</source>
          <target state="translated">ウィンドウのタイトルを取得または設定します。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the window's title.</source>
          <target state="translated">ウィンドウのタイトルを格納する <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>The title of a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, or <ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using <ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">タイトル、 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>、または<ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>を使用して設定することも<ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TitleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Top">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
          <target state="translated">ウィンドウの上端の位置を、デスクトップとの関係で取得または設定します。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>The position of the window's top, in logical units (1/96").</source>
          <target state="translated">ウィンドウの上端の位置。単位は論理単位 (1/96 インチ)。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the top edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>が最大化または最小化、この値は、復元の上端のポイントを<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>This property cannot be set through a style.</source>
          <target state="translated">このプロパティは、スタイルを設定することはできません。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">値を指定しない場合<ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>がシステムの既定値に設定します。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">設定して、システムの既定値を指定することも<ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>に<ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>.</source>
          <target state="translated">どちらも<ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>も<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>の有効な値は、<ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Topmost">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
          <target state="translated">ウィンドウが最上位 z オーダーで表示されるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is topmost; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ウィンドウが最上位の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>A window whose <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> appears above all windows whose <ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> properties are set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">ウィンドウが<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`true`</ph>すべてのウィンドウの上に表示される<ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>プロパティに設定されます<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>In the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the window that is currently activated is the topmost window.</source>
          <target state="translated">Windows のグループに<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`true`</ph>、現在アクティブになっているウィンドウが最上位ウィンドウです。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Likewise for the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">同様を持つ windows のグループに対して<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopmostProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Gets or sets the position of the window when first shown.</source>
          <target state="translated">最初に表示するときのウィンドウの位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> value that specifies the top/left position of a window when first shown.</source>
          <target state="translated">ウィンドウが最初に表示されたときの左上の位置を指定する <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> causes a window to be positioned according to its <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property values.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>に<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>によってをに従って配置するウィンドウの<ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>プロパティの値。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties aren't specified, their values are determined by <ph id="ph3">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph>.</source>
          <target state="translated">どちらの場合、<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>プロパティが指定されていない、その値によって決まります<ph id="ph3">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph>によって、マウス カーソルを含む画面の中央に配置するウィンドウです。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> causes a window to be positioned in the center of its owner window (see <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), if specified.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>に<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph>によって、オーナー ウィンドウの中央に配置するウィンドウ (を参照してください<ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>) 指定されて 場合。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
          <target state="translated">オーナー ウィンドウには、別の WPF ウィンドウまたは非 WPF ウィンドウのいずれかを指定できます。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> and <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>.</source>
          <target state="translated">非 WPF windows での WPF ウィンドウの詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF および Win32 の相互運用<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>と<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>.</source>
          <target state="translated">オーナー ウィンドウが指定されていないウィンドウの位置は同じ方法で決定されます。 として<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>You cannot set or get the value of this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティの値を取得できません。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowState">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
          <target state="translated">ウィンドウが元のサイズに戻されているか、最小化されているか、最大化されているかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph> that determines whether a window is restored, minimized, or maximized.</source>
          <target state="translated">ウィンドウが元のサイズに戻されているか、最小化されているか、最大化されているかを判断する <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph> (restored).</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph> (元のサイズに戻されている) です。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Before a window is minimized or maximized, its size and location are stored in <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">そのサイズと場所が格納されているウィンドウを最小化または最大化、前に<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When a window is subsequently restored, its size and location values are restored with the values from <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">値を使用してそのサイズと場所の値が復元されたウィンドウが復旧し次第、その後、<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed, <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> is raised.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>プロパティを変更すると、<ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>が発生します。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStateProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStyle">
          <source>Gets or sets a window's border style.</source>
          <target state="translated">ウィンドウの枠線のスタイルを取得または設定します。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph> that specifies a window's border style.</source>
          <target state="translated">ウィンドウの境界線スタイルを指定する <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> can be one of the <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration values, including <ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (default), and <ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> いずれか、<ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph>列挙値を含む<ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (既定)、および<ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):</source>
          <target state="translated">次の図は、上ウィンドウ スタイルを示します<ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph>(Windows Vista Aero テーマを有効になっている透明なガラス)。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ウィンドウ スタイル<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>ウィンドウ スタイル<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得できません。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Dependency Property Information</source>
          <target state="translated">依存プロパティ情報</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Identifier field</source>
          <target state="translated">識別子のフィールド</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">メタデータ プロパティに設定します。 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>None</source>
          <target state="translated">なし</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 依存関係プロパティを識別します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>