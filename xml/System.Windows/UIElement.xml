<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3108d80804c11f9fc73349a26d55755b88a3cf5f" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32039956" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8b7ac-101">
        <see cref="T:System.Windows.UIElement" /> は、Windows Presentation Foundation (WPF) の要素および基本表示特性における WPF コア レベル実装構築の基底クラスです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8b7ac-101">
          <see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-102"><xref:System.Windows.UIElement> 要素のレイアウト特性、および派生クラス仮想メソッドをオーバーライドできる、表示、要素とその子の動作要素のレイアウトに影響を与える公開の開始点を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-102"><xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</span></span>  
  
 <span data-ttu-id="8b7ac-103">多くの入力や要素の動作に焦点を当てた一般でも定義されて、<xref:System.Windows.UIElement>クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-103">Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="8b7ac-104">これには、キーボード、マウスとスタイラス入力、および関連するステータスのプロパティのイベントが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-104">This includes the events for keyboard, mouse and stylus input, and related status properties.</span></span> <span data-ttu-id="8b7ac-105">ルーティングされたイベントは、これらのイベントの多くは、バブル、両方のルーティングの入力に関連するイベントの多くがあるバージョンだけでなく、イベントのトンネルのバージョン。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="8b7ac-106">これらのイベントのペアは、通常、コントロールの作成者に最も関心のあるイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="8b7ac-107"><xref:System.Windows.UIElement> 含まれています[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]に関連した、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]イベント モデルでは、指定させることができるメソッドを含む要素のインスタンスが基づいているイベントをルーティングします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-107"><xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="8b7ac-108">アーキテクチャの観点から<xref:System.Windows.UIElement>のウィンドウ ハンドルとほぼ同等と見なされることができます[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]プログラミング、または要素に[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]プログラミングします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-108">In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming.</span></span> <span data-ttu-id="8b7ac-109"><xref:System.Windows.UIElement> WPF コア レベルの基本要素です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-109"><xref:System.Windows.UIElement> is a base element at the WPF core level.</span></span>  
  
 <span data-ttu-id="8b7ac-110">A<xref:System.Windows.UIElement>によって明示的に定義されている次の機能があります、<xref:System.Windows.UIElement>クラス。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-110">A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:</span></span>  
  
-   <span data-ttu-id="8b7ac-111">子要素としてレンダリングできます (<xref:System.Windows.UIElement>から派生した<xref:System.Windows.Media.Visual>、高レベルのグラフィックス クラス)</span><span class="sxs-lookup"><span data-stu-id="8b7ac-111">Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)</span></span>  
  
-   <span data-ttu-id="8b7ac-112">サイズおよび位置情報の使用可能な子要素を使用するロジックが含まれています、 <xref:System.Windows.UIElement> (レイアウト システムによって解釈される) 場合</span><span class="sxs-lookup"><span data-stu-id="8b7ac-112">Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)</span></span>  
  
-   <span data-ttu-id="8b7ac-113">ユーザー入力 (ここで入力の送信先にルーティング、またはコマンドのルーティング イベントの処理を使用してのコントロールを含む) に応答できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-113">Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</span></span>  
  
-   <span data-ttu-id="8b7ac-114">要素の論理ツリー内のルートに移動するルーティング イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-114">Can raise routed events that travel a route through the logical element tree</span></span>  
  
-   <span data-ttu-id="8b7ac-115">アニメーションのシステムの一部の機能をサポートしています</span><span class="sxs-lookup"><span data-stu-id="8b7ac-115">Supports some aspects of the animation system</span></span>  
  
 <span data-ttu-id="8b7ac-116"><xref:System.Windows.FrameworkElement> 上に構築される WPF フレームワーク レベルの実装クラスは、 <xref:System.Windows.UIElement>、WPF フレームワーク レベルの特定の相互作用を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-116"><xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level.</span></span> <span data-ttu-id="8b7ac-117"><xref:System.Windows.FrameworkElement> 追加し、次の機能を定義します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-117"><xref:System.Windows.FrameworkElement> adds and defines the following capabilities:</span></span>  
  
-   <span data-ttu-id="8b7ac-118">その他のフレームワーク固有のレイアウト特性</span><span class="sxs-lookup"><span data-stu-id="8b7ac-118">Additional framework-specific layout characteristics</span></span>  
  
-   <span data-ttu-id="8b7ac-119">プロパティをレポートする豊富なメタデータのサポート</span><span class="sxs-lookup"><span data-stu-id="8b7ac-119">Support for richer metadata reporting on properties</span></span>  
  
-   <span data-ttu-id="8b7ac-120">特定のクラスに固有の実装の基本クラスとその添付プロパティを入力またはアタッチされるイベント</span><span class="sxs-lookup"><span data-stu-id="8b7ac-120">Class-specific implementation of certain input base classes and their attached properties or attached events</span></span>  
  
-   <span data-ttu-id="8b7ac-121">スタイルのサポート</span><span class="sxs-lookup"><span data-stu-id="8b7ac-121">Style support</span></span>  
  
-   <span data-ttu-id="8b7ac-122">これ以上のアニメーション サポート</span><span class="sxs-lookup"><span data-stu-id="8b7ac-122">Further animation support</span></span>  
  
 <span data-ttu-id="8b7ac-123">クラスは、関連する別<xref:System.Windows.ContentElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-123">Another related class is <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="8b7ac-124"><xref:System.Windows.ContentElement>クラスは、多くの機能と同じメンバーの実装<xref:System.Windows.UIElement>; これら 2 つのクラス間の違いは、意図したものでは、全体的なコンテンツ モデルに配置するがします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-124">The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model.</span></span> <span data-ttu-id="8b7ac-125">A<xref:System.Windows.UIElement>派生クラスは、通常、マークアップ内の子要素をどのような要素がありますの制限があることを意味は比較的固定コンテンツ モデルを定義します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-125">A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</span></span> <span data-ttu-id="8b7ac-126">制限の緩い子コンテンツを作成することの容量がある可能性があります、<xref:System.Windows.UIElement>が、その容量は、指定されたコンテンツのプロパティでの集中管理通常します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-126">There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties.</span></span> <span data-ttu-id="8b7ac-127">A<xref:System.Windows.ContentElement>派生クラスは通常フロー形式のドキュメントなどのシナリオをサポートするために、コンテンツに関する制限の厳しいです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-127">A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b7ac-128"><xref:System.Windows.UIElement.Visibility%2A> 状態では、すべての入力をその要素での処理に影響します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-128"><xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="8b7ac-129">表示されていない要素がヒット テストに参加していないと、上にマウスが境界要素がある場合でも、入力イベントを受け取りません場合に表示されていた。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-129">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-130">
            <see cref="T:System.Windows.UIElement" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-130">Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-131">型の新しいインスタンスを作成するが、実際<xref:System.Windows.UIElement>アプリケーション コードでは一般的ではありませんので<xref:System.Windows.UIElement>は基本要素です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-131">Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element.</span></span> <span data-ttu-id="8b7ac-132">参照してください[要素の概要を基本](~/docs/framework/wpf/advanced/base-elements-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-132">See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-133">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-133">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="8b7ac-134">処理されるルーティング イベントの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-134">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="8b7ac-135">ハンドラーの実装に対する参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-135">A reference to the handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-136">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-137">例外を発生させず、同じイベントのハンドラーは、同じ複数回を追加することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-137">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="8b7ac-138">ただし、ハンドラーには、イベントを処理するときに複数回が実際に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-138">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="8b7ac-139">そのため、この動作では次の方法で、ハンドラーの実装で考慮するべき副作用がある可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-139">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-140">通常、"add"アクセサーの実装を提供するこのメソッドを使用する、[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]カスタム ルーティング イベントのイベントのアクセス パターン。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-140">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="8b7ac-141">処理されるルーティング イベントの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-141">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="8b7ac-142">ハンドラーの実装に対する参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-142">A reference to the handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="8b7ac-143">イベント データ内でルーティング イベントが処理済としてマークされている場合に呼び出されるようにハンドラーを登録するには <see langword="true" />。ルーティング イベントが既に処理済としてマークされている場合はハンドラーを呼び出ないという既定の条件を使用してハンドラーを登録する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-143">
              <see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span>
          </span>
          <span data-ttu-id="8b7ac-144">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-144">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-145">ルーティング イベントの再処理を機械的に要求しないでください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-145">Do not routinely ask to rehandle a routed event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-146">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-146">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
          <span data-ttu-id="8b7ac-147">イベント ルート上の他の要素により既に処理済みとしてマークされているルーティング イベントに対し、指定したハンドラーが呼び出されるようにするには、<paramref name="handledEventsToo" /> を <see langword="true" /> に指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-147">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-148">複雑なタスクは、実用的な方法で低レベルの入力イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-148">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="8b7ac-149">多くのコントロールと、特定のイベントが処理される、マークされた、別のより直観的なイベントに置き換えの動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-149">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="8b7ac-150">一般に、これを行うための設計上の意図がある場合を処理済みとして、コントロールは、プラットフォームの入力イベントをマークだけです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-150">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="8b7ac-151">特定のシナリオでこれらの設計上の意図できない可能性があります、特定の入力イベントの処理が必要です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-151">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="8b7ac-152">これらのシナリオを登録するハンドラーの`handledEventsToo`として`true`が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-152">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="8b7ac-153">実行しないでこの日常的にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-153">But you should not do this routinely.</span></span> <span data-ttu-id="8b7ac-154">処理される場合でも、すべてのイベントに応答ハンドラーを呼び出すと、独自のアプリケーション イベントを処理ロジックが複雑になります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-154">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="8b7ac-155">ハンドラーのロジックは大きな場合は、パフォーマンスの低下を参照してください可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-155">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="8b7ac-156">ここで、検出済みの特定のコントロールは、アプリケーション ロジックで処理するイベントを処理は、開発プロセス中にある場合の処理済みのイベントのハンドラーをアタッチの使用を予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-156">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="8b7ac-157">クラスの処理を特定のイベントとコントロールの組み合わせの動作を回避するためのもう 1 つの方法では、そのイベントのプレビューの代替手段を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-157">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="8b7ac-158">たとえば場合、<xref:System.Windows.UIElement.MouseLeftButtonDown>処理済みとしてマークは、クラス処理によってことができますのハンドラーを追加する<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-158">For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="8b7ac-159">例外を発生させず、同じイベントのハンドラーは、同じ複数回を追加することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-159">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="8b7ac-160">ただし、ハンドラーには、イベントを処理するときに複数回が実際に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-160">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="8b7ac-161">そのため、この動作では次の方法で、ハンドラーの実装で考慮するべき副作用がある可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-161">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-162">通常、"add"アクセサーの実装を提供するこのメソッドを使用する、[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]カスタム ルーティング イベントのイベントのアクセス パターン。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-162">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-163">次の例で呼び出されるハンドラーを実装する、<xref:System.Windows.FrameworkElement.Initialized>イベントを使用して、ページ上の名前付きの要素のいずれかに定義されているハンドラーをアタッチするページに`handledEventsToo``true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-163">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="8b7ac-164">このハンドラー経路上の別の要素が共有イベント データ、ルート上で処理中の要素に到達する前に処理済みとしてマークされている場合でも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-164">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">
          <span data-ttu-id="8b7ac-165">ハンドラーの追加先のイベント ルート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-165">The event route that handlers are added to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="8b7ac-166">ハンドラーを追加するために使用されるイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-166">The event data that is used to add the handlers.</span>
          </span>
          <span data-ttu-id="8b7ac-167">このメソッドは、イベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティを使用してハンドラーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-167">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-168">現在の <see cref="T:System.Windows.EventRoute" /> イベント ハンドラー コレクションのハンドラーを、指定した <see cref="T:System.Windows.UIElement" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-168">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-169">このメソッドは、コンテンツ ホスト要素で使用できます (いずれかを実装するもの<xref:System.Windows.IContentHost>しないものか) に子要素のハンドラーを追加する、<xref:System.Windows.EventRoute>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-169">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span> <span data-ttu-id="8b7ac-170">通常、これは必要ありませんの<xref:System.Windows.UIElement>ハンドラーが完了した論理ツリー内で見つかったすべての要素を自動的に追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-170">Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree.</span></span> <span data-ttu-id="8b7ac-171">ただし、いくつかのケースでは、ここで<xref:System.Windows.ContentElement>と<xref:System.Windows.UIElement>が混在しているルートに追加するテンプレートの必要性から得られた要素の介在するテンプレートのツリーにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-171">However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</span></span> <span data-ttu-id="8b7ac-172">両方<xref:System.Windows.ContentElement>と<xref:System.Windows.UIElement>このメソッドのバージョンをサポートします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-172">Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-173">この要素をドラッグアンドドロップ操作の対象として使用できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-173">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span>
          </span>
          <span data-ttu-id="8b7ac-174">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-174">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-175">この要素をドラッグアンドドロップ操作の対象として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-175">
              <see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-176">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-176">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-177">ドラッグ アンド ドロップ操作が既定では、有効になっていないと設定して意図的に有効にする必要があります<xref:System.Windows.UIElement.AllowDrop%2A>に`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-177">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="8b7ac-178">この基本的な設定を超えるドラッグ アンド ドロップの動作は完全に特定の実装とで定義されていない<xref:System.Windows.UIElement>またはその他の要素の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-178">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class.</span></span> <span data-ttu-id="8b7ac-179">たとえば、特定のコントロール<xref:System.Windows.Controls.RichTextBox>既定の動作を持っています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-179">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="8b7ac-180">ドラッグ アンド ドロップの詳細については、次を参照してください。[ドラッグ アンド ドロップの概要](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-180">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="8b7ac-181"><xref:System.Windows.FrameworkElement> 実装では、この依存関係プロパティのメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-181"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="8b7ac-182">具体的には、<xref:System.Windows.FrameworkElement>プロパティ値の継承を有効にするには、このプロパティを指定 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>は`true`メタデータで)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-182">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="8b7ac-183">このコンテキストでプロパティ値の継承ことを意味のない他の値を含む子要素がある場合<xref:System.Windows.UIElement.AllowDrop%2A>プロパティ システムによって以前に割り当てられていない子要素すべてに親要素から値が割り当てられますし、ローカルの値またはスタイル、この値は割り当てられます (ここでものいずれか既定値、またはローカルの値、スタイル)、最も近い親要素の値を使用して割り当てます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-183">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</span></span> <span data-ttu-id="8b7ac-184">実際にはつまり、ルート要素でドロップ操作を許可するかどうかを指定することができます、として割り当てられている値は、特にされているすべての子要素に反映されます`false`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-184">In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-185">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-185">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-186">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-186">Identifier field</span></span>|<xref:System.Windows.UIElement.AllowDropProperty>|  
|<span data-ttu-id="8b7ac-187">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-187">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-188">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-188">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-189">次のマークアップの例のセット、<xref:System.Windows.UIElement.AllowDrop%2A>プロパティ`true`で属性を使用して、 <xref:System.Windows.Controls.TextBox>、およびその他の関連の集計にできるようにするプロパティを<xref:System.Windows.Controls.TextBox>複数行のテキスト データ オブジェクトの対象となる場合をドラッグします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-189">The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in.</span></span> <span data-ttu-id="8b7ac-190">サンプル全体については、次を参照してください。[削除されるファイルのサンプルを読み込む](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-190">For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).</span></span>  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-191">
            <see cref="P:System.Windows.UIElement.AllowDrop" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-191">Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-192">この要素の指定した依存関係プロパティにアニメーションを適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-192">Applies an animation to a specified dependency property on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-193">このメソッドはシールされているため、オーバーライドできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-193">This method is sealed and cannot be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="8b7ac-194">アニメーション化するプロパティの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-194">The identifier for the property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="8b7ac-195">アニメーションをコントロールして宣言するアニメーション クロック。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-195">The animation clock that controls and declares the animation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-196">この要素の指定した依存関係プロパティにアニメーションを適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-196">Applies an animation to a specified dependency property on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-197">既存のアニメーションは停止され、新しいアニメーションに置き換えられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-197">Any existing animations are stopped and replaced with the new animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-198">アニメーションのプロパティからを削除するには、そのプロパティの識別子を指定`dp`指定と`clock`として`null`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-198">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="8b7ac-199">これは、アニメーションを切り取ってアニメーションのプロパティがその基本値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-199">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="8b7ac-200">ただし、最初に関連付けられているアニメーション クロックは停止されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-200">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="8b7ac-201">その他のクロックに割り当てられているアニメーションを実行し続けます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-201">Any other animations assigned to that clock will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-202">次の例で、 <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle`が対象となる呼び出すことによって特定のタイミング アニメーション<xref:System.Windows.UIElement.ApplyAnimationClock%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-202">In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="8b7ac-203">アニメーション化するプロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-203">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="8b7ac-204">アニメーションをコントロールして宣言するアニメーション クロック。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-204">The animation clock that controls and declares the animation.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="8b7ac-205">列挙体の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-205">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="8b7ac-206">既定値は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> で、既存のアニメーションをすべて停止して、新しいアニメーションで置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-206">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-207">この要素の指定した依存関係プロパティにアニメーションを適用し、プロパティでアニメーションが既に適用されているときに行われる処理を指定する機能も提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-207">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-208">アニメーションのプロパティからを削除するには、そのプロパティの識別子を指定`dp`指定と`clock`として`null`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-208">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="8b7ac-209">これは、アニメーションを切り取ってアニメーションのプロパティがその基本値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-209">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="8b7ac-210">ただし、最初に関連付けられているアニメーション クロックは停止されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-210">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="8b7ac-211">その他のクロックに割り当てられているアニメーションを実行し続けます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-211">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-212">少なくとも 1 つのタッチがこの要素にキャプチャされているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-212">Gets a value that indicates whether at least one touch is captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-213">少なくとも 1 つのタッチがこの要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-213">
              <see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-214">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-214">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-215">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-215">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-216">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-216">
              <see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-217">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-217">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-218">少なくとも 1 つのタッチがこの要素上で押されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-218">Gets a value that indicates whether at least one touch is pressed over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-219">少なくとも 1 つのタッチがこの要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-219">
              <see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-220">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-220">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-221">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-221">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-222">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-222">
              <see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-223">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-223">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="8b7ac-224">親が子要素に対して計算する最終的なサイズ。<see cref="T:System.Windows.Rect" /> のインスタンスを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-224">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-225">子要素を配置し、<see cref="T:System.Windows.UIElement" /> のサイズを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-225">Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="8b7ac-226">親要素はそれぞれの <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> 実装 (または WPF フレームワーク レベルの同等実装) からこのメソッドを呼び出し、レイアウトを再帰的に更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-226">Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</span>
          </span>
          <span data-ttu-id="8b7ac-227">このメソッドは、レイアウト更新の 2 番目のパスを構成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-227">This method constitutes the second pass of a layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-228">シナリオでは、の動作を派生する WPF フレームワーク レベルの要素の<xref:System.Windows.UIElement.Arrange%2A>いない必要があります (とできません、シャドウする場合を除き、) を変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-228">For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="8b7ac-229">代わりに、オーバーライドする必要があります、<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>クラスに実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-229">Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class.</span></span> <span data-ttu-id="8b7ac-230"><xref:System.Windows.FrameworkElement.ArrangeOverride%2A>実装がによって内部的に呼び出される<xref:System.Windows.UIElement.Arrange%2A>既定の WPF フレームワーク レベルのレイアウトの操作の一部として。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-230">Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="8b7ac-231"><xref:System.Windows.UIElement.ArrangeCore%2A>実装を呼び出す必要がありますも<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>子要素がある場合、各子要素です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-231">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.</span></span>  
  
 <span data-ttu-id="8b7ac-232">シナリオでは、の動作を派生する WPF コア レベルの要素の<xref:System.Windows.UIElement.Arrange%2A>いない必要があります (とできません、シャドウする場合を除き、) を変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-232">For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="8b7ac-233">代わりに、オーバーライドする必要があります<xref:System.Windows.UIElement.ArrangeCore%2A>クラスにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-233">Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class.</span></span> <span data-ttu-id="8b7ac-234"><xref:System.Windows.UIElement.ArrangeCore%2A>実装がによって内部的に呼び出される<xref:System.Windows.UIElement.Arrange%2A>既定の WPF フレームワーク レベルのレイアウトの操作の一部として。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-234">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="8b7ac-235">ただし、この前提としています WPF フレームワーク レベルのレイアウトと WPF コア レベルからの要素を具体的には派生する場合、大文字と小文字は、ほとんどの場合、レイアウト システムを使用している、<xref:System.Windows.UIElement>基本要素のクラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-235">However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class.</span></span> <span data-ttu-id="8b7ac-236"><xref:System.Windows.UIElement.ArrangeCore%2A>実装を呼び出す必要がありますも<xref:System.Windows.UIElement.Arrange%2A>子要素がある場合、各子要素です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-236">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements.</span></span> <span data-ttu-id="8b7ac-237">注 WPF コア レベルのシナリオは、使用しないことを意味、<xref:System.Windows.FrameworkElement>ために、クラスを派生<xref:System.Windows.FrameworkElement>シール<xref:System.Windows.FrameworkElement.ArrangeCore%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-237">Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-238">WPF フレームワーク レベルのレイアウトの配置の計算[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]から成る、<xref:System.Windows.UIElement.Measure%2A>を呼び出すと<xref:System.Windows.UIElement.Arrange%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-238">Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="8b7ac-239">中に、<xref:System.Windows.UIElement.Measure%2A>呼び出し、レイアウト システムが提供されたを使用して要素のサイズ要件を決定する<xref:System.Windows.Size>(`availableSize`) 引数。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-239">During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument.</span></span> <span data-ttu-id="8b7ac-240">中に、<xref:System.Windows.UIElement.Arrange%2A>呼び出し、レイアウト システムは、サイズを終了し、要素の位置の境界ボックス。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-240">During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.</span></span>  <span data-ttu-id="8b7ac-241">詳細については、次を参照してください。[レイアウト](~/docs/framework/wpf/advanced/layout.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-241">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
 <span data-ttu-id="8b7ac-242">`availableSize` 0 から無限大までの任意の数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-242">`availableSize` can be any number from zero to infinity.</span></span> <span data-ttu-id="8b7ac-243">要素をレイアウトするのには、最小値を返す<xref:System.Windows.Size>を必要とする、`availableSize`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-243">Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.</span></span>  
  
 <span data-ttu-id="8b7ac-244">常に受信レイアウトが最初にインスタンス化されるとき、<xref:System.Windows.UIElement.Measure%2A>前に呼び出す<xref:System.Windows.UIElement.Arrange%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-244">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="8b7ac-245">ただし、最初のレイアウト パスに受け取ることがあります、<xref:System.Windows.UIElement.Arrange%2A>せずに呼び出す、 <xref:System.Windows.UIElement.Measure%2A>; 可能性がのみに影響を与えるプロパティ<xref:System.Windows.UIElement.Arrange%2A>(配置) などが変更された親を受け取ったとき、または、<xref:System.Windows.UIElement.Arrange%2A>せず、<xref:System.Windows.UIElement.Measure%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-245">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="8b7ac-246">A<xref:System.Windows.UIElement.Measure%2A>呼び出しが自動的に無効になり、<xref:System.Windows.UIElement.Arrange%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-246">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="8b7ac-247">レイアウトの更新は、通常、非同期的に (レイアウト システムによって決定時) に発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-247">Layout updates generally occur asynchronously (at a time determined by the layout system).</span></span> <span data-ttu-id="8b7ac-248">要素は要素のサイズ設定に影響を与えるプロパティの変更をすぐに反映されない可能性があります (など<xref:System.Windows.FrameworkElement.Width%2A>)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-248">An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b7ac-249">使用してレイアウトの更新を強制することができます、<xref:System.Windows.UIElement.UpdateLayout%2A>メソッドです。 ただし、この関数を呼び出すことは推奨されていません、通常は必要であり、パフォーマンスの低下が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-249">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</span></span> <span data-ttu-id="8b7ac-250">多くの状況で呼び出して、<xref:System.Windows.UIElement.UpdateLayout%2A>適切な場合があります、レイアウト システムおそらく既に処理する更新プログラム。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-250">In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates.</span></span> <span data-ttu-id="8b7ac-251">レイアウト システムは、パッケージの一部としてすべての必要な更新プログラムを最適化する方法のレイアウトの変更を処理できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-251">The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</span></span>  
  
 <span data-ttu-id="8b7ac-252">レイアウト システムは無効なレイアウトのいずれかの 2 つの異なるキュー<xref:System.Windows.UIElement.Measure%2A>と 1 つずつ<xref:System.Windows.UIElement.Arrange%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-252">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="8b7ac-253">レイアウトのキューは、ビジュアル ツリー内の要素の順序に基づいて並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-253">The layout queue is sorted based upon the order of elements in the visual tree.</span></span> <span data-ttu-id="8b7ac-254">ツリーの上位の要素は、親の変更を繰り返すことによって、冗長なレイアウトを回避するために、キューの上部にあるがします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-254">Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="8b7ac-255">重複するエントリは、キューから自動的に削除されが既に有効である要素も、キューから自動的に削除します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-255">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</span></span>  
  
 <span data-ttu-id="8b7ac-256">レイアウトを更新するときに、<xref:System.Windows.UIElement.Measure%2A>キューが最初に、空に続けて、<xref:System.Windows.UIElement.Arrange%2A>キュー。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-256">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="8b7ac-257">内の要素、<xref:System.Windows.UIElement.Arrange%2A>内の要素がある場合、キューは配置しないで、<xref:System.Windows.UIElement.Measure%2A>キュー。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-257">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="8b7ac-258">親の末尾の領域。親の要素は要素自体と子を配置するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-258">The final area within the parent that element should use to arrange itself and its child elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-259">WPF コア レベルの配置レイアウト定義のテンプレートを定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-259">Defines the template for WPF core-level arrange layout definition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8b7ac-260">このメソッドのオーバーライドは適切な場合にのみ、WPF コア レベルで派生して、WPF フレームワーク レベルのレイアウト システムを使用していないと<xref:System.Windows.FrameworkElement>ために、クラスを派生<xref:System.Windows.FrameworkElement>シール<xref:System.Windows.FrameworkElement.ArrangeCore%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-260">Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span> <span data-ttu-id="8b7ac-261">動作は WPF フレームワーク レベルのレイアウト システムを使用している場合、適切なクラスに固有のレイアウトをオーバーライドするメソッドが配置<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-261">If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-262"><xref:System.Windows.UIElement.ArrangeCore%2A> 実装は、サイズを取得する基本実装を呼び出す必要がありますを呼び出す、<xref:System.Windows.UIElement.Arrange%2A>表示されている子の各要素のメソッドとこれらによって返されるサイズを調整<xref:System.Windows.UIElement.Arrange%2A>基底の実装のサイズを使用した呼び出し。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-262"><xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation.</span></span> <span data-ttu-id="8b7ac-263">調整の側面のロジックを<xref:System.Windows.UIElement.ArrangeCore%2A>要素のレイアウト特性に応じて、実装が異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-263">The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element.</span></span> <span data-ttu-id="8b7ac-264">次の例のテンプレートで`VisualChildren`; そのコンテンツを列挙するため、この要素を定義する仮想的なプロパティは、<xref:System.Windows.UIElement>コンテンツのコレクションを一切定義しませんこのレベルでは、WPF フレームワーク レベルのアーキテクチャが特定のコントロールやコントロールの基本クラスなどの派生要素にコンテンツの動作を延期します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-264">In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-265">WPF コア レベルの要素を開発している場合、これをオーバーライドする必要があります、WPF コア レベルの要素を一意にメソッド配置レイアウト動作、または適切なレイアウトを作成する、要素の子要素を決定します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-265">If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</span>
            </span>
            <span data-ttu-id="8b7ac-266">オーバーライドの場合はそれらの子要素は認識されない定義済みのパターンからなど、必要な可能性があります、<see cref="T:System.Windows.Controls.ItemCollection" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-266">An override might be necessary if those child elements are not recognizable from a defined pattern such as an <see cref="T:System.Windows.Controls.ItemCollection" />.</span>
            </span>
            <span data-ttu-id="8b7ac-267">親要素はクラスに固有で呼び出す必要があります<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />各子要素に対してそれ以外の場合、子要素は表示されません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-267">A parent element must call the class-specific <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child element, otherwise those child elements are not rendered.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-268">この要素のアニメーション化対象のプロパティを指定して、アニメーションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-268">Starts an animation for a specified animated property on this element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="8b7ac-269">依存関係プロパティの識別子として指定された、アニメーション化するプロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-269">The property to animate, which is specified as a dependency property identifier.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="8b7ac-270">開始するアニメーションのタイムライン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-270">The timeline of the animation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-271">この要素のアニメーション化対象のプロパティを指定して、アニメーションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-271">Starts an animation for a specified animated property on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-272">プロパティをアニメーション化するかどうかをチェックするとしているアニメーションが開始されますと見なされるアニメーションをアニメーション化されていないの開始位置を超える最初のフレームがレンダリングされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-272">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="8b7ac-273">場合、<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>の`animation`は`null`してから、現在のアニメーションは削除し、プロパティの現在の値が保持されています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-273">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="8b7ac-274">場合全体`animation`値は`null`、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-274">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="8b7ac-275">ただし、最初に関連付けられているアニメーション タイムラインは停止されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-275">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="8b7ac-276">タイムラインに割り当てられているその他のアニメーションを実行し続けます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-276">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-277">次の例は、アニメーションを作成し、割り当てを呼び出して<xref:System.Windows.UIElement.BeginAnimation%2A>を開始します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-277">The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="8b7ac-278">依存関係プロパティの識別子として指定された、アニメーション化するプロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-278">The property to animate, which is specified as the dependency property identifier.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="8b7ac-279">適用されるアニメーションのタイムライン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-279">The timeline of the animation to be applied.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="8b7ac-280">プロパティ値に既に影響している現在の (実行中の) アニメーションと新しいアニメーションが対話する方法を指定する列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-280">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-281">この要素のアニメーション化対象のプロパティを指定して、特定のアニメーションを開始します。プロパティの既存のアニメーションが実行中である場合の動作も指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-281">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-282">プロパティをアニメーション化するかどうかをチェックするとしているアニメーションが開始されますと見なされるアニメーションをアニメーション化されていないの開始位置を超える最初のフレームがレンダリングされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-282">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="8b7ac-283">場合、<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>の`animation`は`null`してから、現在のアニメーションは削除し、プロパティの現在の値が保持されています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-283">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="8b7ac-284">場合全体`animation`値は`null`、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-284">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="8b7ac-285">ただし、最初に関連付けられているアニメーション タイムラインは停止されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-285">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="8b7ac-286">タイムラインに割り当てられているその他のアニメーションを実行し続けます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-286">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-287">次の例は、リソースを呼び出し、続いてから既存のアニメーションを取得するハンドラーを実装<xref:System.Windows.UIElement.BeginAnimation%2A>とハンドオフ動作を指定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-287">The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.</span></span>  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-288">この要素に描画された内容に直接適用するビットマップ効果を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-288">Gets or sets a bitmap effect that applies directly to the rendered content for this element.</span>
          </span>
          <span data-ttu-id="8b7ac-289">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-289">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-290">適用するビットマップ効果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-290">The bitmap effect to apply.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-291"><xref:System.Windows.Media.Effects.BitmapEffect> そのため、抽象型は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用状況の実装の派生クラスが必要です<xref:System.Windows.Media.Effects.BitmapEffect>など<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-291"><xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</span></span> <span data-ttu-id="8b7ac-292">派生したクラスが実装されている 1 つはシーケンシャルを使用すると、複数のいずれかを指定するコレクション型<xref:System.Windows.Media.Effects.BitmapEffect>、入れ子になったタグの構文を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-292">Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.</span></span>  
  
 <span data-ttu-id="8b7ac-293">既存のクラスの派生できない<xref:System.Windows.Media.Effects.BitmapEffect>型コンバーターをサポートしているため、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]このプロパティを使用する構文は、プロパティ要素構文では、通常、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-293">No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.</span></span>  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-294">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-294">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-295">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-295">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|<span data-ttu-id="8b7ac-296">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-296">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-297">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-297">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-298">次の例では、ビットマップ効果を使用して<xref:System.Windows.Media.Effects.BlurBitmapEffect>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-298">The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.</span></span>  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-299">この要素に描画された内容に直接適用するビットマップ効果用の入力ソースを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-299">Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</span>
          </span>
          <span data-ttu-id="8b7ac-300">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-300">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-301">ビットマップ効果のソース。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-301">The source for bitmap effects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-302">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-302">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-303">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-303">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|<span data-ttu-id="8b7ac-304">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-304">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-305">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-305">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-306">
            <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-306">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-307">
            <see cref="P:System.Windows.UIElement.BitmapEffect" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-307">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-308">
            <see cref="T:System.Windows.UIElement" /> のキャッシュされた表現を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-308">Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-309">
            <see cref="T:System.Windows.Media.CacheMode" /> のキャッシュされた表現を保持する <see cref="T:System.Windows.UIElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-309">A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-310">設定、<xref:System.Windows.UIElement.CacheMode%2A>プロパティを表示するために時間がかかるがコンテンツのパフォーマンスを向上させる必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-310">Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render.</span></span> <span data-ttu-id="8b7ac-311">詳細については、「<xref:System.Windows.Media.BitmapCache>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-311">For more information, see <xref:System.Windows.Media.BitmapCache>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-312">
            <see cref="P:System.Windows.UIElement.CacheMode" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-312">Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-313">この要素にマウスをキャプチャするように強制することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-313">Attempts to force capture of the mouse to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-314">マウスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-314">
              <see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-315">キャプチャするのには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-315">To be captured, an element must be enabled.</span></span> <span data-ttu-id="8b7ac-316">確認するかどうか<xref:System.Windows.UIElement.IsEnabled%2A>は`true`を呼び出す前に<xref:System.Windows.UIElement.CaptureMouse%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-316">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-317">呼び出す場合<xref:System.Windows.UIElement.CaptureMouse%2A>返します`true`、し<xref:System.Windows.UIElement.IsMouseCaptured%2A>も`true`します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-317">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-318">呼び出す場合<xref:System.Windows.UIElement.CaptureMouse%2A>を返します`true`、<xref:System.Windows.UIElement.GotMouseCapture>と<xref:System.Windows.UIElement.IsMouseCapturedChanged>イベントが発生すると<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>要素としてデータを報告するイベントの場所、<xref:System.Windows.UIElement.CaptureMouse%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-318">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="8b7ac-319">既存のキャプチャと干渉する可能性のキャプチャを強制した場合、特にのマウスでドラッグ アンド ドロップに関連するキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-319">If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="8b7ac-320">すべての要素からマウスのキャプチャをクリアする呼び出し<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>で、`element`として指定されたパラメーター`null`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-320">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-321">次の例では、やのハンドラーをマウス入力のキーの組み合わせをマウスのキャプチャ (およびキャプチャ解除) のペアを実装し、3 D のモデルを表示するための特別なマウス モードを有効にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-321">The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-322">この要素にスタイラスをキャプチャするように強制することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-322">Attempts to force capture of the stylus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-323">スタイラスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-323">
              <see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-324">既定の実装を常に基になる既定のスタイラス デバイスに基づいて`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-324">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="8b7ac-325">ただし、入力のシステムのデバイスの実装を提供する入力デバイスを拡張する場合は、異なる結果を返す可能性のある代替のスタイラス デバイスの実装と、システムを作成することです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-325">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="8b7ac-326">要素がスタイラスをキャプチャ、ときに、スタイラスが境界外にある場合でも、スタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-326">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="8b7ac-327">スタイラスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-327">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="8b7ac-328">このメソッドを呼び出す、基になる静的<xref:System.Windows.Input.Stylus>メソッド<xref:System.Windows.Input.Stylus.Capture%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-328">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="8b7ac-329">実際のキャプチャの動作は、アクティブなスタイラス デバイスの実装によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-329">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-330">キャプチャするのには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-330">To be captured, an element must be enabled.</span></span> <span data-ttu-id="8b7ac-331">確認するかどうか<xref:System.Windows.UIElement.IsEnabled%2A>は`true`を呼び出す前に返す<xref:System.Windows.UIElement.CaptureStylus%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-331">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-332">呼び出す場合<xref:System.Windows.UIElement.CaptureStylus%2A>返します`true`、<xref:System.Windows.UIElement.IsStylusCaptured%2A>も`true`します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-332">If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="8b7ac-333">キャプチャの対象となるデバイス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-333">The device to capture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-334">この要素にタッチをキャプチャするように強制することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-334">Attempts to force capture of a touch to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-335">指定したタッチがこの要素にキャプチャされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-335">
              <see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-336"><xref:System.Windows.UIElement.CaptureTouch%2A> 返されます`false`場合、<xref:System.Windows.Input.TouchDevice>別の要素に現在キャプチャされています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-336"><xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="8b7ac-337">場合<xref:System.Windows.UIElement.CaptureTouch%2A>返します`true`、<xref:System.Windows.UIElement.GotTouchCapture>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-337">If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="8b7ac-338">解放するにはこの要素から 1 つのタッチのキャプチャを使用して、<xref:System.Windows.UIElement.ReleaseTouchCapture%2A>メソッドを解放する、タッチ デバイスを指定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-338">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="8b7ac-339">解放するにはこの要素からすべての調整を使用して、<xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-339">To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b7ac-340">
            <paramref name="touchDevice" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-340">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-341">要素内容の輪郭の定義に使用するジオメトリを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-341">Gets or sets the geometry used to define the outline of the contents of an element.</span>
          </span>
          <span data-ttu-id="8b7ac-342">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-342">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-343">クリッピング領域のサイズ設定に使用するジオメトリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-343">The geometry to be used for clipping area sizing.</span>
          </span>
          <span data-ttu-id="8b7ac-344">既定値は null <see cref="T:System.Windows.Media.Geometry" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-344">The default is a null <see cref="T:System.Windows.Media.Geometry" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-345">ジオメトリ外側にある要素は、レンダリングされたレイアウトで視覚的にクリッピングされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-345">Elements outside the geometry will be visually clipped in the rendered layout.</span></span> <span data-ttu-id="8b7ac-346">ジオメトリを四角形にする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-346">The geometry does not have to be rectangular.</span></span>  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-347">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-347">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-348">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-348">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipProperty>|  
|<span data-ttu-id="8b7ac-349">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-349">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-350">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-350">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-351">この例は、フレームワークの要素を定義する方法を示します<xref:System.Windows.UIElement.Clip%2A>領域。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-351">This example shows how to define a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="8b7ac-352">クリップを定義するのには、使用、 <xref:System.Windows.Media.Geometry> (たとえば、<xref:System.Windows.Media.EllipseGeometry>要素の設定を<xref:System.Windows.UIElement.Clip%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-352">To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry> to set the element's <xref:System.Windows.UIElement.Clip%2A> property.</span></span> <span data-ttu-id="8b7ac-353">ジオメトリの領域内にある、領域のみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-353">Only the area that is within the region of the geometry will be visible.</span></span>  
  
 <span data-ttu-id="8b7ac-354">次の例は、<xref:System.Windows.Controls.Image>定義済みのクリップ領域なしの要素。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-354">The following example shows an <xref:System.Windows.Controls.Image> element without a defined clip region.</span></span> <span data-ttu-id="8b7ac-355">クリップ領域が定義されていないため、全体のイメージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-355">Because no clip region is defined, the entire image is displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 <span data-ttu-id="8b7ac-356">![クリップ領域を適用する前にオブジェクト](~/add/media/mil-task-clip-region-noclip.png "クリップ領域を適用する前にオブジェクト")</span><span class="sxs-lookup"><span data-stu-id="8b7ac-356">![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png "An object before applying a clip region")</span></span>  
<span data-ttu-id="8b7ac-357">クリップ地域のないイメージ</span><span class="sxs-lookup"><span data-stu-id="8b7ac-357">Image with No Clip Region</span></span>  
  
 <span data-ttu-id="8b7ac-358">次の例では、同じイメージを作成、定義済みのクリップ領域がある点を除いて。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-358">In the next example, an identical Image is created, except that it has a defined clip region.</span></span> <span data-ttu-id="8b7ac-359">領域内にあるイメージの一部のみ、<xref:System.Windows.Media.EllipseGeometry>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-359">Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry> will be displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 <span data-ttu-id="8b7ac-360">![クリップされたオブジェクト](~/add/media/mil-task-clip-region-ellispe.PNG "クリップされたオブジェクト")</span><span class="sxs-lookup"><span data-stu-id="8b7ac-360">![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG "A clipped object")</span></span>  
<span data-ttu-id="8b7ac-361">楕円のクリップ領域を持つイメージ</span><span class="sxs-lookup"><span data-stu-id="8b7ac-361">Image with an Elliptical Clip Region</span></span>  
  
 <span data-ttu-id="8b7ac-362">次の例は、フレームワーク要素のアニメーション化する方法を示しています。<xref:System.Windows.UIElement.Clip%2A>領域。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-362">The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="8b7ac-363">この例では、 <xref:System.Windows.Media.EllipseGeometry> 、楕円のクリップ領域を定義するため、<xref:System.Windows.Controls.Image>要素。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-363">In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element.</span></span> <span data-ttu-id="8b7ac-364">A<xref:System.Windows.Media.Animation.PointAnimation>楕円のジオメトリをアニメーション化<xref:System.Windows.Media.EllipseGeometry.Center%2A>プロパティから (0, 0) に (200, 150)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-364">A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150).</span></span> <span data-ttu-id="8b7ac-365">アニメーションは、イメージが読み込まれると、無期限に繰り返す後に再生を開始します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-365">The animation starts playing after the image is loaded and repeats indefinitely.</span></span>  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 <span data-ttu-id="8b7ac-366">サンプル全体については、次を参照してください。、[クリップ領域サンプル](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-366">For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-367">
            <see cref="P:System.Windows.UIElement.Clip" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-367">Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-368">親要素のサイズに合わせるために、この要素の内容 (またはこの要素の子要素の内容) を切り取るかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-368">Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</span>
          </span>
          <span data-ttu-id="8b7ac-369">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-369">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-370">コンテンツをクリップする必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-370">
              <see langword="true" /> if the content should be clipped; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-371">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-371">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-372">子要素、<xref:System.Windows.UIElement.ClipToBounds%2A>かどうか、親要素の幅と高さはされているによって決まりますによってレイアウト動作にさまざまな影響が<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>または<xref:System.Windows.FrameworkElement.MaxHeight%2A>  / <xref:System.Windows.FrameworkElement.MaxWidth%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-372">For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span> <span data-ttu-id="8b7ac-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> 親要素が常に守られての値に関係なく<xref:System.Windows.UIElement.ClipToBounds%2A>効果的な領域はこれらの最大値に基づいて、コンテンツをクリップは常にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums.</span></span> <span data-ttu-id="8b7ac-374">親の<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>設定は、コンテンツをクリップされず<xref:System.Windows.UIElement.ClipToBounds%2A>は`false`、場合に、コンテンツをクリップが<xref:System.Windows.UIElement.ClipToBounds%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-374">The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-375">その既定値に注意してください`false`に実装されている一般的な動作は、<xref:System.Windows.UIElement>クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-375">Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="8b7ac-376">派生した任意の要素のことが<xref:System.Windows.UIElement>このプロパティに既定値には、そのインスタンス内の依存関係プロパティのメタデータをオーバーライドする`true`代わりにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-376">It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead.</span></span> <span data-ttu-id="8b7ac-377">いくつかの既存の派生クラスでは、このメタデータをオーバーライドまたは依存関係プロパティの既定値を調整します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-377">Several existing derived classes override this metadata and/or adjust the dependency property default value.</span></span>  
  
 <span data-ttu-id="8b7ac-378"><xref:System.Windows.Controls.InkCanvas>、 <xref:System.Windows.Controls.InkPresenter>、および<xref:System.Windows.Controls.Primitives.Popup>既定値をそれぞれオーバーライド`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-378"><xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-379"><xref:System.Windows.FrameworkElement> この依存関係プロパティのメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-379"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property.</span></span> <span data-ttu-id="8b7ac-380">具体的には、<xref:System.Windows.FrameworkElement>プロパティ値の継承を有効にするには、このプロパティを指定 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>は`true`メタデータで)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-380">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="8b7ac-381">このコンテキストでプロパティ値の継承ことを意味のない他の値を含む子要素がある場合<xref:System.Windows.UIElement.ClipToBounds%2A>ローカル値またはスタイル、割り当てられているこの値を持つ最も近い親要素の値を使用して割り当てる (スタイルは、既定値のいずれか、またはローカル値)、プロパティ システムによって、すべての未使用の子要素に親要素から値が割り当てられる、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-381">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="8b7ac-382">実際にはつまり、ルート要素の境界にクリップを許可するかどうかを指定することができます、として割り当てられている値は、特にされているすべての子要素に反映されます`false`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-382">In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-383">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-383">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-384">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-384">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|<span data-ttu-id="8b7ac-385">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-385">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-386">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-386">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-387">
            <see cref="P:System.Windows.UIElement.ClipToBounds" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-387">Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-388">この要素に関連付けられている <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-388">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span>
          </span>
          <span data-ttu-id="8b7ac-389">
            <see cref="T:System.Windows.Input.CommandBinding" /> は、この要素のコマンド処理を有効にし、コマンド、コマンドのイベント、およびこの要素によってアタッチされるハンドラーの間の関連を宣言します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-389">A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-390">すべての <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-390">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-391">別の一般的な方法を設定する、<xref:System.Windows.UIElement.CommandBindings%2A>コレクションは、使用する<xref:System.Windows.Input.CommandManager>メソッド プログラムでします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-391">Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8b7ac-392">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="8b7ac-392">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8b7ac-393">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8b7ac-393">XAML Values</span></span>  
 <span data-ttu-id="8b7ac-394">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="8b7ac-394">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="8b7ac-395">1 つまたは複数<xref:System.Windows.Input.CommandBinding>要素。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-395">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="8b7ac-396">これらの各が必要、<xref:System.Windows.Input.CommandBinding.Command%2A>既知のコマンドに属性が設定され、に対して属性が設定、<xref:System.Windows.Input.CommandBinding.CanExecute>と<xref:System.Windows.Input.CommandBinding.Executed>ハンドラーの実装です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-396">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="8b7ac-397">詳細については、「<xref:System.Windows.Input.CommandBinding>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-397">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-398">次の例では追加、<xref:System.Windows.Input.CommandBinding>マークアップを使用して、ウィンドウにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-398">The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup.</span></span> <span data-ttu-id="8b7ac-399">において[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、 <xref:System.Windows.Input.CommandBindingCollection> ; 要素としてのマークアップで宣言されていないプロパティには、型によって、コレクション オブジェクトは推論され、1 つ以上を持つプロパティ要素を設定する<xref:System.Windows.Input.CommandBinding>要素。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-399">Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 <span data-ttu-id="8b7ac-400">詳細については、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 、コレクションの構文を参照してください[XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-400">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 <span data-ttu-id="8b7ac-401">次の例は、基本的に同様のコードにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-401">The following example does essentially the same thing in code:</span></span>  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-402">レイアウト処理の測定パスの実行中に、この要素が計算したサイズを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-402">Gets the size that this element computed during the measure pass of the layout process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-403">計算されたサイズ。これが、配置パスの目的のサイズになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-403">The computed size, which becomes the desired size for the arrange pass.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-404">場合は、このプロパティによって返される値に有効な測定にのみの値、<xref:System.Windows.UIElement.IsMeasureValid%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-404">The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-405"><xref:System.Windows.UIElement.DesiredSize%2A> ようオーバーライド レイアウトの動作を実装するときに測定要因の 1 つとして、通常、チェック<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>、 <xref:System.Windows.FrameworkElement.MeasureOverride%2A>、または<xref:System.Windows.UIElement.OnRender%2A>(で、<xref:System.Windows.UIElement.OnRender%2A>大文字と小文字、チェックする可能性があります<xref:System.Windows.UIElement.RenderSize%2A>代わりに、これによって異なりますが、実装) です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-405"><xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation).</span></span> <span data-ttu-id="8b7ac-406">状況に応じて<xref:System.Windows.UIElement.DesiredSize%2A>可能性があります完全に留意する制約、実装のロジックによって<xref:System.Windows.UIElement.DesiredSize%2A>適用することがこのような制約は、親要素または子要素のいずれかの他の特性も変更可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-406">Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</span></span> <span data-ttu-id="8b7ac-407">など、コントロールをスクロール可能な領域をサポートしています (ただし、スクロール可能な領域を既に有効にする WPF フレームワーク レベル コントロールから派生していないことを選択) は使用可能なサイズを比較することも<xref:System.Windows.UIElement.DesiredSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-407">For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="8b7ac-408">コントロールのスクロール バーを有効になっている内部の状態を設定し、でした、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]を制御するためです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-408">The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control.</span></span> <span data-ttu-id="8b7ac-409">または、<xref:System.Windows.UIElement.DesiredSize%2A>危険性がある特定のシナリオで無視することもできます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-409">Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-410">次の例は<xref:System.Windows.UIElement.DesiredSize%2A>の一部として、<xref:System.Windows.FrameworkElement.MeasureOverride%2A>実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-410">The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation.</span></span> <span data-ttu-id="8b7ac-411">通知方法<xref:System.Windows.UIElement.Measure%2A>取得する前に、直後に呼び出されます<xref:System.Windows.UIElement.DesiredSize%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-411">Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="8b7ac-412">これによりを<xref:System.Windows.UIElement.DesiredSize%2A>正当な値を保持します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-412">This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.</span></span>  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-413">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-413">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-414">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-414">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-415">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.DragEnter>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-415">Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-416">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-417">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-417">Identifier field</span></span>|<xref:System.Windows.UIElement.DragEnterEvent>|  
|<span data-ttu-id="8b7ac-418">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-418">Routing strategy</span></span>|<span data-ttu-id="8b7ac-419">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-419">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-420">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-420">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-421">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewDragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-421">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="8b7ac-422">オーバーライド<xref:System.Windows.UIElement.OnDragEnter%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-422">Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-423">
            <see cref="E:System.Windows.UIElement.DragEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-423">Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-424">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-424">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-425">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-425">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-426">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-426">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-427">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-427">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-428">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-428">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-429">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-429">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-430">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-430">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-431">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.DragLeave>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-431">Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-432">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-432">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-433">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-433">Identifier field</span></span>|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|<span data-ttu-id="8b7ac-434">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-434">Routing strategy</span></span>|<span data-ttu-id="8b7ac-435">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-435">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-436">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-436">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-437">対応するトンネリング イベントが<xref:System.Windows.DragDrop.PreviewDragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-437">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="8b7ac-438">オーバーライド<xref:System.Windows.UIElement.OnDragLeave%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-438">Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-439">
            <see cref="E:System.Windows.UIElement.DragLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-439">Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-440">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-440">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-441">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-441">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-442">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-442">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-443">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-443">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-444">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-444">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-445">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-445">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-446">このイベントは、要素の境界のドラッグを開始した場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-446">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="8b7ac-447">ドラッグ アンドが境界の外側を開始し、このイベントを発生すると、内側、移動だけでなく<xref:System.Windows.UIElement.DragEnter>とプレビュー イベントを関連します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-447">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="8b7ac-448">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-448">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-449">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.DragOver>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-449">Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-450">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-450">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-451">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-451">Identifier field</span></span>|<xref:System.Windows.UIElement.DragOverEvent>|  
|<span data-ttu-id="8b7ac-452">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-452">Routing strategy</span></span>|<span data-ttu-id="8b7ac-453">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-453">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-454">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-454">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-455">対応するトンネリング イベントが<xref:System.Windows.DragDrop.PreviewDragOver>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-455">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="8b7ac-456">オーバーライド<xref:System.Windows.UIElement.OnDragOver%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-456">Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-457">
            <see cref="E:System.Windows.UIElement.DragOver" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-457">Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-458">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-458">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-459">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-459">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-460">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-460">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-461">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-461">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-462">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-462">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-463">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-463">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-464">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.Drop?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-464">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-465">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.Drop>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-465">Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-466">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-467">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-467">Identifier field</span></span>|<xref:System.Windows.UIElement.DropEvent>|  
|<span data-ttu-id="8b7ac-468">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-468">Routing strategy</span></span>|<span data-ttu-id="8b7ac-469">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-469">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-470">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-470">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-471">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewDrop>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="8b7ac-472">オーバーライド<xref:System.Windows.UIElement.OnDrop%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-472">Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-473">
            <see cref="E:System.Windows.UIElement.Drop" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-473">Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-474">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-475">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-476">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-477">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-478">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-479">
            <see cref="T:System.Windows.UIElement" /> に適用するビットマップ効果を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-479">Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="8b7ac-480">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-480">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-481">ビットマップ効果を表す <see cref="T:System.Windows.Media.Effects.Effect" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-481">An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-482">使用して、<xref:System.Windows.UIElement.Effect%2A>するビットマップ効果を適用するプロパティ、<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-482">Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.</span></span>  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-483">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-483">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-484">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-484">Identifier field</span></span>|<xref:System.Windows.UIElement.EffectProperty>|  
|<span data-ttu-id="8b7ac-485">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-485">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-486">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-486">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-487">次の XAML は、カスタムに割り当てる方法を示しています。<xref:System.Windows.Media.Effects.ShaderEffect>を、<xref:System.Windows.UIElement.Effect%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-487">The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.</span></span>  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-488">
            <see cref="P:System.Windows.UIElement.Effect" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-488">Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-489">この要素にフォーカスを設定することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-489">Attempts to set focus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-490">この要素にキーボード フォーカスと論理フォーカスの両方が設定された場合は <see langword="true" />。論理フォーカスのみが設定された場合、またはこのメソッドの呼び出しによってフォーカスの変更が強制されない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-490">
              <see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-491">フォーカスを<xref:System.Windows.UIElement.Focusable%2A>と<xref:System.Windows.UIElement.IsEnabled%2A>両方`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-491">To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-492">場合でも、要素は、特定のツリー内でフォーカスを設定し、有効なイベント処理が、フォーカスがある、許可しないことによって、プレビューのフォーカス イベントに応答 (複合コントロールなど) ためこのメソッドは`false`します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-492">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="8b7ac-493">一般にフォーカスが 2 つの異なる概念によって拘束されます: キーボード フォーカスと論理フォーカスが常に一致しません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-493">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span>  <span data-ttu-id="8b7ac-494">詳細については、次を参照してください。[フォーカス概要](~/docs/framework/wpf/advanced/focus-overview.md)または[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-494">For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="8b7ac-495">呼び出す場合<xref:System.Windows.UIElement.Focus%2A>返します`true`、<xref:System.Windows.UIElement.IsKeyboardFocused%2A>と<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>も`true`します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-495">If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-496">場合は、関連するプロパティは、既に`true`を呼び出すとき、 <xref:System.Windows.UIElement.Focus%2A>、次の順序で発生するか、次のイベントの 1 つ以上: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>、 <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (ソースは、新しいフォーカス ターゲット)、 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>、 <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>、 <xref:System.Windows.UIElement.LostKeyboardFocus>、 <xref:System.Windows.UIElement.GotKeyboardFocus> (ソースは、新しいフォーカス ターゲット)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-496">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="8b7ac-497">この呼び出しを成功させるためには、以前にフォーカスがあることをアプリケーションでその他の要素が必要です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-497">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-498">次の例では、フォーカスを設定、<xref:System.Windows.Controls.TextBox>によって参照されている<xref:System.Windows.FrameworkElement.Name%2A>、内にカーソルの位置を調整し、<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-498">The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-499">要素がフォーカスを得ることができるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-499">Gets or sets a value that indicates whether the element can receive focus.</span>
          </span>
          <span data-ttu-id="8b7ac-500">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-500">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-501">要素にフォーカスを設定できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-501">
              <see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-502">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-502">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-503">フォーカスのある要素のみでは、キーボード入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-503">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="8b7ac-504"><xref:System.Windows.UIElement.Focusable%2A> [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-504"><xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="8b7ac-505">この特定の依存関係プロパティでは、見かけ上の「既定」値がコントロールに特に、派生した要素のクラスに異なる方法で設定がよくあります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-505">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</span></span> <span data-ttu-id="8b7ac-506">これは、操作は、2 つの方法のいずれかでよく発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-506">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="8b7ac-507">依存関係プロパティが特定の派生クラスで継承されますが、派生したクラスのオーバーライドを依存関係プロパティのメタデータとプロパティの既定値を変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-507">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
-   <span data-ttu-id="8b7ac-508">スタイルまたはテンプレートは、その依存関係プロパティの値を異なる方法で設定する要素に適用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-508">A style or template is applied to an element, which sets that dependency property value differently.</span></span>  
  
 <span data-ttu-id="8b7ac-509">たとえば、明確な「既定」の<xref:System.Windows.UIElement.Focusable%2A>の<xref:System.Windows.Controls.Button>コントロールになります`true`場合でも、<xref:System.Windows.Controls.Button>継承<xref:System.Windows.UIElement.Focusable%2A>として、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]プロパティから直接<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-509">For example, the apparent "default" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="8b7ac-510">これは、適用されているメタデータの値のため、<xref:System.Windows.UIElement.Focusable%2A>の静的コンス トラクター内で依存関係プロパティのオーバーライドされた、<xref:System.Windows.Controls.Control>基底クラスで、間に置か<xref:System.Windows.Controls.Button>と<xref:System.Windows.UIElement>クラス階層です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-510">This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.</span></span>  
  
 <span data-ttu-id="8b7ac-511">継承<xref:System.Windows.Controls.Control>またはその派生クラスでは、<xref:System.Windows.Controls.Control>にするには、このプロパティの既定値を再定義`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-511">When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-512">によって継承と<xref:System.Windows.Controls.Label>(これは、<xref:System.Windows.Controls.Control>クラスを派生)、既定値がもう一度再定義する`false`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-512">When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-513">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-514">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-514">Identifier field</span></span>|<xref:System.Windows.UIElement.FocusableProperty>|  
|<span data-ttu-id="8b7ac-515">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-515">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-516">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-516">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-517">次のコード例は、特定のカスタム コントロールを設定するためのコントロール テンプレートを示しています。 <xref:System.Windows.UIElement.Focusable%2A> `false`テンプレート内の要素の 1 つにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-517">The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.</span></span>  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-518">派生している場合<see cref="T:System.Windows.UIElement" />直接 (からするとは異なり<see cref="T:System.Windows.Controls.Control" />)、要素にフォーカスを設定すると、既定では、要素はできないのでフォーカスを設定するかどうかを検討してください。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-518">When deriving from <see cref="T:System.Windows.UIElement" /> directly (as opposed to from <see cref="T:System.Windows.Controls.Control" />), consider whether you wish your element to be focusable, because by default the element will not be focusable.</span>
            </span>
            <span data-ttu-id="8b7ac-519">要素にフォーカスを設定できる場合は、次のように、型の静的コンス トラクター内でこのプロパティのメタデータをオーバーライドします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-519">If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</span>
            </span>  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 <span data-ttu-id="8b7ac-520">ここで<paramref name="myElement" />メタデータ値を上書きするのには、型のクラス名である必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-520">where <paramref name="myElement" /> should be the class name of the type that you are overriding the metadata value on.</span></span></para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-521">
            <see cref="P:System.Windows.UIElement.Focusable" /> プロパティの値が変更された場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-521">Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-522">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-522">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-523">
            <see cref="P:System.Windows.UIElement.Focusable" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-523">Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="8b7ac-524">照合する対象の依存関係プロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-524">The dependency property to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-525">この要素の、指定したプロパティの基本プロパティ値を返します。実行中または停止済みのアニメーションでアニメーション化される値は無視されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-525">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-526">指定した依存関係プロパティにアニメーションが添付されていないような場合のプロパティ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-526">The property value as if no animations are attached to the specified dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-527">プロパティのアニメーションが添付されていない場合、<xref:System.Windows.UIElement.GetAnimationBaseValue%2A>に戻り値は常に、<xref:System.Windows.DependencyObject.GetValue%2A>値を返します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-527">If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="8b7ac-528">添付されたアニメーションがある場合は、可能なすべてのアニメーションが開始を含む値を派生し、停止の値は無視され、プロパティの値はその他のすべての可能な入力に基づいて決定されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-528">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="8b7ac-529">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-529">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-530">次の例は、アニメーションのベース値を報告するハンドラーを実装<xref:System.Windows.FrameworkElement.Width%2A>プロパティを<xref:System.Windows.Controls.Button>、トランス フォームの基本値だけでなくです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-530">The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">
          <span data-ttu-id="8b7ac-531">要素によって提供される使用可能なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-531">The available size provided by the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-532">
            <see cref="P:System.Windows.UIElement.ClipToBounds" /> が <see langword="true" /> に設定されていると想定した場合にクリッピングされる領域を表す代替クリッピング ジオメトリを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-532">Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-533">潜在的なクリッピング ジオメトリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-533">The potential clipping geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-534">既定の実装は、正規の値が返されますが、使用しない、`layoutSlotSize`計算内のパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-534">The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations.</span></span> <span data-ttu-id="8b7ac-535">代わりの値を使用して<xref:System.Windows.UIElement.RenderSize%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-535">Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-536">このメソッドはオーバーライド大幅にすぐに派生して<xref:System.Windows.FrameworkElement>クラス、および<xref:System.Windows.FrameworkElement>上書きには、一般的な WPF フレームワーク レベルの要素のより高度な動作が生成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-536">This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements.</span></span> <span data-ttu-id="8b7ac-537">詳細については、「<xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-537">For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-538">派生クラスでオーバーライドされると、ビジュアル親が存在しない場合に、この要素の代替[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] の親を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-538">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-539">報告する代替の親接続を派生クラスの実装が持つ場合のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-539">An object, if implementation of a derived class has an alternate parent connection to report.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-540">このメソッドの既定の仮想実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-540">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="8b7ac-541"><xref:System.Windows.FrameworkElement> 実際の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-541"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-542">別の親は、できるように、そのイベントは、標準の親のビジュアル ツリーをルーティングの標準的なパターンから逸脱した方法でルーティングまたはプレビューのルーティング方法で下方向に要素が代替の親構造体を作成する場所の場合、イベントのルーティングに使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-542">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-543">入力システムがこの要素を対象とするドラッグ アンド ドロップ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-543">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-544"><xref:System.Windows.UIElement.GiveFeedback>イベントにより、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更するドラッグ イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-544">The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="8b7ac-545">視覚的なフィードバックは、ドラッグ アンド ドロップ操作が、プロセスを助けます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-545">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="8b7ac-546">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.GiveFeedback>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-546">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-547">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.GiveFeedback>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-547">Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-548">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-548">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-549">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-549">Identifier field</span></span>|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|<span data-ttu-id="8b7ac-550">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-550">Routing strategy</span></span>|<span data-ttu-id="8b7ac-551">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-551">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-552">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-552">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="8b7ac-553">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewGiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-553">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="8b7ac-554">オーバーライド<xref:System.Windows.UIElement.OnGiveFeedback%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-554">Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-555">
            <see cref="E:System.Windows.UIElement.GiveFeedback" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-555">Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-556">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-556">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-557">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-557">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-558">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-558">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-559">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-559">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-560">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-560">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-561">この要素が論理フォーカスを取得したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-561">Occurs when this element gets logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-562">フォーカスがメソッド呼び出しを使用して強制的に意図的には、直前のキーボード フォーカスが別のスコープに存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-562">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="8b7ac-563">ここでは、要素にキーボード フォーカスが残り、このシナリオで場所、<xref:System.Windows.UIElement.Focus%2A>メソッドが呼び出されたが論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-563">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="8b7ac-564">このイベントをより正確に解釈というものが発生したときの値、<xref:System.Windows.UIElement.IsFocused%2A>からルート内の要素のプロパティが変更された`false`に`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-564">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="8b7ac-565">このイベントは、バブル ルーティングを使用するため、フォーカスを受け取る要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-565">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-566">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを得られる実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-566">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-567">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-567">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-568">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-568">Identifier field</span></span>|<xref:System.Windows.UIElement.GotFocusEvent>|  
|<span data-ttu-id="8b7ac-569">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-569">Routing strategy</span></span>|<span data-ttu-id="8b7ac-570">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-570">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-571">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-571">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="8b7ac-572">対応するトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-572">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-573">オーバーライド<xref:System.Windows.UIElement.OnGotFocus%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-573">Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-574">
            <see cref="E:System.Windows.UIElement.GotFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-574">Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-575">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-575">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-576">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-576">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-577">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-577">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-578">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-578">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-579">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-579">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-580">この要素にキーボード フォーカスが移動したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-580">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-581"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 類似するイベントです。 要素のフォーカス状態を保持するプロパティで状態の変更を追跡します。<xref:System.Windows.UIElement.GotKeyboardFocus>イベントは、多くの同じ状況で発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-581"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="8b7ac-582">このイベントは、バブル ルーティングを使用するため、フォーカスを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-582">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-583">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスのある実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-583">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="8b7ac-584">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.GotKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-584">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-585">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.GotKeyboardFocus>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-585">Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-586">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-586">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-587">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-587">Identifier field</span></span>|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="8b7ac-588">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-588">Routing strategy</span></span>|<span data-ttu-id="8b7ac-589">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-589">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-590">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-590">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8b7ac-591">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-591">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="8b7ac-592">オーバーライド<xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-592">Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-593">
            <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-593">Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-594">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-594">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-595">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-595">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-596">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-596">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-597">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-597">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-598">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-598">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-599">この要素がマウスをキャプチャしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-599">Occurs when this element captures the mouse.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-600">要素がマウスをキャプチャは、境界外にマウス ポインターがあってもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-600">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="8b7ac-601">マウスでは、ドラッグ アンド ドロップ操作中にのみがキャプチャ通常され、ドラッグ アンド ドロップ操作の削除アクションが発生するまでにキャプチャされたままです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-601">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="8b7ac-602">このイベントは、バブル ルーティングを使用するため、キャプチャを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-602">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-603">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>マウスのある実際の要素を決定するデータのキャプチャのイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-603">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="8b7ac-604">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.GotMouseCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-604">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-605">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.GotMouseCapture>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-605">Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-606">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-606">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-607">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-607">Identifier field</span></span>|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="8b7ac-608">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-608">Routing strategy</span></span>|<span data-ttu-id="8b7ac-609">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-609">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-610">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-610">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="8b7ac-611">対応する定義済みのトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-611">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-612">オーバーライド<xref:System.Windows.UIElement.OnGotMouseCapture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-612">Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-613">
            <see cref="E:System.Windows.UIElement.GotMouseCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-613">Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-614">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-614">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-615">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-615">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-616">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-616">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-617">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-617">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-618">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-618">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-619">この要素がスタイラスをキャプチャしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-619">Occurs when this element captures the stylus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-620">要素がスタイラスをキャプチャ、ときに、ポインターが境界外にある場合でも、スタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-620">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="8b7ac-621">スタイラスは、通常、ドラッグ アンド ドロップ操作中にのみキャプチャし、ドラッグ アンド ドロップ操作の削除アクションが発生するまでにキャプチャを保持します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-621">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="8b7ac-622">このイベントは、バブル ルーティングを使用するため、キャプチャを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-622">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-623">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>イベント データを実際のキャプチャを持つ要素を決定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-623">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="8b7ac-624">このイベントは、このクラスの添付イベントのエイリアスを作成できるように<xref:System.Windows.UIElement.GotStylusCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-624">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-625">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.GotStylusCapture>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-625">Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-626">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-626">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-627">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-627">Identifier field</span></span>|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="8b7ac-628">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-628">Routing strategy</span></span>|<span data-ttu-id="8b7ac-629">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-629">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-630">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-630">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-631">対応する定義済みのトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-631">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-632">オーバーライド<xref:System.Windows.UIElement.OnGotStylusCapture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-632">Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-633">
            <see cref="E:System.Windows.UIElement.GotStylusCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-633">Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-634">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-634">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-635">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-635">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-636">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-636">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-637">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-637">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-638">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-638">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-639">タッチがこの要素にキャプチャされると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-639">Occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-640">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-640">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-641">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-641">Identifier field</span></span>|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="8b7ac-642">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-642">Routing strategy</span></span>|<span data-ttu-id="8b7ac-643">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-643">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-644">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-644">Delegate</span></span>|<span data-ttu-id="8b7ac-645"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-645"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-646">オーバーライド<xref:System.Windows.UIElement.OnGotTouchCapture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-646">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-647">
            <see cref="E:System.Windows.UIElement.GotTouchCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-647">Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-648">この要素にアニメーション化されたプロパティがあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-648">Gets a value indicating whether this element has any animated properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-649">プロパティのいずれかに添付されたアニメーションをこの要素が持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-649">
              <see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-650">このプロパティを返します`true`(ロック、常に実行されている) のアニメーションの永続的なまたは特定のタイムラインのアニメーションのいずれか。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-650">This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-651">
            <see cref="T:System.Windows.UIElement" /> にフォーカスがあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-651">Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-652">
            <see cref="T:System.Windows.UIElement" /> にフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-652">
              <see langword="true" /> if the <see cref="T:System.Windows.UIElement" /> has focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-653">サブクラスは、この要素にキーボード フォーカス時に指定するには、このプロパティをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-653">Subclasses can override this property to specify when the element has keyboard focus.</span></span>  <span data-ttu-id="8b7ac-654">これによりときに、<xref:System.Windows.UIElement>キーボード フォーカスを持つことができる要素が含まれています要素にフォーカスがあるレポートを必要とします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-654">This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-655">
            <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> を実装して、基本要素のヒット テスト動作を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-655">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">
          <span data-ttu-id="8b7ac-656">実行するヒット テストについて、初期ヒット ポイントも含めて、記述します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-656">Describes the hit test to perform, including the initial hit point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-657">
            <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> を実装して、基本要素のヒット テスト動作を提供します (<see cref="T:System.Windows.Media.GeometryHitTestResult" /> を返します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-657">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-658">評価されたジオメトリを含むテスト結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-658">Results of the test, including the evaluated geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-659">元の仮想メソッドを参照してください<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>についてはさらにこのメソッドをオーバーライドする派生したクラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-659">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="8b7ac-660">注意してくださいいくつかの特定のコントロール (<xref:System.Windows.Controls.TextBlock>など) が個別の実装は、この 1 つをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-660">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.</span></span>  
  
 <span data-ttu-id="8b7ac-661">このメソッドは、アプリケーション コードから呼び出すものではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-661">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="8b7ac-662">このメソッドは、(にマウス ポインターが要素上など) かどうかは、入力のシステムのさまざまな側面によって公開される内部のヒット テストの動作をサポートします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-662">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">
          <span data-ttu-id="8b7ac-663">実行するヒット テストについて、初期ヒット ポイントも含めて、記述します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-663">Describes the hit test to perform, including the initial hit point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-664">
            <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> を実装して、基本要素のヒット テスト動作を提供します (<see cref="T:System.Windows.Media.HitTestResult" /> を返します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-664">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-665">評価されたポイントを含む、テストの結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-665">Results of the test, including the evaluated point.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-666">元の仮想メソッドを参照してください<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>についてはさらにこのメソッドをオーバーライドする派生したクラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-666">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="8b7ac-667">なおいくつかの特定のコントロール (<xref:System.Windows.Controls.TextBlock>、たとえば) 個別の実装をオーバーライドする必要は<xref:System.Windows.UIElement.HitTestCore%2A>で定義されている<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-667">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-668">このメソッドは、アプリケーション コードから呼び出すものではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-668">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="8b7ac-669">このメソッドは、(にマウス ポインターが要素上など) かどうかは、入力のシステムのさまざまな側面によって公開される内部のヒット テストの動作をサポートします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-669">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-670">この要素に関連付けられている入力バインドのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-670">Gets the collection of input bindings associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-671">入力バインディングのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-671">The collection of input bindings.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-672">入力バインディングは、コマンド入力デバイスへのバインディングをサポートします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-672">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="8b7ac-673">たとえば、<xref:System.Windows.Input.MouseBinding>を実装は、マウス デバイスに特定のプロパティが含まれているバインディングを入力します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-673">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="8b7ac-674">両方の型に関連するだけでなく、インスタンスで宣言されている入力バインド入力バインドのコレクションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-674">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="8b7ac-675">関連するプロパティ、<xref:System.Windows.UIElement.CommandBindings%2A>コマンドのショートカット キーのコレクションを保持します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-675">A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="8b7ac-676">これらとは異なり、入力バインディングとコマンドの処理 - 既知のコマンドに関連付けられているアクションの下の次のレベルを表しています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-676">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8b7ac-677">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="8b7ac-677">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8b7ac-678">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8b7ac-678">XAML Values</span></span>  
 <span data-ttu-id="8b7ac-679">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="8b7ac-679">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="8b7ac-680">1 つまたは複数<xref:System.Windows.Input.InputBinding>要素 (通常、<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>派生クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-680">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="8b7ac-681">これらの各が予期、<xref:System.Windows.Input.InputBinding.Command%2A>と<xref:System.Windows.Input.InputBinding.Gesture%2A>属性に設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-681">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-682">次の例では、このプロパティを設定で、 <xref:System.Windows.Window>、単一<xref:System.Windows.Input.KeyBinding>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-682">The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.</span></span>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="8b7ac-683">詳細については、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 、コレクションの構文を参照してください[XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-683">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="8b7ac-684">この要素内のオフセット座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-684">The offset coordinates within this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-685">現在の要素の原点からの指定した相対座標にある、現在の要素内の入力要素を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-685">Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-686">指定した位置にある子要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-686">The element child that is located at the given position.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-687"><xref:System.Windows.IInputElement> その型が共通のインターフェイスの両方であるため、戻り値の型として返されます<xref:System.Windows.UIElement>と<xref:System.Windows.ContentElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-687"><xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="8b7ac-688">戻り値の型を適切にキャストまたはがインターフェイスのインスタンスで定義されている特定のメンバーを使用することができますし、<xref:System.Windows.IInputElement>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-688">You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.</span></span>  
  
 <span data-ttu-id="8b7ac-689">このメソッドは、通常、アプリケーション コードからは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-689">This method typically is not called from your application code.</span></span> <span data-ttu-id="8b7ac-690">このメソッドを呼び出すことは、かなりの低レベルの入力機能が既に存在し、マウス デバイス ロジックを再作成などを再実装する場合に適してはのみです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-690">Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</span></span>  
  
 <span data-ttu-id="8b7ac-691"><xref:System.Windows.IContentHost> コントラクト、<xref:System.Windows.IContentHost.InputHitTest%2A>明示的に実装を選択するいくつかの要素が同じシグネチャを持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-691"><xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-692">要素の配置状態 (レイアウト) を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-692">Invalidates the arrange state (layout) for the element.</span>
          </span>
          <span data-ttu-id="8b7ac-693">無効にした後、要素のレイアウトが更新されます。更新は、<see cref="M:System.Windows.UIElement.UpdateLayout" /> によって強制されない限り非同期に行われます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-693">After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-694">呼び出しを頻繁に<xref:System.Windows.UIElement.InvalidateArrange%2A>またはに特に<xref:System.Windows.UIElement.UpdateLayout%2A>大幅なパフォーマンスに影響があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-694">Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="8b7ac-695">したがって、他の後続の呼び出しの状態の正確なレイアウトを絶対に必要ない限り、このメソッドを呼び出す[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]コードにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-695">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span> <span data-ttu-id="8b7ac-696">高度なシナリオを呼び出すことができます<xref:System.Windows.UIElement.InvalidateArrange%2A>を作成するかどうかは、<xref:System.Windows.PropertyChangedCallback>に含まれていない依存関係プロパティの<xref:System.Windows.Freezable>または<xref:System.Windows.FrameworkElement>が変更されたときに、レイアウトの配置パスをまだに影響を与えるクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-696">An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-697">要素の測定状態 (レイアウト) を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-697">Invalidates the measurement state (layout) for the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-698">また呼び出しでこのメソッドを呼び出す<xref:System.Windows.UIElement.InvalidateArrange%2A>内部的を呼び出す必要はありません<xref:System.Windows.UIElement.InvalidateMeasure%2A>と<xref:System.Windows.UIElement.InvalidateArrange%2A>を連続しています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-698">Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession.</span></span> <span data-ttu-id="8b7ac-699">無効化、後に要素がレイアウト更新しない限り、非同期的に行われます<xref:System.Windows.UIElement.UpdateLayout%2A>同期レイアウト変更を強制すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-699">After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.</span></span>  
  
 <span data-ttu-id="8b7ac-700">WPF フレームワーク レベルのレイアウト システムは、要素のビジュアル ツリー内の変更の処理を行い、レイアウト システムが必要な場合に、このメソッドの該当するショートカットを呼び出して最も一般的なレイアウトの無効化の場合。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-700">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</span></span> <span data-ttu-id="8b7ac-701">直接操作する、要素ツリーのまたは類似したシナリオを高度なレイアウトを完全な実装を作成する場合にのみ、このメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-701">You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</span></span> <span data-ttu-id="8b7ac-702">このような高度なシナリオの 1 つは、作成するかどうかは、<xref:System.Windows.PropertyChangedCallback>に含まれていない依存関係プロパティの<xref:System.Windows.Freezable>または<xref:System.Windows.FrameworkElement>が変更されたときのレイアウトの測定パスに影響を与えるまだクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-702">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.</span></span>  
  
 <span data-ttu-id="8b7ac-703">呼び出しを頻繁に<xref:System.Windows.UIElement.InvalidateMeasure%2A>またはに特に<xref:System.Windows.UIElement.UpdateLayout%2A>大幅なパフォーマンスに影響があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-703">Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="8b7ac-704">したがって、他の後続の呼び出しの状態の正確なレイアウトを絶対に必要ない限り、このメソッドを呼び出す[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]コードにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-704">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-705">要素の描画を無効にして、新しい完全なレイアウト パスを強制します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-705">Invalidates the rendering of the element, and forces a complete new layout pass.</span>
          </span>
          <span data-ttu-id="8b7ac-706">レイアウト サイクルが完了した後、<see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> が呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-706">
              <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-707">このメソッドを呼び出す<xref:System.Windows.UIElement.InvalidateArrange%2A>内部的にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-707">This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.</span></span>  
  
 <span data-ttu-id="8b7ac-708">一般に、このメソッドは、アプリケーション コードからは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-708">This method is not generally called from your application code.</span></span> <span data-ttu-id="8b7ac-709">WPF フレームワーク レベルのレイアウト システムは、要素のビジュアル ツリー内の変更の処理、必要な場合に、このメソッドの該当するショートカットを呼び出すことが既にです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-709">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</span></span> <span data-ttu-id="8b7ac-710">このメソッドを呼び出すことは、高度なシナリオでのみ必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-710">Calling this method is necessary only for advanced scenarios.</span></span> <span data-ttu-id="8b7ac-711">このような高度なシナリオの 1 つは、作成するかどうかは、<xref:System.Windows.PropertyChangedCallback>に含まれていない依存関係プロパティの<xref:System.Windows.Freezable>または<xref:System.Windows.FrameworkElement>を変更するとき、レイアウトに影響を与えるまだクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-711">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-712">この要素のレイアウトにおける子要素の計算済みのサイズと位置が有効かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-712">Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-713">レイアウトのサイズと位置が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-713">
              <see langword="true" /> if the size and position of layout are valid; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-714">呼び出すことによって無効にする方法を強制する<xref:System.Windows.UIElement.InvalidateArrange%2A>この要素 (またはその親) にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-714">You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents).</span></span> <span data-ttu-id="8b7ac-715">フラグを設定のレイアウトを再構成するタイミングで、レイアウト システムを決定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-715">This flags the layout for recomposition at such time as the layout system determines.</span></span> <span data-ttu-id="8b7ac-716">またはを即時に呼び出す<xref:System.Windows.UIElement.UpdateLayout%2A>できても、これは、これ以上の無効化が保留になっていないことが確実である場合にのみ実行してありますが、(多数の強制が不必要に更新は、パフォーマンスへの影響を持つ)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-716">Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</span></span>  
  
 <span data-ttu-id="8b7ac-717"><xref:System.Windows.UIElement.IsArrangeValid%2A> ことはできません`true`しない限り、<xref:System.Windows.UIElement.IsMeasureValid%2A>も`true`(レイアウト プロセスで配置することはできません有効な最初される有効な測定値なし)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-717"><xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-718">この要素が[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] で有効かどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-718">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="8b7ac-719">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-719">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-720">要素が有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-720">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-721">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-721">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-722">このプロパティがクラスに固有の実装によって影響を受けることに注意してください<xref:System.Windows.UIElement.IsEnabledCore%2A>特定の要素、実行時に多くの場合。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-722">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="8b7ac-723">したがって、ここで示されている既定値がありますいない効果的です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-723">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="8b7ac-724">インスタンス、<xref:System.Windows.Controls.Primitives.ScrollBar>なります<xref:System.Windows.UIElement.IsEnabled%2A>`false`スクロール バーをサポートする必要がないと判断されたときにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-724">For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar.</span></span> <span data-ttu-id="8b7ac-725">この値を設定しようとしても可能性があるとオーバーライドされますによって返される値<xref:System.Windows.UIElement.IsEnabledCore%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-725">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-726">有効になっていない要素は、ヒット テストやフォーカスに参加していないと、そのため、入力イベントのソースはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-726">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-727">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-727">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-728">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-728">Identifier field</span></span>|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|<span data-ttu-id="8b7ac-729">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-729">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-730">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-730">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-731">次の例はハンドラーで 1 つのボタンが設定されますが実行されたときに<xref:System.Windows.UIElement.IsEnabled%2A>`false`別の名前付きボタン上`b1`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-731">The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.</span></span>  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-732">この要素の <see cref="P:System.Windows.UIElement.IsEnabled" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-732">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-733">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-733">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-734">派生クラス内で <see cref="P:System.Windows.UIElement.IsEnabled" /> の戻り値になる値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-734">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-735">要素が有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-735">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-736">このプロパティの既定の実装では、値をキャッシュし、またこの要素の親要素が有効になっているかどうかを計算します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-736">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span>
            </span>
            <span data-ttu-id="8b7ac-737">(親が有効でない場合、子要素効果的に有効にできません実用的な[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)])。この実装をオーバーライドすることを確認する場合は、この動作を保持する基本実装を呼び出します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-737">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span>
            </span>
            <span data-ttu-id="8b7ac-738">
              <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />クラスはこのプロパティの既存のオーバーライドの実装を提供します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-738">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class provides an existing override implementation of this property.</span>
            </span>
            <span data-ttu-id="8b7ac-739">このオーバーライドでは、コンテンツの表示領域内のコンテンツが利用可能な領域を超えるかどうかを判断します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-739">This override determines whether the content inside the content presentation area exceeds the available area.</span>
            </span>
            <span data-ttu-id="8b7ac-740">コンテンツは、領域を超えることは、スクロール バーの部分が有効にします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-740">If the content does exceed the area, the scrollbar portion is enabled.</span>
            </span>
            <span data-ttu-id="8b7ac-741">それ以外の場合、スクロール バーは有効ではありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-741">Otherwise, the scrollbar is not enabled.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-742">
            <see cref="P:System.Windows.UIElement.IsEnabled" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-742">Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-743">この要素に論理フォーカスがあるかどうかを判断する値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-743">Gets a value that determines whether this element has logical focus.</span>
          </span>
          <span data-ttu-id="8b7ac-744">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-744">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-745">この要素に論理フォーカスが設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-745">
              <see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-746">アプリケーションは、複数のフォーカス区分をなど、メニューの内容と、アプリケーションの残りの部分の間に、論理フォーカスはキーボード フォーカスと異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-746">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="8b7ac-747">このシナリオでは、アプリケーションの UI の 1 つの要素にキーボード フォーカスが設定できるだけ、ただし、他のフォーカス区分の特定の要素も保持したまま論理フォーカスします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-747">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="8b7ac-748">論理フォーカスの詳細については、次を参照してください。[フォーカス概要](~/docs/framework/wpf/advanced/focus-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-748">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="8b7ac-749">(これは読み取り専用)、このプロパティを設定してフォーカスを設定しないとします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-749">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="8b7ac-750">このプロパティの典型的な使用がの依存関係プロパティとして使用するには、<xref:System.Windows.Setter>または<xref:System.Windows.EventTrigger>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-750">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="8b7ac-751">フォーカスを設定するプログラムで、<xref:System.Windows.UIElement.Focus%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-751">To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>.</span></span> <span data-ttu-id="8b7ac-752">ユーザーの操作によって、またはコントロールの実装は、マウスのキャプチャの動作を含む可能性が、フォーカスを設定もできます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-752">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-753">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-753">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-754">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-754">Identifier field</span></span>|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|<span data-ttu-id="8b7ac-755">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-755">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-756">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-756">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-757">次の例は、フォーカスが移動するときに、コントロールの背景を変更するコード ハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-757">The following example is a code handler that changes the background of a control when it is focused.</span></span>  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 <span data-ttu-id="8b7ac-758">これと同じ効果を実現するために別の一般的な方法は、配置には、<xref:System.Windows.Trigger>で、 <xref:System.Windows.Style> ; のコントロールのこのアプローチ分離コードを含む特定のイベントの処理は必要ありませんでき、デザイナーの対話型およびグラフィカルな性質を大きい値にアクセス[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-758">Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="8b7ac-759">例については、次を参照してください。[する方法: 外側の光彩効果を作成する](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-759">For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-760">
            <see cref="P:System.Windows.UIElement.IsFocused" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-760">Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-761">この要素が、表示される内容のある部分からのヒット テストの結果として返されるかどうかを宣言する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-761">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span>
          </span>
          <span data-ttu-id="8b7ac-762">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-762">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-763">少なくとも 1 つのポイントからヒット テスト結果としてこの要素が返される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-763">
              <see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-764">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-764">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-765">このプロパティの有効な値は、ヒット テスト可能な要素の論理ツリー内の相対位置に影響されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-765">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="8b7ac-766">たとえば、要素の子要素にある要素のないヒット テストの表示、子のプロパティの有効な値は残ります`false`場合でも、その値をローカルに設定しようとしています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-766">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="8b7ac-767">この理由は、設定しないことが重要<xref:System.Windows.UIElement.IsHitTestVisible%2A>に`false`複合コントロールで任意の入力を必要またはそのコントロールのヒット テストしない限り、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-767">For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="8b7ac-768">ヒット テストについて詳しくは、「[ビジュアル層でのヒット テスト](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-768">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-769">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-769">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-770">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-770">Identifier field</span></span>|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|<span data-ttu-id="8b7ac-771">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-771">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-772">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-772">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-773">この要素の <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依存関係プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-773">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-774">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-774">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-775">
            <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-775">Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-776">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] などの入力方法システムが、この要素への入力の処理に対して有効かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-776">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-777">入力方法がアクティブの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-777">
              <see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-778">基になる添付プロパティの既定値は<see langword="true;" />ただし、これが影響を受けること実行時に入力方式の実際の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-778">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-779">このプロパティが添付プロパティによって返される値を返します<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType>現在有効な入力メソッド (キーボード、音声、およびその他の入力デバイス) 用です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-779">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-780">この要素にキーボード フォーカスがあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-780">Gets a value indicating whether this element has keyboard focus.</span>
          </span>
          <span data-ttu-id="8b7ac-781">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-781">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-782">この要素にキーボード フォーカスが設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-782">
              <see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-783">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-783">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-784">フォーカスに関連するイベントは、このプロパティの値への変更を伴うことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-784">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="8b7ac-785"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> および<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>でよく使われるクラスのイベント ハンドラー内の他の入力に関連するイベント、インスタンスの要素にキーボード フォーカスは既にまたはときにマウスを決定するイベントとキーボード イベントが発生する組み合わせてかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-785"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-786">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-786">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-787">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-787">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="8b7ac-788">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-788">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-789">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-789">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-790">この要素の <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-790">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-791">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-791">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-792">
            <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-792">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-793">キーボード フォーカスがその要素またはそのビジュアル ツリーの子要素内の任意の場所にあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-793">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span>
          </span>
          <span data-ttu-id="8b7ac-794">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-794">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-795">キーボード フォーカスが要素またはその子要素上に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-795">
              <see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-796">このプロパティの値に変更が通常発生させる、<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>イベント、派生クラスがオーバーライドしない限り、<xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>を抑制する状況イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-796">Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="8b7ac-797">このプロパティを直接設定しないが、要素にフォーカスを設定するには呼び出すことによって<xref:System.Windows.UIElement.Focus%2A>、またはすることにより、<xref:System.Windows.UIElement.MoveFocus%2A>要求します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-797">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="8b7ac-798">このプロパティの値を変更するこれらのメソッド呼び出しのいずれかの可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-798">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="8b7ac-799"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> および<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>用いられますクラスのイベント ハンドラー内で他の入力に関連するイベントのインスタンスの要素にキーボード フォーカスは既にまたはときにマウスを決定するイベントとキーボード イベントが発生する組み合わせてかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-799"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-800">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-800">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-801">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-801">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="8b7ac-802">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-802">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-803">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-803">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-804">この要素の <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-804">Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-805">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-805">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-806">
            <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-806">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-807">この <see cref="T:System.Windows.UIElement" /> で操作イベントが有効かどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-807">Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-808">この <see cref="T:System.Windows.UIElement" /> で操作イベントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-808">
              <see langword="true" /> if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-809">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-809">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-810">このプロパティは、する場合は true に設定、<xref:System.Windows.UIElement>を受信する、 <xref:System.Windows.UIElement.ManipulationStarting>、 <xref:System.Windows.UIElement.ManipulationStarted>、 <xref:System.Windows.UIElement.ManipulationDelta>、 <xref:System.Windows.UIElement.ManipulationInertiaStarting>、 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>、および<xref:System.Windows.UIElement.ManipulationCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-810">Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events.</span></span> <span data-ttu-id="8b7ac-811">操作の詳細については、次を参照してください。、[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-811">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="8b7ac-812">操作に応答するアプリケーションの例は、次を参照してください。[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-812">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-813">次の例では、赤色の四角形をしたアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-813">The following example creates an application that has a red Rectangle.</span></span>  <span data-ttu-id="8b7ac-814"><xref:System.Windows.UIElement.IsManipulationEnabled%2A>四角形のプロパティが true に設定され、アプリケーションのウィンドウをサブスクライブする、 <xref:System.Windows.UIElement.ManipulationStarting>、 <xref:System.Windows.UIElement.ManipulationDelta>、および<xref:System.Windows.UIElement.ManipulationInertiaStarting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-814">The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events.</span></span> <span data-ttu-id="8b7ac-815">この例のサンプルが大きくの一部である[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-815">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-816">
            <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-816">Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-817">レイアウト測定パスから返された現在のサイズが有効かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-817">Gets a value indicating whether the current size returned by layout measure is valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-818">レイアウトの測定パスから有効な現在値が返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-818">
              <see langword="true" /> if the measure pass of layout returned a valid and current value; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-819">測定と配置を呼び出すことによって無効化を強制する<xref:System.Windows.UIElement.InvalidateMeasure%2A>この要素 (またはビジュアル ツリーの親要素)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-819">You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree).</span></span> <span data-ttu-id="8b7ac-820">これにより、レイアウト再構成されるように、非同期的にレイアウト システムによって決定時に発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-820">This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</span></span> <span data-ttu-id="8b7ac-821">代わりに、行うことができるへの即時呼び出し<xref:System.Windows.UIElement.UpdateLayout%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-821">Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>.</span></span> <span data-ttu-id="8b7ac-822">だけに呼び出す必要がありますただし、する<xref:System.Windows.UIElement.UpdateLayout%2A>かどうかそれ以上の無効化が保留になっていないことが可能性があります (強制不必要に更新プログラムの数が多いはパフォーマンスの結果になります)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-822">However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</span></span>  
  
 <span data-ttu-id="8b7ac-823">場合<xref:System.Windows.UIElement.IsMeasureValid%2A>は`false`、<xref:System.Windows.UIElement.IsArrangeValid%2A>必要もあります`false`(レイアウト処理の実施、ロジックで配置することはできません有効な最初される有効な測定値なし)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-823">If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-824">この要素にマウスがキャプチャされるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-824">Gets a value indicating whether the mouse is captured to this element.</span>
          </span>
          <span data-ttu-id="8b7ac-825">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-825">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-826">要素がマウスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-826">
              <see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-827">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-827">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-828">マウスのキャプチャ状態は、インプロセスのドラッグ アンド ドロップ操作に関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-828">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-829">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-829">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-830">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-830">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="8b7ac-831">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-831">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-832">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-832">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-833">次の例では、マウスのキャプチャ状態を切り替えます要素にマウスが既にキャプチャされているかどうかに基づいて。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-833">The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</span></span>  
  
 <span data-ttu-id="8b7ac-834">マウスのキャプチャが他の場所でその要素にマウスのキャプチャが設定されています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-834">If mouse capture is elsewhere, the mouse capture is set to that element.</span></span> <span data-ttu-id="8b7ac-835">要素にマウスのキャプチャがある場合に、呼び出すことによってクリアされます<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>null 入力です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-835">If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with a null input.</span></span>  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-836">この要素の <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-836">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-837">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-837">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-838">
            <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-838">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-839">この要素またはビジュアル ツリー内の子要素がマウスのキャプチャを保持するかどうかを決定する値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-839">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span>
          </span>
          <span data-ttu-id="8b7ac-840">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-840">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-841">この要素または格納されている要素がマウスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-841">
              <see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-842">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-842">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-843">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-843">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="8b7ac-844">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-844">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-845">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-845">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-846">この要素の <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> の値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-846">Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-847">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-847">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-848">
            <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-848">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-849">マウス ポインターの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-849">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span>
          </span>
          <span data-ttu-id="8b7ac-850">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-850">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-851">
            <see langword="true" /> マウス ポインターがヒット テストと同じ要素結果の上にある場合それ以外の場合、<see langword="false" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-851">
              <see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-852">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-852">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-853">異なり<xref:System.Windows.UIElement.IsMouseOver%2A>、のみ、このプロパティは`true`literal 要素上にマウス ポインターが場合などは、ヒット テストのです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-853">Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test.</span></span> <span data-ttu-id="8b7ac-854">代わりに子要素の上にマウス ポインターが、具体的には要素のより深いテンプレートおよび複合の一部である要素をこのプロパティはするか`false`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-854">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="8b7ac-855">コントロールは合成する方法がわかっていなければ (たとえば、プロパティを使用するこのカスタム コントロール テンプレートで定義したコントロールの)、このプロパティは、予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-855">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="8b7ac-856">コントロールをいないオーサリングは、ほとんどのシナリオを使用して<xref:System.Windows.UIElement.IsMouseOver%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-856">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="8b7ac-857">この要素にマウスがキャプチャされるかどうかと、このプロパティは、`true`のキャプチャ時に、このプロパティを返し続けます`true`までマウスのキャプチャが失われ、その境界上にポインターがありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-857">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-858">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-858">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-859">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-859">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="8b7ac-860">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-860">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-861">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-861">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-862">この要素の <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-862">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-863">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-863">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-864">
            <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-864">Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-865">マウス ポインターがこの要素 (ビジュアル ツリー内の子要素を含む) の上にあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-865">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span>
          </span>
          <span data-ttu-id="8b7ac-866">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-866">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-867">マウス ポインターが要素またはその子要素上に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-867">
              <see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-868">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-868">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-869">通常、(ビジュアル ツリーを)、コントロール内のさまざまな要素はすべて報告コンテナー コントロールのマウスの状態になるようコントロールは複合コントロール。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-869">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="8b7ac-870">たとえば、<xref:System.Windows.Controls.ListBox>スタイルのコントロールはレポート<xref:System.Windows.UIElement.IsMouseOver%2A>として`true`任意の場所の geometry 上にマウスが場合も含めて<xref:System.Windows.Controls.ListBoxItem>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-870">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="8b7ac-871">類似しています"IsMouseOverChanged"イベントが存在しないいくつかの類似イベントを行います。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-871">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="8b7ac-872">たとえば、処理<xref:System.Windows.UIElement.MouseEnter>、 <xref:System.Windows.UIElement.MouseMove>、および<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-872">For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="8b7ac-873">この要素がマウスをキャプチャする場合に、このプロパティが残ります`true`マウスのキャプチャが失われ、マウス ポインターが要素の境界を離れるまでです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-873">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="8b7ac-874">一部のコントロールは、意図的がマウスに直接関係しない特定の操作上にマウス ポインターをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-874">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="8b7ac-875">これにより、<xref:System.Windows.UIElement.IsMouseOver%2A>される`true`マウスが移動がない場合でもです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-875">This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-876">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-876">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-877">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-877">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|<span data-ttu-id="8b7ac-878">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-878">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-879">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-879">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-880">次の例では、このプロパティを参照のプロパティの型として、<xref:System.Windows.Trigger>の一部では、 \<Style.Triggers > ブロックします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-880">The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \<Style.Triggers> block.</span></span> <span data-ttu-id="8b7ac-881">マウスがコントロール上にある場合は、コントロールのテキストが青色になり、カーソルが手の形になります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-881">If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</span></span>  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-882">
            <see cref="P:System.Windows.UIElement.IsMouseOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-882">Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-883">この要素によってスタイラスがキャプチャされるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-883">Gets a value indicating whether the stylus is captured by this element.</span>
          </span>
          <span data-ttu-id="8b7ac-884">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-884">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-885">要素がスタイラスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-885">
              <see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-886">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-886">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-887">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-887">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-888">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-888">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-889">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-889">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-890">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-890">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="8b7ac-891">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-891">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-892">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-892">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-893">この要素の <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-893">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-894">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-894">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-895">
            <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-895">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-896">この要素、または要素の境界とそのビジュアル ツリー内の要素がスタイラス キャプチャを保持するかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-896">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span>
          </span>
          <span data-ttu-id="8b7ac-897">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-897">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-898">この要素または格納されている要素がスタイラスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-898">
              <see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-899">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-899">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-900">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-900">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-901">詳細については、次を参照してください。 [Windows Vista でタッチ入力サポート](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)と[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-901">For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-902">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-902">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-903">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-903">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="8b7ac-904">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-904">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-905">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-905">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-906">この要素の <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-906">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-907">これは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-907">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-908">
            <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-908">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-909">スタイラスの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-909">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span>
          </span>
          <span data-ttu-id="8b7ac-910">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-910">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-911">ヒット テストと同じ要素結果上にスタイラス ポインターがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-911">
              <see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-912">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-912">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-913">異なり<xref:System.Windows.UIElement.IsStylusOver%2A>、のみ、このプロパティは`true`要素の上にスタイラスがある場合。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-913">Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="8b7ac-914">スタイラスが代わりに子要素上、または要素は要素のより深い複合 (ビジュアル ツリー) の一部である場合、このプロパティはなって`false`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-914">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="8b7ac-915">コントロールは合成する方法がわかっていなければ (たとえば、プロパティを使用するこのカスタム コントロール テンプレートで定義したコントロールの)、このプロパティは、予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-915">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="8b7ac-916">コントロールをいないオーサリングは、ほとんどのシナリオを使用して<xref:System.Windows.UIElement.IsStylusOver%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-916">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="8b7ac-917">この要素がスタイラス キャプチャを持つプロパティは、この場合`true`のキャプチャ時に、このプロパティの値`true`までスタイラスのキャプチャが失われ、その境界上にスタイラスがありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-917">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="8b7ac-918">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-918">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-919">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-919">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-920">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-920">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-921">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-921">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="8b7ac-922">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-922">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-923">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-923">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-924">この要素の <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-924">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-925">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-925">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-926">
            <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-926">Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-927">スタイラスのカーソルがこの要素 (子ビジュアル要素を含む) の上にあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-927">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span>
          </span>
          <span data-ttu-id="8b7ac-928">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-928">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-929">スタイラス カーソルが要素またはその子要素上に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-929">
              <see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-930">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-930">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-931">この要素にスタイラスのキャプチャがある場合は、このプロパティは返す引き続き`true`スタイラスのキャプチャが失われ、ポインターがその範囲外になるまでです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-931">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="8b7ac-932">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-932">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-933">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-933">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-934">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-934">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-935">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-935">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|<span data-ttu-id="8b7ac-936">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-936">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-937">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-937">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-938">
            <see cref="P:System.Windows.UIElement.IsStylusOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-938">Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-939">この要素が[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] に表示されるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-939">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="8b7ac-940">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-940">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-941">要素が表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-941">
              <see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-942">決定、<xref:System.Windows.UIElement.IsVisible%2A>値がレイアウトのすべての要因を考慮に入れます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-942">Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account.</span></span> <span data-ttu-id="8b7ac-943">これに対し、 <xref:System.Windows.UIElement.Visibility%2A>、プログラムによって、要素を表示または非表示の目的は、これは、設定可能なプロパティのみを示します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-943">In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="8b7ac-944">要素を<xref:System.Windows.UIElement.IsVisible%2A>は`false`いない入力イベント (またはコマンド) に参加での操作を行っていないか、メジャーに影響を与えるまたは配置レイアウトのパス、フォーカスを設定していない、タブ シーケンスに含まれないおよびヒット テストで報告されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-944">Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="8b7ac-945">要素とは異なり、ここで<xref:System.Windows.UIElement.IsEnabled%2A>は`false`イベントおよびコマンド、およびヒット テストには参加してこれにフォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-945">In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-946">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-946">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-947">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-947">Identifier field</span></span>|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|<span data-ttu-id="8b7ac-948">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-948">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-949">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-949">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-950">この要素の <see cref="P:System.Windows.UIElement.IsVisible" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-950">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-951">要素はレイアウト システムの値以外の理由でレンダリングされていない場合、このイベントは発生しませんが、<xref:System.Windows.UIElement.IsVisible%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-951">This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property.</span></span> <span data-ttu-id="8b7ac-952">たとえば、要素には必要ビジュアルが関連付けられていない場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-952">For example, the element might not have an associated visual.</span></span>  
  
 <span data-ttu-id="8b7ac-953">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-953">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-954">
            <see cref="P:System.Windows.UIElement.IsVisible" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-954">Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-955">この要素にフォーカスがある状態でキーが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-955">Occurs when a key is pressed while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-956">キーの処理は、コマンド実行やテキストの合成などの他のプラットフォーム機能と対話します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-956">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="8b7ac-957"><xref:System.Windows.UIElement.KeyDown>イベントは、下位レベルのテキスト入力イベントを特定のコントロールで期待どおりに動作しない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-957">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="8b7ac-958">これは、一部のコントロールがコントロールの複合か、テキストの上位レベルのバージョンを提供するクラスの処理が処理を入力し、関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-958">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="8b7ac-959">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.KeyDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-959">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-960">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.KeyDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-960">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-961">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-961">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-962">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-962">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyDownEvent>|  
|<span data-ttu-id="8b7ac-963">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-963">Routing strategy</span></span>|<span data-ttu-id="8b7ac-964">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-964">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-965">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-965">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8b7ac-966">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewKeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-966">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-967">オーバーライド<xref:System.Windows.UIElement.OnKeyDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-967">Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-968">
            <see cref="E:System.Windows.UIElement.KeyDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-968">Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-969">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-969">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-970">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-970">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-971">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-971">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-972">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-972">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-973">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-973">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-974">この要素にフォーカスがあるときにキーが離されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-974">Occurs when a key is released while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-975">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>このクラスのイベントをアタッチできるように<xref:System.Windows.UIElement.KeyUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素としては、継承です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-975">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-976">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.KeyUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-976">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-977">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-977">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-978">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-978">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyUpEvent>|  
|<span data-ttu-id="8b7ac-979">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-979">Routing strategy</span></span>|<span data-ttu-id="8b7ac-980">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-980">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-981">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-981">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8b7ac-982">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewKeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-982">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-983">オーバーライド<xref:System.Windows.UIElement.OnKeyUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-983">Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-984">
            <see cref="E:System.Windows.UIElement.KeyUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-984">Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-985">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-985">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-986">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-986">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-987">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-987">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-988">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-988">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-989">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-989">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-990">現在の <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられた各種ビジュアル要素のレイアウトが変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-990">Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-991">レイアウトの更新は、プロパティの変更、ウィンドウ サイズの変更、または明示的なユーザー要求の結果として発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-991">A layout update can occur as a result of a property change, a window resize, or an explicit user request.</span></span>  
  
 <span data-ttu-id="8b7ac-992">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-992">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-993">この要素が論理フォーカスを失ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-993">Occurs when this element loses logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-994">メソッド呼び出しを使用して意図的にフォーカスを外しているにもかかわらず、直前のキーボード フォーカスが異なるスコープ内に存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-994">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="8b7ac-995">ここでは、キーボード フォーカスは残りますが、および要素の位置、<xref:System.Windows.UIElement.Focus%2A>メソッドが呼び出されたが論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-995">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="8b7ac-996">このイベントをより正確に解釈というものが発生したときの値、<xref:System.Windows.UIElement.IsFocused%2A>からルート内の要素のプロパティが変更される`true`に`false`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-996">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="8b7ac-997">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-997">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-998">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを得られる実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-998">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-999">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-999">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1000">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1000">Identifier field</span></span>|<xref:System.Windows.UIElement.LostFocusEvent>|  
|<span data-ttu-id="8b7ac-1001">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1001">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1002">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1002">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1003">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1003">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1004">対応するトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1004">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-1005">オーバーライド<xref:System.Windows.UIElement.OnLostFocus%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1005">Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1006">
            <see cref="E:System.Windows.UIElement.LostFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1006">Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1007">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1007">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1008">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1008">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1009">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1009">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1010">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1010">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1011">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1011">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1012">この要素からキーボード フォーカスが離れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1012">Occurs when the keyboard is no longer focused on this element,.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1013">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1013">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-1014">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスが失われた実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1014">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="8b7ac-1015">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.LostKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1015">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1016">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.LostKeyboardFocus>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1016">Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1017">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1017">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1018">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1018">Identifier field</span></span>|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="8b7ac-1019">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1019">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1020">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1020">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1021">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1021">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1022">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1022">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="8b7ac-1023">オーバーライド<xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1023">Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1024">
            <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1024">Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1025">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1025">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1026">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1026">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1027">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1027">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1028">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1028">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1029">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1029">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1030">この要素がマウス キャプチャを失ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1030">Occurs when this element loses mouse capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1031">要素がマウスをキャプチャは、境界外にポインターがあってもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1031">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="8b7ac-1032">マウスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1032">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="8b7ac-1033">このイベントは、バブル ルーティングを使用するため、キャプチャを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1033">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-1034">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>キャプチャを失った実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1034">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="8b7ac-1035">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.LostMouseCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1035">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1036">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.LostMouseCapture>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1036">Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1037">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1037">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1038">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1038">Identifier field</span></span>|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="8b7ac-1039">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1039">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1040">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1040">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1041">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1041">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1042">対応する定義済みのトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1042">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-1043">オーバーライド<xref:System.Windows.UIElement.OnLostMouseCapture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1043">Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1044">
            <see cref="E:System.Windows.UIElement.LostMouseCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1044">Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1045">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1045">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1046">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1046">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1047">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1047">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1048">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1048">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1049">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1049">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1050">この要素がスタイラス キャプチャを失ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1050">Occurs when this element loses stylus capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1051">要素がスタイラスをキャプチャ、ときに、ポインターが境界外にある場合でも、スタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1051">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="8b7ac-1052">スタイラスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1052">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="8b7ac-1053">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1053">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-1054">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスが失われた実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1054">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="8b7ac-1055">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.LostStylusCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1055">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1056">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.LostStylusCapture>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1056">Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1057">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1057">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1058">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1058">Identifier field</span></span>|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="8b7ac-1059">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1059">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1060">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1060">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1061">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1061">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1062">対応する定義済みのトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1062">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-1063">オーバーライド<xref:System.Windows.UIElement.OnLostStylusCapture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1063">Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1064">
            <see cref="E:System.Windows.UIElement.LostStylusCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1064">Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1065">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1065">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1066">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1066">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1067">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1067">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1068">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1068">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1069">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1069">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1070">この要素がタッチのキャプチャを失うと発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1070">Occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1071">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1071">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1072">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1072">Identifier field</span></span>|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="8b7ac-1073">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1073">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1074">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1074">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1075">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1075">Delegate</span></span>|<span data-ttu-id="8b7ac-1076"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1076"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-1077">オーバーライド<xref:System.Windows.UIElement.OnLostTouchCapture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1077">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1078">
            <see cref="E:System.Windows.UIElement.LostTouchCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1078">Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1079">操作中に境界に到達したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1079">Occurs when the manipulation encounters a boundary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1080">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1080">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1081">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1081">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|<span data-ttu-id="8b7ac-1082">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1082">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1083">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1083">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1084">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1084">Delegate</span></span>|<span data-ttu-id="8b7ac-1085"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1085"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1086">
            <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1086">Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1087">
            <see cref="T:System.Windows.UIElement" /> オブジェクトの操作および慣性による処理が完了すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1087">Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1088">このイベントを使用すると、完了時に操作に関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1088">You can use this event to get information about the manipulation when it completes.</span></span>  <span data-ttu-id="8b7ac-1089">たとえば、使用することができます、<xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType>合計量操作の位置を決定するプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1089">For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> property to determine the total amount the position of the manipulation changed.</span></span>  
  
 <span data-ttu-id="8b7ac-1090">操作の詳細については、次を参照してください。、[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1090">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="8b7ac-1091">操作に応答するアプリケーションの例は、次を参照してください。[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1091">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1092">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1092">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1093">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1093">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|<span data-ttu-id="8b7ac-1094">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1094">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1095">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1095">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1096">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1096">Delegate</span></span>|<span data-ttu-id="8b7ac-1097"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1097"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1098">
            <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1098">Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1099">操作中に入力デバイスが位置を変更したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1099">Occurs when the input device changes position during a manipulation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1100"><xref:System.Windows.UIElement.ManipulationDelta>イベントは、ときに、ユーザーがドラッグ指が画面上で操作中および再度慣性の発生時に複数回を発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1100">The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</span></span>  <span data-ttu-id="8b7ac-1101">使用することができます、<xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>慣性中に、イベントが発生しているかどうかを確認するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1101">You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.</span></span>  
  
 <span data-ttu-id="8b7ac-1102">上にある要素<xref:System.Windows.UIElement.ManipulationDelta>イベントが影響を受けません任意の方法でイベントが発生したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1102">The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.</span></span>  <span data-ttu-id="8b7ac-1103">操作される要素にロジックを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1103">You must provide the logic to the element that is to be manipulated.</span></span>  <span data-ttu-id="8b7ac-1104"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>と<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>のプロパティの型は<xref:System.Windows.Input.ManipulationDelta>操作の位置の変更に関するデータを含む、移動、サイズ変更、またはオブジェクトの回転として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1104">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</span></span>  <span data-ttu-id="8b7ac-1105">その情報を操作するのには、要素に適用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1105">You apply that information to the element that is to be manipulated.</span></span>  
  
 <span data-ttu-id="8b7ac-1106">操作の詳細については、次を参照してください。、[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1106">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="8b7ac-1107">操作に応答するアプリケーションの例は、次を参照してください。[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1107">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1108">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1108">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1109">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1109">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|<span data-ttu-id="8b7ac-1110">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1110">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1111">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1111">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1112">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1112">Delegate</span></span>|<span data-ttu-id="8b7ac-1113"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationDeltaEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1113"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-1114">次の例は、イベント ハンドラーを<xref:System.Windows.UIElement.ManipulationDelta>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1114">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="8b7ac-1115">この例では、<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>プロパティを移動、サイズ変更、および回転を<xref:System.Windows.Shapes.Rectangle>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1115">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span>  <span data-ttu-id="8b7ac-1116">例も確認するかどうか、<xref:System.Windows.UIElement.ManipulationDelta>慣性とウィンドウの端を四角形がかどうかに触れることの間にイベントが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1116">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span>  <span data-ttu-id="8b7ac-1117">このような場合に当てはまる場合、アプリケーションを四角形がアプリケーションの表示領域を終了するを防ぐために操作を停止します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1117">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="8b7ac-1118">この例のサンプルが大きくの一部である[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1118">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1119">
            <see cref="E:System.Windows.UIElement.ManipulationDelta" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1119">Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1120">入力デバイスが操作中に <see cref="T:System.Windows.UIElement" /> オブジェクトとの接続を失い、慣性による処理が開始されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1120">Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1121"><xref:System.Windows.UIElement.ManipulationInertiaStarting>イベント、ユーザーが操作中に、指が画面からのすべてを離したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1121">The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation.</span></span> <span data-ttu-id="8b7ac-1122">たとえば、"ユーザー"をスロー、<xref:System.Windows.UIElement>ユーザーをタッチする間、画面で、<xref:System.Windows.UIElement>アクションを開始するに短い距離では、画面上で指を移動してから離します、<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1122">For example, if a user "throws" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="8b7ac-1123">慣性の開始要素を離したときに、<xref:System.Windows.UIElement.ManipulationInertiaStarting>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1123">When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.</span></span>  <span data-ttu-id="8b7ac-1124"><xref:System.Windows.UIElement>の受信を継続<xref:System.Windows.UIElement.ManipulationDelta>慣性が要素で発生していることを通知するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1124">The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.</span></span>  
  
 <span data-ttu-id="8b7ac-1125">このイベントを使用して、慣性の動作を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1125">You can use this event to specify the behavior of the inertia.</span></span>  <span data-ttu-id="8b7ac-1126">たとえば、慣性が開始されるときに使用される初期速度を設定できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1126">For example, you can set the initial velocity that is used when inertia begins.</span></span>  <span data-ttu-id="8b7ac-1127">必要な減速を設定するか、目的の配置を設定しても、慣性の量を指定できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1127">You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</span></span>  <span data-ttu-id="8b7ac-1128">これらの値 (変換、拡張、または回転) 操作の種類ごとに個別に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1128">You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</span></span>  <span data-ttu-id="8b7ac-1129">詳細については、「<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1129">For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>  
  
 <span data-ttu-id="8b7ac-1130">操作の詳細については、次を参照してください。、[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1130">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="8b7ac-1131">操作に応答するアプリケーションの例は、次を参照してください。[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1131">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1132">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1132">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1133">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1133">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|<span data-ttu-id="8b7ac-1134">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1134">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1135">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1135">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1136">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1136">Delegate</span></span>|<span data-ttu-id="8b7ac-1137"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1137"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-1138">次の例は、<xref:System.Windows.UIElement.ManipulationInertiaStarting>イベント ハンドラーおよび必要な減速翻訳、拡張、および回転慣性の中で使用されるを設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1138">The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</span></span> <span data-ttu-id="8b7ac-1139">この例のサンプルが大きくの一部である[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1139">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1140">
            <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1140">Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1141">入力デバイスで <see cref="T:System.Windows.UIElement" /> オブジェクトの操作を開始すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1141">Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1142"><xref:System.Windows.UIElement.ManipulationStarted>イベントが発生した後、<xref:System.Windows.UIElement.ManipulationStarting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1142">The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span>  <span data-ttu-id="8b7ac-1143">使用して、次を行うことができます、 <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1143">You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span></span>  
  
-   <span data-ttu-id="8b7ac-1144">使用して、操作の位置が基準には、要素を取得、<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1144">Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="8b7ac-1145">使用して、操作の始点を取得、<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1145">Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.</span></span>  
  
-   <span data-ttu-id="8b7ac-1146">呼び出して、操作を取り消す、<xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1146">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.</span></span>  
  
 <span data-ttu-id="8b7ac-1147">操作の詳細については、次を参照してください。、[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1147">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="8b7ac-1148">操作に応答するアプリケーションの例は、次を参照してください。[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1148">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1149">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1149">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1150">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1150">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|<span data-ttu-id="8b7ac-1151">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1151">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1152">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1152">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1153">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1153">Delegate</span></span>|<span data-ttu-id="8b7ac-1154"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationStartedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1154"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1155">
            <see cref="E:System.Windows.UIElement.ManipulationStarted" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1155">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1156">操作プロセッサを初めて作成するときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1156">Occurs when the manipulation processor is first created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1157"><xref:System.Windows.UIElement.ManipulationStarting>イベントを持つ要素で発生する、<xref:System.Windows.UIElement.IsManipulationEnabled%2A>プロパティに設定`true`ユーザーがそれに指を配置するときにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1157">The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it.</span></span> <span data-ttu-id="8b7ac-1158">既定では、後続の操作イベントを持つ要素を基準とした操作の位置をレポート<xref:System.Windows.UIElement.IsManipulationEnabled%2A>'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1158">By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.</span></span>  <span data-ttu-id="8b7ac-1159">設定して別の要素に相対的な位置をする必要がありますを指定することができます、<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1159">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="8b7ac-1160">たとえば、要素の親を基準とした操作を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1160">For example, you can make the manipulation relative to the parent of the element.</span></span>  
  
 <span data-ttu-id="8b7ac-1161">イベント ハンドラーでは、次を実行することもできます<xref:System.Windows.UIElement.ManipulationStarting>:。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1161">You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:</span></span>  
  
-   <span data-ttu-id="8b7ac-1162">ユーザーに設定して、操作を実行する 1 つ以上の本の指が必要かどうかを指定して、<xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1162">Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="8b7ac-1163">設定操作の種類が有効になっているを指定して、<xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType>プロパティを<xref:System.Windows.Input.ManipulationModes>列挙します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1163">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="8b7ac-1164">1 本指の回転の中心を設定して指定、<xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1164">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="8b7ac-1165">呼び出して、操作を取り消す、<xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1165">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8b7ac-1166">操作の詳細については、次を参照してください。、[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1166">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="8b7ac-1167">操作に応答するアプリケーションの例は、次を参照してください。[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1167">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1168">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1168">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1169">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1169">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|<span data-ttu-id="8b7ac-1170">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1170">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1171">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1171">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1172">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1172">Delegate</span></span>|<span data-ttu-id="8b7ac-1173"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.ManipulationStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1173"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-1174">次の例では、対応するイベント ハンドラー、<xref:System.Windows.UIElement.ManipulationStarting>イベントとセット、<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>操作イベントを受け取るため、操作の座標は、親要素に相対的な親要素にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1174">The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</span></span>  <span data-ttu-id="8b7ac-1175">この例のサンプルが大きくの一部である[チュートリアル: 初めて、タッチ アプリケーションの作成](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1175">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1176">
            <see cref="E:System.Windows.UIElement.ManipulationStarting" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1176">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="8b7ac-1177">親要素が子要素を割り当てることができる使用可能な領域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1177">The available space that a parent element can allocate a child element.</span>
          </span>
          <span data-ttu-id="8b7ac-1178">子要素は使用可能な空間よりも大きな空間を要求できます。現在の要素のコンテンツ モデルでスクロールが可能な場合、指定されたサイズに対応できる可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1178">A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1179">
            <see cref="P:System.Windows.UIElement.DesiredSize" /> の <see cref="T:System.Windows.UIElement" /> を更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1179">Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="8b7ac-1180">親要素はそれぞれの <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> 実装からこのメソッドを呼び出し、レイアウトを再帰的に更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1180">Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update.</span>
          </span>
          <span data-ttu-id="8b7ac-1181">このメソッドの呼び出しは、レイアウト更新の最初のパス (「メジャー」パス) となります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1181">Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1182">レイアウトの配置で計算[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]で構成されます、<xref:System.Windows.UIElement.Measure%2A>を呼び出すと<xref:System.Windows.UIElement.Arrange%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1182">Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="8b7ac-1183">中に、<xref:System.Windows.UIElement.Measure%2A>呼び出し、要素を使用してそのサイズ要件を決定する、`availableSize`入力します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1183">During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input.</span></span> <span data-ttu-id="8b7ac-1184">中に、<xref:System.Windows.UIElement.Arrange%2A>呼び出し、要素のサイズが終了します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1184">During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.</span></span>  
  
 <span data-ttu-id="8b7ac-1185">`availableSize` 無制限にゼロから任意の数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1185">`availableSize` can be any number from zero to infinite.</span></span> <span data-ttu-id="8b7ac-1186">レイアウトに参加している要素は、最小値を返す必要があります<xref:System.Windows.Size>の必要な指定された`availableSize`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1186">Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.</span></span>  
  
 <span data-ttu-id="8b7ac-1187">常に受信レイアウトが最初にインスタンス化されるとき、<xref:System.Windows.UIElement.Measure%2A>前に呼び出す<xref:System.Windows.UIElement.Arrange%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1187">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="8b7ac-1188">ただし、最初のレイアウト パスに受け取ることがあります、<xref:System.Windows.UIElement.Arrange%2A>せずに呼び出す、 <xref:System.Windows.UIElement.Measure%2A>; 可能性がのみに影響を与えるプロパティ<xref:System.Windows.UIElement.Arrange%2A>(配置) などが変更された親を受け取ったとき、または、<xref:System.Windows.UIElement.Arrange%2A>せず、<xref:System.Windows.UIElement.Measure%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1188">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="8b7ac-1189">A<xref:System.Windows.UIElement.Measure%2A>呼び出しが自動的に無効になり、<xref:System.Windows.UIElement.Arrange%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1189">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="8b7ac-1190">レイアウトの更新は、あらゆるレイアウトの変更のメイン スレッドが待機していないように、非同期的に発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1190">Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</span></span> <span data-ttu-id="8b7ac-1191">分離コードのプロパティの値のチェックを使用して要素のクエリを実行しても、そのサイズ変更、またはレイアウトの特性を持つ対話プロパティへの変更がすぐに反映可能性がありますされない (、<xref:System.Windows.FrameworkElement.Width%2A>プロパティなど)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1191">Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b7ac-1192">使用してレイアウトの更新を強制することができます、<xref:System.Windows.UIElement.UpdateLayout%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1192">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method.</span></span> <span data-ttu-id="8b7ac-1193">ただし、このメソッドを呼び出すことは通常必要はありません、パフォーマンスの低下が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1193">However, calling this method is usually unnecessary and can cause poor performance.</span></span>  
  
 <span data-ttu-id="8b7ac-1194">レイアウト システムは無効なレイアウトのいずれかの 2 つの異なるキュー<xref:System.Windows.UIElement.Measure%2A>と 1 つずつ<xref:System.Windows.UIElement.Arrange%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1194">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="8b7ac-1195">レイアウトのキューはレイアウトを実行する要素のビジュアル ツリー内の要素の順序に基づいて並べ替えられますツリーの上位の要素は、親の変更を繰り返すことによって、冗長なレイアウトを避けるために、キューの上部にあるがします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1195">The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="8b7ac-1196">重複するエントリは、キューから自動的に削除され、レイアウト検証はすでに要素も、キューから自動的に削除します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1196">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</span></span>  
  
 <span data-ttu-id="8b7ac-1197">レイアウトを更新するときに、<xref:System.Windows.UIElement.Measure%2A>キューが最初に、空に続けて、<xref:System.Windows.UIElement.Arrange%2A>キュー。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1197">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="8b7ac-1198">内の要素、<xref:System.Windows.UIElement.Arrange%2A>内の要素がある場合、キューは配置しないで、<xref:System.Windows.UIElement.Measure%2A>キュー。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1198">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="8b7ac-1199">親要素が子に割り当てることができる、使用可能なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1199">The available size that the parent element can allocate for the child.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1200">派生クラスでオーバーライドされると、子要素のコンテンツのサイズも考慮して、この要素のサイズを適切に設定するための測定ロジックを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1200">When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-1201">レイアウト内のこの要素の必要なサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1201">The desired size of this element in layout.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1202">要素を派生する方が一般的である<xref:System.Windows.FrameworkElement>なく<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1202">It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="8b7ac-1203">派生する場合<xref:System.Windows.FrameworkElement>、なおのオーバーライド<xref:System.Windows.UIElement.MeasureCore%2A>で<xref:System.Windows.FrameworkElement>シール、<xref:System.Windows.UIElement.MeasureCore%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1203">If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method.</span></span> <span data-ttu-id="8b7ac-1204">のみをオーバーライドするため、<xref:System.Windows.UIElement.MeasureCore%2A>から派生した場合は、レイアウトのメジャーの特性を変更するための手段として<xref:System.Windows.UIElement>を含まない継承によって<xref:System.Windows.FrameworkElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1204">Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="8b7ac-1205">これがある場合、独自の実装を構築しようとしている場合、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]コア レベル。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1205">This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level.</span></span> <span data-ttu-id="8b7ac-1206">それ以外の場合から派生した<xref:System.Windows.FrameworkElement>、メジャーの動作の実装のテンプレートは、<xref:System.Windows.FrameworkElement>の実装。<xref:System.Windows.FrameworkElement.MeasureOverride%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1206">Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-1207">子要素を含む親要素を呼び出す必要があります<xref:System.Windows.UIElement.Measure%2A>、それぞれの子にそれ以外の場合これらの子要素またはされていないサイズの配置とはレイアウトから効果的に表示されなくなります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1207">A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-1208">一般的なオーバーライド<xref:System.Windows.UIElement.MeasureCore%2A>このおおよそのパターンに従います (と呼ばれる、組み込みコレクションがない`VisualChildren`です。`VisualChildren`要素を保持任意の子コレクションを表すプレース ホルダーです)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1208">A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   <span data-ttu-id="8b7ac-1209">呼び出す必要があります<xref:System.Windows.UIElement.Measure%2A>各子要素にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1209">You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
-   <span data-ttu-id="8b7ac-1210">一般に、実装が間測定情報をキャッシュする必要があります、<xref:System.Windows.UIElement.MeasureCore%2A>と<xref:System.Windows.UIElement.ArrangeCore%2A>メソッドは、同じ要素で呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1210">Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.</span></span>  
  
-   <span data-ttu-id="8b7ac-1211">基本実装を呼び出して<xref:System.Windows.UIElement.MeasureCore%2A>は必要ありませんが、基底の実装が必要なレイアウト機能を提供している場合に適切な場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1211">Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.</span></span>  
  
-   <span data-ttu-id="8b7ac-1212">呼び出す<xref:System.Windows.UIElement.Measure%2A>子の要素を渡すか同じであるか`availableSize`親、または領域のサブセットの場合は、レイアウトの種類によっては、親要素をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1212">Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports.</span></span> <span data-ttu-id="8b7ac-1213">たとえば、要素に固有の枠線または埋め込み、スクロール バー、またはカスタム コントロールの領域を削除する有効ながあります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1213">For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1214">実装は、指定された値を処理できる必要があります<paramref name="availableSize" />は無限です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1214">Implementations must be able to process a value provided for <paramref name="availableSize" /> that is infinite.</span>
            </span>
            <span data-ttu-id="8b7ac-1215">無限の値は、要求された制約がないことを示します。 および Measure の再帰呼び出しを通じて、親要素に測定の選択を効果的に延期します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1215">An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</span>
            </span>
            <span data-ttu-id="8b7ac-1216">実装は、指定された値を考えることができます<paramref name="availableSize" />ソフト制約であります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1216">Implementations can consider the value provided for <paramref name="availableSize" /> to be a soft constraint.</span>
            </span>
            <span data-ttu-id="8b7ac-1217">子要素は、アプリケーション コードの他の側面が、親要素の現在の実際のサイズを決定できる場合でもより大きなサイズを指定可能性があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1217">The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</span>
            </span>
            <span data-ttu-id="8b7ac-1218">大きなサイズの要求は、子要素が、親要素が、コンテンツの表示領域内でのコンテンツのスクロールをサポートできるかどうかを照会することを示す規則です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1218">The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1219">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1219">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1220">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.MouseDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1220">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1221">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.MouseDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1221">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-1222"><xref:System.Windows.UIElement.MouseDown>イベントは、多くの場合、いずれかと共に<xref:System.Windows.UIElement.MouseLeftButtonDown>または<xref:System.Windows.UIElement.MouseRightButtonDown>、2 つの標準のマウス ボタンのいずれかのキーを押してに対応します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1222">The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="8b7ac-1223"><xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.UIElement.MouseRightButtonDown>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント イベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1223"><xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="8b7ac-1224">「解説」を参照してください<xref:System.Windows.UIElement.MouseLeftButtonDown>または<xref:System.Windows.UIElement.MouseRightButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1224">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b7ac-1225">一部のコントロールには、固有のクラスのマウス ボタンのイベント処理があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1225">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="8b7ac-1226">イベントをマウスの左ボタンは、クラス、コントロールで処理が最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1226">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="8b7ac-1227">多くの場合、処理するクラスは、基になるをマーク<xref:System.Windows.Input.Mouse>クラス イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1227">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="8b7ac-1228">イベントが処理済みとマークされるとその要素に関連付けられている他のインスタンス ハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1228">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="8b7ac-1229">その他のクラスまたはインスタンス ハンドラー、バブルに向かう方向 UI ツリーのルート内の要素に関連付けられている通常も発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1229">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="8b7ac-1230">前の「重要」に示されている問題を解決でき、それでも<xref:System.Windows.UIElement.MouseDown>マウスの左ボタンを押すイベントをこれらソリューションのいずれかを使用して処理するクラスを持つ派生クラスでイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1230">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="8b7ac-1231">ハンドラーのアタッチ、<xref:System.Windows.UIElement.PreviewMouseDown>コントロールによって処理済みとしてマークされていないイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1231">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="8b7ac-1232">これはプレビュー イベントであるため、ルート ルートから始まり、トンネルをコントロールに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1232">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="8b7ac-1233">コントロールのハンドラーを呼び出すことによって手続き登録<xref:System.Windows.UIElement.AddHandler%2A>ハンドラーにルーティングされたイベント データの処理済みとしてマークされている場合でも、イベントをリッスンできる署名オプションを選択します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1233">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1234">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1234">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1235">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1235">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseDownEvent>|  
|<span data-ttu-id="8b7ac-1236">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1236">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1237">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1237">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1238">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1238">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1239">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewMouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1239">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-1240">オーバーライド<xref:System.Windows.UIElement.OnMouseDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1240">Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1241">
            <see cref="E:System.Windows.UIElement.MouseDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1241">Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1242">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1242">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1243">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1243">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1244">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1244">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1245">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1245">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1246">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1246">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1247">マウス ポインターがこの要素の境界内に入ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1247">Occurs when the mouse pointer enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1248"><xref:System.Windows.UIElement.MouseEnter> 直接のイベントのルーティング方法を処理する使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1248"><xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="8b7ac-1249">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1249">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="8b7ac-1250">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1250">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="8b7ac-1251"><xref:System.Windows.UIElement.MouseEnter>マウス ポインターがこのイベントをさらに、要素の境界に入った時点を追跡するレポート文字どおり、<xref:System.Windows.UIElement.IsMouseOver%2A>からプロパティ値が変更された`false`に`true`この要素上です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1251">Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="8b7ac-1252">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.MouseEnter>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1252">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1253">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.MouseEnter>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1253">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-1254">A <xref:System.Windows.Controls.Button> (または any<xref:System.Windows.Controls.Primitives.ButtonBase>派生クラス) のネイティブの処理が、<xref:System.Windows.UIElement.KeyDown>ボタンにフォーカスし、space キーが押されたときにイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1254">A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar.</span></span> <span data-ttu-id="8b7ac-1255">ネイティブの処理が発生し、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント ソースとして、ボタンも移動するにマウス ポインターがない場合でも、マウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1255">The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</span></span> <span data-ttu-id="8b7ac-1256">マウスのキャプチャの結果として、<xref:System.Windows.UIElement.MouseEnter>イベントは、ソースとしてのボタンでも発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1256">As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source.</span></span> <span data-ttu-id="8b7ac-1257">通常、要素がマウスをキャプチャし、<xref:System.Windows.UIElement.MouseEnter>が発生しただけでなく<xref:System.Windows.UIElement.GotMouseCapture>およびその他のコントロールに固有のイベント可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1257">In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1258">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1258">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1259">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1259">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|<span data-ttu-id="8b7ac-1260">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1260">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1261">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1261">Direct</span></span>|  
|<span data-ttu-id="8b7ac-1262">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1262">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1263">オーバーライド<xref:System.Windows.UIElement.OnMouseEnter%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1263">Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1264">
            <see cref="E:System.Windows.UIElement.MouseEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1264">Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1265">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1265">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1266">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1266">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1267">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1267">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1268">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1268">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1269">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1269">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1270">マウス ポインターがこの要素の境界内から出たときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1270">Occurs when the mouse pointer leaves the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1271"><xref:System.Windows.UIElement.MouseLeave> 直接のイベントのルーティング方法を処理する使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1271"><xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="8b7ac-1272">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1272">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="8b7ac-1273">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1273">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="8b7ac-1274"><xref:System.Windows.UIElement.MouseLeave>トラック マウスが要素をこのイベントの詳細を報告文字どおり、<xref:System.Windows.UIElement.IsMouseOver%2A>からプロパティ値が変更された`true`に`false`この要素上です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1274">Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="8b7ac-1275">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.MouseLeave>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1275">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1276">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.MouseLeave>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1276">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1277">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1277">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1278">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1278">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|<span data-ttu-id="8b7ac-1279">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1279">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1280">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1280">Direct</span></span>|  
|<span data-ttu-id="8b7ac-1281">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1281">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1282">オーバーライド<xref:System.Windows.UIElement.OnMouseLeave%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1282">Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1283">
            <see cref="E:System.Windows.UIElement.MouseLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1283">Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1284">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1284">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1285">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1285">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1286">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1286">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1287">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1287">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1288">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1288">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1289">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1289">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1290">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1290">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-1291">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1291">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-1292">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1292">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-1293">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1293">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-1294">マークを付けた場合<xref:System.Windows.UIElement.MouseLeftButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1294">If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="8b7ac-1295">これは、可能性がありますなどが含まれるクラス ハンドラーが生成されるイベント<xref:System.Windows.Controls.Control.MouseDoubleClick>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1295">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="8b7ac-1296">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1296">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-1297">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1297">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-1298">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1298">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b7ac-1299">一部のコントロール クラスには、固有のクラスのマウス ボタンのイベント処理があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1299">Some control classes might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="8b7ac-1300">イベントをマウスの左ボタンは、クラス、コントロールで処理が最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1300">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="8b7ac-1301">多くの場合、処理するクラスは、基になるをマーク<xref:System.Windows.Input.Mouse>クラス イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1301">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="8b7ac-1302">イベントが処理済みとマークされるとその要素に関連付けられている他のインスタンス ハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1302">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="8b7ac-1303">その他のクラスまたはインスタンス ハンドラー、バブルに向かう方向 UI ツリーのルート内の要素に関連付けられている通常も発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1303">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="8b7ac-1304">前の「重要」に示されている問題を解決でき、それでも<xref:System.Windows.UIElement.MouseLeftButtonDown>マウスの左ボタンを押すイベントをこれらソリューションのいずれかを使用して処理するクラスを持つ派生クラスでイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1304">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="8b7ac-1305">ハンドラーのアタッチ、<xref:System.Windows.UIElement.PreviewMouseDown>コントロールによって処理済みとしてマークされていないイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1305">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="8b7ac-1306">これはプレビュー イベントであるため、ルート ルートから始まり、トンネルをコントロールに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1306">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="8b7ac-1307">コントロールのハンドラーを呼び出すことによって手続き登録<xref:System.Windows.UIElement.AddHandler%2A>ハンドラーにルーティングされたイベント データの処理済みとしてマークされている場合でも、イベントをリッスンできる署名オプションを選択します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1307">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1308">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1308">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1309">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1309">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="8b7ac-1310">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1310">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1311">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1311">Direct</span></span>|  
|<span data-ttu-id="8b7ac-1312">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1312">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1313">オーバーライド<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1313">Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1314">
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1314">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1315">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1316">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1317">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1318">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1319">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1320">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1320">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1321">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1321">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-1322">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1322">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-1323">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1323">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-1324">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1324">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-1325">マークを付けた場合<xref:System.Windows.UIElement.MouseLeftButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1325">If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="8b7ac-1326">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1326">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-1327">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1327">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-1328">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1328">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1329">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1330">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1330">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="8b7ac-1331">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1331">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1332">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1332">Direct</span></span>|  
|<span data-ttu-id="8b7ac-1333">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1333">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1334">オーバーライド<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1334">Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1335">
            <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1335">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1336">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1336">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1337">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1337">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1338">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1338">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1339">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1339">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1340">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1340">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1341">この要素の上でマウス ポインターが動かされたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1341">Occurs when the mouse pointer moves while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1342">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.MouseMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1342">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1343">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.MouseMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1343">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1344">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1344">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1345">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1345">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|<span data-ttu-id="8b7ac-1346">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1346">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1347">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1347">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1348">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1348">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1349">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewMouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1349">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-1350">オーバーライド<xref:System.Windows.UIElement.OnMouseMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1350">Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1351">
            <see cref="E:System.Windows.UIElement.MouseMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1351">Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1352">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1352">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1353">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1353">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1354">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1354">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1355">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1355">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1356">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1356">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1357">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1357">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1358">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1358">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-1359">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1359">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-1360">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1360">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-1361">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1361">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-1362">マークを付けた場合<xref:System.Windows.UIElement.MouseRightButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1362">If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="8b7ac-1363">これは、可能性がありますなどが含まれるクラス ハンドラーが生成されるイベント<xref:System.Windows.Controls.Control.MouseDoubleClick>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1363">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="8b7ac-1364">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1364">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-1365">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1365">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-1366">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1366">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-1367">右ボタンをマウス イベントは、アプリケーション シナリオでネイティブの処理を頻繁にあります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1367">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="8b7ac-1368">たとえば、マウスの右ボタンを押すは、コンテキスト メニューを表示する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1368">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="8b7ac-1369">参照してください[ContextMenu 概要](~/docs/framework/wpf/controls/contextmenu-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1369">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1370">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1370">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1371">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1371">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="8b7ac-1372">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1372">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1373">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1373">Direct</span></span>|  
|<span data-ttu-id="8b7ac-1374">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1374">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1375">オーバーライド<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1375">Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1376">
            <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1376">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1377">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1377">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1378">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1378">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1379">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1379">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1380">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1380">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1381">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1381">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1382">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1382">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1383">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1383">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-1384">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1384">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-1385">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1385">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-1386">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1386">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-1387">マークを付けた場合<xref:System.Windows.UIElement.MouseRightButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1387">If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="8b7ac-1388">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1388">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-1389">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1389">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-1390">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1390">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1391">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1391">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1392">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1392">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="8b7ac-1393">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1393">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1394">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1394">Direct</span></span>|  
|<span data-ttu-id="8b7ac-1395">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1395">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1396">オーバーライド<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1396">Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1397">
            <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1397">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1398">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1398">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1399">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1399">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1400">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1400">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1401">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1401">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1402">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1402">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1403">この要素の上でいずれかのマウス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1403">Occurs when any mouse button is released over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1404">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.MouseUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1404">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1405">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.MouseUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1405">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-1406"><xref:System.Windows.UIElement.MouseUp>イベントは、多くの場合、いずれかと共に<xref:System.Windows.UIElement.MouseLeftButtonUp>または<xref:System.Windows.UIElement.MouseRightButtonUp>、2 つの標準のマウス ボタンのいずれかのリリースに対応します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1406">The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="8b7ac-1407"><xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.UIElement.MouseRightButtonUp>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント イベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1407"><xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="8b7ac-1408">「解説」を参照してください<xref:System.Windows.UIElement.MouseLeftButtonUp>または<xref:System.Windows.UIElement.MouseRightButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1408">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1409">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1409">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1410">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1410">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseUpEvent>|  
|<span data-ttu-id="8b7ac-1411">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1411">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1412">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1412">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1413">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1413">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1414">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewMouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1414">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-1415">オーバーライド<xref:System.Windows.UIElement.OnMouseUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1415">Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1416">
            <see cref="E:System.Windows.UIElement.MouseUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1416">Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1417">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1417">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1418">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1418">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1419">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1419">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1420">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1420">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1421">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1421">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1422">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1422">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1423">フォーカスまたはマウスのキャプチャ、マウス ポインターが; よりも優先します。そのため、表示された場合、<xref:System.Windows.UIElement.MouseWheel>対象を絞ったまたはキャプチャした要素からのイベント、マウス ポインター可能性があります実際には別の要素上です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1423">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="8b7ac-1424">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.MouseWheel>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1424">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-1425">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.MouseWheel>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1425">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-1426">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1426">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-1427">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1427">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|<span data-ttu-id="8b7ac-1428">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1428">Routing strategy</span></span>|<span data-ttu-id="8b7ac-1429">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1429">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-1430">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1430">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="8b7ac-1431">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewMouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1431">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="8b7ac-1432">オーバーライド<xref:System.Windows.UIElement.OnMouseWheel%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1432">Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1433">
            <see cref="E:System.Windows.UIElement.MouseWheel" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1433">Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1434">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1434">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-1435">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1435">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-1436">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1436">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-1437">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1437">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-1438">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1438">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="8b7ac-1439">既存のタブ オーダーを検査するモード、または視覚的な移動方向を示すプロパティを含む検査要求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1439">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1440">この要素から別の要素へのフォーカスの移動を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1440">Attempts to move focus from this element to another element.</span>
          </span>
          <span data-ttu-id="8b7ac-1441">フォーカスの移動方向は、ガイドラインの方向によって指定され、この要素のビジュアル親の編成内で解釈されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1441">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-1442">要求した検査が実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1442">
              <see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1443">このメソッドの戻り値を確認してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1443">Make sure you check the return value of this method.</span></span> <span data-ttu-id="8b7ac-1444">戻り値の`false`コントロールの構成で定義されているタブ ストップの検査を実行し、走査の各要求はラップを要求していないかどうかに返される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1444">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1445">アクセス キー イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1445">The event data to the access key event.</span>
          </span>
          <span data-ttu-id="8b7ac-1446">イベント データは、呼び出されたキーを報告し、これらのイベントの送信を制御する <see cref="T:System.Windows.Input.AccessKeyManager" /> オブジェクトが、このアクセス キーの呼び出しを他の要素にも送信したかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1446">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1447">この要素に対して有効なアクセス キーが呼び出されたときのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1447">Provides class handling for when an access key that is meaningful for this element is invoked.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1448">実際の AccessKey イベントではありません、<xref:System.Windows.UIElement>クラス、またはその他のハンドラーをアタッチすることができますか。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1448">There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="8b7ac-1449">専用マネージャー クラスを使用して、イベントの代わりに、発生元が<xref:System.Windows.Input.AccessKeyManager>、後に入力モデル全体に適用されるアクセス キーを検索するすべての入力を処理します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1449">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1450">このメソッドの既定の実装<see cref="T:System.Windows.UIElement" />セットは、この要素にフォーカスをキーボード (を呼び出して<see cref="M:System.Windows.UIElement.Focus" />)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1450">The default implementation of this method in <see cref="T:System.Windows.UIElement" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement.Focus" />).</span>
            </span>
            <span data-ttu-id="8b7ac-1451">実装では、アクセシビリティ シナリオの通常の動作になっているため、フォーカスがある場合、この動作を永続化する必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1451">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span>
            </span>
            <span data-ttu-id="8b7ac-1452">基底の実装は、渡されたイベント データで何も行わないし、他のイベントは発生しませんに注意してください。単にフォーカスを設定します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1452">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="8b7ac-1453">サイズが変更される子要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1453">The child element that is being resized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1454">子要素のサイズが変更されるときのレイアウト動作をサポートします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1454">Supports layout behavior when a child element is resized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1455">このメソッドは通常、アプリケーション コードで呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1455">This method is typically not called by your application code.</span></span> <span data-ttu-id="8b7ac-1456">公開されるため、独自のレイアウトが無効な可能性のある状態でのクラスで、派生した要素を確認します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1456">It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</span></span> <span data-ttu-id="8b7ac-1457">クラスでは、子要素にサイズ変更に基づき、レイアウト パスの処理時間を最小限に抑えるの最適化を試みることもなります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1457">Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</span></span> <span data-ttu-id="8b7ac-1458">例は、要素を実装するクラスを派生<xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A>は、<xref:System.Windows.Controls.Grid>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1458">An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1459">
              <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />メソッドが呼び出し元の既定の実装<see cref="M:System.Windows.UIElement.InvalidateMeasure" />自体にします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1459">The <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> method has the default implementation of calling <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> on itself.</span>
            </span>
            <span data-ttu-id="8b7ac-1460">一般的な実装になります: 独自の要素にどのような最適化を行うをサポートし、基本通常呼び出す<see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />から少なくとも 1 つのコード分岐 (キャッシュ ロジック、独自のメジャーごと「ダーティ」の状態が示されているもの)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1460">A typical implementation would be: do whatever optimization your own element supports, and then typically call base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</span>
            </span>
            <span data-ttu-id="8b7ac-1461">このメソッドは、レイアウトの処理が、子自体をサイズの変更を開始した場合にのみ呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1461">This method is only called in the layout processing if it was the child itself that originated the size changes.</span>
            </span>
            <span data-ttu-id="8b7ac-1462">それ以外の場合、親要素の開始する場合、<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />を渡すと、レイアウト システムの規則に従って、親が再計算レイアウト既にです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1462">Otherwise, if the parent element initiates the <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pass, according to the layout system rules, the parent is recalculating layout already.</span>
            </span>
            <span data-ttu-id="8b7ac-1463">親要素のサイズ変更に子要素のレイアウトの呼び出しからの戻り値は必要ありませんので、レイアウト システムは子と親の順序でのレイアウトを処理します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1463">The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-1464">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャの、クラス固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1464">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-1465">型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1465">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1466">このメソッドの実装は、通常、特定のコンス トラクターを呼び出す<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />実装し、戻り値として返します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1466">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span>
            </span>
            <span data-ttu-id="8b7ac-1467">すべて<see cref="T:System.Windows.UIElement" />派生クラスは、独自の固有の仕様を提供するためにこのメソッドを実装する必要があります<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />を実装する、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]インフラストラクチャです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1467">All <see cref="T:System.Windows.UIElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
            </span>
            <span data-ttu-id="8b7ac-1468">このパターンの実装の詳細については、「<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1468">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1469">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1469">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1470">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1470">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1471">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1471">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1472">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1472">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1473">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1473">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1474">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1474">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1475">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1475">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1476">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1476">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1477">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1477">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1478">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1478">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1479">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1479">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1480">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1480">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1481">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1481">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1482">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1482">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1483">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1483">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1484">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1484">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1485">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1485">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1486">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1486">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1487">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1487">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1488">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1488">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1489">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1489">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1490">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1490">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1491">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1491">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1492">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1492">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1493">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1493">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1494">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1494">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1495">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1495">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1496">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1496">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1497">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1497">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1498">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1498">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1499">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1499">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1500">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1500">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1501">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1501">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1502">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1502">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1503">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1503">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1504">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1504">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1505">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1505">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1506">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1506">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1507">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1507">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1508">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1508">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1509">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1509">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1510">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1510">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1511">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1511">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1512">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1512">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1513">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1513">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1514">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1514">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1515">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1515">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1516">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1516">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1517">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1517">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1518">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.GiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1518">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1519">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1519">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1520">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1520">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1521">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1521">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1522">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1522">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1523">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1523">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1524">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1524">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1525">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1525">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1526">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1526">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1527">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1527">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1528">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1528">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1529">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1529">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1530">このイベント データは、<see cref="E:System.Windows.UIElement.GotFocus" /> イベントの識別子を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1530">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1531">提供されたイベント データを使用して、<see cref="E:System.Windows.UIElement.GotFocus" /> ルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1531">Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1532">このメソッドは、仮想がイベントを発生させる既定の実装です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1532">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="8b7ac-1533">これで \* メソッドの実装は、イベントを発生させるためのものし、イベントを発生させるこの同じメソッドの実装が内部的に呼び出されるときに、<xref:System.Windows.UIElement.IsFocused%2A>プロパティ値が変更されました。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1533">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="8b7ac-1534"><xref:System.Windows.UIElement.OnGotFocus%2A>実装が異なるその他の[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]で \* だけそのイベントに対するクラス処理を追加する便利な手段を提供する実装。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1534">The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1535">意図的および例外いないフォーカス イベントを発生させることを確認する必要がない限り、実装は基本実装を呼び出します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1535">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span>
            </span>
            <span data-ttu-id="8b7ac-1536">それ以外の場合、<see cref="E:System.Windows.UIElement.GotFocus" />イベントは通常、この要素にフォーカスを設定する一般的なユーザーの操作中に発生しません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1536">Otherwise, the <see cref="E:System.Windows.UIElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span>
            </span>
            <span data-ttu-id="8b7ac-1537">要素にフォーカスを設定する予定がない場合は、設定されない要素を防ぐことができます<see cref="P:System.Windows.UIElement.Focusable" />に<see langword="false" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1537">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1538">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1538">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1539">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1539">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1540">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1540">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1541">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1541">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1542">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1542">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1543">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1543">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1544">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1544">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1545">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1545">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1546">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1546">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1547">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1547">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1548">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1548">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1549">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1549">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1550">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1550">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1551">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1551">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1552">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1552">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1553">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1553">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1554">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1554">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1555">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1555">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1556">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1556">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1557">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1557">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1558">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1558">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1559">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1559">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1560">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1560">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1561">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1561">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1562">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1562">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1563">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1563">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1564">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1564">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1565">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1565">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1566">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1566">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1567">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1567">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1568">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1568">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1569">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1569">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1570">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1570">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1571">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1571">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1572">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1572">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1573">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1573">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1574">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1574">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1575">タッチがこの要素にキャプチャされているときに発生する <see cref="E:System.Windows.UIElement.GotTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1575">Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1576"><xref:System.Windows.UIElement.OnGotTouchCapture%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1576">The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1577">オーバーライド<xref:System.Windows.UIElement.OnGotTouchCapture%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.GotTouchCapture>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1577">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event.</span></span> <span data-ttu-id="8b7ac-1578">必ず、基本クラスの<xref:System.Windows.UIElement.OnGotTouchCapture%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1578">Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1579">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1579">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1580">未処理の <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1580">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1581">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1581">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1582">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsKeyboardFocused%2A>依存関係プロパティの変更。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1582">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="8b7ac-1583">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1583">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1584">続いて、<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1584">Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1585">注意して、<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1585">Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="8b7ac-1586">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1586">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1587">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1587">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1588">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1588">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1589">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1589">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1590">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1590">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1591">この要素が <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> イベントを発生させる直前に呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1591">Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1592">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1592">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1593">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>依存関係プロパティの変更。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1593">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes .</span></span> <span data-ttu-id="8b7ac-1594">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1594">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1595">続いて、<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1595">Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1596">注意して、<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1596">Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="8b7ac-1597">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1597">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1598">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1598">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1599">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1599">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1600">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1600">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1601">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1601">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1602">未処理の <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1602">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1603">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1603">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1604">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsMouseCaptured%2A>依存関係プロパティの値が変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1604">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="8b7ac-1605">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1605">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1606">続いて、<xref:System.Windows.UIElement.IsMouseCapturedChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1606">Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1607">注意して、<xref:System.Windows.UIElement.IsMouseCapturedChanged>イベントは、ルーティングされたイベントです。そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1607">Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1608">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1608">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1609">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1609">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1610">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1610">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1611">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1611">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1612">未処理の <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1612">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1613">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1613">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1614">この仮想メソッドが発生したときの値、<see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />依存関係プロパティの値が変更します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1614">This virtual method is raised when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property changes its value.</span>
            </span>
            <span data-ttu-id="8b7ac-1615">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1615">The virtual method is raised first and can manipulate the event data as necessary.</span>
            </span>
            <span data-ttu-id="8b7ac-1616">続いて、<see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />同じイベント データ インスタンスをイベントが発生します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1616">Then the <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span>
            </span>
            <span data-ttu-id="8b7ac-1617">イベントが; ルーティングされたイベントではないことに注意してください。そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1617">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span>
            </span>
            <span data-ttu-id="8b7ac-1618">このメソッドには、既定の実装ではありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1618">This method has no default implementation.</span>
            </span>
            <span data-ttu-id="8b7ac-1619">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1619">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span>
            </span>
            <span data-ttu-id="8b7ac-1620">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1620">You may call base either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1621">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1621">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1622">未処理の <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1622">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1623">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1623">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1624">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>依存関係プロパティの値が変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1624">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="8b7ac-1625">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1625">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1626">続いて、<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1626">Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1627">注意して、<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>イベントは、ルーティングされたイベントではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1627">Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="8b7ac-1628">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1628">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1629">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1629">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1630">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1630">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1631">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1631">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1632">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1632">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1633">未処理の <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1633">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1634">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1634">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1635">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsStylusCaptured%2A>依存関係プロパティの値が変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1635">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="8b7ac-1636">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1636">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1637">続いて、<xref:System.Windows.UIElement.IsStylusCapturedChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1637">Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1638">イベントがルーティングされたイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1638">Notice that the event is not a routed event.</span></span> <span data-ttu-id="8b7ac-1639">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1639">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1640">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1640">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1641">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1641">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1642">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1642">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1643">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1643">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1644">未処理の <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1644">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1645">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1645">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1646">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>依存関係プロパティの値が変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1646">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="8b7ac-1647">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1647">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1648">続いて、<xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1648">Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1649">イベントがルーティングされたイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1649">Notice that the event is not a routed event.</span></span> <span data-ttu-id="8b7ac-1650">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1650">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1651">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1651">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1652">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1652">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1653">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1653">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1654">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1654">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1655">未処理の <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1655">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1656">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1656">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1657">この仮想メソッドが発生したときの値、<xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>依存関係プロパティの値が変更します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1657">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="8b7ac-1658">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1658">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="8b7ac-1659">続いて、<xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1659">Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="8b7ac-1660">イベントがルーティングされたイベントではないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1660">Notice that the event is not a routed event.</span></span> <span data-ttu-id="8b7ac-1661">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1661">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="8b7ac-1662">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1662">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1663">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1663">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1664">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1664">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1665">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1665">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1666">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1666">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1667">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1667">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1668">キーボード操作は、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1668">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="8b7ac-1669">その他のプログラミングに依存する機能キーストローク、たとえば、入力とコマンドのバインドは、一般的なキーストロークとして公開される前にキーストロークを処理する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1669">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="8b7ac-1670">システムの機能、イベントを処理し、としてマークするような入力する場合<xref:System.Windows.UIElement.OnKeyDown%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1670">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1671">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1671">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1672">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1672">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1673">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1673">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1674">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1674">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1675">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1675">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1676">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1676">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1677">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1677">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1678">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1678">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1679">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1679">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1680">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1680">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1681">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1681">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1682">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1682">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1683">キーボード操作は、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1683">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="8b7ac-1684">その他のプログラミングに依存する機能キーストローク、たとえば、入力とコマンドのバインドは、一般的なキーストロークとして公開される前にキーストロークを処理する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1684">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="8b7ac-1685">システムの機能、イベントを処理し、としてマークするような入力する場合<xref:System.Windows.UIElement.OnKeyUp%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1685">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1686">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1686">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1687">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1687">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1688">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1688">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1689">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1689">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1690">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1690">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1691">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1691">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1692">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1692">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1693">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1693">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1694">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1694">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1695">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1695">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1696">このイベント データは、<see cref="E:System.Windows.UIElement.LostFocus" /> イベントの識別子を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1696">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1697">提供されたイベント データを使って、<see cref="E:System.Windows.UIElement.LostFocus" /> ルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1697">Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1698">このメソッドは、仮想がイベントを発生させる既定の実装です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1698">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="8b7ac-1699">これで \* メソッドの実装は、イベントを発生させるためのものし、イベントを発生させるこの同じメソッドの実装が内部的に呼び出されるときに、<xref:System.Windows.UIElement.IsFocused%2A>プロパティ値が変更されました。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1699">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="8b7ac-1700">この実装が異なるその他の[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]で \* だけそのイベントに対するクラス処理を追加する便利な手段を提供する実装。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1700">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-1701">意図的および例外いないフォーカス イベントを発生させることを確認する必要がない限り、実装は基本実装を呼び出します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1701">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span>
            </span>
            <span data-ttu-id="8b7ac-1702">それ以外の場合、<see cref="E:System.Windows.UIElement.LostFocus" />イベントは通常、この要素にフォーカスを設定する一般的なユーザーの操作中に発生しません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1702">Otherwise, the <see cref="E:System.Windows.UIElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span>
            </span>
            <span data-ttu-id="8b7ac-1703">要素にフォーカスを設定する予定がない場合は、設定されない要素を防ぐことができます<see cref="P:System.Windows.UIElement.Focusable" />に<see langword="false" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-1703">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1704">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1704">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1705">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1705">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1706">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1706">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1707">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1707">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1708">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1708">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1709">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1709">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1710">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1710">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1711">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1711">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1712">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1712">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1713">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1713">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1714">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1714">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1715">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1715">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1716">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1716">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1717">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1717">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1718">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1718">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1719">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1719">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1720">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1720">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1721">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1721">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1722">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1722">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1723">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1723">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1724">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1724">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1725">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1725">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1726">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1726">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1727">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1727">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1728">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1728">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1729">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1729">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1730">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1730">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1731">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1731">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1732">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1732">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1733">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1733">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1734">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1734">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1735">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1735">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1736">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1736">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1737">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1737">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1738">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1738">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1739">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1739">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1740">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1740">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1741">この要素がタッチのキャプチャを失ったときに発生する <see cref="E:System.Windows.UIElement.LostTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1741">Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1742"><xref:System.Windows.UIElement.OnLostTouchCapture%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1742">The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1743">オーバーライド<xref:System.Windows.UIElement.OnLostTouchCapture%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.LostTouchCapture>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1743">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event.</span></span> <span data-ttu-id="8b7ac-1744">必ず、基本クラスの<xref:System.Windows.UIElement.OnLostTouchCapture%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1744">Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1745">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1745">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1746">
            <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> イベントが発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1746">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1747"><xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1747">The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1748">オーバーライド<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1748">Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event.</span></span> <span data-ttu-id="8b7ac-1749">必ず、<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>がイベントを受け取るようにする基本クラスの基本クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1749">Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1750">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1750">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1751">
            <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> イベントが発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1751">Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1752"><xref:System.Windows.UIElement.OnManipulationCompleted%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1752">The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1753">オーバーライド<xref:System.Windows.UIElement.OnManipulationCompleted%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.ManipulationCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1753">Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event.</span></span> <span data-ttu-id="8b7ac-1754">必ず、<xref:System.Windows.UIElement.OnManipulationCompleted%2A>がイベントを受け取るようにする基本クラスの基本クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1754">Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1755">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1755">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1756">
            <see cref="E:System.Windows.UIElement.ManipulationDelta" /> イベントが発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1756">Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1757"><xref:System.Windows.UIElement.OnManipulationDelta%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1757">The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1758">オーバーライド<xref:System.Windows.UIElement.OnManipulationDelta%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.ManipulationDelta>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1758">Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="8b7ac-1759">必ず、<xref:System.Windows.UIElement.OnManipulationDelta%2A>がイベントを受け取るようにする基本クラスの基本クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1759">Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1760">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1760">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1761">
            <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> イベントが発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1761">Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1762"><xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1762">The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1763">オーバーライド<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.ManipulationInertiaStarting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1763">Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event.</span></span> <span data-ttu-id="8b7ac-1764">必ず、<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>がイベントを受け取るようにする基本クラスの基本クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1764">Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1765">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1765">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1766">
            <see cref="E:System.Windows.UIElement.ManipulationStarted" /> イベントが発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1766">Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1767"><xref:System.Windows.UIElement.OnManipulationStarted%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1767">The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1768">オーバーライド<xref:System.Windows.UIElement.OnManipulationStarted%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.ManipulationStarted>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1768">Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event.</span></span> <span data-ttu-id="8b7ac-1769">必ず、<xref:System.Windows.UIElement.OnManipulationStarted%2A>がイベントを受け取るようにする基本クラスの基本クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1769">Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1770">イベント データを格納している <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1770">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1771">操作プロセッサを初めて作成するときに発生する <see cref="E:System.Windows.UIElement.ManipulationStarting" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1771">Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1772"><xref:System.Windows.UIElement.OnManipulationStarting%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1772">The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1773">オーバーライド<xref:System.Windows.UIElement.OnManipulationStarting%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.ManipulationStarting>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1773">Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span> <span data-ttu-id="8b7ac-1774">必ず、基本クラスの<xref:System.Windows.UIElement.OnManipulationStarting%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1774">Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1775">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1775">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1776">このイベント データは、押されたマウス ボタンおよび処理済み状態に関する詳細を報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1776">This event data reports details about the mouse button that was pressed and the handled state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1777">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1777">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1778">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1778">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1779">マウス ボタンの動作は、専用の入力マネージャーによっても処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1779">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="8b7ac-1780">その他のプログラミング機能の入力など、マウス ボタンの動作に依存し、バインディングのコマンドは、一般的なマウス ボタンの操作として公開される前に、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1780">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="8b7ac-1781">これらの入力システム機能マーク場合、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement.OnMouseDown%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1781">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1782">可能性のある、次のイベントに影響するイベントを処理済みとしてマークをこのクラスのハンドラーを使用する場合:<xref:System.Windows.UIElement.MouseLeftButtonDown>と<xref:System.Windows.UIElement.MouseRightButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1782">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="8b7ac-1783">これらのイベントのいずれかは、受信側の要素で発生する可能性がありますと<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1783">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="8b7ac-1784">このイベントを処理するクラスで処理済みのマークを付けた場合サブイベントも発生します。ただし、イベント データの処理済みの状態を通過するとします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1784">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="8b7ac-1785">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1785">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="8b7ac-1786">クラス ハンドラーも呼び出されないと、クラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>による署名`handledEventsToo``true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1786">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="8b7ac-1787">処理することにより<xref:System.Windows.UIElement.OnMouseDown%2A>処理の速度のすべての可能なマウス ボタンをクラス処理を記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1787">By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="8b7ac-1788">この動作が望ましくない可能性があります。そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1788">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="8b7ac-1789">各ボタンに固有の直接イベントもに、仮想 \* メソッドです。かどうかこれらのボタンに固有のクラスのハンドラーをオーバーライドする場合がありますより適切な検討してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1789">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="8b7ac-1790">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1790">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1791">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1791">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1792">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1792">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1793">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1793">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1794">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1794">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1795">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1795">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1796">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1796">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1797">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1797">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1798">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1798">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1799">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1799">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1800">未処理の <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1800">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1801">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1801">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1802">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1802">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1803">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1803">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1804">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1804">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="8b7ac-1805">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1805">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1806">ここでは、照合イベントは、直接ルーティング戦略のルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1806">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="8b7ac-1807">標準的なインスタンス ハンドラーでも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1807">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1808">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1808">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1809">未処理の <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1809">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1810">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1810">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1811">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1811">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1812">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1812">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-1813">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1813">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="8b7ac-1814">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1814">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1815">ここでは、照合イベントは、直接ルーティング戦略のルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1815">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="8b7ac-1816">標準的なインスタンス ハンドラーでも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1816">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1817">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1817">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1818">このイベント データは、マウスの左ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1818">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1819">この要素上で未処理の <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> ルーティング イベントが発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1819">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element.</span>
          </span>
          <span data-ttu-id="8b7ac-1820">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1820">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1821"><xref:System.Windows.UIElement.MouseLeftButtonDown>イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1821">The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-1822"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.MouseLeftButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1822"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="8b7ac-1823">マークすることができますが、<xref:System.Windows.UIElement.MouseLeftButtonDown>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1823">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-1824">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1824">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1825">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1825">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-1826">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1826">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-1827">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1827">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-1828">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1828">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-1829">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1829">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="8b7ac-1830">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1830">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="8b7ac-1831">呼び出すも期待する先祖のクラスでは、そのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1831">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="8b7ac-1832">派生するなど、<xref:System.Windows.Controls.Button>オーバーライドと<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>、基本実装を呼び出さずに、派生クラスでただし、この上書きを無効に、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1832">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1833">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1833">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1834">このイベント データは、マウスの左ボタンが放されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1834">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1835">未処理の <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1835">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1836">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1836">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1837"><xref:System.Windows.UIElement.MouseLeftButtonUp>イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1837">The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-1838"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.MouseLeftButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1838"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="8b7ac-1839">マークすることができますが、<xref:System.Windows.UIElement.MouseLeftButtonUp>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1839">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-1840">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1840">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1841">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1841">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-1842">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1842">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-1843">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1843">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-1844">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1844">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1845">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1845">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1846">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1846">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1847">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1847">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1848">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1848">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1849">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1849">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1850">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1850">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1851">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1851">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1852">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1852">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1853">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1853">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1854">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1854">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1855">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1855">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1856">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1856">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1857">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1857">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1858">このイベント データは、マウスの右ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1858">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1859">未処理の <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1859">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1860">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1860">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1861"><xref:System.Windows.UIElement.MouseRightButtonDown>イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1861">The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-1862"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.MouseRightButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1862"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="8b7ac-1863">マークすることができますが、<xref:System.Windows.UIElement.MouseRightButtonDown>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1863">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-1864">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1864">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1865">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1865">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-1866">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1866">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-1867">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1867">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-1868">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1868">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-1869">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1869">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="8b7ac-1870">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1870">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="8b7ac-1871">呼び出すも期待する先祖のクラスでは、そのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1871">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="8b7ac-1872">派生するなど、<xref:System.Windows.Controls.Control>オーバーライドと<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>; 呼び出し元の基本せず、派生クラスでただし、この上書きが無効になります、コンテキスト メニュー上のサービス、コントロールに含まれるの<xref:System.Windows.Controls.Control>既定の動作です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1872">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1873">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1873">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1874">このイベント データは、マウスの右ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1874">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1875">未処理の <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1875">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1876">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1876">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1877"><xref:System.Windows.UIElement.MouseRightButtonUp>イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1877">The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-1878"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.MouseRightButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1878"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="8b7ac-1879">マークすることができますが、<xref:System.Windows.UIElement.MouseRightButtonUp>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1879">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-1880">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1880">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1881">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1881">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-1882">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1882">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-1883">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1883">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-1884">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1884">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1885">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1885">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-1886">このイベント データは、マウス ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1886">The event data reports that the mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1887">未処理の <see cref="E:System.Windows.Input.Mouse.MouseUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1887">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1888">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1888">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1889">マウス ボタンの動作は、専用の入力マネージャーによっても処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1889">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="8b7ac-1890">その他のプログラミング機能の入力など、マウス ボタンの動作に依存し、バインディングのコマンドは、一般的なマウス ボタンの操作として公開される前に、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1890">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="8b7ac-1891">これらの入力システム機能マーク場合、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement.OnMouseUp%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1891">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-1892">可能性のある、次のイベントに影響するイベントを処理済みとしてマークをこのクラスのハンドラーを使用する場合:<xref:System.Windows.UIElement.MouseLeftButtonUp>と<xref:System.Windows.UIElement.MouseRightButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1892">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="8b7ac-1893">これらのイベントのいずれかが受信側の要素に対して生成されるときに<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1893">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="8b7ac-1894">このイベントを処理するクラスで処理済みのマークを付けた場合サブイベントも発生します。ただし、イベント データの処理済みの状態を通過するとします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1894">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="8b7ac-1895">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1895">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="8b7ac-1896">クラス ハンドラーも呼び出されないと、クラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>による署名`handledEventsToo``true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1896">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="8b7ac-1897">処理することにより<xref:System.Windows.UIElement.OnMouseUp%2A>操作をすべての可能なマウス ボタンをクラス処理を記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1897">By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="8b7ac-1898">この動作が望ましくない可能性があります。そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1898">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="8b7ac-1899">各ボタンに固有の直接イベントもに、仮想 \* メソッドです。かどうかこれらのボタンに固有のクラスのハンドラーをオーバーライドする場合がありますより適切な検討してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1899">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="8b7ac-1900">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1900">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1901">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1901">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1902">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1902">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1903">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1903">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1904">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1904">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1905">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1905">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1906">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1906">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1907">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1907">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1908">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1908">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1909">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1909">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1910">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1910">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1911">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1911">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1912">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1912">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1913">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1913">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1914">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1914">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1915">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1915">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1916">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1916">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1917">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1917">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1918">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1918">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1919">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1919">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1920">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1920">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1921">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1921">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1922">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1922">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1923">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1923">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1924">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1924">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1925">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1925">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1926">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1926">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1927">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1927">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1928">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1928">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1929">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1929">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1930">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1930">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1931">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1931">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1932">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1932">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-1933">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1933">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1934">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1934">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1935">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1935">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1936">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1936">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1937">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1937">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1938">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1938">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1939">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1939">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1940">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1940">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1941">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1941">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1942">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1942">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1943">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1943">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1944">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1944">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1945">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1945">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-1946">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1946">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1947">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1947">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1948">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1948">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1949">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1949">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1950">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1950">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1951">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1951">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1952">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1952">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1953">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1953">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1954">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1954">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1955">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1955">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1956">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1956">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1957">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1957">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1958">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1958">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-1959">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1959">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1960">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1960">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1961">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDrop" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1961">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1962">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1962">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1963">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1963">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1964">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1964">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1965">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1965">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1966">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1966">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1967">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1967">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1968">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1968">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1969">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1969">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1970">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1970">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1971">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1971">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-1972">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1972">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1973">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1973">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1974">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1974">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1975">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1975">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1976">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1976">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1977">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1977">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1978">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1978">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1979">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1979">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1980">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1980">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1981">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1981">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1982">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1982">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1983">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1983">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1984">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1984">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-1985">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1985">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1986">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1986">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-1987">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1987">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-1988">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1988">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-1989">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1989">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-1990">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1990">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-1991">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1991">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-1992">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1992">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-1993">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1993">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-1994">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1994">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-1995">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1995">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-1996">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1996">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-1997">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1997">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-1998">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-1998">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-1999">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-1999">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2000">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2000">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2001">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2001">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2002">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2002">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2003">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2003">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2004">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2004">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2005">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2005">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2006">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2006">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2007">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2007">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2008">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2008">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2009">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2009">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2010">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2010">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2011">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2011">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2012">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2012">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2013">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2013">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2014">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2014">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2015">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2015">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2016">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2016">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2017">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2017">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2018">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2018">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2019">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2019">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2020">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2020">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2021">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2021">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2022">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2022">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2023">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2023">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2024">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2024">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2025">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2025">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2026">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2026">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2027">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2027">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2028">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2028">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2029">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2029">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2030">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2030">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2031">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2031">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2032">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2032">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2033">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2033">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2034">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2034">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2035">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2035">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2036">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2036">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2037">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2037">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2038">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2038">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-2039">このイベント データは、1 つ以上のマウス ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2039">The event data reports that one or more mouse buttons were pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2040">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2040">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2041">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2041">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2042">マウス ボタンの動作は、専用の入力マネージャーによっても処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2042">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="8b7ac-2043">その他のプログラミング機能の入力など、マウス ボタンの動作に依存し、バインディングのコマンドは、一般的なマウス ボタンの操作として公開される前に、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2043">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="8b7ac-2044">これらの入力システム機能マーク場合、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2044">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-2045">可能性のある、次のイベントに影響するイベントを処理済みとしてマークをこのクラスのハンドラーを使用する場合:<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>と<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2045">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="8b7ac-2046">これらのイベントのいずれかは、受信側の要素で発生する可能性がありますと<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2046">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="8b7ac-2047">このイベントを処理するクラスで処理済みのマークを付けた場合サブイベントも発生します。ただし、イベント データの処理済みの状態を通過するとします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2047">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="8b7ac-2048">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2048">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="8b7ac-2049">クラス ハンドラーも呼び出されないと、クラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>による署名`handledEventsToo``true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2049">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="8b7ac-2050">処理することにより<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>処理の速度のすべての可能なマウス ボタンをクラス処理を記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2050">By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="8b7ac-2051">この動作が望ましくない可能性があります。そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2051">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="8b7ac-2052">各ボタンに固有の直接イベントもに、仮想 \* メソッドです。かどうかこれらのボタンに固有のクラスのハンドラーをオーバーライドする場合がありますより適切な検討してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2052">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="8b7ac-2053">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2053">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2054">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2054">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2055">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2055">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2056">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2056">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2057">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2057">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2058">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2058">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2059">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2059">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2060">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2060">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2061">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2061">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2062">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2062">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2063">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2063">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-2064">このイベント データは、マウスの左ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2064">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2065">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2065">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2066">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2066">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2067"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2067">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-2068"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 基になるイベントをルーティングすると、トンネルおよび各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2068"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="8b7ac-2069">マークすることができますが、<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2069">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-2070">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2070">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-2071">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2071">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-2072">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2072">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-2073">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2073">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-2074">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2074">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-2075">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2075">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="8b7ac-2076">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2076">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="8b7ac-2077">呼び出すも期待する先祖のクラスでは、そのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2077">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="8b7ac-2078">派生するなど、<xref:System.Windows.Controls.Button>オーバーライドと<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>、基本実装を呼び出さずに、派生クラスでただし、この上書きを無効に、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2078">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2079">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2079">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-2080">このイベント データは、マウスの左ボタンが放されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2080">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2081">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2081">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2082">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2082">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2083"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2083">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-2084"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 基になるイベントをルーティングすると、トンネルおよび各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2084"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="8b7ac-2085">マークすることができますが、<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2085">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-2086">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2086">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-2087">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2087">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-2088">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2088">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-2089">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2089">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-2090">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2090">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2091">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2091">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2092">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2092">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2093">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2093">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2094">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2094">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2095">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2095">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2096">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2096">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2097">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2097">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2098">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2098">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2099">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2099">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2100">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2100">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2101">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2101">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2102">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2102">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2103">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2103">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2104">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2104">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-2105">このイベント データは、マウスの右ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2105">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2106">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2106">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2107">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2107">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2108"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown>イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2108">The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-2109"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 基になるイベントをルーティングすると、トンネルおよび各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.MouseRightButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2109"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="8b7ac-2110">マークすることができますが、<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2110">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-2111">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2111">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-2112">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2112">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-2113">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2113">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-2114">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2114">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-2115">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2115">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-2116">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2116">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="8b7ac-2117">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2117">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="8b7ac-2118">呼び出すも期待する先祖のクラスでは、そのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2118">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="8b7ac-2119">派生するなど、<xref:System.Windows.Controls.Control>オーバーライドと<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>; 呼び出し元の基本せず、派生クラスでただし、この上書きが無効になります、コンテキスト メニュー上のサービス、コントロールに含まれるの<xref:System.Windows.Controls.Control>既定の動作です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2119">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2120">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2120">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-2121">このイベント データは、マウスの右ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2121">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2122">未処理の <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2122">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2123">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2123">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2124"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp>イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2124">The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="8b7ac-2125"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 基になるイベントをルーティングすると、トンネルおよび各<xref:System.Windows.UIElement>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2125"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="8b7ac-2126">マークすることができますが、<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2126">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="8b7ac-2127">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2127">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-2128">一般的なマウスのイベント処理の既定の実装<xref:System.Windows.UIElement>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2128">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="8b7ac-2129">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2129">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="8b7ac-2130">派生クラスの静的コンス トラクター内の代替クラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2130">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8b7ac-2131">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement>オーバーライドすることで<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2131">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2132">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2132">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="8b7ac-2133">このイベント データは、1 つ以上のマウス ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2133">The event data reports that one or more mouse buttons were released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2134">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2134">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2135">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2135">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2136">マウス ボタンの動作は、専用の入力マネージャーによっても処理されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2136">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="8b7ac-2137">その他のプログラミング機能の入力など、マウス ボタンの動作に依存し、バインディングのコマンドは、一般的なマウス ボタンの操作として公開される前に、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2137">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="8b7ac-2138">これらの入力システム機能マーク場合、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2138">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="8b7ac-2139">可能性のある、次のイベントに影響するイベントを処理済みとしてマークをこのクラスのハンドラーを使用する場合:<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>と<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2139">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="8b7ac-2140">これらのイベントのいずれかが受信側の要素に対して生成されるときに<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2140">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="8b7ac-2141">このイベントを処理するクラスで処理済みのマークを付けた場合サブイベントも発生します。ただし、イベント データの処理済みの状態を通過するとします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2141">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="8b7ac-2142">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2142">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="8b7ac-2143">クラス ハンドラーも呼び出されないと、クラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>による署名`handledEventsToo``true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2143">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="8b7ac-2144">処理することにより<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>操作をすべての可能なマウス ボタンをクラス処理を記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2144">By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="8b7ac-2145">この動作が望ましくない可能性があります。そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2145">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="8b7ac-2146">各ボタンに固有の直接イベントもに、仮想 \* メソッドです。かどうかこれらのボタンに固有のクラスのハンドラーをオーバーライドする場合がありますより適切な検討してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2146">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="8b7ac-2147">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2147">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2148">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2148">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2149">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2149">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2150">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2150">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2151">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2151">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2152">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2152">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2153">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2153">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2154">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2154">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2155">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2155">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2156">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2156">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2157">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2157">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2158">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2158">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2159">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2159">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2160">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2160">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2161">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2161">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2162">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2162">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2163">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2163">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2164">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2164">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2165">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2165">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2166">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2166">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2167">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2167">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2168">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2168">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2169">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2169">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2170">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2170">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2171">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2171">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2172">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2172">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2173">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2173">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2174">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2174">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2175">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2175">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2176">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2176">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2177">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2177">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2178">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2178">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2179">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2179">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2180">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2180">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2181">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2181">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2182">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2182">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2183">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2183">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2184">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2184">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2185">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2185">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2186">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2186">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2187">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2187">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2188">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2188">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2189">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2189">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2190">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2190">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2191">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2191">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2192">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2192">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2193">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2193">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2194">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2194">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2195">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2195">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2196">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2196">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2197">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2197">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2198">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2198">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2199">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2199">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2200">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2200">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2201">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2201">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2202">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2202">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2203">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2203">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2204">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2204">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2205">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2205">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2206">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2206">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2207">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2207">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2208">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2208">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2209">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2209">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2210">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2210">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2211">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2211">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2212">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2212">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2213">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2213">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2214">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2214">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2215">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2215">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2216">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2216">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2217">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2217">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2218">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2218">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2219">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2219">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2220">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2220">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2221">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2221">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2222">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2222">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2223">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2223">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2224">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2224">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2225">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2225">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2226">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2226">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2227">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2227">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2228">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2228">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2229">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2229">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2230">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2230">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2231">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2231">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2232">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2232">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2233">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2233">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2234">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2234">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2235">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2235">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2236">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2236">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2237">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2237">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2238">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2238">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2239">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2239">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2240">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2240">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2241">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2241">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2242">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2242">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2243">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2243">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2244">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2244">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2245">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2245">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2246">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2246">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2247">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2247">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2248">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2248">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2249">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2249">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2250">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2250">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2251">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2251">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2252">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2252">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2253">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2253">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2254">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2254">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2255">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2255">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2256">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2256">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2257">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2257">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2258">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2258">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2259">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2259">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2260">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2260">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2261">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2261">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2262">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2262">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2263">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2263">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2264">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2264">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2265">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2265">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2266">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2266">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2267">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2267">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2268">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2268">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2269">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2269">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2270">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2270">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2271">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2271">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2272">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2272">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2273">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2273">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2274">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2274">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2275">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2275">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2276">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2276">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2277">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2277">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2278">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2278">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2279">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2279">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2280">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2280">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2281">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2281">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2282">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2282">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2283">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2283">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2284">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2284">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2285">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2285">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2286">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2286">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2287">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2287">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2288">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2288">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2289">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2289">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2290">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2290">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2291">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2291">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2292">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2292">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2293">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2293">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2294">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2294">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2295">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2295">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2296">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2296">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2297">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2297">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2298">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2298">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2299">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2299">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2300">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2300">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2301">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2301">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2302">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2302">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2303">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2303">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2304">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2304">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2305">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2305">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2306">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2306">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2307">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2307">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2308">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2308">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2309">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2309">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2310">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2310">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="8b7ac-2311">プレビュー イベントを具体的には、もう 1 つのシナリオでは、マークして処理されるように、一致するバブル クラス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2311">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2312">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2312">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2313">この要素がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2313">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2314"><xref:System.Windows.UIElement.OnPreviewTouchDown%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2314">The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2315">オーバーライド<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.PreviewTouchDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2315">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="8b7ac-2316">必ず、基本クラスの<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2316">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2317">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2317">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2318">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2318">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2319"><xref:System.Windows.UIElement.OnPreviewTouchMove%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2319">The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2320">オーバーライド<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.PreviewTouchMove>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2320">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="8b7ac-2321">必ず、基本クラスの<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2321">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2322">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2322">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2323">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2323">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2324"><xref:System.Windows.UIElement.OnPreviewTouchUp%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2324">The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2325">オーバーライド<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.PreviewTouchUp>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2325">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="8b7ac-2326">必ず、基本クラスの<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2326">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2327">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2327">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2328">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2328">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2329">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2329">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2330">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2330">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2331">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2331">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2332">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2332">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2333">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2333">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2334">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2334">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2335">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2335">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2336">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2336">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2337">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2337">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2338">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2338">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2339">イベント データを格納している <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2339">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2340">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2340">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2341">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2341">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2342">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2342">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2343">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2343">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2344">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2344">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2345">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2345">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2346">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2346">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2347">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2347">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2348">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2348">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2349">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2349">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2350">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2350">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">
          <span data-ttu-id="8b7ac-2351">特定の要素に対する描画命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2351">The drawing instructions for a specific element.</span>
          </span>
          <span data-ttu-id="8b7ac-2352">このコンテキストはレイアウト システムに提供されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2352">This context is provided to the layout system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2353">派生クラスでオーバーライドされると、レイアウト システムの指示で行われるレンダリング操作に参加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2353">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span>
          </span>
          <span data-ttu-id="8b7ac-2354">この要素に対するレンダリング指示は、このメソッドの呼び出し時に直接使用されるわけではなく、後からレイアウト処理や描画処理で非同期に使用されるときまで保存されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2354">The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2355">このメソッド既定の実装ではない、<xref:System.Windows.UIElement>クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2355">This method has no default implementation in the <xref:System.Windows.UIElement> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-2356">次のコード例は、パネルの派生クラスの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2356">The following code example shows a possible implementation for a panel derived class.</span></span>  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-2357">
              <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />効果などの装飾のレンダリング要素を (論理ツリーで定義されていない) グラフィカル要素を追加するメソッドをオーバーライドすることができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2357">The <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</span>
            </span>
            <span data-ttu-id="8b7ac-2358">A<see cref="T:System.Windows.Media.DrawingContext" />オブジェクトは、図形、テキスト、画像またはビデオを描画するためのメソッドを提供する引数として渡されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2358">A <see cref="T:System.Windows.Media.DrawingContext" /> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="8b7ac-2359">変更前後のサイズおよび実際のサイズ変更の方向を格納したパッケージ パラメーター (<see cref="T:System.Windows.SizeChangedInfo" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2359">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2360">派生クラスでオーバーライドされると、レイアウト システムの指示で行われるレンダリング操作に参加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2360">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span>
          </span>
          <span data-ttu-id="8b7ac-2361">レイアウトを更新した結果として要素の <see cref="P:System.Windows.UIElement.RenderSize" /> が変更された場合、レイアウトが更新されてから描画されるまでの間にこのメソッドが呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2361">This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2362">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2362">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2363">一般的な WPF フレームワーク レベルの要素からオーバーライドの実装を使用して<xref:System.Windows.FrameworkElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2363">A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="8b7ac-2364"><xref:System.Windows.FrameworkElement>実装が無効化、<xref:System.Windows.FrameworkElement.Width%2A>と<xref:System.Windows.FrameworkElement.Height%2A>プロパティとレイアウトを再構築の基本のハンドル。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2364">The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout.</span></span> <span data-ttu-id="8b7ac-2365">オーバーライドする<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>で、<xref:System.Windows.UIElement>レベルことを示します、要素の実装は WPF フレームワーク レベルの実装を使用して意図的にないため、要素必要がありますのレイアウト ロジックよりを直接処理、通常置換レイアウト システムを記述しています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2365">Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2366">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2366">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2367">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2367">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2368">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2368">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2369">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2369">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2370">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2370">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2371">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2371">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2372">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2372">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2373">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2373">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2374">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2374">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2375">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2375">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2376">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2376">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2377">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2377">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2378">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2378">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2379">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2379">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2380">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2380">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2381">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2381">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2382">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2382">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2383">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2383">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2384">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2384">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2385">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2385">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2386">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2386">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2387">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2387">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2388">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2388">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2389">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2389">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2390">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2390">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2391">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2391">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2392">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2392">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2393">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2393">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2394">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2394">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2395">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2395">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2396">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2396">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2397">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2397">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2398">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2398">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2399">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2399">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2400">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2400">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2401">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2401">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2402">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2402">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2403">未処理の <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2403">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="8b7ac-2404">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2404">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2405">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2405">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2406">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2406">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-2407">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2407">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="8b7ac-2408">このメソッドの目的はのような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2408">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2409">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2409">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2410">通常のインスタンス ハンドラーを禁止する場合にも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2410">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2411">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2411">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2412">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2412">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2413">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2413">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2414">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2414">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2415">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2415">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2416">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2416">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2417">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2417">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2418">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2418">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2419">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2419">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2420">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2420">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2421">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2421">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2422">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2422">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2423">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2423">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2424">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2424">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2425">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2425">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2426">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2426">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2427">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2427">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2428">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2428">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2429">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2429">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2430">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2430">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2431">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2431">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2432">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2432">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2433">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2433">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2434">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2434">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2435">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2435">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2436">未処理の <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2436">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="8b7ac-2437">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2437">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2438">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2438">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2439">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2439">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="8b7ac-2440">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2440">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="8b7ac-2441">このメソッドの目的はのような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2441">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2442">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2442">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2443">通常のインスタンス ハンドラーを禁止する場合にも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの`handledEventsToo`) が呼び出されているからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2443">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2444">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2444">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2445">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2445">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2446">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2446">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2447">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2447">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2448">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2448">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2449">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2449">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2450">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2450">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2451">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2451">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2452">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2452">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2453">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2453">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2454">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2454">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2455">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2455">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2456">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2456">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2457">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2457">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2458">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2458">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2459">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2459">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2460">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2460">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2461">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2461">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2462">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2462">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2463">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2463">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2464">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2464">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2465">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2465">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2466">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2466">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2467">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2467">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2468">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2468">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2469">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2469">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2470">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2470">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2471">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2471">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2472">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2472">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2473">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2473">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2474">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2474">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2475">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2475">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2476">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2476">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2477">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2477">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2478">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2478">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2479">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2479">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2480">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2480">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2481">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2481">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2482">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2482">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2483">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2483">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2484">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2484">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2485">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2485">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2486">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2486">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2487">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2487">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2488">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2488">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2489">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2489">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2490">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2490">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2491">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2491">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2492">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2492">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2493">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2493">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="8b7ac-2494">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2494">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2495">このメソッドには、既定の実装ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2495">This method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2496">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2496">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="8b7ac-2497">このメソッドの目的がに似ていますが、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]でのイベント パターン \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2497">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="8b7ac-2498">ここでは、照合イベントは、ルーティングされたイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2498">In this case the matching event is a routed event.</span></span> <span data-ttu-id="8b7ac-2499">On のメソッドの実装パターンは、必ずしもハンドラーを呼び出すの要素ではない子要素で、ルーティングされたイベントを発生させるためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2499">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="8b7ac-2500">そのため、実装には、イベント データのソースのプロパティを点検する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2500">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="8b7ac-2501">ほとんどの場合、イベントを reraise にはいけません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2501">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="8b7ac-2502">ハンドラーのクラスか、このメソッドをオーバーライドすることで登録することによって<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement>イベント ルート上でイベントが受け取られると、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2502">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="8b7ac-2503">イベント データを操作し、ルーティングされたイベントを処理済みとしてマークする 1 つのシナリオがクラス処理が適切です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2503">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2504">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2504">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2505">この要素の内部がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement.TouchDown" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2505">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2506"><xref:System.Windows.UIElement.OnTouchDown%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2506">The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2507">オーバーライド<xref:System.Windows.UIElement.OnTouchDown%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.TouchDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2507">Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event.</span></span> <span data-ttu-id="8b7ac-2508">必ず、基本クラスの<xref:System.Windows.UIElement.OnTouchDown%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2508">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2509">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2509">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2510">この要素の境界の外部から内部にタッチが移動したときに発生する <see cref="E:System.Windows.UIElement.TouchEnter" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2510">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2511"><xref:System.Windows.UIElement.OnTouchEnter%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2511">The <xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2512">オーバーライド<xref:System.Windows.UIElement.OnTouchEnter%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.TouchEnter>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2512">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event.</span></span> <span data-ttu-id="8b7ac-2513">必ず、基本クラスの<xref:System.Windows.UIElement.OnTouchEnter%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2513">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2514">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2514">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2515">タッチがこの <see cref="E:System.Windows.UIElement.TouchLeave" /> の境界の内部から外部に移動したときに発生する <see cref="T:System.Windows.UIElement" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2515">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2516"><xref:System.Windows.UIElement.OnTouchLeave%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2516">The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2517">オーバーライド<xref:System.Windows.UIElement.OnTouchLeave%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.TouchLeave>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2517">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event.</span></span> <span data-ttu-id="8b7ac-2518">必ず、基本クラスの<xref:System.Windows.UIElement.OnTouchLeave%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2518">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2519">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2519">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2520">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement.TouchMove" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2520">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2521"><xref:System.Windows.UIElement.OnTouchMove%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2521">The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2522">オーバーライド<xref:System.Windows.UIElement.OnTouchMove%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.TouchMove>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2522">Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event.</span></span> <span data-ttu-id="8b7ac-2523">必ず、基本クラスの<xref:System.Windows.UIElement.OnTouchMove%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2523">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-2524">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2524">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2525">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement.TouchUp" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2525">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2526"><xref:System.Windows.UIElement.OnTouchUp%2A>メソッドに既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2526">The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="8b7ac-2527">オーバーライド<xref:System.Windows.UIElement.OnTouchUp%2A>を処理する派生クラスで、<xref:System.Windows.UIElement.TouchUp>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2527">Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event.</span></span> <span data-ttu-id="8b7ac-2528">必ず、基本クラスの<xref:System.Windows.UIElement.OnTouchUp%2A>を基底クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2528">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="8b7ac-2529">直前の親。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2529">The previous parent.</span>
          </span>
          <span data-ttu-id="8b7ac-2530">
            <see cref="T:System.Windows.DependencyObject" /> に直前の親要素がなかった場合は、<see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2530">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2531">この <see cref="T:System.Windows.UIElement" /> の親要素によって、基になるビジュアル親に対する変更が報告されると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2531">Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="8b7ac-2532">このメソッドをオーバーライドする場合は、常に基本実装を呼び出します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2532">If you override this method, always call the base implementation.</span>
            </span>
            <span data-ttu-id="8b7ac-2533">既定の基本実装では、逆継承されたプロパティの状態の内部的な保守を実行します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2533">The default base implementation performs some internal maintenance of reverse-inherited property state.</span>
            </span>
            <span data-ttu-id="8b7ac-2534">基底の実装の呼び出しに失敗すると、この状態が無効になります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2534">Failing to call the base implementation will invalidate this state.</span>
            </span>
            <span data-ttu-id="8b7ac-2535">このメソッドは、<see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /> をオーバーライドします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2535">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span>
            </span>
            <span data-ttu-id="8b7ac-2536">
              <see cref="T:System.Windows.FrameworkElement" />
              <see cref="T:System.Windows.Window" />上書き両方も、<see cref="T:System.Windows.UIElement" />の実装<see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />、および<see cref="T:System.Windows.Window" />その封印します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="8b7ac-2536">
                <see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement" /> implementation of <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2537">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] での描画時に <see cref="T:System.Windows.UIElement" /> 全体に適用される不透明率を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2537">Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="8b7ac-2538">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2538">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-2539">不透明度率。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2539">The opacity factor.</span>
          </span>
          <span data-ttu-id="8b7ac-2540">既定の不透明度は 1.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2540">Default opacity is 1.0.</span>
          </span>
          <span data-ttu-id="8b7ac-2541">予期される値は 0 0 ～ 1.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2541">Expected values are between 0.0 and 1.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2542">1.0 の既定値は、既定では、この依存関係プロパティの初期メタデータによって提供される、<xref:System.Windows.UIElement>クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2542">The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="8b7ac-2543">他の派生クラスは、クラス コンス トラクター内からのメタデータをオーバーライドすることでこの既定値を変更可能性がある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2543">Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</span></span>  
  
 <span data-ttu-id="8b7ac-2544">値<xref:System.Windows.UIElement.Opacity%2A>要素が表示されてもいない限り、実際のレイアウトには適用されません (<xref:System.Windows.UIElement.IsVisible%2A>は`true`)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2544">The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).</span></span>  
  
 <span data-ttu-id="8b7ac-2545"><xref:System.Windows.UIElement.Opacity%2A> 適用されます親要素からのツリーの下位要素の子要素が入れ子になった不透明度の設定は、個々 の子要素のプロパティの値で示されていないの可視の効果。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2545"><xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</span></span> <span data-ttu-id="8b7ac-2546">インスタンスの場合 (0.5) の 50% 不透明度は、リストが、そのリスト項目のいずれか、独自の不透明度が 20% (0.2) に設定、net 表示不透明度そのリスト項目はレンダリングされます 10% (0.1) の場合と同様、リスト項目のプロパティの値が<xref:System.Windows.UIElement.Opacity%2A>プロパティも 0.2 が照会されたときにします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2546">For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.</span></span>  
  
 <span data-ttu-id="8b7ac-2547">宣言または評価された不透明度が 0 の場合でも要素はまだ入力イベント、およびコマンドに参加して、フォーカスを設定できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2547">Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</span></span> <span data-ttu-id="8b7ac-2548">この側面は便利ですが、マスクの透明な要素を持つ基になるオブジェクトの不透明度 0 オブジェクト (shape) などを使用するのインスタンスにすることはできます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2548">This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</span></span> <span data-ttu-id="8b7ac-2549">不透明度 0 のオブジェクトには、すべての入力イベントを基になる領域の処理、処理できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2549">The opacity-zero object can then handle all the input event processing for an underlying area.</span></span> <span data-ttu-id="8b7ac-2550">ただし、`Background`または`Fill`オブジェクトまたは図形の必要があります設定する値になっている場合でも<xref:System.Windows.Media.Brushes.Transparent%2A>、それ以外の場合のヒット テストが有効でないと、イベントの受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2550">However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.</span></span>  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-2551">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2551">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2552">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2552">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityProperty>|  
|<span data-ttu-id="8b7ac-2553">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2553">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-2554">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2554">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2555">この要素の描画されるコンテンツのアルファ チャネル マスクに適用される <see cref="T:System.Windows.Media.Brush" /> 実装として、不透明マスクを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2555">Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.</span>
          </span>
          <span data-ttu-id="8b7ac-2556">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2556">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-2557">不透明マスクに使用するブラシ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2557">The brush to use for opacity masking.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2558">このプロパティがすべてのアルファ チャネル値では、指定されたを使用してのみ<xref:System.Windows.Media.Brush>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2558">This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>.</span></span> <span data-ttu-id="8b7ac-2559">他のチャネル、 <xref:System.Windows.Media.Brush>(赤、緑、または青) のコンテンツをレンダリングは無視されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2559">The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.</span></span>  
  
 <span data-ttu-id="8b7ac-2560">最も一般的な<xref:System.Windows.Media.Brush>この目的は、 <xref:System.Windows.Media.ImageBrush>、さまざまな写真の画像を表示するなどの手法をマスクに使用できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2560">The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette.</span></span> <span data-ttu-id="8b7ac-2561">いずれかの定義が<xref:System.Windows.Media.Brush>(など<xref:System.Windows.Media.LinearGradientBrush>) 使用することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2561">But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.</span></span>  
  
 <span data-ttu-id="8b7ac-2562">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]、このプロパティの値は、の各実装に固有であるインライン構文を使用できます、<xref:System.Windows.Media.Brush>抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2562">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class.</span></span> <span data-ttu-id="8b7ac-2563">詳細については、次を参照してください。[純色、グラデーションの概要でペイント](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2563">For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-2564">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2564">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2565">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2565">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|<span data-ttu-id="8b7ac-2566">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2566">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-2567">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2567">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-2568">次のマークアップの例は、<xref:System.Windows.Media.ImageBrush>別に適用される不透明度マスク<xref:System.Windows.Controls.Image>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2568">The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.</span></span>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2569">
            <see cref="P:System.Windows.UIElement.OpacityMask" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2569">Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2570">
            <see cref="P:System.Windows.UIElement.Opacity" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2570">Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2571">この要素を一意に識別する値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2571">Gets a value that uniquely identifies this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-2572">この要素の一意の識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2572">The unique identifier for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2573"><xref:System.Windows.UIElement.PersistId%2A> 各要素を一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2573"><xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element.</span></span> <span data-ttu-id="8b7ac-2574">要素は同じ<xref:System.Windows.UIElement.PersistId%2A>たびに同じ[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)](バイナリ表現を含む) が読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2574">An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations).</span></span> <span data-ttu-id="8b7ac-2575">内部の読み込み、解析およびシリアル化の要件については、この識別子が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2575">This identifier is used for internal loading, parsing and serialization requirements.</span></span> <span data-ttu-id="8b7ac-2576">アプリケーション コードで使用することはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2576">It is not intended to be used by your application code.</span></span>  
  
 <span data-ttu-id="8b7ac-2577">このプロパティへのリレーションシップを持たない、<xref:System.Object.GetHashCode%2A>特定のインスタンスの結果。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2577">This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <span data-ttu-id="8b7ac-2578">要求したフォーカス検査の方向。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2578">The direction of the requested focus traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-2579">派生クラスでオーバーライドされると、指定したフォーカス検査方向のフォーカスを受け取ることになる要素を返します。実際にはフォーカスはその要素に移動しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2579">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-2580">
            <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> が実際に呼び出された場合にフォーカスを受け取る要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2580">The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2581">このクラスでこのメソッドの既定の実装が完了していないと、常に返します`null`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2581">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2582">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2582">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2583">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewDragEnter>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2583">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2584">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewDragEnter>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2584">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2585">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2585">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2586">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2586">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="8b7ac-2587">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2587">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2588">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2588">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2589">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2589">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2590">バブルの対応するイベントが<xref:System.Windows.UIElement.DragEnter>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2590">The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2591">オーバーライド<xref:System.Windows.UIElement.OnPreviewDragEnter%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2591">Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2592">
            <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2592">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2593">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2593">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2594">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2594">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2595">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2595">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2596">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2596">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2597">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2597">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2598">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2598">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2599">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewDragLeave>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2599">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2600">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewDragLeave>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2600">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2601">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2601">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2602">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2602">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="8b7ac-2603">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2603">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2604">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2604">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2605">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2605">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2606">バブルの対応するイベントが<xref:System.Windows.UIElement.DragLeave>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2606">The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2607">オーバーライド<xref:System.Windows.UIElement.OnPreviewDragLeave%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2607">Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2608">
            <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2608">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2609">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2609">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2610">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2610">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2611">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2611">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2612">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2612">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2613">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2613">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2614">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2614">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2615">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewDragOver>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2615">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2616">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewDragOver>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2616">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2617">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2617">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2618">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2618">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|<span data-ttu-id="8b7ac-2619">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2619">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2620">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2620">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2621">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2621">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2622">バブルの対応するイベントが<xref:System.Windows.UIElement.DragOver>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2622">The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2623">オーバーライド<xref:System.Windows.UIElement.OnPreviewDragOver%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2623">Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2624">
            <see cref="E:System.Windows.UIElement.PreviewDragOver" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2624">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2625">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2625">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2626">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2626">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2627">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2627">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2628">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2628">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2629">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2629">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2630">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2630">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2631">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewDrop>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2631">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2632">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewDrop>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2632">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2633">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2633">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2634">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2634">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|<span data-ttu-id="8b7ac-2635">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2635">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2636">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2636">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2637">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2637">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2638">バブルの対応するイベントが<xref:System.Windows.UIElement.Drop>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2638">The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2639">オーバーライド<xref:System.Windows.UIElement.OnPreviewDrop%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2639">Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2640">
            <see cref="E:System.Windows.UIElement.PreviewDrop" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2640">Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2641">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2641">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2642">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2642">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2643">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2643">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2644">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2644">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2645">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2645">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2646">ドラッグ アンド ドロップ操作が開始されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2646">Occurs when a drag-and-drop operation is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2647"><xref:System.Windows.UIElement.PreviewGiveFeedback>イベントにより、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更するドラッグ イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2647">The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="8b7ac-2648">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewGiveFeedback>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2648">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2649">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewGiveFeedback>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2649">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2650">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2650">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2651">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2651">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="8b7ac-2652">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2652">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2653">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2653">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2654">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2654">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2655">バブルの対応するイベントが<xref:System.Windows.UIElement.GiveFeedback>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2655">The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2656">オーバーライド<xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2656">Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2657">
            <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2657">Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2658">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2658">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2659">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2659">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2660">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2660">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2661">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2661">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2662">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2662">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2663">この要素にキーボード フォーカスが移動したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2663">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2664">このイベントは、ルーティング トンネリングを使用するため、フォーカスを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2664">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-2665">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスのある実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2665">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="8b7ac-2666">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2666">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2667">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2667">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2668">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2668">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2669">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2669">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="8b7ac-2670">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2670">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2671">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2671">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2672">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2672">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2673">バブルの対応するイベントが<xref:System.Windows.UIElement.GotKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2673">The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2674">オーバーライド<xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2674">Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2675">
            <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2675">Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2676">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2676">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2677">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2677">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2678">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2678">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2679">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2679">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2680">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2680">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2681">この要素にフォーカスがある状態でキーが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2681">Occurs when a key is pressed while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2682">キーの処理は、コマンド実行やテキストの合成などの他のプラットフォーム機能と対話します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2682">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="8b7ac-2683"><xref:System.Windows.UIElement.KeyDown>イベントは、下位レベルのテキスト入力イベントを特定のコントロールで期待どおりに動作しない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2683">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="8b7ac-2684">これは、一部のコントロールがコントロールの複合か、テキストの上位レベルのバージョンを提供するクラスの処理が処理を入力し、関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2684">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="8b7ac-2685">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewKeyDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2685">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2686">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewKeyDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2686">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2687">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2687">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2688">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2688">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="8b7ac-2689">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2689">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2690">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2690">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2691">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2691">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2692">バブルの対応するイベントが<xref:System.Windows.UIElement.KeyDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2692">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2693">オーバーライド<xref:System.Windows.UIElement.OnPreviewKeyDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2693">Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2694">
            <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2694">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2695">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2695">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2696">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2696">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2697">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2697">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2698">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2698">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2699">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2699">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2700">この要素にフォーカスがあるときにキーが離されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2700">Occurs when a key is released while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2701">キーの処理は、コマンド実行やテキストの合成などの他のプラットフォーム機能と対話します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2701">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="8b7ac-2702"><xref:System.Windows.UIElement.KeyUp>イベントは、下位レベルのテキスト入力イベントを特定のコントロールで期待どおりに動作しない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2702">The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="8b7ac-2703">これは、一部のコントロールがコントロールの複合か、テキストの上位レベルのバージョンを提供するクラスの処理が処理を入力し、関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2703">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="8b7ac-2704">詳細については、個々 のコントロールのマニュアルを確認します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2704">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="8b7ac-2705">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewKeyUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2705">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2706">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewKeyUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2706">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2707">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2707">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2708">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2708">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="8b7ac-2709">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2709">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2710">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2710">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2711">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2711">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2712">バブルの対応するイベントが<xref:System.Windows.UIElement.KeyUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2712">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2713">オーバーライド<xref:System.Windows.UIElement.OnPreviewKeyUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2713">Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2714">
            <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2714">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2715">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2715">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2716">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2716">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2717">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2717">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2718">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2718">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2719">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2719">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2720">この要素からキーボード フォーカスが離れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2720">Occurs when the keyboard is no longer focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2721">このイベントは、ルーティング トンネリングを使用しているために、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2721">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="8b7ac-2722">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスが失われた実際の要素を特定のイベント データ。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2722">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="8b7ac-2723">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2723">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2724">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2724">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2725">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2725">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2726">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2726">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="8b7ac-2727">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2727">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2728">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2728">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2729">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2729">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2730">バブルの対応するイベントが<xref:System.Windows.UIElement.LostKeyboardFocus>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2730">The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2731">オーバーライド<xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2731">Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2732">
            <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2732">Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2733">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2733">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2734">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2734">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2735">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2735">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2736">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2736">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2737">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2737">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2738">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2738">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2739">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewMouseDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2739">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2740">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewMouseDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2740">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2741"><xref:System.Windows.UIElement.PreviewMouseDown>イベントは、多くの場合、いずれかと共に<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>または<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>、2 つの標準のマウス ボタンのいずれかのキーを押してに対応します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2741">The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="8b7ac-2742"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント イベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2742"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="8b7ac-2743">「解説」を参照してください<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>または<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2743">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2744">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2744">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2745">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2745">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="8b7ac-2746">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2746">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2747">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2747">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2748">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2748">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2749">バブルの対応するイベントが<xref:System.Windows.UIElement.MouseDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2749">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2750">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2750">Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2751">
            <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2751">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2752">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2752">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2753">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2753">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2754">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2754">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2755">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2755">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2756">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2756">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2757">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2757">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2758">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2758">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-2759">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2759">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-2760">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2760">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-2761">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2761">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-2762">マークを付けた場合<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2762">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="8b7ac-2763">これは、可能性がありますなどが含まれるクラス ハンドラーが生成されるイベント<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2763">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="8b7ac-2764">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2764">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-2765">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2765">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-2766">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2766">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2767">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2767">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2768">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2768">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="8b7ac-2769">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2769">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2770">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2770">Direct</span></span>|  
|<span data-ttu-id="8b7ac-2771">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2771">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2772">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2772">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2773">
            <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2773">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2774">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2774">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2775">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2775">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2776">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2776">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2777">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2777">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2778">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2778">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2779">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2779">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2780">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2780">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-2781">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2781">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-2782">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2782">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-2783">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2783">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-2784">マークを付けた場合<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2784">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="8b7ac-2785">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2785">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-2786">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2786">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-2787">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2787">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2788">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2788">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2789">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2789">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="8b7ac-2790">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2790">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2791">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2791">Direct</span></span>|  
|<span data-ttu-id="8b7ac-2792">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2792">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2793">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2793">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2794">
            <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2794">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2795">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2795">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2796">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2796">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2797">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2797">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2798">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2798">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2799">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2799">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2800">この要素上でマウス ポインターが動かされたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2800">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2801">このイベントは、どちらも要素の境界にマウス ポインターを最初に入力し、マウス ポインターが要素の境界内に残っているときに移動するともします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2801">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="8b7ac-2802">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewMouseMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2802">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2803">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewMouseMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2803">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2804">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2804">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2805">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2805">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="8b7ac-2806">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2806">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2807">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2807">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2808">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2808">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2809">バブルの対応するイベントが<xref:System.Windows.UIElement.MouseMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2809">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2810">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2810">Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2811">
            <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2811">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2812">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2812">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2813">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2813">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2814">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2814">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2815">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2815">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2816">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2816">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2817">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2817">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2818">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2818">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-2819">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2819">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-2820">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2820">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-2821">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2821">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-2822">マークを付けた場合<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2822">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="8b7ac-2823">これは、可能性がありますなどが含まれるクラス ハンドラーが生成されるイベント<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2823">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="8b7ac-2824">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2824">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-2825">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2825">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-2826">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2826">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2827">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2827">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2828">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2828">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="8b7ac-2829">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2829">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2830">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2830">Direct</span></span>|  
|<span data-ttu-id="8b7ac-2831">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2831">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2832">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2832">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2833">
            <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2833">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2834">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2834">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2835">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2835">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2836">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2836">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2837">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2837">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2838">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2838">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2839">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2839">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2840">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各によって、要素ツリーに沿って reraised<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2840">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-2841">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの 1 つ<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント ルート上の各要素によって処理される添付イベントがイベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2841">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="8b7ac-2842">このイベントのイベント データ、イベントのデータを公開、基になる<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2842">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="8b7ac-2843">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement.AddHandler%2A>、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2843">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="8b7ac-2844">マークを付けた場合<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>経路、さらにすべてのリスナーの処理され、すべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2844">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="8b7ac-2845">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに<xref:System.Windows.UIElement>) マウス「サービス」である (によって提供される、サービス定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2845">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="8b7ac-2846">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2846">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="8b7ac-2847">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2847">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2848">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2848">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2849">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2849">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="8b7ac-2850">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2850">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2851">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2851">Direct</span></span>|  
|<span data-ttu-id="8b7ac-2852">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2852">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2853">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2853">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2854">
            <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2854">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2855">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2855">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2856">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2856">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2857">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2857">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2858">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2858">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2859">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2859">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2860">この要素の上にマウス ポインターがある状態でいずれかのマウス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2860">Occurs when any mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2861">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewMouseUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2861">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2862">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewMouseUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2862">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2863"><xref:System.Windows.UIElement.PreviewMouseUp>イベントは、多くの場合、いずれかと共に<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>または<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>、2 つの標準のマウス ボタンのいずれかのキーを押してに対応します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2863">The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="8b7ac-2864"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント イベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2864"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="8b7ac-2865">「解説」を参照してください<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>または<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2865">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2866">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2866">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2867">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2867">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="8b7ac-2868">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2868">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2869">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2869">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2870">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2870">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2871">バブルの対応するイベントが<xref:System.Windows.UIElement.MouseUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2871">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2872">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2872">Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2873">
            <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2873">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2874">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2874">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2875">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2875">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2876">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2876">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2877">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2877">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2878">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2878">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2879">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2879">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2880">フォーカスまたはマウスのキャプチャ、マウス ポインターが; よりも優先します。このため、対象を絞ったまたはキャプチャした要素からこのイベントを受信する場合、マウス ポインター実際にあります別の要素上です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2880">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="8b7ac-2881">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewMouseMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2881">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2882">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewMouseMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2882">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2883">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2883">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2884">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2884">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="8b7ac-2885">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2885">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2886">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2886">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2887">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2887">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2888">バブルの対応するイベントが<xref:System.Windows.UIElement.MouseWheel>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2888">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2889">オーバーライド<xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2889">Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2890">
            <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2890">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2891">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2891">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2892">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2892">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2893">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2893">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2894">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2894">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2895">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2895">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2896">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2896">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2897"><xref:System.Windows.UIElement.PreviewQueryContinueDrag>イベントにより、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを宣言します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2897">The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="8b7ac-2898">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewQueryContinueDrag>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2898">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2899">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewQueryContinueDrag>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2899">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2900">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2900">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2901">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2901">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="8b7ac-2902">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2902">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2903">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2903">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2904">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2904">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2905">バブルの対応するイベントが<xref:System.Windows.UIElement.QueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2905">The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2906">オーバーライド<xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2906">Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2907">
            <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2907">Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2908">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2908">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2909">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2909">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2910">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2910">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2911">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2911">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2912">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2912">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2913">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2913">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2914">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusButtonDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2914">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2915">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusButtonDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2915">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2916">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2916">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-2917">詳細については、次を参照してください。 [Windows Vista でタッチ入力サポート](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)と[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2917">For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2918">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2918">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2919">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2919">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="8b7ac-2920">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2920">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2921">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2921">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2922">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2922">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2923">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2923">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2924">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2924">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2925">
            <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2925">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2926">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2926">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2927">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2927">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2928">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2928">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2929">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2929">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2930">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2930">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2931">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2931">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2932">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusButtonUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2932">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2933">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusButtonUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2933">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2934">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2934">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-2935">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2935">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2936">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2936">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2937">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2937">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="8b7ac-2938">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2938">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2939">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2939">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2940">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2940">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2941">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2941">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2942">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2942">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2943">
            <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2943">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2944">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2944">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2945">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2945">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2946">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2946">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2947">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2947">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2948">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2948">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2949">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2949">Occurs when the stylus touches the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2950">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2950">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2951">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2951">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2952">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2952">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-2953">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2953">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2954">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2954">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2955">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2955">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="8b7ac-2956">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2956">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2957">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2957">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2958">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2958">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2959">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2959">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2960">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2960">Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2961">
            <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2961">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2962">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2962">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2963">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2963">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2964">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2964">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2965">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2965">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2966">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2966">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2967">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2967">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2968">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusInAirMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2968">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2969">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusInAirMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2969">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2970">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2970">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-2971">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2971">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2972">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2972">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2973">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2973">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="8b7ac-2974">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2974">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2975">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2975">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2976">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2976">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2977">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2977">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2978">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2978">Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2979">
            <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2979">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2980">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2980">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2981">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2981">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-2982">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2982">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-2983">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2983">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-2984">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2984">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2985">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2985">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2986">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusInRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2986">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-2987">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusInRange>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2987">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-2988">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2988">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-2989">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2989">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-2990">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2990">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-2991">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2991">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="8b7ac-2992">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2992">Routing strategy</span></span>|<span data-ttu-id="8b7ac-2993">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2993">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-2994">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2994">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-2995">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2995">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="8b7ac-2996">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2996">Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-2997">
            <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-2997">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-2998">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2998">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-2999">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-2999">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3000">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3000">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3001">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3001">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3002">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3002">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3003">要素上にある間にスタイラスが移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3003">Occurs when the stylus moves while over the element.</span>
          </span>
          <span data-ttu-id="8b7ac-3004">このイベントを発生させるためには、デジタイザーによって検出されている間にスタイラスが移動する必要があります。それ以外の場合には、代わりに <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3004">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3005">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3005">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3006">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3006">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3007">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3007">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3008">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3008">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3009">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3009">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3010">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3010">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="8b7ac-3011">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3011">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3012">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3012">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3013">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3013">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3014">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3014">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3015">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3015">Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3016">
            <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3016">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3017">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3017">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3018">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3018">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3019">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3019">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3020">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3020">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3021">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3021">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3022">スタイラスがデジタイザーから離れすぎているために検出されないときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3022">Occurs when the stylus is too far from the digitizer to be detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3023">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusOutOfRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3023">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3024">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusOutOfRange>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3024">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3025">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3025">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3026">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3026">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3027">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3027">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3028">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3028">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="8b7ac-3029">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3029">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3030">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3030">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3031">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3031">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3032">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3032">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3033">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3033">Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3034">
            <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3034">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3035">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3035">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3036">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3036">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3037">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3037">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3038">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3038">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3039">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3039">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3040">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3040">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3041">スタイラス ジェスチャの詳細については、次を参照してください。<xref:System.Windows.Input.SystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3041">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="8b7ac-3042">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusSystemGesture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3042">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3043">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusSystemGesture>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3043">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3044">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3044">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3045">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3045">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3046">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3046">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3047">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3047">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="8b7ac-3048">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3048">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3049">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3049">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3050">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3050">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3051">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3051">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3052">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3052">Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3053">
            <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3053">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3054">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3054">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3055">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3055">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3056">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3056">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3057">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3057">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3058">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3058">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3059">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3059">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3060">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewStylusDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3060">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3061">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewStylusDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3061">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3062">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3062">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3063">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3063">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3064">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3064">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3065">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3065">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="8b7ac-3066">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3066">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3067">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3067">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3068">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3068">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3069">バブルの対応するイベントが<xref:System.Windows.UIElement.StylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3069">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3070">オーバーライド<xref:System.Windows.UIElement.OnPreviewStylusUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3070">Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3071">
            <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3071">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3072">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3072">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3073">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3073">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3074">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3074">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3075">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3075">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3076">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3076">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3077">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3077">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3078"><xref:System.Windows.UIElement.PreviewTextInput>イベントにより、コンポーネントまたはアプリケーションをデバイスに依存しない方法で、テキスト入力をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3078">The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="8b7ac-3079">キーボードは、主要な手段の<xref:System.Windows.UIElement.PreviewTextInput>; が、音声認識、手書き認識、およびその他の入力デバイスも<xref:System.Windows.UIElement.PreviewTextInput>します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3079">The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="8b7ac-3080">キーの組み合わせのため、既定のキーボードまたは入力方式エディターから — 複数のキー イベントが 1 つだけのテキスト入力イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3080">Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="8b7ac-3081">このイベントのエイリアスを作成する、<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.PreviewTextInput>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3081">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3082">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.PreviewTextInput>イベントが、基になるに関連付けられている<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3082">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3083">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3083">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3084">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3084">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|<span data-ttu-id="8b7ac-3085">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3085">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3086">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3086">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3087">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3087">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3088">バブルの対応するイベントが<xref:System.Windows.UIElement.TextInput>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3088">The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3089">オーバーライド<xref:System.Windows.UIElement.OnPreviewTextInput%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3089">Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3090">
            <see cref="E:System.Windows.UIElement.PreviewTextInput" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3090">Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3091">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3091">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3092">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3092">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3093">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3093">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3094">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3094">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3095">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3095">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3096">指がこの要素の上にある間に、その指で画面に触れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3096">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3097">既定では、<xref:System.Windows.UIElement.PreviewTouchDown>と<xref:System.Windows.UIElement.TouchDown>指が画面に触れるし、移動するまでのイベントが発生しません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3097">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="8b7ac-3098">画面に指を押すと、キーを押すと、移動せずに保持しているとの動作を保持する<xref:System.Windows.Input.Stylus>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3098">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="8b7ac-3099">プレス アンド ホールド動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3099">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="8b7ac-3100">により、<xref:System.Windows.UIElement.PreviewTouchDown>と<xref:System.Windows.UIElement.TouchDown>、画面に触れると発生するイベントを設定、<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>添付プロパティ`false`この要素のです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3100">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3101">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3101">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3102">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3102">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="8b7ac-3103">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3103">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3104">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3104">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3105">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3105">Delegate</span></span>|<span data-ttu-id="8b7ac-3106"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3106"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3107">バブルの対応するイベントが<xref:System.Windows.UIElement.TouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3107">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3108">オーバーライド<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3108">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3109">
            <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3109">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3110">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3110">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3111">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3111">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3112">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3112">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="8b7ac-3113">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3113">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3114">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3114">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3115">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3115">Delegate</span></span>|<span data-ttu-id="8b7ac-3116"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3116"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3117">バブルの対応するイベントが<xref:System.Windows.UIElement.TouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3117">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3118">オーバーライド<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3118">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3119">
            <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3119">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3120">この要素の上に指があるときに、その指が画面から離れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3120">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3121">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3121">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3122">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3122">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="8b7ac-3123">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3123">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3124">トンネリング</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3124">Tunneling</span></span>|  
|<span data-ttu-id="8b7ac-3125">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3125">Delegate</span></span>|<span data-ttu-id="8b7ac-3126"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3126"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3127">バブルの対応するイベントが<xref:System.Windows.UIElement.TouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3127">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3128">オーバーライド<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3128">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3129">
            <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3129">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3130">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3130">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3131"><xref:System.Windows.UIElement.QueryContinueDrag>イベントにより、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3131">The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="8b7ac-3132">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.QueryContinueDrag>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3132">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3133">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.QueryContinueDrag>イベントが、基になるに関連付けられている<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3133">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3134">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3134">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3135">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3135">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|<span data-ttu-id="8b7ac-3136">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3136">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3137">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3137">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3138">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3138">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3139">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewQueryContinueDrag>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3139">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3140">オーバーライド<xref:System.Windows.UIElement.OnQueryContinueDrag%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3140">Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3141">
            <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3141">Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3142">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3142">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3143">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3143">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3144">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3144">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3145">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3145">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3146">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3146">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3147">カーソルの表示が要求されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3147">Occurs when the cursor is requested to display.</span>
          </span>
          <span data-ttu-id="8b7ac-3148">このイベントは、マウス ポインターが別の位置へ移動するたびに要素上で発生します。したがって、場合によってはカーソル オブジェクトを移動先の位置に基づいて変更する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3148">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3149">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.QueryCursor>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3149">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3150">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.QueryCursor>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3150">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3151">このイベント名によって参照されているカーソルは、必ずしも (カーソルとも呼ばれる) テキストのカーソルではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3151">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="8b7ac-3152">代わりに、このコンテキストでのカーソルは、いくつかの可能な入力に関連するデバイスまたは Windows プログラミングの概念に関連する画面上のグラフィカル表示を宣言するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3152">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="8b7ac-3153">そのオブジェクトがによって表される、 <xref:System.Windows.Input.Cursor> wpf クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3153">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="8b7ac-3154">WPF 入力システムでは、マウス ポインターの画面上の位置を表す場合は、このカーソルを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3154">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="8b7ac-3155">定義済みの値を使用することができます、<xref:System.Windows.Input.Cursors>列挙型、または画像ファイルとしてカスタム カーソルを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3155">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="8b7ac-3156">リッスンして、<xref:System.Windows.UIElement.QueryCursor>イベントは、カーソル管理の効率的な方法ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3156">Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="8b7ac-3157">各要素がで独自のカーソル動作を定義する代わりに、<xref:System.Windows.FrameworkContentElement.Cursor%2A>と<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3157">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="8b7ac-3158">のみに依存する必要があります<xref:System.Windows.UIElement.QueryCursor>かどうか WPF フレームワーク レベルの基本要素を使用していないまたはで特別な状況での要素ごとにカーソルの動作を定義するニーズを満たしていない、します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3158">You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="8b7ac-3159">応答でのカーソルの動作の実装の詳細については<xref:System.Windows.UIElement.QueryCursor>を参照してください<xref:System.Windows.Input.QueryCursorEventHandler>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3159">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3160">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3160">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3161">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3161">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|<span data-ttu-id="8b7ac-3162">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3162">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3163">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3163">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3164">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3164">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3165">対応する定義済みのトンネリング イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3165">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="8b7ac-3166">オーバーライド<xref:System.Windows.UIElement.OnQueryCursor%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3166">Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3167">
            <see cref="E:System.Windows.UIElement.QueryCursor" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3167">Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3168">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3168">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3169">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3169">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3170">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3170">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3171">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3171">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3172">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3172">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="8b7ac-3173">イベント データを格納し、発生させるイベントを識別する <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3173">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-3174">特定のルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3174">Raises a specific routed event.</span>
          </span>
          <span data-ttu-id="8b7ac-3175">発生する <see cref="T:System.Windows.RoutedEvent" /> は、指定した <see cref="T:System.Windows.RoutedEventArgs" /> インスタンス内で (そのイベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティとして) 識別されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3175">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3176">`e`ルーティング イベントのすべてのデータの共通の基本型として型指定されたパラメーターです。 ただし、ために発生するイベントに使用される最も固有のイベント データの種類として、イベント データを指定してください<xref:System.Windows.RoutedEventArgs>派生クラスには、特定のイベントが発生するとは、特定の実際のデータ プロパティが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3176">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="8b7ac-3177"><xref:System.Windows.RoutedEventArgs> イベントの状態のプロパティだけではありません。ルーティング イベントを発生させるも識別します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3177"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="8b7ac-3178">このイベント発生パターンと、ルーティングされたイベント データの両方が異なる[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベントに関連するプロパティを通常だけが含まれるイベントやデータのクラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3178">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-3179">次の例は、イベント データを作成、データをイベントの識別子を追加して、インスタンスを使用して、イベント データをカスタム ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3179">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3180">キャプチャされているすべてのタッチ デバイスをこの要素から解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3180">Releases all captured touch devices from this element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3181">この要素がマウス キャプチャを保持していた場合、キャプチャを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3181">Releases the mouse capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3182">この要素がキャプチャを保持していない場合は、このメソッドを呼び出すも効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3182">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="8b7ac-3183">値を確認してください<xref:System.Windows.UIElement.IsMouseCaptured%2A>このメソッドを呼び出す前にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3183">Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-3184">次の例は、並列の例に<xref:System.Windows.UIElement.CaptureMouse%2A>: リリース マウスのキャプチャまでマウス ボタンを処理し、マウスの移動を再度有効にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3184">The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3185">この要素がスタイラス デバイス キャプチャを保持していた場合、キャプチャを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3185">Releases the stylus device capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3186">この要素がキャプチャを保持していない場合は、このメソッドを呼び出すも効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3186">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="8b7ac-3187">値を確認してください<xref:System.Windows.UIElement.IsStylusCaptured%2A>このメソッドを呼び出す前にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3187">Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="8b7ac-3188">解放の対象となるデバイス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3188">The device to release.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-3189">指定されたタッチ デバイスをこの要素から解放することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3189">Attempts to release the specified touch device from this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-3190">タッチ デバイスが解放された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3190">
              <see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8b7ac-3191">
            <paramref name="touchDevice" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3191">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="8b7ac-3192">ハンドラーがアタッチされているルーティング イベントの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3192">The identifier of the routed event for which the handler is attached.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="8b7ac-3193">この要素のイベント ハンドラー コレクションから削除する特定のハンドラー実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3193">The specific handler implementation to remove from the event handler collection on this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-3194">指定したルーティング イベント ハンドラーをこの要素から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3194">Removes the specified routed event handler from this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3195">これを使用するための最も一般的なシナリオ[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]を実装する場合は、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]カスタム ルーティング イベントのハンドラーの削除」ロジックを実装するときに特に関連付けられている「ラッパー」イベント、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]レベル。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3195">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="8b7ac-3196">これを次の例「解説」セクションでは、このシナリオを示しています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3196">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="8b7ac-3197">このメソッドを呼び出しても何も起こりませんメソッドの呼び出しの入力パラメーターに一致する条件で登録されたハンドラーがない場合。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3197">Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="8b7ac-3198">数より多い場合に、イベント ハンドラーのストアの削除に最初のハンドラーのみ、条件に一致する 1 つのハンドラーがアタッチされます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3198">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="8b7ac-3199">この動作は整合[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]の動作、`-=`演算子。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3199">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="8b7ac-3200">どちらも`routedEvent`も`handler`あります`null`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3200">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="8b7ac-3201">いずれかの値として提供しようとしています。`null`で例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3201">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="8b7ac-3202">このメソッドは無視、`handledEventsToo`場合は、ハンドラーが最初に提供されているパラメーターについては、追加、<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>処理済みのイベントの処理を有効に署名します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3202">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="8b7ac-3203">ハンドラーのいずれかの型が削除されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3203">Either type of handler is removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-3204">次の例では<xref:System.Windows.UIElement.RemoveHandler%2A>イベント ラッパー定義の一部として。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3204">The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.</span></span>  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3205">この要素の最終的な描画サイズを取得します (または、設定します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3205">Gets (or sets) the final render size of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3206">この要素の描画のサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3206">The rendered size for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b7ac-3207">このプロパティは、のいずれかを設定しないでください[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]またはコードでは、WPF フレームワーク レベルのレイアウト システムを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3207">Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system.</span></span> <span data-ttu-id="8b7ac-3208">ほぼすべての一般的なアプリケーション シナリオでは、このレイアウト システムを使用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3208">Nearly all typical application scenarios will use this layout system.</span></span> <span data-ttu-id="8b7ac-3209">レイアウト システムはサイズ設定に従いません、<xref:System.Windows.UIElement.RenderSize%2A>プロパティを直接です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3209">The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly.</span></span> <span data-ttu-id="8b7ac-3210"><xref:System.Windows.UIElement.RenderSize%2A>プロパティが特定の WPF コア レベルのサポートなど、一般的なレイアウトのプロトコルを意図的に回避するケースをブリッジを有効にする場合にのみ書き込み可能で宣言されている、<xref:System.Windows.Documents.Adorner>クラスです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3210">The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.</span></span>  
  
 <span data-ttu-id="8b7ac-3211">このプロパティは、該当する表示サイズをレイアウト システム内のオーバーライドなどの確認の使用することができます<xref:System.Windows.UIElement.OnRender%2A>または<xref:System.Windows.UIElement.GetLayoutClip%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3211">This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.</span></span>  
  
 <span data-ttu-id="8b7ac-3212">一般的なシナリオの処理、<xref:System.Windows.FrameworkElement.SizeChanged>クラス ハンドラーでイベントをオーバーライドまたは<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3212">A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.</span></span>  
  
## Examples  
 <span data-ttu-id="8b7ac-3213">次の例は、カスタムの装飾を使用する方法を示しています、<xref:System.Windows.UIElement.RenderSize%2A>値を作成しの一部として、装飾を定義する四角形の画像のサイズを変更するためにその<xref:System.Windows.UIElement.OnRender%2A>実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3213">The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A> implementation.</span></span>  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3214">この要素の描画位置に影響する変換情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3214">Gets or sets transform information that affects the rendering position of this element.</span>
          </span>
          <span data-ttu-id="8b7ac-3215">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3215">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3216">必要な描画変換の詳細を記述します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3216">Describes the specifics of the desired render transform.</span>
          </span>
          <span data-ttu-id="8b7ac-3217">既定値は、<see cref="P:System.Windows.Media.Transform.Identity" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3217">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3218">描画変換レイアウトのサイズを再生成またはしませんサイズ情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3218">A render transform does not regenerate layout size or render size information.</span></span> <span data-ttu-id="8b7ac-3219">レンダリングの変換は通常アニメーションや要素に一時的な効果を適用するためのものです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3219">Render transforms are typically intended for animating or applying a temporary effect to an element.</span></span> <span data-ttu-id="8b7ac-3220">たとえば、要素が拡大表示時マウス上、またはの部分に目を描画する負荷に重点を置いて、[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3220">For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-3221">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3221">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3222">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3222">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|<span data-ttu-id="8b7ac-3223">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3223">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-3224">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3224">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3225">
            <see cref="P:System.Windows.UIElement.RenderTransform" /> によって宣言された任意の描画変換の、要素の境界に対する中心点を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3225">Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.</span>
          </span>
          <span data-ttu-id="8b7ac-3226">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3226">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3227">描画変換を宣言する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3227">The value that declares the render transform.</span>
          </span>
          <span data-ttu-id="8b7ac-3228">既定値は、座標 (0,0) の <see cref="T:System.Windows.Point" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3228">The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3229"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> ある程度の非標準の使用、<xref:System.Windows.Point>構造体の値を<xref:System.Windows.Point>座標システムで絶対位置を表していません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3229"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system.</span></span> <span data-ttu-id="8b7ac-3230">代わりに、0 ~ 1 の間の値は、それぞれの x、y 軸の現在の要素の範囲の要素として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3230">Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</span></span> <span data-ttu-id="8b7ac-3231">たとえば、(0.5,0.5) は、要素上で中央揃えにする描画変換が発生 (1, 1) または配置描画変換下部にある要素の右上隅です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3231">For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</span></span> <span data-ttu-id="8b7ac-3232"><xref:System.Double.NaN> 許容される値ではありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3232"><xref:System.Double.NaN> is not an accepted value.</span></span>  
  
 <span data-ttu-id="8b7ac-3233">0 と 1 以外の値もが受け入れられ、その他の型にはまらない変換効果になります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3233">Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</span></span> <span data-ttu-id="8b7ac-3234">たとえば、設定した場合<xref:System.Windows.UIElement.RenderTransformOrigin%2A>(5,5) を適用し、<xref:System.Windows.Media.RotateTransform>回転のポイントは、要素自体の境界の外側にもなります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3234">For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself.</span></span> <span data-ttu-id="8b7ac-3235">変換には、右下を超える発信される大規模な円で囲んだ中心、要素が回転されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3235">The transform will spin your element around in a big circle that originates beyond bottom right.</span></span> <span data-ttu-id="8b7ac-3236">原点可能性がありますにどこかにその親要素内してでした可能性のある可能性のあるフレームまたはビューからです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3236">The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</span></span> <span data-ttu-id="8b7ac-3237">負の値のポイントの値は似ていますが、これらは左境界を超えます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3237">Negative point values are similar, these will go beyond the top left bounds.</span></span>  
  
 <span data-ttu-id="8b7ac-3238">レンダリング トランス フォームのレイアウトに影響しない通常を使用して、アニメーションや要素に一時的な効果を適用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3238">Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</span></span>  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8b7ac-3239">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3239">XAML Attribute Usage</span></span>  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8b7ac-3240">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3240">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8b7ac-3241">XAML 値</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3241">XAML Values</span></span>  
 <span data-ttu-id="8b7ac-3242">*xOrigin*</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3242">*xOrigin*</span></span>  
 <span data-ttu-id="8b7ac-3243">左右の余白の係数。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3243">The horizontal origin factor.</span></span> <span data-ttu-id="8b7ac-3244">これは通常、0 ~ 1 の値として指定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3244">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="8b7ac-3245">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3245">See Remarks.</span></span>  
  
 <span data-ttu-id="8b7ac-3246">*yOrigin*</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3246">*yOrigin*</span></span>  
 <span data-ttu-id="8b7ac-3247">垂直方向の原点の係数。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3247">The vertical origin factor.</span></span> <span data-ttu-id="8b7ac-3248">これは通常、0 ~ 1 の値として指定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3248">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="8b7ac-3249">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3249">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-3250">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3250">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3251">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3251">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|<span data-ttu-id="8b7ac-3252">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3252">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-3253">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3253">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-3254">次の例は、コード内の要素を構築、適用、 <xref:System.Windows.UIElement.RenderTransformOrigin%2A>、し、適用、<xref:System.Windows.UIElement.RenderTransform%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3254">The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.</span></span>  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3255">
            <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3255">Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3256">
            <see cref="P:System.Windows.UIElement.RenderTransform" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3256">Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3257">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement.CommandBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3257">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-3258">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement.CommandBindings" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3258">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3259">これは、戻り値は`true`場合<xref:System.Windows.UIElement.CommandBindings%2A>ローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3259">This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="8b7ac-3260">これは、`ShouldSerialize`ためメソッドが用意されて、<xref:System.Windows.UIElement.CommandBindings%2A>プロパティには、単純な既定値にありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3260">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="8b7ac-3261">このメソッドは、既定値から、プロパティが変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3261">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="8b7ac-3262">デザイナーを開発またはコントロールを組み込む独自の開発する場合に通常、このメソッドが呼び出す、<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3262">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-3263">詳細については、次を参照してください。 [ShouldSerialize メソッドとメソッドのリセットを既定値を定義する](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3263">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3264">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement.InputBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3264">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-3265">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement.InputBindings" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3265">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3266">これは、戻り値は`true`場合<xref:System.Windows.UIElement.InputBindings%2A>ローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3266">This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="8b7ac-3267">これは、`ShouldSerialize`ためメソッドが用意されて、<xref:System.Windows.UIElement.InputBindings%2A>プロパティには、単純な既定値にありません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3267">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="8b7ac-3268">このメソッドは、既定値から、プロパティが変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3268">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="8b7ac-3269">デザイナーを開発またはコントロールを組み込む独自の開発する場合に通常、このメソッドが呼び出す、<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3269">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="8b7ac-3270">詳細については、次を参照してください。 [ShouldSerialize メソッドとメソッドのリセットを既定値を定義する](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3270">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3271">この要素のレンダリングがレンダリング中にデバイスに固有のピクセルの設定を使用するかどうかを決定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3271">Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</span>
          </span>
          <span data-ttu-id="8b7ac-3272">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3272">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3273">デバイスのピクセルに従って要素を描画する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3273">
              <see langword="true" /> if the element should render in accordance to device pixels; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="8b7ac-3274">
            <see cref="T:System.Windows.UIElement" /> で宣言されている既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3274">The default as declared on <see cref="T:System.Windows.UIElement" /> is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3275">このプロパティを設定することができます`true`ピクセルを有効にする、ルート要素にスナップ UI 全体にわたって表示します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3275">You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI.</span></span> <span data-ttu-id="8b7ac-3276">デバイスで 96 より大きい[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]、ピクセル スナップ レンダリングには、単一の実線の近くのアンチエイリアシング visual 成果物が最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3276">For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</span></span>  
  
 <span data-ttu-id="8b7ac-3277">によって継承と<xref:System.Windows.FrameworkElement>可能性のあるすべての派生クラス、または<xref:System.Windows.FrameworkElement>を設定するには、この依存関係プロパティのメタデータを上書き、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>メタデータ プロパティを`true`です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3277">When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`.</span></span> <span data-ttu-id="8b7ac-3278">サブツリーの最も外側の要素だけを指定する必要があることは、この場合実現<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>として`true`とそのサブツリーのすべての子要素は、報告<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>として`true`とが、<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>視覚効果を適用します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3278">What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.</span></span>  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-3279">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3279">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3280">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3280">Identifier field</span></span>|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|<span data-ttu-id="8b7ac-3281">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3281">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-3282">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3282">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3283">
            <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3283">Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3284">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3284">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3285">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusButtonDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3285">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3286">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusButtonDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3286">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3287">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3287">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3288">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3288">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3289">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3289">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3290">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3290">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|<span data-ttu-id="8b7ac-3291">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3291">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3292">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3292">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3293">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3293">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3294">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusButtonDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3294">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3295">オーバーライド<xref:System.Windows.UIElement.OnStylusButtonDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3295">Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3296">
            <see cref="E:System.Windows.UIElement.StylusButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3296">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3297">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3297">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3298">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3298">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3299">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3299">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3300">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3300">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3301">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3301">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3302">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3302">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3303">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusButtonUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3303">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3304">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusButtonUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3304">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3305">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3305">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3306">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3306">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3307">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3307">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3308">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3308">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|<span data-ttu-id="8b7ac-3309">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3309">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3310">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3310">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3311">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3311">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3312">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusButtonUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3312">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3313">オーバーライド<xref:System.Windows.UIElement.OnStylusButtonUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3313">Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3314">
            <see cref="E:System.Windows.UIElement.StylusButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3314">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3315">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3316">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3317">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3318">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3319">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3320">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3320">Occurs when the stylus touches the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3321">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3321">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3322">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusDown>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3322">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3323">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3323">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3324">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3324">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3325">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3326">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3326">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusDownEvent>|  
|<span data-ttu-id="8b7ac-3327">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3327">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3328">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3328">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3329">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3329">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3330">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3330">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3331">オーバーライド<xref:System.Windows.UIElement.OnStylusDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3331">Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3332">
            <see cref="E:System.Windows.UIElement.StylusDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3332">Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3333">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3333">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3334">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3334">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3335">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3335">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3336">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3336">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3337">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3337">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3338">スタイラスがこの要素の境界内に入ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3338">Occurs when the stylus enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3339"><xref:System.Windows.UIElement.StylusEnter> 直接のイベントのルーティング方法を処理する使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3339"><xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="8b7ac-3340">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3340">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="8b7ac-3341">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3341">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="8b7ac-3342"><xref:System.Windows.UIElement.StylusEnter>スタイラスがこのイベントをさらに、要素の境界に入った時点を追跡するレポート文字どおり、<xref:System.Windows.UIElement.IsStylusOver%2A>からプロパティ値が変更された`false`に`true`この要素上です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3342">Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="8b7ac-3343">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusEnter>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3343">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3344">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusEnter>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3344">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3345">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3345">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3346">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3346">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3347">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3347">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3348">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3348">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|<span data-ttu-id="8b7ac-3349">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3349">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3350">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3350">Direct</span></span>|  
|<span data-ttu-id="8b7ac-3351">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3351">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3352">オーバーライド<xref:System.Windows.UIElement.OnStylusEnter%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3352">Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3353">
            <see cref="E:System.Windows.UIElement.StylusEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3353">Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3354">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3354">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3355">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3355">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3356">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3356">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3357">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3357">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3358">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3358">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3359">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3359">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3360">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusInAirMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3360">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3361">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusInAirMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3361">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3362">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3362">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3363">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3363">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3364">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3364">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3365">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3365">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="8b7ac-3366">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3366">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3367">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3367">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3368">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3368">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3369">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusInAirMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3369">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3370">オーバーライド<xref:System.Windows.UIElement.OnStylusInAirMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3370">Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3371">
            <see cref="E:System.Windows.UIElement.StylusInAirMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3371">Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3372">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3372">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3373">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3373">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3374">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3374">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3375">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3375">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3376">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3376">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3377">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3377">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3378">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusInRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3378">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3379">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusInRange>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3379">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3380">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3380">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3381">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3381">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3382">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3382">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3383">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3383">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|<span data-ttu-id="8b7ac-3384">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3384">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3385">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3385">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3386">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3386">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3387">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusInRange>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3387">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3388">オーバーライド<xref:System.Windows.UIElement.OnStylusInRange%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3388">Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3389">
            <see cref="E:System.Windows.UIElement.StylusInRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3389">Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3390">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3390">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3391">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3391">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3392">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3392">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3393">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3393">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3394">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3394">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3395">スタイラスが要素の境界内から出たときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3395">Occurs when the stylus leaves the bounds of the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3396"><xref:System.Windows.UIElement.StylusLeave> 直接のイベントのルーティング方法を処理する使用されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3396"><xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="8b7ac-3397">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3397">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="8b7ac-3398">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3398">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="8b7ac-3399"><xref:System.Windows.UIElement.StylusLeave>スタイラス境界から出た要素、このイベントの詳細時点を追跡するレポート文字どおり、<xref:System.Windows.UIElement.IsStylusOver%2A>からプロパティ値が変更された`true`に`false`この要素上です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3399">Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="8b7ac-3400">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusLeave>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3400">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3401">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusLeave>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3401">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3402">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3402">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3403">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3403">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3404">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3404">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3405">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3405">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|<span data-ttu-id="8b7ac-3406">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3406">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3407">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3407">Direct</span></span>|  
|<span data-ttu-id="8b7ac-3408">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3408">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3409">オーバーライド<xref:System.Windows.UIElement.OnStylusLeave%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3409">Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3410">
            <see cref="E:System.Windows.UIElement.StylusLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3410">Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3411">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3411">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3412">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3412">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3413">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3413">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3414">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3414">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3415">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3415">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3416">スタイラスがこの要素上を移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3416">Occurs when the stylus moves over this element.</span>
          </span>
          <span data-ttu-id="8b7ac-3417">このイベントを発生させるには、デジタイザー上でスタイラスを移動する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3417">The stylus must move while on the digitizer to raise this event.</span>
          </span>
          <span data-ttu-id="8b7ac-3418">それ以外の場合は、代わりに <see cref="E:System.Windows.UIElement.StylusInAirMove" /> が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3418">Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3419">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3419">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3420">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusMove>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3420">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3421">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3421">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3422">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3422">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3423">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3423">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3424">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3424">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|<span data-ttu-id="8b7ac-3425">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3425">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3426">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3426">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3427">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3427">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3428">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3428">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3429">オーバーライド<xref:System.Windows.UIElement.OnStylusMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3429">Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3430">
            <see cref="E:System.Windows.UIElement.StylusMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3430">Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3431">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3431">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3432">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3432">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3433">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3433">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3434">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3434">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3435">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3435">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3436">この要素上でスタイラスが検出可能になるにはデジタイザーから離れすぎているときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3436">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3437">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusOutOfRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3437">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3438">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusOutOfRange>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3438">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3439">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3439">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3440">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3440">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3441">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3441">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3442">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3442">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="8b7ac-3443">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3443">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3444">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3444">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3445">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3445">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3446">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusOutOfRange>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3446">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3447">オーバーライド<xref:System.Windows.UIElement.OnStylusOutOfRange%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3447">Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3448">
            <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3448">Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3449">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3449">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3450">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3450">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3451">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3451">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3452">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3452">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3453">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3453">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3454">この要素に関連付けられているすべてのスタイラス プラグイン (カスタマイズ) オブジェクトのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3454">Gets a collection of all stylus plug-in (customization) objects associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3455">特殊なコレクションである、スタイラス プラグインのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3455">The collection of stylus plug-ins, as a specialized collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3456">このコレクションに追加するコントロールの例は<xref:System.Windows.Controls.InkCanvas>します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3456">An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>.</span></span> <span data-ttu-id="8b7ac-3457"><xref:System.Windows.Controls.InkCanvas> 追加、<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>これにより、コレクション項目として、<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>スタイラス入力と対話し、スタイラス イベント駆動型への応答で一意のレンダリングを生成します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3457"><xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.</span></span>  
  
 <span data-ttu-id="8b7ac-3458">カスタム プラグインを作成する方法については、受信し、スタイラス入力の解釈を参照してください。[スタイラスからの入力をインターセプトし、](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3458">For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-3459">次の例を作成、<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>をインスタンス化し、それを追加、<xref:System.Windows.UIElement.StylusPlugIns%2A>コントロールを処理するカスタムのインクのコレクション。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3459">The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.</span></span>  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3460">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3460">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3461">スタイラス ジェスチャの詳細については、次を参照してください。<xref:System.Windows.Input.SystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3461">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="8b7ac-3462">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusSystemGesture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3462">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3463">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusSystemGesture>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3463">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3464">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3464">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3465">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3465">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3466">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3467">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3467">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="8b7ac-3468">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3468">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3469">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3469">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3470">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3470">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3471">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusSystemGesture>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3472">オーバーライド<xref:System.Windows.UIElement.OnStylusSystemGesture%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3472">Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3473">
            <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3473">Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3474">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3475">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3476">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3477">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3478">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3479">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3479">Occurs when the user raises the stylus off the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3480">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.StylusUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3480">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3481">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.StylusUp>イベントが、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3481">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="8b7ac-3482">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3482">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="8b7ac-3483">詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3483">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3484">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3484">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3485">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3485">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusUpEvent>|  
|<span data-ttu-id="8b7ac-3486">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3486">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3487">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3487">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3488">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3488">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3489">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewStylusUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3489">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3490">オーバーライド<xref:System.Windows.UIElement.OnStylusUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3490">Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3491">
            <see cref="E:System.Windows.UIElement.StylusUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3491">Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3492">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3492">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3493">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3493">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3494">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3494">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3495">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3495">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3496">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3496">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3497">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3497">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b7ac-3498">このイベントは、複合コントロールの内部実装によって処理済みとして既にマーク可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3498">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="8b7ac-3499">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3499">See Remark below.</span></span>  
  
 <span data-ttu-id="8b7ac-3500"><xref:System.Windows.UIElement.TextInput>イベントは、複合コントロールの内部実装によって処理済みとして既にマーク可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3500">The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="8b7ac-3501">たとえば、<xref:System.Windows.Controls.TextBox>複合コントロールは、ここで、<xref:System.Windows.UIElement.TextInput>イベントが処理済みとして以外の場合は、合成内に既にマークされています。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3501">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="8b7ac-3502">コントロールは、コントロールがいくつかの種類のコントロールに特別な意味を持つものとして、方向キーなどの入力を解釈する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3502">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="8b7ac-3503">使用する場合<xref:System.Windows.UIElement.PreviewTextInput>テキスト入力用のハンドラーをアタッチするイベント、としてより良い結果を受け取ることがあります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3503">If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="8b7ac-3504">この手法は、コントロールの複合ハンドル済みとしては、このイベントをマークが既にあり、ハンドラーがイベント ルート上でイベントを受信できないように、ほとんどの場合を回避できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3504">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="8b7ac-3505"><xref:System.Windows.UIElement.TextInput>イベントにより、コンポーネントまたはアプリケーションをデバイスに依存しない方法で、テキスト入力をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3505">The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="8b7ac-3506">キーボードは、主要な手段の<xref:System.Windows.UIElement.TextInput>、音声認識、手書き認識、およびその他の入力デバイス上げることもできますが、<xref:System.Windows.UIElement.TextInput>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3506">The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
 <span data-ttu-id="8b7ac-3507">キーの組み合わせが原因: 既定のキーボードまたは入力方式エディターから — 複数のキー イベントが 1 つのテキスト入力イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3507">Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="8b7ac-3508">このイベントのエイリアスを作成する、<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>添付イベントが、このクラスに対してように<xref:System.Windows.UIElement.TextInput>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement>基本要素として継承します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3508">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="8b7ac-3509">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement.TextInput>イベントが、基になるに関連付けられている<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3509">Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3510">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3510">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3511">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3511">Identifier field</span></span>|<xref:System.Windows.UIElement.TextInputEvent>|  
|<span data-ttu-id="8b7ac-3512">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3512">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3513">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3513">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3514">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3514">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="8b7ac-3515">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewTextInput>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3515">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3516">オーバーライド<xref:System.Windows.UIElement.OnTextInput%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3516">Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3517">
            <see cref="E:System.Windows.UIElement.TextInput" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3517">Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3518">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3518">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="8b7ac-3519">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3519">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="8b7ac-3520">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3520">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="8b7ac-3521">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3521">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="8b7ac-3522">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3522">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3523">指がこの要素の上にある間に、その指で画面に触れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3523">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3524">既定では、<xref:System.Windows.UIElement.PreviewTouchDown>と<xref:System.Windows.UIElement.TouchDown>指が画面に触れるし、移動するまでのイベントが発生しません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3524">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="8b7ac-3525">画面に指を押すと、キーを押すと、移動せずに保持しているとの動作を保持する<xref:System.Windows.Input.Stylus>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3525">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="8b7ac-3526">プレス アンド ホールド動作は、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3526">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="8b7ac-3527">により、<xref:System.Windows.UIElement.PreviewTouchDown>と<xref:System.Windows.UIElement.TouchDown>、画面に触れると発生するイベントを設定、<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>添付プロパティ`false`この要素のです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3527">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3528">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3528">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3529">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3529">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchDownEvent>|  
|<span data-ttu-id="8b7ac-3530">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3530">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3531">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3531">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3532">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3532">Delegate</span></span>|<span data-ttu-id="8b7ac-3533"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3533"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3534">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewTouchDown>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3534">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3535">オーバーライド<xref:System.Windows.UIElement.OnTouchDown%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3535">Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3536">
            <see cref="E:System.Windows.UIElement.TouchDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3536">Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3537">タッチがこの要素の境界の外部から内部に移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3537">Occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3538">このイベントはタッチ デバイスがこの要素にキャプチャされるかどうか常に発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3538">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3539">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3539">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3540">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3540">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|<span data-ttu-id="8b7ac-3541">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3541">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3542">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3542">Direct</span></span>|  
|<span data-ttu-id="8b7ac-3543">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3543">Delegate</span></span>|<span data-ttu-id="8b7ac-3544"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3544"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3545">オーバーライド<xref:System.Windows.UIElement.OnTouchEnter%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3545">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3546">
            <see cref="E:System.Windows.UIElement.TouchEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3546">Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3547">この要素にキャプチャされているすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3547">Gets all touch devices that are captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3548">この要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3548">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3549">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3549">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3550">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3550">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3551">この要素上にあるすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3551">Gets all touch devices that are over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3552">この要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3552">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3553">この要素またはそのビジュアル ツリー内のいずれかの子要素上にあるすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3553">Gets all touch devices that are over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3554">この要素またはそのビジュアル ツリー内のいずれかの子要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3554">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3555">タッチがこの要素の境界の内部から外部に移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3555">Occurs when a touch moves from inside to outside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3556">このイベントはタッチ デバイスがこの要素にキャプチャされるかどうか常に発生します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3556">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3557">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3557">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3558">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3558">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|<span data-ttu-id="8b7ac-3559">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3559">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3560">直接</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3560">Direct</span></span>|  
|<span data-ttu-id="8b7ac-3561">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3561">Delegate</span></span>|<span data-ttu-id="8b7ac-3562"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3562"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3563">オーバーライド<xref:System.Windows.UIElement.OnTouchLeave%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3563">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3564">
            <see cref="E:System.Windows.UIElement.TouchLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3564">Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3565">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3565">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3566">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3566">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3567">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3567">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|<span data-ttu-id="8b7ac-3568">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3568">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3569">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3569">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3570">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3570">Delegate</span></span>|<span data-ttu-id="8b7ac-3571"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3571"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3572">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewTouchMove>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3572">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3573">オーバーライド<xref:System.Windows.UIElement.OnTouchMove%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3573">Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3574">
            <see cref="E:System.Windows.UIElement.TouchMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3574">Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3575">この要素の上に指があるときに、その指が画面から離れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3575">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8b7ac-3576">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3576">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3577">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3577">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchUpEvent>|  
|<span data-ttu-id="8b7ac-3578">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3578">Routing strategy</span></span>|<span data-ttu-id="8b7ac-3579">バブル</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3579">Bubbling</span></span>|  
|<span data-ttu-id="8b7ac-3580">Delegate</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3580">Delegate</span></span>|<span data-ttu-id="8b7ac-3581"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3581"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="8b7ac-3582">対応するトンネリング イベントが<xref:System.Windows.UIElement.PreviewTouchUp>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3582">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="8b7ac-3583">オーバーライド<xref:System.Windows.UIElement.OnTouchUp%2A>を派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3583">Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3584">
            <see cref="E:System.Windows.UIElement.TouchUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3584">Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="8b7ac-3585">この要素に相対的なポイント値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3585">The point value, as relative to this element.</span>
          </span>
        </param>
        <param name="relativeTo">
          <span data-ttu-id="8b7ac-3586">指定したポイントに変換する要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3586">The element to translate the given point into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8b7ac-3587">この要素に相対的なポイントを、指定した要素に対する相対座標に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3587">Translates a point relative to this element to coordinates that are relative to the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8b7ac-3588">元の要素ではなく変換先の要素に相対的なポイント値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3588">A point value, now relative to the target element rather than this source element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3589">渡す`null`の`relativeTo`を許可したり、この要素が属する論理ツリーのルート要素に対する相対座標がであることを示します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3589">Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</span></span>  
  
 <span data-ttu-id="8b7ac-3590">このメソッドは、変換に使用ヒット テスト ポイント値。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3590">This method is used for translating hit test point values.</span></span> <span data-ttu-id="8b7ac-3591">コントロールを作成して、下位レベルの入力を処理する必要がある場合、このメソッドを呼び出すと、主に関連します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3591">Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</span></span> <span data-ttu-id="8b7ac-3592">既存のコントロールを使用している場合、通常と見なすことできます完成したコントロールが正しく変換済みのヒット テストの結果を報告することです。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3592">If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3593">この要素の一意の識別子 (ローカライズ用) を設定または取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3593">Gets or sets the unique identifier (for localization) for this element.</span>
          </span>
          <span data-ttu-id="8b7ac-3594">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3594">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3595">この要素の一意識別子である文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3595">A string that is the unique identifier for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3596">取得するデザイナーで使用される、`x:Uid`値 (を参照してください[WPF のグローバリゼーションおよびローカリゼーションの概要](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)詳細については)。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3596">Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-3597">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3597">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3598">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3598">Identifier field</span></span>|<xref:System.Windows.UIElement.UidProperty>|  
|<span data-ttu-id="8b7ac-3599">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3599">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-3600">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3600">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3601">
            <see cref="P:System.Windows.UIElement.Uid" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3601">Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3602">この要素のすべての子ビジュアル要素のレイアウトが正常に更新されるようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3602">Ensures that all visual child elements of this element are properly updated for layout.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3603">要素が、このメソッドを呼び出す場合<xref:System.Windows.UIElement.IsMeasureValid%2A>`false`または<xref:System.Windows.UIElement.IsArrangeValid%2A>`false`特定の要素を呼び出す<xref:System.Windows.UIElement.MeasureCore%2A>と<xref:System.Windows.UIElement.ArrangeCore%2A>メソッドで、強制的にレイアウトを更新して、すべての計算されたサイズが検証されます。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3603">When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.</span></span>  
  
 <span data-ttu-id="8b7ac-3604">このメソッドを呼び出しても何も起こりませんレイアウトは変更されない場合、またはレイアウトの配置も測定の状態が無効です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3604">Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</span></span> <span data-ttu-id="8b7ac-3605">ただし、レイアウトがいずれかの点では有効でない場合、<xref:System.Windows.UIElement.UpdateLayout%2A>呼び出しが全体のレイアウトを再実行します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3605">However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout.</span></span> <span data-ttu-id="8b7ac-3606">そのため、呼び出し元を避ける必要があります<xref:System.Windows.UIElement.UpdateLayout%2A>要素ツリーのそれぞれの増分とマイナーの変更後にします。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3606">Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree.</span></span> <span data-ttu-id="8b7ac-3607">ルートに対する変更を延期して、すべての子要素が有効になるまで、重み付け手法を使用して、パフォーマンスや通貨のバランスを取るアルゴリズムを使用して、遅延方式で、レイアウト システムは要素のレイアウトを実行します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3607">The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</span></span> <span data-ttu-id="8b7ac-3608">のみを呼び出す必要があります<xref:System.Windows.UIElement.UpdateLayout%2A>かどうかどうしても必要な更新のサイズや位置、および制御し、影響を与えますレイアウト プロパティに対するすべての変更が完了した後にのみことを確認します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3608">You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3609">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] でのこの要素の可視性を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3609">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span>
          </span>
          <span data-ttu-id="8b7ac-3610">これは依存関係プロパティです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3610">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8b7ac-3611">列挙体の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3611">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="8b7ac-3612">既定値は <see cref="F:System.Windows.Visibility.Visible" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3612">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b7ac-3613">このプロパティの設定の値に影響を与える<xref:System.Windows.UIElement.IsVisible%2A>が発生する可能性がさらに、<xref:System.Windows.UIElement.IsVisibleChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3613">Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event.</span></span> <span data-ttu-id="8b7ac-3614">ただし、<xref:System.Windows.UIElement.IsVisible%2A>がその他の要因に影響を与える、それを含む親の可視性の設定のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3614">However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="8b7ac-3615">要素を<xref:System.Windows.UIElement.Visibility%2A>は<xref:System.Windows.Visibility.Visible>入力のイベント (またはコマンド) に参加していない、レイアウトの測定または整列パスには影響しません、タブ シーケンス、およびヒット テストで報告されません。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3615">Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</span></span>  
  
 <span data-ttu-id="8b7ac-3616">継承<xref:System.Windows.Window>またはその派生クラスでは、<xref:System.Windows.Window>にするには、このプロパティの既定値を再定義<xref:System.Windows.Visibility.Collapsed>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3616">When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="8b7ac-3617">これは、レイアウトの測定パスを最初に作成されたで実行されていないの効果<xref:System.Windows.Window>、および<xref:System.Windows.UIElement.RenderSize%2A>(0, 0) を返します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3617">This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0).</span></span> <span data-ttu-id="8b7ac-3618">詳細については、「<xref:System.Windows.Window>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3618">For details, see <xref:System.Windows.Window>.</span></span> <span data-ttu-id="8b7ac-3619"><xref:System.Windows.Controls.Primitives.Popup> また、既定値を再定義<xref:System.Windows.Visibility.Collapsed>の結果と同様の動作と<xref:System.Windows.Controls.Primitives.Popup>とその派生クラス。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3619"><xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="8b7ac-3620">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3620">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8b7ac-3621">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3621">Identifier field</span></span>|<xref:System.Windows.UIElement.VisibilityProperty>|  
|<span data-ttu-id="8b7ac-3622">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3622">Metadata properties set to `true`</span></span>|<span data-ttu-id="8b7ac-3623">なし</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3623">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8b7ac-3624">次の例では、ユーザー インターフェイスで相互に排他的なペアが意図されている 2 つの異なる名前付きのボタンを参照するハンドラーを実装します。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3624">The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</span></span> <span data-ttu-id="8b7ac-3625">ボタンに関連付けられた実際のプログラム ロジックを実行する前に、ボタン自体に設定されて<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>に設定されているペア内の他のボタンと<xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8b7ac-3625">Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, and the other button in the pair is set to <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8b7ac-3626">
            <see cref="P:System.Windows.UIElement.Visibility" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8b7ac-3626">Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>