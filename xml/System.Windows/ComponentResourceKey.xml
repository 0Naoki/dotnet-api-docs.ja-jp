<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ComponentResourceKey.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54ab025443f3717a6f64e96df27f296ecc9101058.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ab025443f3717a6f64e96df27f296ecc9101058</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
          <target state="translated">外部アセンブリ内のクラス名、および追加識別子に基づいてリソース キーを定義または参照します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>についてを参照してください<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
          <target state="translated">このクラスは、アセンブリと識別子の型に基づいたキーを作成するために便利ですが、オブジェクトの種類を実装します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>Because you define or reference the type, you do not need to request a specific <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, and more than one set of resources can exist in the assembly, each differentiated by the type of their <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">定義または型を参照しているため、特定の要求する必要はありません<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>、リソースの 1 つ以上のセットがそれぞれの型によって差別化されたアセンブリであり、<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>There are two ways to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">2 つの方法を定義する、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, constructed with a <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> that exists in the external resource assembly, and a <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>.</source>
          <target state="translated">返す、コントロール クラス コードに静的なプロパティを定義するには、簡単にアクセスできるキーにする場合は、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>で構築された、<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>外部リソース アセンブリに存在して、<ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
          <target state="translated">アセンブリでは、カスタムの元の外部リソース アセンブリをスワップしてコントロールの代替の既定のスタイルを定義するため、キーを使用できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
          <target state="translated">大きなコントロール スタイルまたはテンプレートのカスタマイズのエントリ ポイントを公開する内で名前付きリソースの一部を定義することもできます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
          <target state="translated">これは、コントロールのテーマのリソース ディクショナリを定義している場合に特に便利です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
          <target state="translated">使用することも、 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>キーの厳密でないインスタンスを作成するには、直接冗語構文にします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
          <target state="translated">これは、カスタマイズに見つけにくい、他のアセンブリのプライベート リソースを宣言する場合に便利です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor is not generally used, because a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> value and <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value are required for proper initialization.</source>
          <target state="translated">既定のコンス トラクターを一般的に使用しないため、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>値および<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>値が必要なの適切な初期化します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in named parameter form.</source>
          <target state="translated">サポートするには、主に既定のコンス トラクターが存在する<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>名前付きパラメーターの形式で XAML を使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The type that defines the resource key.</source>
          <target state="translated">リソース キーを定義する型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>A unique identifier to differentiate this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> from others associated with the <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> type.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> を <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> 型に関連付けられた他のキーと区別する一意の識別子。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Initializes a new instance of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> , specifying the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> that defines the key, and an object to use as an additional resource identifier.</source>
          <target state="translated">キーを定義する <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> と、追加のリソース識別子として使用するオブジェクトを指定して、<ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> の新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:</source>
          <target state="translated">このコンス トラクターは、最初の中で最も重要なシナリオで、2 つのシナリオに対して存在します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports creating a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a public static field on a custom control class.</source>
          <target state="translated">作成をサポートしている、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>し、カスタム コントロール クラスにパブリックな静的フィールドとして公開されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
          <target state="translated">これが簡略化から、テンプレートで定義されているリソースへのアクセス制御の<ph id="ph1">`{x:Static}`</ph>テンプレート プロパティの値の使用法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
          <target state="translated">サポート<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>コンポーネント リソースを参照するサード パーティの使用可能な 1 つの方法は、位置指定パラメーター形式で XAML を使用します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a static key of a control class to provide a style customization entry point.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>スタイルのカスタマイズのエントリ ポイントを提供する、コントロール クラスの静的なキーとして、公開されています。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
          <target state="translated">このキーに関連付けられている値を検索するアセンブリのディクショナリを示すアセンブリ オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>The retrieved assembly, as a reflection class.</source>
          <target state="translated">リフレクション クラスとして取得されたアセンブリ。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Object to compare with the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> と比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Determines whether the provided object is equal to the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">指定されたオブジェクトが現在の <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> と等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the objects are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">オブジェクトが等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</source>
          <target state="translated">2 つのキーは、同じ値をすべてイミディ エイト設定可能なプロパティがある場合、等しい (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>Returns a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> のハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>A signed 32-bit integer value.</source>
          <target state="translated">符号付き 32 ビット整数値。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
          <target state="translated">このキーをこの型に関連付けられている他のキーと区別する、一意の識別子を取得または設定します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>A unique identifier.</source>
          <target state="translated">一意の識別子。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically this is a string.</source>
          <target state="translated">通常、これは文字列です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>についてを参照してください<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically, the string used for a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
          <target state="translated">使用する文字列、通常、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>に準拠している値、 <bpt id="p1">[</bpt>XamlName の文法<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> to differentiate this key from others associated with this type.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>この型に関連付けられている他のユーザーからこのキーを区別するためにします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>Gets the string representation of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> の文字列表現を取得します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>The string representation.</source>
          <target state="translated">文字列表現。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that defines the resource key.</source>
          <target state="translated">リソース キーを定義する <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The type that defines the resource key.</source>
          <target state="translated">リソース キーを定義する型。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>についてを参照してください<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>外部アセンブリ、型を含むアセンブリをターゲット設定に基づくからアクセスされるリソースのキーを定義するカスタム コンポーネントで使用される要素。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
          <target state="translated">カスタム コンポーネントは、多くの場合、リソースがあるアセンブリに含める必要がありますのある新しい型を定義します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">通常、これらの型が他の実装を持っていないのルックアップの要件を満たすために、型にのみ存在、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The following example shows how to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> including <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> using the <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">次の例は、定義する方法を示します、<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>など<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>を使用して、 <bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>This resource can then be placed in an external assembly and accessed by a key usage that requests the resource using an analogous <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> in the request.</source>
          <target state="translated">このリソース、外部アセンブリに配置し、アクセスできるにも同様に使用して、リソースを要求するキーを使用して<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>要求にします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>