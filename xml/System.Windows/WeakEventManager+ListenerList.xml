<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager+ListenerList.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59f0f2be98debc822496ae0fb7a0b36b79ece2165.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f0f2be98debc822496ae0fb7a0b36b79ece2165</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Provides a built-in collection list for storing listeners for a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> のリスナーを格納するための組み込みのコレクション リストを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Although this list contains members that resemble those defined by <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>, and provide similar functionality, this class implements neither of those interfaces.</source>
          <target state="translated">このリストにはで定義されているようなメンバーが含まれていますが<ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>、このクラスが実装するインターフェイスのどちらにも同様の機能を提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Most <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> derived classes do not need to use any members on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated">ほとんど<ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>派生クラスは、すべてのメンバーを使用する必要はありません<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> use a default <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> internally, one list for each <ph id="ph5">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>メソッド<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>、既定値を使用して<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>ごとに内部的には、1 つのリスト<ph id="ph5">`source`</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>You only need to call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> methods if your <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</source>
          <target state="translated">のみを呼び出す必要がある<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>メソッド場合、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph>クラスは、同じイベント ソースの組み合わせのイベントの異なる条件に対してアカウントを作成した各リストで複数のリストを保持します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>In this case, you would not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> and would instead implement <ph id="ph3">`AddListener`</ph> or <ph id="ph4">`RemoveListener`</ph> to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to <ph id="ph5">`AddListener`</ph> or <ph id="ph6">`RemoveListener`</ph>.</source>
          <target state="translated">使わないはここでは、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>、代わりに実装<ph id="ph3">`AddListener`</ph>または<ph id="ph4">`RemoveListener`</ph>がリスナーに追加したパラメーターに基づいて、通常、内部リスナー リストの 1 つに作用する<ph id="ph5">`AddListener`</ph>または<ph id="ph6">`RemoveListener`</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Also, the handler implementation that receives the raw event cannot simply call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">また、生のイベントを受信するハンドラーの実装は呼び出すことはできませんだけ<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; 代わりのイベントの詳細を追跡し、適切なリストを使用して、のみイベントを配信する必要があります<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>The various methods of <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</source>
          <target state="translated">さまざまなメソッド<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>内部リストを使用するようにし、イベントの実際の配布中に、リストの変更を防ぐことができるように用意されています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>An example class that used this implementation technique is <ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>, which maintains separate listener lists for <ph id="ph2">`PropertyChanged`</ph> based on which property changed.</source>
          <target state="translated">この実装方法を使用するクラスの例は、 <ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>、個別のリスナーを維持するの一覧を示します<ph id="ph2">`PropertyChanged`</ph>どのプロパティの変更に基づいて。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>XAML Text Usage</source>
          <target state="translated">XAML テキストの使用方法</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>You cannot use this class in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">このクラスを使用することはできません<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager.ListenerList">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
          <source>The number of items that should be allocated in the initial list.</source>
          <target state="translated">初期リストに割り当てられる項目の数。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> class with the specified initial capacity.</source>
          <target state="translated">指定した初期量を使用して、<ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>The listener element to add to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> に追加するリスナー要素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Adds a <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> object to the <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> に <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> オブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>The object provided as listener should be a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> that implements the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface and therefore has a working <ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementation.</source>
          <target state="translated">リスナーがある必要がありますを提供するオブジェクト、<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>を実装する、<ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph>インターフェイスし、動作中のために、<ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
          <target state="translated">常に呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>内容の一覧を変更する前にします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
          <target state="translated">それ以外の場合、元がロックされているために、イベントの配信中一覧があります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph> call can still work on the clone.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>入力を変更<ph id="ph2">`list`</ph>クローンであるように、<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph>呼び出しクローンに作業できます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>返します<ph id="ph2">`true`</ph>、任意のプライベート参照、コードの他の領域で管理するリストを更新する必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
          <source>The event handler to add to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> に追加するイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
          <source>Adds an event handler to the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">イベント ハンドラーを <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> に追加します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>Declares the list to be in use.</source>
          <target state="translated">リストが使用中であることを宣言します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>This prevents direct changes to the list during iterations of the list items.</source>
          <target state="translated">これにより、リスト項目の反復処理中に、このリストを直接変更することができなくなります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the list was already declared to be in use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">リストが使用中であることが既に宣言されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>A <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation should call <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> before iterating through the list to deliver an event to the listeners, and should call <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph> when it is done.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>実装を呼び出す必要があります<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph>前に、をリスナーには、イベントを提供するリストを反復処理して、呼び出す必要があります<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>が完了するとします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</source>
          <target state="translated">これは他の呼び出し元がイベント配信のための反復処理が進行中の実行中に、リストを変更することを防ぎます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>If the list is modified during this time, then the list is cloned.</source>
          <target state="translated">この期間中に、リストを変更する場合は、リストが複製されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
          <source>If the list is cloned, then <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, which means that you have missed a recent listener change in the last delivery.</source>
          <target state="translated">リストが複製し、場合<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>返します<ph id="ph2">`true`</ph>、最後の配信に最近リスナーの変更が不足していることを意味します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Clone">
          <source>Creates a modifiable clone of this <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> の変更可能な複製を作成します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Clone">
          <source>A modifiable clone of the current object.</source>
          <target state="translated">現在のオブジェクトの変更可能な複製。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
          <source>The object to copy to.</source>
          <target state="translated">コピー先のオブジェクト。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
          <source>Copies the current <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph></source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> に現在の <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> をコピーします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Count">
          <source>Gets the number of items contained in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> に格納されている項目の数を取得します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Count">
          <source>The number of items contained in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> に格納されている項目の数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>The object that raised the event.</source>
          <target state="translated">イベントを発生させたオブジェクト。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>An object that contains the event data.</source>
          <target state="translated">イベント データを格納しているオブジェクト。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> that calls this method.</source>
          <target state="translated">このメソッドを呼び出す <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> の型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source>Delivers the event being managed to each listener in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">管理対象のイベントを <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 内の各リスナーに配信します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any of the listeners in the <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> refer to an object that has been garbage collected; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> のリスナーのいずれかがガベージ コレクションされたオブジェクトを参照する場合 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Empty">
          <source>Gets a value that represents an empty list for purposes of comparisons.</source>
          <target state="translated">比較のために空のリストを表す値を取得します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Empty">
          <source>The empty list representation.</source>
          <target state="translated">空のリスト表現。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.EndUse">
          <source>Unlocks the locked state initiated by <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /&gt;</ph> で開始されたロック状態を解除します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>Gets a value that declares whether this <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> is empty.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> が空であるかどうかを宣言する値を取得します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the list is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">リストが空である場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>This method is equivalent to checking whether the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> is zero, and does not check whether any of the references in the list are now stale.</source>
          <target state="translated">このメソッドをチェックするかどうか、 <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> 0 の場合は、一覧内の参照のいずれかが古くなったようになりましたかどうかは確認されません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
          <source>If you want to assure that all references are still valid, call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph> just prior to checking the empty status of the list.</source>
          <target state="translated">呼び出して、すべての参照が有効であることを保証する場合<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph>一覧の空の状態を確認する前にします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>The zero-based index of the listener in the list.</source>
          <target state="translated">リスト内のリスナーの 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>Gets or sets a specific listener item in the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> .</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 内の特定のリスナー項目を取得または設定します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
          <source>The item at that index, or a null reference if no item was at that index.</source>
          <target state="translated">指定したインデックス位置にある項目。指定したインデックス位置に項目がない場合は null 参照。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>The list to check for use state and potentially copy.</source>
          <target state="translated">使用状態を確認し、場合に応じてコピーする対象のリスト。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</source>
          <target state="translated">指定したリストが使用中かどうかを確認します。リストが使用中である場合は、リストの参照パラメーターを、オリジナルのリストではなくリストのコピーに設定します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided list was in use at the time of call and therefore the <ph id="ph2">&lt;paramref name="list" /&gt;</ph> parameter reference was reset to be a copy.</source>
          <target state="translated">指定したリストが呼び出し時に使用されていたために <ph id="ph2">&lt;paramref name="list" /&gt;</ph> パラメーターの参照がコピーに変更された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the provided list was not in use, in which case the <ph id="ph2">&lt;paramref name="list" /&gt;</ph> parameter reference remains unaltered.</source>
          <target state="translated">指定されたリストが使用されておらず <ph id="ph2">&lt;paramref name="list" /&gt;</ph> パラメーターの参照が変更されなかった場合は <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>If the given list is in use (which means an event is currently being delivered), calling this method will replace the input <ph id="ph1">`list`</ph> with a clone.</source>
          <target state="translated">指定された一覧が (つまり、イベントが現在配信中) 使用されている場合は、このメソッドを呼び出す置き換わります入力<ph id="ph1">`list`</ph>複製にします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>The existing users will finish delivering the event to the original list, without interference from changes to the new list.</source>
          <target state="translated">既存のユーザーには、新しいリストに変更によって影響を及ぼさず、元のリストへのイベント配信が完了します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>If the method returns <ph id="ph1">`true`</ph>, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</source>
          <target state="translated">メソッドを返す場合<ph id="ph1">`true`</ph>、呼び出し元が指定されたリストが最新ではない可能性があるこのため、独自のデータ構造体で、新しいリストを挿入することができます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>This method calls <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> internally and then immediately calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
          <target state="translated">このメソッドを呼び出す<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph>内部的にしてからすぐに呼び出して<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Therefore calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> does not itself introduce a lock on the list.</source>
          <target state="translated">そのため<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>は自体は、一覧でのロックを導入します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
          <source>Even the clone copy is done as a secondary operation after calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
          <target state="translated">複製のコピーもを呼び出した後にセカンダリ操作として実行されます<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Purge">
          <source>Removes all entries from the list where the underlying reference target is a null reference.</source>
          <target state="translated">基になる参照ターゲットが null 参照であるリストからエントリをすべて削除します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Purge">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if any entries were purged; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">エントリが削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>The item to remove.</source>
          <target state="translated">削除する項目。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Removes the first occurrence of a listener item from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 内で最初に見つかったリスナー項目を削除します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
          <target state="translated">常に呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>内容の一覧を変更する前にします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
          <target state="translated">それ以外の場合、元がロックされているために、イベントの配信中一覧があります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph> call can still work on the clone.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>入力を変更<ph id="ph2">`list`</ph>クローンであるように、<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph>呼び出しクローンに作業できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph>返します<ph id="ph2">`true`</ph>、任意のプライベート参照、コードの他の領域で管理するリストを更新する必要があります。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
          <source>The event handler to remove from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> から削除するイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
          <source>Removes an event handler from the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> からイベント ハンドラーを削除します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>