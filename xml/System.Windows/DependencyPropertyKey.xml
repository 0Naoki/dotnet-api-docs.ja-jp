<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61f0be29cf151e08d249cb070c9ffec96ecb1f41" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434702" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>読み取り専用の依存関係プロパティへの制限された書き込みアクセスに必要な依存関係プロパティ識別子を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey>インスタンスは、メソッド<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>または<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>を使用して、依存関係プロパティの登録呼び出しの戻り値として取得されます。  
  
 依存関係プロパティを登録する型は、の<xref:System.Windows.DependencyPropertyKey> <xref:System.Windows.DependencyObject.SetValue%2A>呼び出し<xref:System.Windows.DependencyObject.ClearValue%2A>でを使用し、プロパティの値をクラスロジックの一部として調整できます。 キーのアクセスレベルで許可されている場合、関連するクラスはキーと依存関係プロパティも使用できます。 たとえば、キーを内部として宣言し、同じアセンブリ内の他の型もその依存関係プロパティを設定できます。  
  
 読み取り専用の依存関係プロパティの登録によって返されるをパブリックにすることはできません。キーを公開すると、プロパティが設定可能になるため、読み取り専用の依存関係プロパティとして登録するポイントが無効になります。<xref:System.Windows.DependencyPropertyKey> また、キーを公開すると、使用可能な依存関係プロパティの動作[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]とプロパティラッパーの実装が一致しません。これは、クラスの設計が不適切であることを示します。  
  
 代わりに、キー自体を公開するのではなく、 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> <xref:System.Windows.DependencyPropertyKey>の値をクラスの`public static readonly`として<xref:System.Windows.DependencyProperty>公開する必要があります。 これにより、プロパティは、ローカルに設定された値の列挙など、特定のプロパティシステム操作に対して有効な依存関係プロパティ識別子を返すことができます。 ただし、取得した識別子には、多くのプロパティシステム操作<xref:System.Windows.DependencyProperty>に対するの完全な機能はありません。  
  
   
  
## Examples  
 次の例では、読み取り専用の依存関係プロパティを登録し、他のクラスメンバーの2つの目的でキーを使用します。 get "ラッパー" の実装と、計算に基づいて値を設定する、保護された決定操作の識別子として使用します。他のプロパティ値の。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この特殊な読み取り専用依存関係プロパティ識別子に関連付けられている依存関係プロパティ識別子を取得します。</summary>
        <value>関連する依存関係プロパティ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>値を使用すると、読み取り専用プロパティの識別子が、読み取り/書き込み依存関係プロパティで使用されるものと同じインターフェイスを使用して、共通プロパティシステム操作に参加できます。  
  
 読み取り専用の依存関係プロパティの get プロパティアクセサーを実装するには、クラスに識別子を<xref:System.Windows.DependencyProperty>作成して公開する必要があります。 これには 2 つの目的があります。  
  
-   独自のクラスには<xref:System.Windows.DependencyProperty> 、プロパティラッパーの get アクセサーを実装するための識別子が必要です。 は、 <xref:System.Windows.DependencyProperty> get アクセサーを実装する<xref:System.Windows.DependencyObject.GetValue%2A>呼び出しのパラメーターとして使用します。  
  
-   <xref:System.Windows.DependencyProperty>識別子は、メタデータに依存する他のメソッドが標準形式でアクセスできるように、依存関係プロパティをプロパティシステムに公開します。 たとえば、何らか<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> <xref:System.Windows.DependencyObject>の方法でを呼び出し、ローカルに設定されたプロパティ (値と識別子) の列挙を取得した場合、読み取り専用の依存<xref:System.Windows.DependencyProperty>関係プロパティに対して返される識別子は、キーではなく値になります。 識別子を<xref:System.Windows.DependencyProperty>公開しないと、読み取り専用の依存関係プロパティのセキュリティはどのような方法でも向上しません。これにより、その後の派生クラスとクラスインスタンスの両方で、プロパティに関連する操作が難しくなります。  
  
 クラスで<xref:System.Windows.DependencyProperty>識別子を公開するには、キー <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>に対して直接を呼び出します。 この値を使用して`public static readonly` 、 <xref:System.Windows.DependencyPropertyKey>に対応するクラスの<xref:System.Windows.DependencyProperty>識別子を作成します。  
  
   
  
## Examples  
 次の例で<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>は、を<xref:System.Windows.DependencyProperty>呼び出して`AquariumGraphicProperty`、クラスの`AquariumGraphic`読み取り専用の依存関係プロパティの識別子 () を公開しています。 この例では、 <xref:System.Windows.DependencyPropertyKey> (内部メンバーとしての) 作成と、の`AquariumGraphic`get アクセサーも示しています。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">この依存関係プロパティが存在し、メタデータをオーバーライドする必要がある型。</param>
        <param name="typeMetadata">この型に対して提供されるメタデータ。</param>
        <summary>この依存関係プロパティ識別子によって表される読み取り専用の依存関係プロパティのメタデータをオーバーライドします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 読み取り専用の依存関係プロパティでのメタデータのオーバーライドは、読み取り/書き込み依存関係プロパティでメタデータをオーバーライドする場合と同様の理由で実行されます。また、メタデータに指定された動作によって設定動作が変更される可能性があるため、キーレベルでのアクセスが制限されます。たとえば、既定値です)。  
  
 読み取り/書き込み依存関係プロパティの場合と同様に、読み取り専用の依存関係プロパティのメタデータのオーバーライドは、プロパティシステムによって使用されるプロパティの前にのみ行う必要があります (これは、を登録するオブジェクトの特定のインスタンスの時刻に相当します)。プロパティはインスタンス化されます)。 の呼び出しは、このメソッドの`forType`パラメーターとして自身を提供する型の静的コンストラクター内、またはそのクラスの同等の初期化でのみ実行する必要があります。<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>  
  
 このメソッドは<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 、実際には、 <xref:System.Windows.DependencyPropertyKey>インスタンスをキーパラメーターとして渡して、メソッドに転送します。  
  
   
  
## Examples  
 次の例では、クラスが継承する既存の読み取り専用の依存関係プロパティのメタデータをオーバーライドします。 この場合、シナリオの目標は、基本プロパティのメタデータに含まれていなかった強制値のコールバックを追加することでした。 また、メタデータをオーバーライドする他の理由により、メタデータをオーバーライドすることもできます ( <xref:System.Windows.FrameworkPropertyMetadataOptions>既定値の変更、値の追加など)。  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">読み取り/書き込み用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してオーバーライドすることはできません)。</exception>
        <exception cref="T:System.ArgumentException">提供された型に存在するので、プロパティのメタデータは既に確立されています。</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
