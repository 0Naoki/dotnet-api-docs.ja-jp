<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39765181" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="37bbe-101">読み取り専用の依存関係プロパティへの制限された書き込みアクセスに必要な依存関係プロパティ識別子を提供します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37bbe-102"><xref:System.Windows.DependencyPropertyKey> インスタンス メソッドを使用して、依存関係プロパティの登録の呼び出しの戻り値として取得しています<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>または<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="37bbe-103">依存関係プロパティを登録する型が使用できる、<xref:System.Windows.DependencyPropertyKey>への呼び出しで<xref:System.Windows.DependencyObject.SetValue%2A>と<xref:System.Windows.DependencyObject.ClearValue%2A>クラス ロジックの一部として、プロパティの値を調整します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="37bbe-104">キーのアクセス レベル、許可されている場合の関連するクラスも使用できます、キーと依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="37bbe-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="37bbe-105">たとえば、内部、としてキーを宣言することができ、同じアセンブリ内の他の種類は、その依存関係プロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="37bbe-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="37bbe-106"><xref:System.Windows.DependencyPropertyKey>返される読み取り専用の依存関係によってプロパティの登録されないようにする、パブリック プロパティで設定可能なしたがって読み取り専用の依存関係プロパティとしての登録ポイントを解読する際は、キーを公開するためです。</span><span class="sxs-lookup"><span data-stu-id="37bbe-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="37bbe-107">また、キーを公開すると、不一致な使用可能な依存関係プロパティの動作とその[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]不適切なクラスのデザインは、プロパティ ラッパーの実装。</span><span class="sxs-lookup"><span data-stu-id="37bbe-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="37bbe-108">公開する代わりに、キー自体を公開するのではなく、<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>の値、<xref:System.Windows.DependencyPropertyKey>として、 `public static readonly` <xref:System.Windows.DependencyProperty>クラスにします。</span><span class="sxs-lookup"><span data-stu-id="37bbe-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="37bbe-109">これにより、特定のローカル値の設定を列挙するなどのプロパティ システム操作の有効な依存関係プロパティの識別子を返すプロパティ。</span><span class="sxs-lookup"><span data-stu-id="37bbe-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="37bbe-110">ただし、識別子を取得したためにはのすべての機能はありません、<xref:System.Windows.DependencyProperty>の多くのプロパティ システム操作。</span><span class="sxs-lookup"><span data-stu-id="37bbe-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37bbe-111">次の例では、読み取り専用の依存関係プロパティでは、登録し、も、他のクラス メンバーの 2 つの目的のキーを使用して: get「ラッパー」を実装して、計算に基づいて、値を設定する保護された特定の操作の識別子として他のプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="37bbe-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37bbe-112">この特殊な読み取り専用依存関係プロパティ識別子に関連付けられている依存関係プロパティ識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span></span></summary>
        <value><span data-ttu-id="37bbe-113">関連する依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="37bbe-113">The relevant dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37bbe-114"><xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>値には、参加に共通のプロパティ システム操作の読み取り/書き込み依存関係プロパティを使用したのと同じインターフェイスの一部を使用する読み取り専用プロパティの識別子が有効になります。</span><span class="sxs-lookup"><span data-stu-id="37bbe-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="37bbe-115">読み取り専用の依存関係プロパティの get プロパティ アクセサーを実装するために作成し、公開する必要があります、<xref:System.Windows.DependencyProperty>クラスの識別子。</span><span class="sxs-lookup"><span data-stu-id="37bbe-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="37bbe-116">これには 2 つの目的があります。</span><span class="sxs-lookup"><span data-stu-id="37bbe-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="37bbe-117">独自クラスのニーズ、<xref:System.Windows.DependencyProperty>プロパティ ラッパーの get アクセサーを実装するために識別子。</span><span class="sxs-lookup"><span data-stu-id="37bbe-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="37bbe-118">使用する、<xref:System.Windows.DependencyProperty>のパラメーターとして、<xref:System.Windows.DependencyObject.GetValue%2A>呼び出しを get アクセサーを実装します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="37bbe-119"><xref:System.Windows.DependencyProperty> 識別子は、メタデータに依存するその他のメソッドを使用すると、標準の形式でアクセスできるように、プロパティ システムに、依存関係プロパティを公開します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="37bbe-120">たとえば、呼び出した場合<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>いくつかの<xref:System.Windows.DependencyObject>ローカル プロパティの設定 (値と識別子) の列挙体識別子を取得および返される読み取り専用の依存関係プロパティになります、<xref:System.Windows.DependencyProperty>キーではなく値します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="37bbe-121">公開する、<xref:System.Windows.DependencyProperty>識別子が任意の方法で、読み取り専用の依存関係プロパティのセキュリティを強化していませんが、後続の派生クラスとクラスのインスタンスの両方に比べるプロパティに関連する操作を使用するだけです。</span><span class="sxs-lookup"><span data-stu-id="37bbe-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="37bbe-122">公開する、<xref:System.Windows.DependencyProperty>呼び出すクラスの識別子、<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>キーに直接します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="37bbe-123">この値を使用して、作成、 `public static readonly` <xref:System.Windows.DependencyProperty>対応する、クラスの識別子、<xref:System.Windows.DependencyPropertyKey>します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37bbe-124">次の例では<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>を公開する、<xref:System.Windows.DependencyProperty>識別子 (`AquariumGraphicProperty`) の`AquariumGraphic`クラスの読み取り専用の依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="37bbe-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="37bbe-125">示しています、 <xref:System.Windows.DependencyPropertyKey> (内部メンバーの場合) として作成し、get アクセサーを`AquariumGraphic`します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="37bbe-126">この依存関係プロパティが存在し、メタデータをオーバーライドする必要がある型。</span><span class="sxs-lookup"><span data-stu-id="37bbe-126">The type on which this dependency property exists and metadata should be overridden.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="37bbe-127">この型に対して提供されるメタデータ。</span><span class="sxs-lookup"><span data-stu-id="37bbe-127">Metadata supplied for this type.</span></span></param>
        <summary><span data-ttu-id="37bbe-128">この依存関係プロパティ識別子によって表される読み取り専用の依存関係プロパティのメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="37bbe-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37bbe-129">読み取り専用の依存関係プロパティのメタデータのオーバーライドは、読み取り/書き込み依存関係プロパティのメタデータをオーバーライドすることと同様の理由で行われ、メタデータに指定された動作は、(、セットの動作を変更できるので、キー レベルのアクセスに制限されます。既定値、たとえば) です。</span><span class="sxs-lookup"><span data-stu-id="37bbe-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="37bbe-130">読み取り/書き込み依存関係プロパティを持つ、読み取り専用の依存関係プロパティのメタデータのオーバーライドにのみ行ってくださいプロパティ システムによって使用されるプロパティの前に、(これは、時間をその特定のインスタンスを登録するオブジェクトのプロパティはインスタンス化) します。</span><span class="sxs-lookup"><span data-stu-id="37bbe-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="37bbe-131">呼び出す<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>として自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、`forType`メソッド、またはそのクラスの初期化を同等のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="37bbe-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="37bbe-132">このメソッドを効率的に転送する、<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>渡して、メソッド、<xref:System.Windows.DependencyPropertyKey>インスタンス キーのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="37bbe-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37bbe-133">次の例では、既存のクラスを継承する読み取り専用の依存関係プロパティのメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="37bbe-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="37bbe-134">この場合、シナリオの目的は、基本プロパティのメタデータが含まれていない強制値コールバックを追加するでした。</span><span class="sxs-lookup"><span data-stu-id="37bbe-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="37bbe-135">適切なメタデータのオーバーライドは、通常、その他の理由のいずれかのメタデータ オーバーライドすることもできます (既定の値を変更する追加<xref:System.Windows.FrameworkPropertyMetadataOptions>値など)。</span><span class="sxs-lookup"><span data-stu-id="37bbe-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="37bbe-136">読み取り/書き込み用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してオーバーライドすることはできません)。</span><span class="sxs-lookup"><span data-stu-id="37bbe-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37bbe-137">提供された型に存在するので、プロパティのメタデータは既に確立されています。</span><span class="sxs-lookup"><span data-stu-id="37bbe-137">Metadata was already established for the property as it exists on the provided type.</span></span></exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>