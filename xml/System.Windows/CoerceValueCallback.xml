<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bbc70fa825fb1449321a5aebd633372a4e8df0e5" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70729307" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d"><span data-ttu-id="3fbda-101">プロパティが存在するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fbda-101">The object that the property exists on.</span></span> <span data-ttu-id="3fbda-102">コールバックが呼び出されると、プロパティ システムがこの値を渡します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-102">When the callback is invoked, the property system will pass this value.</span></span></param>
    <param name="baseValue"><span data-ttu-id="3fbda-103">強制が試行される前のプロパティの新しい値。</span><span class="sxs-lookup"><span data-stu-id="3fbda-103">The new value of the property, prior to any coercion attempt.</span></span></param>
    <summary><span data-ttu-id="3fbda-104">依存関係プロパティの値が再評価されたり強制が明示的に要求されたりした場合に必ず呼び出されるメソッドのテンプレートを提供します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span></span></summary>
    <returns><span data-ttu-id="3fbda-105">強制された (適切な型の) 値。</span><span class="sxs-lookup"><span data-stu-id="3fbda-105">The coerced value (with appropriate type).</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fbda-106">に基づくコール<xref:System.Windows.CoerceValueCallback>バックは、いくつかの異なる手法を使用して依存関係プロパティに割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="3fbda-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="3fbda-107">これらの各手法では、最初に新しいプロパティメタデータオブジェクト (<xref:System.Windows.PropertyMetadata>または、などの派生クラス<xref:System.Windows.FrameworkPropertyMetadata>) を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3fbda-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="3fbda-108">`coerceValueCallback`パラメーターを受け取るコンストラクターシグネチャを使用してメタデータオブジェクトを作成し、そのパラメーターをコールバックハンドラーに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="3fbda-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="3fbda-109">または、任意のシグネチャによってメタ<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>データを作成し、メタデータを使用する前にプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="3fbda-110">このメタデータがある場合は、次のことができます。</span><span class="sxs-lookup"><span data-stu-id="3fbda-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="3fbda-111">の<xref:System.Windows.DependencyProperty.Register%2A>シグネチャを使用して、新しいクラスで新しい依存関係プロパティを定義します。この`typeMetadata`とき、メタデータを値として指定します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="3fbda-112">依存関係プロパティを所有<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>するクラスから派生する場合は、既存の依存関係プロパティのメタデータ (呼び出し) をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="3fbda-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="3fbda-113">を呼び出し<xref:System.Windows.DependencyObject> <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>て、新しいメタデータを使用して、既存の依存関係プロパティを新しいクラスに追加します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="3fbda-114">このコールバックの実装で`baseValue`は、の値を確認し、値または型のいずれかに基づいて、さらに強制的に変換する必要がある値かどうかを判断する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3fbda-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="3fbda-115">依存<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>関係プロパティのは、プロパティシステムまたは他の呼び出し元が<xref:System.Windows.DependencyObject>インスタンスでを<xref:System.Windows.DependencyObject.CoerceValue%2A>呼び出すたびに呼び出され`dp`、そのプロパティの識別子をとして指定します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="3fbda-116">プロパティ値に対する変更は、プロパティシステムの任意の参加要素から取得された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3fbda-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="3fbda-117">これには、スタイル、汎用無効化、トリガー、プロパティ値の継承、およびローカルの値の設定が含まれます。</span><span class="sxs-lookup"><span data-stu-id="3fbda-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="3fbda-118">一般に、特定の依存関係プロパティ<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>に対して複数のを指定することは避けてください (をオーバーライドするか、既<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>にを持っている依存関係プロパティの新しいメタデータを使用して追加します)。</span><span class="sxs-lookup"><span data-stu-id="3fbda-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="3fbda-119">コールバックの1つだけが動作することができます。アクションコールバックは、 <xref:System.Windows.DependencyObject>呼び出し元と比較して、継承の最派生クラスに適用されたものになります。</span><span class="sxs-lookup"><span data-stu-id="3fbda-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="3fbda-120">所有者階層の上位に存在していた依存関係プロパティのメタデータに割り当てられた他のコールバックは、メタデータがオーバーライドされると置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="3fbda-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fbda-121">次の例には、別のプロパティの値など、他の入力に基づいて依存関係プロパティの格納されている値を強制するための、このコールバックの実装が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3fbda-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="3fbda-122">この場合、コールバックは、 `ShirtType`プロパティがボタンを持つシャツの種類に対応しているかどうかを確認します。その場合は、 `ButtonColor`の既定の初期色を設定します。これにより、シャツの種類にボタンがない場合は、値が強制されます。 `ButtonColor`開始値に戻ると、(表示さ[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]れていない) が有効な選択肢からドロップダウンリストを削除します。</span><span class="sxs-lookup"><span data-stu-id="3fbda-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>
