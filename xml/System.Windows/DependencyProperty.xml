<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9af7c7588dee4a02565170423aec4646b42e947" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37550310" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d7f76-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d7f76-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-102">A<xref:System.Windows.DependencyProperty>で次の機能をサポートしている[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="d7f76-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="d7f76-103">スタイルのプロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-103">The property can be set in a style.</span></span> <span data-ttu-id="d7f76-104">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="d7f76-105">プロパティは、データ バインドを通じて設定できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-105">The property can be set through data binding.</span></span> <span data-ttu-id="d7f76-106">データ バインディングの依存関係プロパティの詳細については、次を参照してください。[方法: 2 つのコントロールのプロパティをバインド](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="d7f76-107">動的リソース参照では、プロパティを設定できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="d7f76-108">詳細については、「[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="d7f76-109">プロパティは、要素ツリーの親要素からその値を自動的に継承できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="d7f76-110">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="d7f76-111">プロパティをアニメーション化することができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-111">The property can be animated.</span></span> <span data-ttu-id="d7f76-112">詳しくは、「 [アニメーションの概要](~/docs/framework/wpf/graphics-multimedia/animation-overview.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="d7f76-113">プロパティは、プロパティの以前の値が変更されましたが、プロパティの値を強制的に変換できる場合に報告できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="d7f76-114">詳しくは、「[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="d7f76-115">プロパティに情報を報告する[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プロパティ値を変更してビジュアル要素を再構成するには、レイアウト システムを必要する必要があるかどうかなど、します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="d7f76-116">プロパティでのサポートの受信、[!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="d7f76-117">プロパティの編集など、**プロパティ**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="d7f76-118">依存関係プロパティの詳細については、次を参照してください。[依存関係プロパティの概要](~/docs/framework/wpf/advanced/dependency-properties-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="d7f76-119">上記の一覧で、機能をサポートするカスタム型のプロパティをする場合は、依存関係プロパティを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="d7f76-120">カスタム依存関係プロパティを作成する方法については、次を参照してください。[カスタム依存関係プロパティ](~/docs/framework/wpf/advanced/custom-dependency-properties.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="d7f76-121">添付プロパティは、任意のオブジェクトを添付プロパティを定義する型情報を報告できるようにするプロパティです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="d7f76-122">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、任意の型から継承する<xref:System.Windows.DependencyObject>プロパティを定義する型から継承する型かどうかに関係なく、添付プロパティを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="d7f76-123">添付プロパティの機能である、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]言語。</span><span class="sxs-lookup"><span data-stu-id="d7f76-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="d7f76-124">添付プロパティを設定する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]を使用して、 *ownerType*.*propertyName*構文。</span><span class="sxs-lookup"><span data-stu-id="d7f76-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="d7f76-125">添付プロパティの例は、<xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d7f76-126">かどうかは、すべてで使用できるプロパティを作成する<xref:System.Windows.DependencyObject>型の場合は、添付プロパティを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="d7f76-127">添付プロパティをそれらを作成する方法などの詳細についてを参照してください。[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="d7f76-128">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="d7f76-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="d7f76-129">XAML 値</span><span class="sxs-lookup"><span data-stu-id="d7f76-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="d7f76-130">指定する文字列、<xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>の必要な依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="d7f76-131">これは、前に、XML 名前空間プレフィックス プロパティが既定の XML 名前空間にない場合 (詳細については、次を参照してください[XAML 名前空間および WPF XAML のマッピングの Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)。)。</span><span class="sxs-lookup"><span data-stu-id="d7f76-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="d7f76-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="d7f76-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="d7f76-133">ドット (.)、依存関係プロパティの所有者の種類を指定する文字列、<xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d7f76-134">`ownerType` XML 名前空間プレフィックスによっても前ことができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="d7f76-135">この使用状況は遅延バインディングのスタイルとテンプレート、ために、コンテキストを解析するため、依存関係プロパティの所有者を指定する必要がありますを特定、`TargetType`が不明です。</span><span class="sxs-lookup"><span data-stu-id="d7f76-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="d7f76-136">詳しくは、「 [スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="d7f76-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="d7f76-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="d7f76-138">ドット (.)、添付プロパティ名では、添付プロパティの所有者を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="d7f76-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="d7f76-139">`attachedPropertyOwnerType` XML 名前空間プレフィックスによっても前ことができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="d7f76-141">The type to add as an owner of this dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="d7f76-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-145">このメソッドは、その特定の依存関係プロパティを最初に登録していない型に依存関係プロパティを認識する、プロパティ システムを使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="d7f76-146">通常、<xref:System.Windows.DependencyProperty.AddOwner%2A>依存関係プロパティは、既にマネージ クラスの継承を通じてその依存関係プロパティを公開するクラスを追加するために使用 (クラスの継承は、派生クラスによって継承するラッパー プロパティになると、それに伴って依存関係プロパティへのアクセスの一般的なメンバー テーブル既に) できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="d7f76-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> その依存関係プロパティを最初に登録していない型に依存関係プロパティを認識する、プロパティ システムを有効にします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="d7f76-148">メタデータを指定するのには、この署名することはできません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="d7f76-149">このメソッドを使用すると、メタデータが新しい自動的に生成<xref:System.Windows.DependencyProperty>とその所有者の種類。</span><span class="sxs-lookup"><span data-stu-id="d7f76-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="d7f76-150">自動生成されたメタデータは、このプロパティが定義されている基本型のすべてからマージされたメタデータの結果です。</span><span class="sxs-lookup"><span data-stu-id="d7f76-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="d7f76-151">マージされたメタデータが使用できない場合は、プロパティの既定のメタデータが使用されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="d7f76-152">使用して、プロパティが登録されている場合、<xref:System.Windows.DependencyProperty.RegisterAttached%2A>メソッド、既定のメタデータはときに作成されるメタデータと同じ<xref:System.Windows.DependencyProperty.RegisterAttached%2A>が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="d7f76-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="d7f76-153">それ以外の場合、<xref:System.Windows.PropertyMetadata>オブジェクトを作成すると、<xref:System.Windows.PropertyMetadata.DefaultValue%2A>プロパティがプロパティの型の既定値を他のすべてのプロパティの設定、<xref:System.Windows.PropertyMetadata>に設定されている`null`します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="d7f76-154">使用して、<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>署名が指定された型に追加されると、依存関係プロパティのバージョンのメタデータを提供したい場合。</span><span class="sxs-lookup"><span data-stu-id="d7f76-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="d7f76-155">このメソッドの戻り値は通常を宣言し、依存関係プロパティの識別子を格納することにより、依存関係プロパティを公開に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="d7f76-156">プロパティ システムを呼び出そうとする場合、識別子は、依存関係プロパティへのアクセスを提供します。 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 、依存関係プロパティに対して特にこれが存在して、追加の所有者クラスにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="d7f76-157">元の所有者と追加された所有者の両方に同じプロパティ名を同様の機能を示すために使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="d7f76-158">使用する必要があります、<xref:System.Windows.DependencyProperty>の値を返す、<xref:System.Windows.DependencyProperty.AddOwner%2A>依存関係プロパティの識別子を定義し、宣言メソッド[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]を使用して型に追加される依存関係プロパティのプロパティ ラッパー<xref:System.Windows.DependencyProperty.AddOwner%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="d7f76-159"><xref:System.Windows.DependencyProperty.AddOwner%2A>内で宣言されている依存関係プロパティを作成するときに、前述の推奨される手法が使用される[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="d7f76-160">たとえば、両方<xref:System.Windows.Controls.Border>と<xref:System.Windows.Controls.Control>定義、`BorderBrush`依存関係プロパティは、同様の機能があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="d7f76-161"><xref:System.Windows.Controls.Control> 定義の`BorderBrush`プロパティを呼び出すことによって、プロパティ システム<xref:System.Windows.DependencyProperty.AddOwner%2A>元の所有者に基づく<xref:System.Windows.Controls.Border>、登録されていると<xref:System.Windows.Controls.Border.BorderBrushProperty>依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="d7f76-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="d7f76-162"><xref:System.Windows.DependencyProperty.AddOwner%2A>戻り値の値が新しい静的を確立するために使用し、<xref:System.Windows.DependencyProperty>フィールド (<xref:System.Windows.Controls.Control.BorderBrushProperty>) に追加された所有者では、そのプロパティの`BorderBrush`プロパティ ラッパーも宣言されています。</span><span class="sxs-lookup"><span data-stu-id="d7f76-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="d7f76-163">The type to add as owner of this dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="d7f76-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-168">このメソッドは、その特定の依存関係プロパティを最初に登録していない型に依存関係プロパティを認識する、プロパティ システムを使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="d7f76-169">このメソッドの戻り値は、所有者の追加のクラスには存在するために特にもを宣言し、依存関係プロパティが公開されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="d7f76-170">一般に、元の所有者と追加された所有者の両方に同じプロパティ名を使用して、同様の機能を示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="d7f76-171">新しいも、識別子を公開することをお勧めは[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]を使用して型に追加される依存関係プロパティのプロパティ ラッパー<xref:System.Windows.DependencyProperty.AddOwner%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="d7f76-172"><xref:System.Windows.DependencyProperty.AddOwner%2A>作成するときに、前述の推奨される手法が使用される[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]内で宣言された[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="d7f76-173">たとえば、両方<xref:System.Windows.Controls.Border>と<xref:System.Windows.Controls.Control>定義、`BorderBrush`依存関係プロパティは、同様の機能があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="d7f76-174"><xref:System.Windows.Controls.Control> 定義の`BorderBrush`プロパティを呼び出すことによって、プロパティ システム<xref:System.Windows.DependencyProperty.AddOwner%2A>元の所有者に<xref:System.Windows.Controls.Border>、登録されていると<xref:System.Windows.Controls.Border.BorderBrushProperty>依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="d7f76-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="d7f76-175"><xref:System.Windows.DependencyProperty.AddOwner%2A>戻り値の値は、静的なを確立するために使用し、<xref:System.Windows.DependencyProperty>フィールド (<xref:System.Windows.Controls.Control.BorderBrushProperty>) に追加された所有者では、そのプロパティの`BorderBrush`プロパティ ラッパーも宣言されています。</span><span class="sxs-lookup"><span data-stu-id="d7f76-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="d7f76-176">追加した所有者の依存関係プロパティ識別子をなど操作に使用する必要があります<xref:System.Windows.DependencyObject.GetValue%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="d7f76-177">ただし、種類、またはさまざまなメタデータで所有者があるように追加されたクラスのインスタンスに関連する型固有の操作を返すいても、期待どおりの結果、元の (いない、追加した所有者の) で依存関係プロパティ識別子が指定されました。などのメソッドを呼び出し<xref:System.Windows.DependencyObject.GetValue%2A>または<xref:System.Windows.DependencyProperty.GetMetadata%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="d7f76-178">によって追加された所有者のメタデータを永続的なものは、<xref:System.Windows.DependencyProperty.AddOwner%2A>所有者クラス識別子フィールドの追加によって排他的参照必ずしもそれ自体を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="d7f76-179">それにもかかわらずも、新しい識別子を公開することをお勧めは[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]を使用して型に追加される依存関係プロパティのプロパティ ラッパー<xref:System.Windows.DependencyProperty.AddOwner%2A>これに失敗の間に不一致が作成されるため、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]と[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 、プロパティの表現。</span><span class="sxs-lookup"><span data-stu-id="d7f76-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="d7f76-180">指定したメタデータは、基本の所有者に存在する依存関係プロパティのプロパティのメタデータに統合されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="d7f76-181">元の基本メタデータで指定されたすべての特性が保持されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="d7f76-182">基本のメタデータの特性は、新しいメタデータに変更された具体的には特性のみが上書きされます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="d7f76-183">いくつかの特性など<xref:System.Windows.PropertyMetadata.DefaultValue%2A>、新しいメタデータで指定されている場合は置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="d7f76-184">他のユーザーなど<xref:System.Windows.PropertyChangedCallback>、結合されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="d7f76-185">最終的には、マージ動作によって異なりますので、ここで説明されている動作で使用される既存のプロパティのメタデータ クラス用のオーバーライドで使用されているプロパティのメタデータ型[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="d7f76-186">詳細については、次を参照してください。[依存関係プロパティ メタデータ](~/docs/framework/wpf/advanced/dependency-property-metadata.md)と[フレームワーク プロパティ メタデータ](~/docs/framework/wpf/advanced/framework-property-metadata.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-187">Gets the default metadata of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-188">依存関係プロパティの既定のメタデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-189">既定のメタデータは、代替メタデータが指定されていませんが、明示的な特定のオブジェクトまたは派生型のオブジェクトに提供されるプロパティのメタデータ<xref:System.Windows.DependencyProperty.Register%2A>または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="d7f76-190">元の所有者では、最初にメタデータが適用される場合<xref:System.Windows.DependencyProperty.Register%2A>としてそのメタデータが返されます、依存関係プロパティを確立されている呼び出し<xref:System.Windows.DependencyProperty.DefaultMetadata%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="d7f76-191">元のメタデータが適用されていない場合<xref:System.Windows.DependencyProperty.Register%2A>内から既定のメタデータを生成しを呼び出す、<xref:System.Windows.DependencyProperty.Register%2A>として呼び出しと、この値が返されます、<xref:System.Windows.DependencyProperty.DefaultMetadata%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="d7f76-192">関連付けられている既定のメタデータの主な目的、<xref:System.Windows.DependencyProperty>いずれかでこのプロパティの既定値を指定することが<xref:System.Windows.DependencyObject>または派生型。</span><span class="sxs-lookup"><span data-stu-id="d7f76-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="d7f76-193">派生型に非添付プロパティは、このプロパティによって返されるメタデータの型をキャストできません<xref:System.Windows.PropertyMetadata>派生メタデータ型のプロパティが最初に登録された場合でも、入力します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="d7f76-194">元のメタデータの可能性がある派生型を含む最初に登録されているメタデータを実行する場合に、呼び出す<xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29>をパラメーターとして代わりに、入力元の登録を渡します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="d7f76-195">添付プロパティは、このプロパティによって返されるメタデータの型が元の指定された型を一致<xref:System.Windows.DependencyProperty.RegisterAttached%2A>登録メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f76-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-198">プロパティ システムは、独自の一意の識別子を使用して<xref:System.Windows.DependencyProperty.GlobalIndex%2A>、そのプロパティの値がによって返されると<xref:System.Windows.DependencyProperty.GetHashCode%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="d7f76-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="d7f76-201">The specific type from which to retrieve the dependency property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-203">A property metadata object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-204">型、または型の型が必要な元の登録のいずれかからメタデータが異なるので、使用するオブジェクト参照を指定する<xref:System.Windows.DependencyProperty.AddOwner%2A>または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>の呼び出しを型に存在する依存関係プロパティのメタデータを変更します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-205">次の例では、その型に基づいて依存関係プロパティのメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="d7f76-206">使用して、型を取得、`typeof`演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f76-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="d7f76-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-209">A property metadata object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-210">または型のオブジェクト参照が、指定するために必要な元の登録のいずれかから、指定された依存関係プロパティのメタデータが異なるので<xref:System.Windows.DependencyProperty.AddOwner%2A>または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>に存在するプロパティのメタデータを絞り込むことができますを呼び出し、入力します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="d7f76-211">インスタンスに基づくプロパティのメタデータを要求するときにその型を内部的に評価できるように、インスタンスを渡しているにすぎません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="d7f76-212">依存関係プロパティ メタデータがインスタンスごとに異なるされません。任意の型のプロパティの組み合わせの一貫性が常にあります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-213">次の例では、特定に基づいて依存関係プロパティのメタデータを取得する<xref:System.Windows.DependencyObject>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="d7f76-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="d7f76-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-216">A property metadata object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-217">または型のオブジェクト参照が、指定するために必要な元の登録のいずれかから、指定された依存関係プロパティのメタデータが異なるので<xref:System.Windows.DependencyProperty.AddOwner%2A>または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>に存在するプロパティのメタデータを絞り込むことができますを呼び出し、入力します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-218">次の例に基づく依存関係プロパティのメタデータを取得します。 その<xref:System.Windows.DependencyObjectType>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-220">一意の数値識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-221">この値は、整数、グローバル一意識別子 (GUID) ありません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="d7f76-222">一般に、このインデックスの値を使用する必要はありませんし、すべての依存関係プロパティのテーブルにインデックスへのアクセスはありません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="d7f76-223">依存関係プロパティが代わりに、識別子フィールドで参照されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="d7f76-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> 使用するデータ構造へのアクセス速度を内部的に使用されます、<xref:System.Windows.DependencyProperty.GlobalIndex%2A>として、配列の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="d7f76-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="d7f76-225">アプリケーションの設計者またはツールのような使用状況があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d7f76-226">The value to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-228">
            <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-229">値`null`または参照型の依存関係プロパティの有効な型には、 <xref:System.Nullable%601> 、依存関係プロパティを返す`true`ような場合。</span><span class="sxs-lookup"><span data-stu-id="d7f76-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="d7f76-230">依存関係プロパティのどちらの参照がある場合も、<xref:System.Nullable%601>型、<xref:System.Windows.DependencyProperty.IsValidType%2A>が返されます`false`例外を発生ではなく null 値。</span><span class="sxs-lookup"><span data-stu-id="d7f76-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-231">次の例では<xref:System.Windows.DependencyProperty.IsValidType%2A>チェックを呼び出す前として<xref:System.Windows.DependencyObject.SetValue%2A>依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d7f76-232">The value to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-234">
            <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-235">を通じて依存関係プロパティの場合は、その型の値の許容の範囲を指定できます、<xref:System.Windows.ValidateValueCallback>依存関係プロパティの登録で提供されています。</span><span class="sxs-lookup"><span data-stu-id="d7f76-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="d7f76-236">このメソッドを呼び出す<xref:System.Windows.DependencyProperty.IsValidType%2A>内部的にします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="d7f76-237">対象の依存関係プロパティがにない場合<xref:System.Windows.ValidateValueCallback>を呼び出すことと事実上同じではこのメソッドを呼び出す<xref:System.Windows.DependencyProperty.IsValidType%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="d7f76-238">依存関係プロパティが設定されている場合、 <xref:System.Windows.ValidateValueCallback>、場合<xref:System.Windows.DependencyProperty.IsValidType%2A>が返される`true`コールバックで実装された、値が返されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="d7f76-239">Null 値は、参照型の依存関係プロパティの有効な値の<xref:System.Nullable%601>、依存関係プロパティを返す`true`ような場合。</span><span class="sxs-lookup"><span data-stu-id="d7f76-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="d7f76-240">依存関係プロパティのどちらの参照がある場合も、<xref:System.Nullable%601>型、<xref:System.Windows.DependencyProperty.IsValidType%2A>が返されます`false`例外を発生ではなく null 値。</span><span class="sxs-lookup"><span data-stu-id="d7f76-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-241">次の例では<xref:System.Windows.DependencyProperty.IsValidValue%2A>チェックを呼び出す前として<xref:System.Windows.DependencyObject.SetValue%2A>依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-242">Gets the name of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-243">プロパティの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-244">このプロパティで指定された名前を取得する、`name`依存関係プロパティの登録時にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f76-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="d7f76-245">この名前は変更できないとすることはできません`null`または空の文字列。</span><span class="sxs-lookup"><span data-stu-id="d7f76-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="d7f76-246">同じ所有者型で重複する名前登録では、許可されていないと、重複を登録しようとしたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f76-247"><xref:System.Windows.DependencyProperty.Name%2A>プロパティの依存関係の"Property"というサフィックスを差し引いたその依存関係プロパティ識別子の名前と一致する規則に従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="d7f76-248">詳細については、「[カスタム依存関係プロパティ](~/docs/framework/wpf/advanced/custom-dependency-properties.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-249">次の例のクエリの依存関係プロパティ識別子では、さまざまな特性など、<xref:System.Windows.DependencyProperty.Name%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="d7f76-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-252">The metadata to apply to the dependency property on the overriding type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-254">プロパティ システムは、依存関係プロパティを使用する前に、依存関係プロパティ メタデータをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="d7f76-255">これは、特定のインスタンスは、依存関係プロパティを登録するクラスを使用して作成された時間に相当します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="d7f76-256">呼び出す<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>として自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、`forType`またはのようなインスタンス化で、このメソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f76-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="d7f76-257">インスタンス所有者の種類の存在にメタデータを変更しようとしてください。 例外は発生しませんが、プロパティ システムに一貫性のない動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="d7f76-258">このメソッドを使用して特定の派生クラスのオーバーライドのメタデータが確立されると、この同じ派生クラスのメタデータをオーバーライドしようで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="d7f76-259">指定したメタデータは、基本の所有者に存在する依存関係プロパティのプロパティのメタデータに統合されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="d7f76-260">元の基本メタデータで指定されたすべての特性が保持されます。基本のメタデータの特性は、新しいメタデータに変更された具体的には特性のみが上書きされます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="d7f76-261">いくつかの特性など<xref:System.Windows.PropertyMetadata.DefaultValue%2A>新しいメタデータで指定されている場合は置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="d7f76-262">他のユーザーなど<xref:System.Windows.PropertyChangedCallback>、結合されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="d7f76-263">最終的には、マージ動作によって異なりますので、ここで説明されている動作で使用される既存のプロパティのメタデータ クラス用のオーバーライドで使用されているプロパティのメタデータ型[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="d7f76-264">詳細については、次を参照してください。[依存関係プロパティ メタデータ](~/docs/framework/wpf/advanced/dependency-property-metadata.md)と[フレームワーク プロパティ メタデータ](~/docs/framework/wpf/advanced/framework-property-metadata.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d7f76-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d7f76-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="d7f76-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-268">The metadata to apply to the dependency property on the overriding type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="d7f76-269">The access key for a read-only dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="d7f76-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-272">この署名は、読み取り専用の依存関係プロパティの識別子の基になる実装を提供します (<xref:System.Windows.DependencyPropertyKey>) メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="d7f76-273">読み取り/書き込み依存関係プロパティのメタデータをオーバーライドする場合は、使用<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="d7f76-274">プロパティ システムは、依存関係プロパティを使用する前に、依存関係プロパティ メタデータをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="d7f76-275">これは、依存関係プロパティを登録するクラスの特定のオブジェクトが作成される時間に相当します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="d7f76-276">呼び出す<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>として自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、`forType`またはのようなインスタンス化で、このメソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f76-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="d7f76-277">インスタンス所有者の種類の存在にメタデータを変更しようとしてください。 例外は発生しませんが、プロパティ システムに一貫性のない動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="d7f76-278">このメソッドを使用して特定の派生クラスのオーバーライドのメタデータが確立されると、この同じ派生クラスのメタデータをオーバーライドしようで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="d7f76-279">指定したメタデータは、基本の所有者に存在する依存関係プロパティのプロパティのメタデータに統合されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="d7f76-280">元の基本メタデータで指定されたすべての特性が保持されます。基本のメタデータの特性は、新しいメタデータに変更された具体的には特性のみが上書きされます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="d7f76-281">いくつかの特性など<xref:System.Windows.PropertyMetadata.DefaultValue%2A>新しいメタデータで指定されている場合は置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="d7f76-282">他のユーザーなど<xref:System.Windows.PropertyChangedCallback>、結合されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="d7f76-283">マージ動作は、オーバーライドで使用されているプロパティのメタデータの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="d7f76-284">詳細については、次を参照してください。[依存関係プロパティ メタデータ](~/docs/framework/wpf/advanced/dependency-property-metadata.md)と[フレームワーク プロパティ メタデータ](~/docs/framework/wpf/advanced/framework-property-metadata.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-286">プロパティを登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-287">この値は、プロパティの登録時に指定されました。</span><span class="sxs-lookup"><span data-stu-id="d7f76-287">This value was provided during property registration.</span></span> <span data-ttu-id="d7f76-288">所有者は型であるか、元登録の場合、<xref:System.Windows.DependencyProperty>から生成された識別子を<xref:System.Windows.DependencyProperty.Register%2A>呼び出し、または自身の場合の所有者として追加する型、<xref:System.Windows.DependencyProperty>から生成された識別子を<xref:System.Windows.DependencyProperty.AddOwner%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="d7f76-289"><xref:System.Windows.DependencyProperty.OwnerType%2A> 、特定の<xref:System.Windows.DependencyProperty>は変更できないとすることはできません`null`で有効な<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-290">次の例では、依存関係プロパティ識別子に基づく、所有者型を取得する`dp`、し、その同じ識別子、所有者型でメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="d7f76-291">この操作は実際に<xref:System.Windows.DependencyProperty.DefaultMetadata%2A>で`dp`します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-292">Gets the type that the dependency property uses for its value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-293">
            <see cref="T:System.Type" />のプロパティの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-294">このプロパティを元のプロパティの登録によって宣言されたプロパティの値の型を報告する、`propertyType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f76-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="d7f76-295">ような<xref:System.Windows.DependencyProperty.Name%2A>、登録した後は、依存関係プロパティのプロパティの型は変更できません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-296">次の例のクエリの依存関係プロパティ識別子では、さまざまな特性など、<xref:System.Windows.DependencyProperty.PropertyType%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="d7f76-297">型名の文字列、<xref:System.Windows.DependencyProperty.PropertyType%2A>は返された<xref:System.Type>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-299">
            <see langword="true" /> 依存関係プロパティが読み取り専用の場合それ以外の場合、<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-300">読み取り専用の依存関係プロパティは、呼び出すことによって、プロパティ システムに登録されて、<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>メソッドではなく、<xref:System.Windows.DependencyProperty.Register%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f76-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="d7f76-301">添付プロパティを読み取り専用として登録することもできます。参照してください<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="d7f76-302">読み取り専用の依存関係プロパティが必要な<xref:System.Windows.DependencyPropertyKey>識別子ではなく<xref:System.Windows.DependencyProperty>メタデータをオーバーライドまたは値の設定などのメタデータの操作を実行する識別子。</span><span class="sxs-lookup"><span data-stu-id="d7f76-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="d7f76-303">コレクションを取得した場合は<xref:System.Windows.DependencyProperty>を呼び出すことによって識別子<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>別または[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]識別子、チェックを公開する、<xref:System.Windows.DependencyProperty.ReadOnly%2A>呼び出しを試みる前に値<xref:System.Windows.DependencyObject.SetValue%2A>または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>を使用します。識別子を表す依存関係プロパティが読み取り専用ではないことを確認する、入力パラメーターとして依存関係プロパティ識別子。</span><span class="sxs-lookup"><span data-stu-id="d7f76-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="d7f76-304">場合の値<xref:System.Windows.DependencyProperty.ReadOnly%2A>は`true`依存関係プロパティをプログラムでの参照を取得する方法はありません、<xref:System.Windows.DependencyPropertyKey>メタデータからまたはその依存関係プロパティの識別子、<xref:System.Windows.DependencyProperty>識別子。 識別子。呼び出すために、静的フィールドとして使用可能である必要があります<xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>に対する読み取り専用の依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="d7f76-305">カスタム依存関係プロパティを作成して読み取り専用として登録するの get アクセサーのみを定義する必要があります、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ラッパー プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="d7f76-306">それ以外の場合、クラスは、バックアップの依存関係プロパティへのアクセスと比較してプロパティのラッパーの混乱を招くオブジェクト モデルがあります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="d7f76-307">詳細については、次を参照してください。[カスタム依存関係プロパティ](~/docs/framework/wpf/advanced/custom-dependency-properties.md)または[読み取り専用依存関係プロパティ](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-308">次の例では、さまざまな依存関係プロパティのフィールドから、既定のメタデータと依存関係プロパティの識別子のプロパティを取得し、情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-309">Registers a dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-310">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="d7f76-311">The name must be unique within the registration namespace of the owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-312">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-313">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d7f76-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-317">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-318">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-319">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-320">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-321">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d7f76-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-325">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-326">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-327">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-328">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-329">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d7f76-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d7f76-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-334">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-335">次の例では、依存関係プロパティを検証コールバックを登録します (コールバック定義は表示されません。 コールバック定義の詳細については、「 <xref:System.Windows.ValidateValueCallback>)。</span><span class="sxs-lookup"><span data-stu-id="d7f76-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-336">Registers an attached property with the property system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-337">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-338">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-339">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d7f76-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-343">添付プロパティによって定義されたプロパティの概念は、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d7f76-344"> 依存関係プロパティとして添付プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="d7f76-345">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]添付プロパティは依存関係プロパティ、レポートのレイアウト特性などの操作の [全般] プロパティ システムで使用できるメタデータが適用されることができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="d7f76-346">詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="d7f76-347">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-348">次の例では、これを使用して抽象クラスで添付プロパティを登録します。<xref:System.Windows.DependencyProperty.RegisterAttached%2A>署名します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-349">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-350">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-351">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d7f76-352">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="d7f76-353">This can include the default value as well as other characteristics.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d7f76-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-357">添付プロパティによって定義されたプロパティの概念は、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d7f76-358"> 依存関係プロパティとして添付プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="d7f76-359">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]添付プロパティは依存関係プロパティ、レポートのレイアウト特性などの操作の [全般] プロパティ システムで使用できるメタデータが適用されることができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="d7f76-360">詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="d7f76-361">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d7f76-362">RegisterAttached を使用して、依存関係プロパティの値の継承</span><span class="sxs-lookup"><span data-stu-id="d7f76-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d7f76-363">1 つのシナリオでの依存関係プロパティを登録するため<xref:System.Windows.DependencyProperty.RegisterAttached%2A>の代わりに<xref:System.Windows.DependencyProperty.Register%2A>プロパティ値の継承をサポートすることです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="d7f76-364">依存関係プロパティの値の継承を登録する必要があります<xref:System.Windows.DependencyProperty.RegisterAttached%2A>しないを提供する静的メソッドを Get * とセット * を公開する true にアタッチされている場合でも、クラス、依存関係プロパティを公開するプロパティのラッパーのアクセサーを定義する場合でもプロパティのサポートのアクセサー。</span><span class="sxs-lookup"><span data-stu-id="d7f76-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d7f76-365">プロパティ値の継承は、非添付依存関係プロパティに見える場合があります、ランタイム ツリー内の要素の特定の境界を介する非添付プロパティの継承動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d7f76-366">効果的に接続されている場合は、プロパティを登録して、添付プロパティをグローバル プロパティは、プロパティ システムを要素ツリー内のすべての境界を越えてプロパティ値の継承が動作することを保証します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d7f76-367">常に使用する<xref:System.Windows.DependencyProperty.RegisterAttached%2A>に指定したプロパティを登録する<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>メタデータにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d7f76-368">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-369">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-370">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-371">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d7f76-372">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="d7f76-373">This can include the default value as well as other characteristics.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d7f76-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="d7f76-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-378">添付プロパティによって定義されたプロパティの概念は、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d7f76-379"> 依存関係プロパティとして添付プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="d7f76-380">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]添付プロパティは依存関係プロパティ、レポートのレイアウト特性などの操作の [全般] プロパティ システムで使用できるメタデータが適用されることができます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="d7f76-381">詳細については、「[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="d7f76-382">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d7f76-383">RegisterAttached を使用して、依存関係プロパティの値の継承</span><span class="sxs-lookup"><span data-stu-id="d7f76-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d7f76-384">1 つのシナリオでの依存関係プロパティを登録するため<xref:System.Windows.DependencyProperty.RegisterAttached%2A>の代わりに<xref:System.Windows.DependencyProperty.Register%2A>プロパティ値の継承をサポートすることです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="d7f76-385">依存関係プロパティの値の継承を登録する必要があります<xref:System.Windows.DependencyProperty.RegisterAttached%2A>しないを提供する静的メソッドを Get * とセット * を公開する true にアタッチされている場合でも、クラス、依存関係プロパティを公開するプロパティのラッパーのアクセサーを定義する場合でもプロパティのサポートのアクセサー。</span><span class="sxs-lookup"><span data-stu-id="d7f76-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d7f76-386">プロパティ値の継承は、非添付依存関係プロパティに見える場合があります、ランタイム ツリー内の要素の特定の境界を介する非添付プロパティの継承動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d7f76-387">効果的に接続されている場合は、プロパティを登録して、添付プロパティをグローバル プロパティは、プロパティ システムを要素ツリー内のすべての境界を越えてプロパティ値の継承が動作することを保証します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d7f76-388">常に使用する<xref:System.Windows.DependencyProperty.RegisterAttached%2A>に指定したプロパティを登録する<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>メタデータにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d7f76-389">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-390">次の例では、これを使用して抽象クラスで添付プロパティを登録します。<xref:System.Windows.DependencyProperty.RegisterAttached%2A>署名します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="d7f76-391">この添付プロパティは列挙型プロパティ、および登録が指定された値が列挙体の値であることを確認する検証コールバックを追加します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-392">Registers a read-only attached property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-393">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-394">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-395">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d7f76-396">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-399">このメソッドは、型を返します<xref:System.Windows.DependencyPropertyKey>であるのに対し<xref:System.Windows.DependencyProperty.RegisterAttached%2A>型を返します<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d7f76-400">通常、読み取り専用プロパティを表すキーが行われないパブリックで呼び出すことによって、依存関係プロパティの値を設定するキーを使用できるため<xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d7f76-401">クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限する推奨<xref:System.Windows.DependencyPropertyKey>クラスまたはアプリケーション ロジックの一部としてその依存関係プロパティを設定するために必要なコードの部分のみにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d7f76-402">値を公開することで、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することをお勧めも<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType>として、`public static readonly`フィールド、クラスにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d7f76-403">読み取り専用の添付プロパティは、添付プロパティの主なシナリオがでの使用のために、まれなシナリオ[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="d7f76-404">パブリック セッターを持たない添付プロパティを設定することはできません[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。</span><span class="sxs-lookup"><span data-stu-id="d7f76-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="d7f76-405">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d7f76-406">RegisterAttached を使用して、依存関係プロパティの値の継承</span><span class="sxs-lookup"><span data-stu-id="d7f76-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d7f76-407">プロパティ値の継承をサポートするためには、1 つのシナリオとして、依存関係プロパティを登録するためです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="d7f76-408">依存関係プロパティの値の継承を登録する必要があります<xref:System.Windows.DependencyProperty.RegisterAttached%2A>しないを提供する静的メソッドを Get * とセット * を公開する true にアタッチされている場合でも、クラス、依存関係プロパティを公開するプロパティのラッパーのアクセサーを定義する場合でもプロパティのサポートのアクセサー。</span><span class="sxs-lookup"><span data-stu-id="d7f76-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d7f76-409">プロパティ値の継承は、非添付依存関係プロパティに見える場合があります、ランタイム ツリー内の要素の特定の境界を介する非添付プロパティの継承動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d7f76-410">効果的に接続されている場合は、プロパティを登録して、添付プロパティをグローバル プロパティは、プロパティ システムを要素ツリー内のすべての境界を越えてプロパティ値の継承が動作することを保証します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d7f76-411">常に使用する<xref:System.Windows.DependencyProperty.RegisterAttached%2A>に指定したプロパティを登録する<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>メタデータにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d7f76-412">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-413">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-414">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-415">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="d7f76-416">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d7f76-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-420">このメソッドは、型を返します<xref:System.Windows.DependencyPropertyKey>であるのに対し<xref:System.Windows.DependencyProperty.RegisterAttached%2A>型を返します<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d7f76-421">型を表すキーでは通常、<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d7f76-422">通常、読み取り専用プロパティを表すキーが行われないパブリックで呼び出すことによって、依存関係プロパティの値を設定するキーを使用できるため<xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d7f76-423">クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限する推奨<xref:System.Windows.DependencyPropertyKey>クラスまたはアプリケーション ロジックの一部としてその依存関係プロパティを設定するために必要なコードの部分のみにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d7f76-424">値を公開することで、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することをお勧めも<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType>として、`public static readonly`フィールド、クラスにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d7f76-425">読み取り専用の添付プロパティは、添付プロパティの主なシナリオがでの使用のために、まれなシナリオ[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="d7f76-426">パブリック セッターを持たない添付プロパティを設定することはできません[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。</span><span class="sxs-lookup"><span data-stu-id="d7f76-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="d7f76-427">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="d7f76-428">RegisterAttached を使用して、依存関係プロパティの値の継承</span><span class="sxs-lookup"><span data-stu-id="d7f76-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="d7f76-429">代わりに接続されている場合は、依存関係プロパティを登録するための 1 つの特定シナリオ<xref:System.Windows.DependencyProperty.Register%2A>プロパティ値の継承をサポートすることです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="d7f76-430">依存関係プロパティの値の継承を登録する必要があります<xref:System.Windows.DependencyProperty.RegisterAttached%2A>しないを提供する静的メソッドを Get * とセット * を公開する true にアタッチされている場合でも、クラス、依存関係プロパティを公開するプロパティのラッパーのアクセサーを定義する場合でもプロパティのサポートのアクセサー。</span><span class="sxs-lookup"><span data-stu-id="d7f76-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="d7f76-431">プロパティ値の継承は、非添付依存関係プロパティに見える場合があります、ランタイム ツリー内の要素の特定の境界を介する非添付プロパティの継承動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="d7f76-432">効果的に接続されている場合は、プロパティを登録して、添付プロパティをグローバル プロパティは、プロパティ システムを要素ツリー内のすべての境界を越えてプロパティ値の継承が動作することを保証します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="d7f76-433">常に使用する<xref:System.Windows.DependencyProperty.RegisterAttached%2A>に指定したプロパティを登録する<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>メタデータにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="d7f76-434">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-435">Registers a dependency property as a read-only dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-436">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-437">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-438">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-439">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-442">このメソッドは、型を返します<xref:System.Windows.DependencyPropertyKey>であるのに対し<xref:System.Windows.DependencyProperty.RegisterAttached%2A>型を返します<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d7f76-443">通常、読み取り専用プロパティを表すキーが行われないパブリックで呼び出すことによって、依存関係プロパティの値を設定するキーを使用できるため<xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d7f76-444">クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限する推奨<xref:System.Windows.DependencyPropertyKey>クラスまたはアプリケーション ロジックの一部としてその依存関係プロパティを設定するために必要なコードの部分のみにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d7f76-445">値を公開することで、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することをお勧めも<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType>として、`public static readonly`フィールド、クラスにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d7f76-446">読み取り専用の依存関係プロパティは、非常に典型的なシナリオ両方既存[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]とカスタマイズのシナリオのため、他の[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]場合でも、そのプロパティをによって設定する必要はありませんは、機能に依存関係プロパティが必要な可能性があります呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="d7f76-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="d7f76-447">に基づいてなどの依存関係プロパティを取得するその他のプロパティ システム操作の基礎として読み取り専用の依存関係プロパティの値を使用する、<xref:System.Windows.Trigger>スタイル内で、依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="d7f76-448">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f76-449">次の例では、登録、`AquariumSize`読み取り専用の依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="d7f76-450">例では、定義`AquariumSizeKey`(アセンブリになったため、他のクラスは、メタデータをオーバーライドできます) 内部のキーと公開としては、そのキーに基づいて依存関係プロパティの識別子として`AquariumSizeProperty`します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="d7f76-451">ラッパーを作成することも、 `AquariumSize`、get アクセサーのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d7f76-452">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="d7f76-453">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="d7f76-454">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="d7f76-455">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="d7f76-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f76-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-459">このメソッドは、型を返します<xref:System.Windows.DependencyPropertyKey>であるのに対し<xref:System.Windows.DependencyProperty.RegisterAttached%2A>型を返します<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="d7f76-460">通常、読み取り専用プロパティを表すキーが行われないパブリックで呼び出すことによって、依存関係プロパティの値を設定するキーを使用できるため<xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="d7f76-461">クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限する推奨<xref:System.Windows.DependencyPropertyKey>クラスまたはアプリケーション ロジックの一部としてその依存関係プロパティを設定するために必要なコードの部分のみにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="d7f76-462">値を公開することで、読み取り専用の依存関係プロパティの依存関係プロパティ識別子を公開することをお勧めも<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType>として、`public static readonly`フィールド、クラスにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="d7f76-463">読み取り専用の依存関係プロパティは、非常に典型的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="d7f76-464">に基づいてなどの依存関係プロパティを取得するその他のプロパティ システム操作の基礎として読み取り専用の依存関係プロパティの値を使用する、<xref:System.Windows.Trigger>スタイル内で、依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="d7f76-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="d7f76-465">依存関係プロパティの登録の詳細については、次を参照してください。<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="d7f76-466">読み取り専用の依存関係プロパティの検証は、重要度の低い可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d7f76-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="d7f76-467">キーの指定した非パブリック アクセス レベルは、任意の無効な入力の可能性を減らします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-468">Returns the string representation of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f76-469">The string representation of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-470">この実装を返します、<xref:System.Windows.DependencyProperty.Name%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="d7f76-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-472"><xref:System.Windows.DependencyProperty.UnsetValue> シナリオに使用される sentinel 値は、場所、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プロパティ システムは、要求を決定できません<xref:System.Windows.DependencyProperty>値。</span><span class="sxs-lookup"><span data-stu-id="d7f76-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="d7f76-473"><xref:System.Windows.DependencyProperty.UnsetValue> 使用がなく`null`ため、 `null` 、有効なプロパティ値だけでなく、有効な可能性があります (および頻繁に使用される)<xref:System.Windows.PropertyMetadata.DefaultValue%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="d7f76-474"><xref:System.Windows.DependencyProperty.UnsetValue> うちは返されません<xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d7f76-475">呼び出すと<xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>の依存関係プロパティで、<xref:System.Windows.DependencyObject>インスタンスを次のいずれかに該当。</span><span class="sxs-lookup"><span data-stu-id="d7f76-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="d7f76-476">依存関係プロパティ メタデータで確立された既定値があるし、その値が返されます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="d7f76-477">この値を決める要因<xref:System.Windows.DependencyProperty.DefaultMetadata%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="d7f76-478">その他の値が、プロパティ システムによって確立されているし、既定値は関連性がなくなった。</span><span class="sxs-lookup"><span data-stu-id="d7f76-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="d7f76-479">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d7f76-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="d7f76-480">設定、<xref:System.Windows.PropertyMetadata.DefaultValue%2A>の<xref:System.Windows.DependencyProperty.UnsetValue>は具体的には許可されません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="d7f76-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> 返します<xref:System.Windows.DependencyProperty.UnsetValue>ときに要求されたプロパティが設定されていないローカルです。</span><span class="sxs-lookup"><span data-stu-id="d7f76-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="d7f76-482"><xref:System.Windows.DependencyProperty.UnsetValue> 戻り値として使用する場合の特別な意味を持つ、<xref:System.Windows.CoerceValueCallback>します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="d7f76-483">詳細については、次を参照してください。[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)です。</span><span class="sxs-lookup"><span data-stu-id="d7f76-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="d7f76-484">データベースにバインドしている場合ことに注意<xref:System.Windows.DependencyProperty.UnsetValue>と等価でない<xref:System.DBNull.Value>、方法と同様の方法で<xref:System.DBNull.Value>true null と等価ではありません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f76-485">Gets the value validation callback for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f76-486">指定した、この依存関係プロパティの値検証コールバック、<paramref name="validateValueCallback" />元の依存関係プロパティの登録でのパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f76-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f76-487">このプロパティが格納されます`null`依存関係プロパティに登録済みの検証コールバックがありません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="d7f76-488">コールバックが静的な意味で動作する必要があります値を検証します。 検証を使用して適用、<xref:System.Windows.ValidateValueCallback>指定された値は、特定のインスタンスに対して有効かどうかを判断することはできません。</span><span class="sxs-lookup"><span data-stu-id="d7f76-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="d7f76-489">コールバックを依存関係プロパティを持つすべてのオブジェクトが必要がありますまたは有効なものとして指定された値を許容しないようにするかどうかのみを確認できます。</span><span class="sxs-lookup"><span data-stu-id="d7f76-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="d7f76-490">使用して、特定のインスタンスには、その他の依存関係プロパティの値を知ることに依存している検証を実行する必要がある場合、<xref:System.Windows.CoerceValueCallback>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d7f76-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="d7f76-491"><xref:System.Windows.CoerceValueCallback>依存関係プロパティ識別子内で直接ではなく、依存関係プロパティのメタデータの一環として登録します。</span><span class="sxs-lookup"><span data-stu-id="d7f76-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="d7f76-492">詳細については、次を参照してください。[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)です。</span><span class="sxs-lookup"><span data-stu-id="d7f76-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>