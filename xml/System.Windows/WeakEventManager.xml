<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8241e2ff47b51e906cfa1cf3ca25aac03e6ca974" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37489331" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>*弱いイベント パターン*で使用されるイベント マネージャーの基本クラスです。 このマネージャーは、WeakEvent パターンを使用するイベント (またはコールバック) 用のリスナーを追加または削除します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、イベント ソースには、イベント リスナーの独立したオブジェクトの有効期間がある場合は、弱いイベント パターンを使用します。 サーバーの全体の機能をディスパッチ イベントを使用して、<xref:System.Windows.WeakEventManager>ガベージ コレクションのソース オブジェクトが解決しない場合でも、リスナーのハンドラーを使用します。 これに対しを使用して定期的なイベント フックアップ、`+=`演算子により、リスナーへの参照を保持するために切断された可能性のあるソース。 これは、受信側がガベージ コレクション、迅速にすることを防ぎます。  
  
 一般的な状況の 1 つのソースとリスナーの有効期間の関係を使用する必要が弱いイベント パターンのでは、データ バインディングの更新イベントの処理です。  
  
 弱いイベント パターンは、コールバックと通常のイベントにも使用できます。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>カスタムの例については<see cref="T:System.Windows.WeakEventManager" />を参照してください[弱いイベント パターン](~/docs/framework/wpf/advanced/weak-event-patterns.md)します。</para>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>派生クラスのコンストラクターによって初期化子として使用されると、基本クラスの値を初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">イベントが処理されるオブジェクト。</param>
        <param name="args">イベントが配信するイベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>管理対象のイベントを各リスナーに配信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Windows.WeakEventManager.DeliverEvent%2A>メソッドが追加または削除するイベント ハンドラー内から、<xref:System.Windows.WeakEventManager.StartListening%2A>と<xref:System.Windows.WeakEventManager.StopListening%2A>サブクラスの実装。  
  
 呼び出す場合、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>メソッドで、`AddListener`クラスの実装は、イベントを受信するリスナーのリストは、基になるコレクションで保持されます。 (`AddListener`インターフェイスまたはクラスのコントラクトの一部ではありません。 `AddListener` 推奨される名前を呼び出す、manager クラスのメソッドは、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>し、イベントの弱いイベント パターンのリスナーを追加します)。  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 1 つのリストにリスナーを追加します。 マネージャーの実装にイベントごとのリスナーの 1 つ以上のリストが保持している場合は使用しないでください<xref:System.Windows.WeakEventManager.DeliverEvent%2A>または<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>します。 代わりに、実装する必要があります作成独自<xref:System.Windows.WeakEventManager.ListenerList>インスタンス、`AddListener`リスナーを該当する一覧に追加する必要があり、イベントを呼び出すことによって適切なリスナーのリストを配信する<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">イベントが処理されるオブジェクト。</param>
        <param name="args">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <param name="list">指定された <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</param>
        <summary>管理対象のイベントを、指定されたリスト内の各リスナーに配信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、マネージャーの実装は、イベント データのキャプチャされた情報に基づいて、個別のリスナーのリストを保持する場合は、必要があります。 この高度な手法を使用する場合、作成および、マネージャーの実装の一部として個別の一覧を管理する必要があり、特定のリストにリスナーを追加する方法を提供する必要があります。 ハンドラーの実装を生のイベントをリッスンする必要があります機能、条件による、リストを区別するために使用し、適切なリストにのみ、イベントを配信します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <see cref="T:System.Windows.WeakEventManager" /> を取得する対象となる型。</param>
        <summary>指定された型に使用される <see cref="T:System.Windows.WeakEventManager" /> 実装を返します。</summary>
        <returns>一致する <see cref="T:System.Windows.WeakEventManager" /> 実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 実装が、渡されたを使用してこのメソッドを呼び出す`managerType`します。 返された<xref:System.Windows.WeakEventManager>はどのイベントを受信した、および起動するには、どのプライベート クラス ハンドラーを決定する差別化要因として使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">要求されたソースの 0 から始まるインデックス。</param>
        <summary>指定したソース用に格納されているデータを取得または設定します。</summary>
        <value>マネージャーによってこのソース用に格納されているデータ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスには、どのようなデータとこのインデクサーに格納する型を選択できます。 通常これとして実装されます、<xref:System.Windows.WeakEventManager.ListenerList>リスナーへの弱い参照の一覧します。 場合、この種類を変更する必要がありますのみ、<xref:System.Windows.WeakEventManager.ListenerList>型は、必要な情報を含めることはできません。 そのため、オーバーライドする必要が場合、<xref:System.Windows.WeakEventManager.Purge%2A>メソッド基になる型のすべてのクリーンアップが正常に実行できるようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
        <returns>リスナーをイベントに格納する新しいオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">ハンドラー デリゲートがサブスクライブするソース オブジェクト。</param>
        <param name="handler">
          <c>source</c> で発生したイベントを処理するデリゲート。</param>
        <summary>指定されたソースのイベント ハンドラーとして指定したデリゲートを追加します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">リスナーを関連付けるソース。</param>
        <param name="listener">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</param>
        <summary>指定されたリスナーを、管理対象のイベントの指定されたソースに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manager クラス内でこのメソッドを呼び出す`AddListener`メソッド<xref:System.Windows.WeakEventManager>実装します。 `AddListener` 推奨される名前は、弱いイベント パターン用のリスナーを追加するには、他のクラスを有効にする、マネージャー クラスで定義する静的メソッド。 `AddListener` 2 つのパラメーターを受け取る必要があります。`source`リスナーが接続されている場合、`listener`インスタンス。 `AddListener`実装を呼び出し、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>メソッドを現在のマネージャーと同じ 2 つのパス パラメーター。  
  
 場合、リスナーのリストが空になる、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>呼び出し、<xref:System.Windows.WeakEventManager.StartListening%2A>メソッド特定を内部的には、どの呼び出しが<xref:System.Windows.WeakEventManager.StartListening%2A>ポリモーフィズムをオーバーライドします。  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 1 つの内部にリスナーを追加します。<xref:System.Windows.WeakEventManager.ListenerList>あたり`source`します。 マネージャーの実装にイベント ソースの組み合わせごとにリスナーの 1 つ以上のリストが保持している場合は使用しないでください<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>します。 代わりに、実装する必要があります作成独自<xref:System.Windows.WeakEventManager.ListenerList>インスタンス、`AddListener`リスナーを該当する一覧に追加する必要があり、呼び出すことによって適切なリスナーのリストにイベントを配信する必要があります、 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> ではなくイベント<xref:System.Windows.WeakEventManager.DeliverEvent%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">ハンドラーを削除するソース。</param>
        <param name="handler">
          <c>source</c> から削除するデリゲート。</param>
        <summary>指定したソースから、以前追加されたハンドラーを削除します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">リスナーを削除するソース。</param>
        <param name="listener">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</param>
        <summary>以前に追加されたリスナーを指定されたソースから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manager クラス内でこのメソッドを呼び出す`RemoveListener`メソッド<xref:System.Windows.WeakEventManager>実装します。 `RemoveListener` 推奨される名前は、弱いイベント パターン用のリスナーを削除するには、他のクラスを有効にする、マネージャー クラスで定義する静的メソッド。 `RemoveListener` 2 つのパラメーターを受け取る必要があります。`source`リスナーを削除すると、場所、および`listener`クラス。 `RemoveListener`実装を呼び出し、<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>メソッドを現在のマネージャーと同じ 2 つのパス パラメーター。  
  
 呼び出し<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>の一覧で、最後のリスナーを削除します。<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>呼び出し、<xref:System.Windows.WeakEventManager.StopListening%2A>メソッド特定を内部的には、どの呼び出しが<xref:System.Windows.WeakEventManager.StopListening%2A>ポリモーフィズムをオーバーライドします。  
  
 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 1 つの内部からのリスナーを削除します。<xref:System.Windows.WeakEventManager.ListenerList>あたり`source`します。 マネージャーの実装にイベント ソースの組み合わせごとにリスナーの 1 つ以上のリストが保持している場合は使用しないでください<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>します。 代わりに、実装する必要があります作成独自<xref:System.Windows.WeakEventManager.ListenerList>インスタンス、 `RemoveListener` 、該当する一覧からのリスナーを削除する必要があり、呼び出すことによって適切なリスナーのリストにイベントを配信する必要があります、<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>メソッドの代わりに、<xref:System.Windows.WeakEventManager.DeliverEvent%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">リッスンされているイベントのソース。</param>
        <param name="data">チェックするデータ。 このオブジェクトは、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> 実装であることが求められます。</param>
        <param name="purgeAll">
          <c>source</c> のリッスンを中止し、すべてのエントリを <c>data</c> から完全に削除する場合は <see langword="true" />。</param>
        <summary>指定されたソースのデータ リストから、アクティブでないリスナー エントリを削除します。 いくつかのエントリが実際にリストから削除された場合は、<see langword="true" /> を返します。</summary>
        <returns>一部のエントリが実際に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager.Purge%2A>メソッドをデータがある場合は、すべてのエントリを削除する既定の実装には、<xref:System.Windows.WeakEventManager.ListenerList>します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>型、基になる場合、<see cref="P:System.Windows.WeakEventManager.Item(System.Object)" />以外<see cref="T:System.Windows.WeakEventManager.ListenerList" />、またはを超えるデータが含まれている、 <see cref="T:System.Windows.WeakEventManager.ListenerList" />、オーバーライドする必要があります、<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />メソッド。オーバーライドでは、代替型の項目の一覧については、消去の動作を提供する必要があります。一般に、オーバーライドは基本実装を呼び出すことがなく動作を提供する必要があります。場合、特定<see cref="T:System.Windows.WeakEventManager.ListenerList" />消去呼び出しが引き続き必要<see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />します。</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータ テーブルで読み取りロックを確立し、<see cref="T:System.IDisposable" /> を返します。</summary>
        <value>
          <see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 含まれるテーブルに対するクエリの派生クラスで<xref:System.Windows.WeakEventManager.Item%2A>内で常に実行する必要があります、`using (ReadLock) { ... }`既に書き込みロック内にあるクエリ以外の句。 これらのクエリは、クラスがより高度なサポートされている場合に必要な可能性があります`AddListener`を超えてより多くのデータが必要な実装、`source`と`listener`を使用して、<xref:System.Windows.WeakEventManager.Item%2A>余分な情報を格納するコレクション。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">リスナー情報を削除するソース。</param>
        <summary>指定したソースのリスナーをすべて削除します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるリスナー リストに含まれる未使用エントリの削除を、優先順位の低いスレッドで実行するように要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Windows.WeakEventManager.ScheduleCleanup%2A>メソッドの呼び出しに似ていますが、<xref:System.Windows.WeakEventManager.Purge%2A>スレッド優先順位の低いでの現在のマネージャーのリストのメソッドで、`purgeAll`パラメーターに設定`false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">新しいイベント マネージャーを設定する型。</param>
        <param name="manager">新しいイベント マネージャー。</param>
        <summary>指定したマネージャーの種類に対する現在のマネージャーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Windows.WeakEventManager.SetCurrentManager%2A>への呼び出しによってその場合、マネージャーを初期化するメソッドが必要な`CurrentManager`プロパティを<xref:System.Windows.WeakEventManager>実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">リッスンを開始するソース。</param>
        <summary>派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> メソッドが初めて呼び出された後、マネージャーは、提供されたソースからの関連イベントを処理するたびに、<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> または <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> を呼び出している状態になる必要があります。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 上書きは、提供されたハンドラーを追加する必要があります<paramref name="source" />します。ハンドラーは、マネージャー自体で宣言されています。クラス ハンドラーをパブリックにすることはできませんし、管理対象のイベントへの応答でのみ呼び出す必要があります。クラス ハンドラーを呼び出す必要があります、<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />メソッドまたは<see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />メソッド適切にします。</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">リッスンを停止するソース。</param>
        <summary>派生クラスでオーバーライドされると、指定されたソースで管理対象のイベントのリッスンを停止します。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> によって追加されると、実装は、クラスのハンドラーを削除する必要があります、<see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />メソッド。リスナーを削除するリスナーのリストを消去しないでください。代わりに、(おそらくは一時的に)、クラス ハンドラーを切断する必要がありますのみにします。その他のメソッドはなど、リスト全体をクリアするために使用できる、<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />メソッドを<paramref name="purgeAll" />パラメーターに設定<see langword="true" />します。</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータ テーブルで書き込みロックを確立し、<see cref="T:System.IDisposable" /> を返します。</summary>
        <value>
          <see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスでは、基になるデータ テーブルに対するすべての変更が内で発生する、`using (WriteLock) { ... }`句。 これらの変更、クラスがより高度なサポートされている場合に必要な場合があります`AddListener`を超えてより多くのデータが必要な実装、`source`と`listener`を使用して、<xref:System.Windows.WeakEventManager.Item%2A>余分な情報を格納するコレクション。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>