<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac94cdae430bda3a59a21292d13f613f0012919d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac94cdae430bda3a59a21292d13f613f0012919d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>弱いイベント パターン<ept id="p1">*</ept>で使用されるイベント マネージャーの基本クラスです。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">このマネージャーは、WeakEvent パターンを使用するイベント (またはコールバック) 用のリスナーを追加または削除します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">通常、イベント ソースにオブジェクトの有効期間とは別のイベント リスナーがある場合は、弱いイベント パターンを使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>Using the central event dispatching capability of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">サーバーの全体の機能をディスパッチ イベントを使用して、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>がガベージ コレクションされるソース オブジェクトが解決しない場合でも、リスナーのハンドラーを使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">これに対し、通常のイベント フックアップを使用して、<ph id="ph1">`+=`</ph>演算子では、リスナーへの参照を保持するために切断された可能性のあるソースがします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">これは、受信側がガベージ コレクション、迅速にすることを防ぎます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">1 つ一般的なソースとリスナーの有効期間の関係を使用する必要がありますの弱いイベント パターンは、データのバインドからの更新イベントの処理です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">弱いイベント パターンは、コールバックと通常のイベントにも使用できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>For an example of a custom <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
          <target state="translated">カスタムの例については<ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>弱いイベント パターン<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.#ctor">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">派生クラスのコンストラクターによって初期化子として使用されると、基本クラスの値を初期化します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">イベントが処理されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data for the event to deliver.</source>
          <target state="translated">イベントが配信するイベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">管理対象のイベントを各リスナーに配信します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method from within the event handlers that are added or removed by the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> implementations of subclasses.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>メソッドが追加または削除するイベント ハンドラー内から、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph>サブクラスの実装です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method in your <ph id="ph2">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">呼び出す場合は、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>メソッドで、<ph id="ph2">`AddListener`</ph>クラスの実装は、イベントを受け取るリスナーのリストは、基になるコレクションに保持されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph>インターフェイスまたはクラスのコントラクトの一部ではありません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and adds weak event pattern listeners for the event.)</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> 呼び出すマネージャー クラスのメソッドに推奨される名前は、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>弱いイベント パターンのイベント リスナーを追加します)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> 1 つのリストには、リスナーを追加します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">マネージャーの実装にイベントごとのリスナーの 1 つ以上のリストが保持している場合は使用しないでください<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">代わりに、実装する必要があります作成独自<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>インスタンス、<ph id="ph2">`AddListener`</ph>リスナーを該当する一覧に追加する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">イベントが処理されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Delivers the event being managed to each listener in the provided list.</source>
          <target state="translated">管理対象のイベントを、指定されたリスト内の各リスナーに配信します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</source>
          <target state="translated">このメソッドは、マネージャーの実装は、イベント データでキャプチャされた情報に基づいて個別のリスナーのリストを保持する場合は、必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</source>
          <target state="translated">この高度な手法を使用する場合、作成し、マネージャーの実装の一部として、個別のリストを保持する必要がありますおよび特定のリストにリスナーを追加する方法を提供する必要があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</source>
          <target state="translated">ハンドラーの実装を生のイベントをリッスンする必要がありますに対して操作を実行、条件のリストを区別するために使用して、適切なリストまたはリストにのみイベントを配信することです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The type to obtain the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> を取得する対象となる型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation that is used for the provided type.</source>
          <target state="translated">指定された型に使用される <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> 実装を返します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The matching <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> 実装。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementations call this method using their passed <ph id="ph2">`managerType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> 実装は、渡されたを使用してこのメソッドを呼び出す<ph id="ph2">`managerType`</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph>を調べ、どのイベントを受信しましたがどのプライベート クラス ハンドラーを呼び出すための差別化要因として使用されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">要求されたソースの 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">指定したソース用に格納されているデータを取得または設定します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">マネージャーによってこのソース用に格納されているデータ。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">派生クラスには、データとこのインデクサーに格納する型を選択できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Typically this is implemented as a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, which is a list of weak references to listeners.</source>
          <target state="translated">通常これとして実装される、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>リスナーへの弱い参照の一覧です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>You would only have to change this type if the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> type cannot contain your required information.</source>
          <target state="translated">この型を変更する場合にのみ必要があります、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>型は、必要な情報を含めることはできません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>If so, you will have to override the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">そのため、オーバーライドする必要が場合、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph>メソッド基になる型のすべてのクリーンアップが正常に実行できるようにします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">イベントのリスナーを格納する新しいオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">リスナーをイベントに格納する新しいオブジェクト。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">ハンドラー デリゲートがサブスクライブするソース オブジェクト。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The delegate that handles the event that is raised by <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> で発生したイベントを処理するデリゲート。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">指定されたソースのイベント ハンドラーとして指定したデリゲートを追加します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to attach listeners to.</source>
          <target state="translated">リスナーを関連付けるソース。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">待機するクラス (<ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> を実装する必要があります)。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">指定されたリスナーを、管理対象のイベントの指定されたソースに追加します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">マネージャー クラス内には、このメソッドを呼び出す<ph id="ph1">`AddListener`</ph>メソッド<ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> 推奨される名前は、弱いイベント パターンにリスナーを追加するには、他のクラスを有効にする、マネージャー クラスで静的メソッドを定義します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> 2 つのパラメーターを受け取る必要があります。<ph id="ph2">`source`</ph>リスナーが接続されている場所と<ph id="ph3">`listener`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>実装、呼び出し、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>現在のマネージャーとパラメーターを渡す、同じ 2 つのメソッドです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If the list of listeners was previously empty, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">リスナーのリストが以前は空の場合<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>呼び出し、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph>メソッドに固有の仕様を呼び出すを内部的には、<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph>ポリモーフィズムをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> 1 つの内部リスナーを追加<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>あたり<ph id="ph3">`source`</ph>します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">マネージャーの実装にイベント ソースの組み合わせごとのリスナーの 1 つ以上のリストが保持している場合は使用しないでください<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> event instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">代わりに、実装する必要があります作成独自<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>インスタンス、<ph id="ph2">`AddListener`</ph>リスナーを該当する一覧に追加する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります、<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>イベントの代わりに、<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The source to remove the handler from.</source>
          <target state="translated">ハンドラーを削除するソース。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The delegate to remove from <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> から削除するデリゲート。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">指定したソースから、以前追加されたハンドラーを削除します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to remove listeners from.</source>
          <target state="translated">リスナーを削除するソース。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">待機するクラス (<ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph> を実装する必要があります)。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">以前に追加されたリスナーを指定されたソースから削除します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">マネージャー クラス内には、このメソッドを呼び出す<ph id="ph1">`RemoveListener`</ph>メソッド<ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> 推奨される名前は、弱いイベント パターンにリスナーを削除するには、他のクラスを有効にする、マネージャー クラスで静的メソッドを定義します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> 2 つのパラメーターを受け取る必要があります。<ph id="ph2">`source`</ph>リスナーを削除すると、場所、および<ph id="ph3">`listener`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>実装、呼び出し、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>現在のマネージャーとパラメーターを渡す、同じ 2 つのメソッドです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If a call to <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes the last listener in the list, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> calls the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">呼び出し<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>一覧で、最後のリスナーを削除<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>呼び出し、<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph>メソッドに固有の仕様を呼び出すを内部的には、<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph>ポリモーフィズムをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes listeners from a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> 1 つの内部からのリスナーを削除<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>あたり<ph id="ph3">`source`</ph>します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</source>
          <target state="translated">マネージャーの実装にイベント ソースの組み合わせごとのリスナーの 1 つ以上のリストが保持している場合は使用しないでください<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> method instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">代わりに、実装する必要があります作成独自<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>インスタンス、 <ph id="ph2">`RemoveListener`</ph> 、該当する一覧からのリスナーを削除する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります、<ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>メソッドの代わりに、<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The source for events being listened to.</source>
          <target state="translated">リッスンされているイベントのソース。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The data to check.</source>
          <target state="translated">チェックするデータ。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>This object is expected to be a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> implementation.</source>
          <target state="translated">このオブジェクトは、<ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> 実装であることが求められます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to stop listening to <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>, and completely remove all entries from <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> のリッスンを中止し、すべてのエントリを <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept> から完全に削除する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">指定されたソースのデータ リストから、アクティブでないリスナー エントリを削除します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed from the list.</source>
          <target state="translated">いくつかのエントリが実際にリストから削除された場合は、<ph id="ph1">&lt;see langword="true" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">一部のエントリが実際に削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method has a default implementation that will remove all entries when data is a <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph>メソッドには既定の実装でデータが場合に、すべてのエントリを削除すること、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If the underlying type for the <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> is something other than <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, or contains data beyond a <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, you must override the <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">型、基になる場合、<ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph>以外<ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>、または範囲を超えてデータに含まれている、 <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>、オーバーライドする必要があります、<ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The override should provide purge behavior for the alternate type items list.</source>
          <target state="translated">オーバーライドでは、代替の型の項目リストのパージ動作を提供する必要があります。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Generally, the override should provide behavior without calling the base implementation.</source>
          <target state="translated">一般に、オーバーライドでは、基本実装を呼び出すことがなく動作を提供する必要があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If a specific <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> still needs clearing, call <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</source>
          <target state="translated">場合は、特定<ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>クリアリング、呼び出す必要がある<ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>Establishes a read-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">基になるデータ テーブルで読み取りロックを確立し、<ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="using" /&gt;</ph> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>In derived classes, queries to the table contained in <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> should always occur within a <ph id="ph2">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">派生クラスに含まれているテーブルにクエリ<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph>内で常に実行する必要があります、<ph id="ph2">`using (ReadLock) { ... }`</ph>書き込みロック内では、既にクエリを除くの句。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">これらのクエリは、クラスがより高度なサポートされている場合に必要な可能性があります<ph id="ph1">`AddListener`</ph>を超える複数のデータを必要とする実装、<ph id="ph2">`source`</ph>と<ph id="ph3">`listener`</ph>を使用して、<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph>余分な情報を格納するコレクション。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>The source to remove listener information for.</source>
          <target state="translated">リスナー情報を削除するソース。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">指定したソースのリスナーをすべて削除します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">基になるリスナー リストに含まれる未使用エントリの削除を、優先順位の低いスレッドで実行するように要求します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method on the current manager's list, at lower thread priority, with the <ph id="ph3">`purgeAll`</ph> parameter set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph>メソッドの呼び出しに似ていますが、<ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph>現在マネージャーの一覧で、スレッドの優先順位の低い、メソッドで、<ph id="ph3">`purgeAll`</ph>パラメーターに設定<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The type to set the new event manager.</source>
          <target state="translated">新しいイベント マネージャーを設定する型。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The new event manager.</source>
          <target state="translated">新しいイベント マネージャー。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">指定したマネージャーの種類に対する現在のマネージャーを設定します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> method to initialize a manager, if that is required by a call to your <ph id="ph2">`CurrentManager`</ph> property on a <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph>への呼び出しによって初期化に、マネージャーは、そのメソッドが必要な<ph id="ph2">`CurrentManager`</ph>プロパティを<ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The source to begin listening on.</source>
          <target state="translated">リッスンを開始するソース。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>After the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method is first called, the manager should be in the state of calling <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> whenever the relevant event from the provided source is handled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> メソッドが初めて呼び出された後、マネージャーは、提供されたソースからの関連イベントを処理するたびに、<ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> または <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> を呼び出している状態になる必要があります。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> overrides should add a handler to the provided <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> 上書きを指定されたハンドラーを追加する必要があります<ph id="ph2">&lt;paramref name="source" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The handler is declared by the manager itself.</source>
          <target state="translated">ハンドラーは、マネージャー自体で宣言されています。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should not be public, and it should only be called in response to the event being managed.</source>
          <target state="translated">クラスのハンドラーをパブリックにすることはできませんし、管理対象のイベントへの応答でのみ呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should call the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> method or the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> method appropriately.</source>
          <target state="translated">クラスのハンドラーを呼び出す必要があります、<ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph>メソッドまたは<ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph>メソッド適切にします。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>The source to stop listening on.</source>
          <target state="translated">リッスンを停止するソース。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">派生クラスでオーバーライドされると、指定されたソースで管理対象のイベントのリッスンを停止します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> implementations should remove the class handler as added by the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> によって追加されると、実装はクラス ハンドラーを削除する必要があります、<ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Removing a listener should not clear the listener list.</source>
          <target state="translated">リスナーを削除するリスナーの一覧を消去しないでください。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Instead, it should only disconnect the class handler (perhaps temporarily).</source>
          <target state="translated">代わりに、切断するだけに、クラス ハンドラーを (おそらくは一時的に)。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Other methods are available for clearing the entire list, such as the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method with the <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> parameter set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">その他のメソッドは、リスト全体を消去するなど、<ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph>メソッドを<ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph>パラメーターに設定<ph id="ph3">&lt;see langword="true" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>Establishes a write-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">基になるデータ テーブルで書き込みロックを確立し、<ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="using" /&gt;</ph> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">派生クラスでは行った変更はすべて、基になるデータ テーブル内で発生する必要があります、<ph id="ph1">`using (WriteLock) { ... }`</ph>句。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">これらの変更は、クラスがより高度なサポートされている場合に必要な可能性があります<ph id="ph1">`AddListener`</ph>を超える複数のデータを必要とする実装、<ph id="ph2">`source`</ph>と<ph id="ph3">`listener`</ph>を使用して、<ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph>余分な情報を格納するコレクション。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>