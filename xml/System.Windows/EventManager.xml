<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="620ca50d7b7841b0be3d9ebb860f452ea6667928" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444888" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>クラス所有者のルーティング イベントを登録し、クラス ハンドラーを追加する、イベント関連のユーティリティ メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、で<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>新しいルーティングイベントを登録するために最もよく使用されます。  
  
 2番目の[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]最も一般的<xref:System.Windows.EventManager.RegisterClassHandler%2A>な使用方法はです。 このメソッドを使用して、クラスまたは添付イベントのルーティングイベントのクラス処理を有効にします。 詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、このクラスを使用して、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントの add および remove 実装をオーバーライドするルーティングイベント "ラッパー" の手法と共に、新しいルーティングイベントをクラスメンバーとして登録する方法を示しています。  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベント システムに登録されたルーティング イベントの識別子を返します。</summary>
        <returns>登録されたオブジェクトを格納している <see cref="T:System.Windows.RoutedEvent" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 その<xref:System.Windows.RoutedEvent>他のオブジェクトは後で登録できます。 このメソッドは、スナップショットを取得します。ルーティングイベントのコレクションは、アプリケーションの有効期間全体にわたって書き込み可能です。 返されるコレクションは非常に大きい可能性があります。 に含ま[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]れるイベントをカウントするだけでなく、コレクションの数は数百になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">検索を開始する型。 基本クラスは検索に含まれます。</param>
        <summary>指定された所有者型で登録されているイベントのルーティング イベント識別子をすべて検索します。</summary>
        <returns>一致が見つかった場合は、一致するルーティング イベント識別子の配列。それ以外の場合は <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定のルーティング イベントのクラス ハンドラーを登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">クラスの処理を宣言するクラスの型。</param>
        <param name="routedEvent">処理するイベントのルーティング イベント識別子。</param>
        <param name="handler">クラス ハンドラー実装への参照。</param>
        <summary>特定のルーティング イベントのクラス ハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス処理は、ルーティングイベントに対して使用できる機能です。ルーティングイベントによって実装される添付イベントも含まれます。 クラスハンドラーは、クラスのすべてのインスタンスに存在する静的ハンドラーに似ています。 ハンドラーは静的であるため、クラスハンドラーを使用してインスタンスのプロパティを直接変更することはできませ`sender`んが、パラメーターやイベントデータを使用してインスタンスにアクセスすることはできます。  
  
 クラスハンドラーは、インスタンスハンドラーの前に呼び出されます。 イベントを処理済みとしてマークする動作を持つクラスハンドラーを実装できます。 したがって、クラスで処理されるイベントのインスタンスハンドラーは、インスタンスハンドラーが処理済みイベントに対して特別に登録しない限り、呼び出されません。  
  
 基本要素イベント[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の多くは、仮想メソッドを処理するクラスを提供します。 基底クラスを継承するクラスでこれらのメソッドをオーバーライドすることにより、静的コンストラクター <xref:System.Windows.EventManager.RegisterClassHandler%2A>でを呼び出さずにクラス処理を実装できます。 これらのクラス処理メソッドは通常、入力イベントに対して存在し、名前の先頭が "On" で、終了するイベントの名前が、処理されるイベントの名前になっています。  
  
 クラス処理の詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。  
  
 このシグネチャを使用して、クラスハンドラーは未処理のイベントへの応答としてのみ呼び出されるように登録されます。 シグネチャを使用`true`してイベント引数が処理済みとしてマークされている場合でも、をに設定して、クラスハンドラーを登録して呼び出すこともできます。`handledEventsToo` <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>  
  
   
  
## Examples  
 次の例では、の<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>ハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>追加し、を呼び出します。  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">クラスの処理を宣言するクラスの型。</param>
        <param name="routedEvent">処理するイベントのルーティング イベント識別子。</param>
        <param name="handler">クラス ハンドラー実装への参照。</param>
        <param name="handledEventsToo">ルーティング イベントの引数が既に処理済みとしてマークされていても、このクラス ハンドラーを呼び出す場合は <see langword="true" />。処理済みとしてマークされているイベントのハンドラーを呼び出さない、既定の動作を維持する場合は <see langword="false" />。</param>
        <summary>イベント データが既に処理済みとしてマークされているイベントを処理するオプションを使用して、特定のルーティング イベントのクラス ハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス処理は、ルーティングイベントに対して使用できる機能です。ルーティングイベントによって実装される添付イベントも含まれます。 クラスハンドラーは、クラスのすべてのインスタンスに存在する静的ハンドラーに似ています。 ハンドラーは静的であるため、クラスハンドラーを使用してインスタンスのプロパティを直接変更することはできませ`sender`んが、パラメーターやイベントデータを使用してインスタンスにアクセスすることはできます。  
  
 クラスハンドラーは、インスタンスハンドラーの前に呼び出されます。 イベントを処理済みとしてマークする動作を持つクラスハンドラーを実装できます。 したがって、クラスで処理されるイベントのインスタンスハンドラーは、インスタンスハンドラーが処理済みイベントに対して特別に登録しない限り、呼び出されません。  
  
 基本要素イベント[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]の多くは、仮想メソッドを処理するクラスを提供します。 基底クラスを継承するクラスでこれらのメソッドをオーバーライドすることにより、静的コンストラクター <xref:System.Windows.EventManager.RegisterClassHandler%2A>でを呼び出さずにクラス処理を実装できます。 これらのクラス処理メソッドは通常、入力イベントに対して存在し、名前の先頭が "On" で、終了するイベントの名前が、処理されるイベントの名前になっています。  
  
 クラス処理の詳細については、「[ルーティングイベントを処理済みとしてマークする」および「クラス処理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)」を参照してください。  
  
 このシグネチャを使用して、をに`handledEventsToo`設定する`true`ことによって、クラスハンドラーを登録して、処理されたイベントに対して呼び出すことができます。 通常、この操作は、マウスやキーボードイベントからの入力システム処理など、回避しようとしている既知の処理の問題がある場合にのみ行ってください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">ルーティングされたイベントの名前。 この名前は、所有者型内で一意である必要があり、<see langword="null" /> または空の文字列にすることはできません。</param>
        <param name="routingStrategy">列挙体の値としてのイベントのルーティング方法。</param>
        <param name="handlerType">イベント ハンドラーの型。 これはデリゲートの型である必要があり、<see langword="null" /> を指定することはできません。</param>
        <param name="ownerType">ルーティング イベントの所有者のクラス型。 これは <see langword="null" /> にすることはできません。</param>
        <summary>新しいルーティング イベントを [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] イベント システムに登録します。</summary>
        <returns>新しく登録されたルーティング イベントの識別子。 この識別子のオブジェクトは、クラスに静的フィールドとして格納してイベントにハンドラーをアタッチするメソッドのパラメーターとして使用できるようになりました。 ルーティング イベント識別子は、他のイベント システム [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] にも使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一意<xref:System.Windows.RoutedEvent>の識別子フィールドの静的宣言を作成するには、このメソッドの戻り値を使用します。 このフィールドは、所有者の種類の中に格納されている必要があります。  
  
 ルーティングイベントの名前付け、登録、クラス内での公開の方法には、多くの規則とベストプラクティスがあります。 詳細については、「[ルーティングイベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
