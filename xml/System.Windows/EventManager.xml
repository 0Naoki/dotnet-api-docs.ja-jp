<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dc3413d869bd9f89dc87256eb510a9e917751c9d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37549850" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b749e-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b749e-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b749e-102">このクラスは、新しいルーティング イベントに登録する最もよく使用<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b749e-102">This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span>  
  
 <span data-ttu-id="b749e-103">2 つ目の最も一般的な[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]使用率が<xref:System.Windows.EventManager.RegisterClassHandler%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b749e-103">The second most common [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span> <span data-ttu-id="b749e-104">クラスにルーティングされたイベントまたは添付イベントのクラス処理を有効にするのにには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b749e-104">You use this method to enable class handling of a routed event on the class, or an attached event.</span></span> <span data-ttu-id="b749e-105">詳細については、次を参照してください。[ルーティング イベントの処理済み、およびクラス処理としてのマーキング](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)します。</span><span class="sxs-lookup"><span data-stu-id="b749e-105">For details, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b749e-106">次の例では、表示の追加をオーバーライドする側のルーティング イベント「ラッパー」テクニックと共に、クラスのメンバーとして、新しいルーティング イベントを登録するこのクラスを使用およびの実装を削除する方法、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベント。</span><span class="sxs-lookup"><span data-stu-id="b749e-106">The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.</span></span>  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b749e-107">Returns identifiers for routed events that have been registered to the event system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-107">Returns identifiers for routed events that have been registered to the event system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b749e-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b749e-109">詳細<xref:System.Windows.RoutedEvent>オブジェクトを後で登録することができます。</span><span class="sxs-lookup"><span data-stu-id="b749e-109">More <xref:System.Windows.RoutedEvent> objects can be registered later.</span></span> <span data-ttu-id="b749e-110">このメソッドは、スナップショットを取得し、ルーティング イベントのコレクションは、アプリケーションの有効期間全体で書き込み可能なします。</span><span class="sxs-lookup"><span data-stu-id="b749e-110">This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</span></span> <span data-ttu-id="b749e-111">返されるコレクションは、非常に大きくなる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b749e-111">The collection returned might be quite large.</span></span> <span data-ttu-id="b749e-112">一部となるイベントをカウントのみでも、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]コレクションのカウントが高い数百します。</span><span class="sxs-lookup"><span data-stu-id="b749e-112">Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="b749e-113">The type to start the search with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-113">The type to start the search with.</span>
          </span>
          <span data-ttu-id="b749e-114">Base classes are included in the search.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-114">Base classes are included in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b749e-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b749e-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b749e-117">Registers a class handler for a particular routed event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-117">Registers a class handler for a particular routed event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">
          <span data-ttu-id="b749e-118">The type of the class that is declaring class handling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-118">The type of the class that is declaring class handling.</span>
          </span>
        </param>
        <param name="routedEvent">
          <span data-ttu-id="b749e-119">The routed event identifier of the event to handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-119">The routed event identifier of the event to handle.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="b749e-120">A reference to the class handler implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-120">A reference to the class handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b749e-121">Registers a class handler for a particular routed event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-121">Registers a class handler for a particular routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b749e-122">クラス処理は、ルーティング イベントのサポートで実装されている添付イベントを含む、ルーティング イベントで利用可能な機能です。</span><span class="sxs-lookup"><span data-stu-id="b749e-122">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="b749e-123">クラス ハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。</span><span class="sxs-lookup"><span data-stu-id="b749e-123">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="b749e-124">ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、`sender`パラメーターやイベント データ。</span><span class="sxs-lookup"><span data-stu-id="b749e-124">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="b749e-125">インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b749e-125">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="b749e-126">クラス ハンドラーを持つイベントを処理済みとしてマークの動作を実装することができます。</span><span class="sxs-lookup"><span data-stu-id="b749e-126">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="b749e-127">そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのインスタンス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="b749e-127">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="b749e-128">多くは、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基本要素のイベントが仮想メソッドを処理するクラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="b749e-128">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="b749e-129">クラスを呼び出さずに処理を実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドして<xref:System.Windows.EventManager.RegisterClassHandler%2A>で静的コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b749e-129">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="b749e-130">通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"を先頭し、末尾クラス処理されているイベントの名前。</span><span class="sxs-lookup"><span data-stu-id="b749e-130">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="b749e-131">クラス処理の詳細については、次を参照してください。[ルーティング イベントの処理済み、およびクラス処理としてのマーキング](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)します。</span><span class="sxs-lookup"><span data-stu-id="b749e-131">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="b749e-132">この署名を使用して、未処理のイベントへの応答でのみ呼び出すクラス ハンドラーが登録されます。</span><span class="sxs-lookup"><span data-stu-id="b749e-132">Using this signature, class handlers will be registered to invoke only in response to unhandled events.</span></span> <span data-ttu-id="b749e-133">呼び出す場合でも、イベント引数を使用して、処理、マークされたクラスのハンドラーを登録することも、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>のシグネチャで`handledEventsToo`に設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b749e-133">You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b749e-134">次の例のハンドラーを追加する<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>を呼び出すと、<xref:System.Windows.EventManager.RegisterClassHandler%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b749e-134">The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">
          <span data-ttu-id="b749e-135">The type of the class that is declaring class handling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-135">The type of the class that is declaring class handling.</span>
          </span>
        </param>
        <param name="routedEvent">
          <span data-ttu-id="b749e-136">The routed event identifier of the event to handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-136">The routed event identifier of the event to handle.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="b749e-137">A reference to the class handler implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-137">A reference to the class handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="b749e-138">
            <see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-138">
              <see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b749e-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b749e-140">クラス処理は、ルーティング イベントのサポートで実装されている添付イベントを含む、ルーティング イベントで利用可能な機能です。</span><span class="sxs-lookup"><span data-stu-id="b749e-140">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="b749e-141">クラス ハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。</span><span class="sxs-lookup"><span data-stu-id="b749e-141">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="b749e-142">ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、`sender`パラメーターやイベント データ。</span><span class="sxs-lookup"><span data-stu-id="b749e-142">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="b749e-143">インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b749e-143">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="b749e-144">クラス ハンドラーを持つイベントを処理済みとしてマークの動作を実装することができます。</span><span class="sxs-lookup"><span data-stu-id="b749e-144">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="b749e-145">そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのインスタンス ハンドラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="b749e-145">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="b749e-146">多くは、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基本要素のイベントが仮想メソッドを処理するクラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="b749e-146">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="b749e-147">クラスを呼び出さずに処理を実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドして<xref:System.Windows.EventManager.RegisterClassHandler%2A>で静的コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b749e-147">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="b749e-148">通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"を先頭し、末尾クラス処理されているイベントの名前。</span><span class="sxs-lookup"><span data-stu-id="b749e-148">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="b749e-149">クラス処理の詳細については、次を参照してください。[ルーティング イベントの処理済み、およびクラス処理としてのマーキング](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)します。</span><span class="sxs-lookup"><span data-stu-id="b749e-149">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="b749e-150">この署名を使用して、クラス ハンドラーに登録できるイベントの処理時に設定して、呼び出す`handledEventsToo`設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b749e-150">Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`.</span></span> <span data-ttu-id="b749e-151">一般に、行う必要がありますこれマウスまたはキーボード イベントからを処理する入力システムなど、回避しようとして既知の処理に関する問題がある場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="b749e-151">Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="b749e-152">The name of the routed event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-152">The name of the routed event.</span>
          </span>
          <span data-ttu-id="b749e-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span>
          </span>
        </param>
        <param name="routingStrategy">
          <span data-ttu-id="b749e-154">The routing strategy of the event as a value of the enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-154">The routing strategy of the event as a value of the enumeration.</span>
          </span>
        </param>
        <param name="handlerType">
          <span data-ttu-id="b749e-155">The type of the event handler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-155">The type of the event handler.</span>
          </span>
          <span data-ttu-id="b749e-156">This must be a delegate type and cannot be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-156">This must be a delegate type and cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="b749e-157">The owner class type of the routed event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-157">The owner class type of the routed event.</span>
          </span>
          <span data-ttu-id="b749e-158">This cannot be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-158">This cannot be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b749e-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b749e-160">The identifier for the newly registered routed event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-160">The identifier for the newly registered routed event.</span>
          </span>
          <span data-ttu-id="b749e-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span>
          </span>
          <span data-ttu-id="b749e-162">The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="b749e-162">The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b749e-163">このメソッドの戻り値を使用して、一意の静的な宣言を作成する<xref:System.Windows.RoutedEvent>識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="b749e-163">Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field.</span></span> <span data-ttu-id="b749e-164">このフィールドは、所有者型内に格納する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b749e-164">This field should be stored within the owner type.</span></span>  
  
 <span data-ttu-id="b749e-165">数多くの規則があるとベスト プラクティスがどのようにルーティング イベントに関連付けられている必要がありますしてという名前を登録されると、クラスで公開されています。</span><span class="sxs-lookup"><span data-stu-id="b749e-165">There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</span></span> <span data-ttu-id="b749e-166">詳細については、次を参照してください。[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="b749e-166">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>