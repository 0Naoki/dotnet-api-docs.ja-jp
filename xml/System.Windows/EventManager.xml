<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c77ae0f0dbeb2878102af1c07c306ec83ccf92c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678566" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>クラス所有者のルーティング イベントを登録し、クラス ハンドラーを追加する、イベント関連のユーティリティ メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、新しいルーティング イベントに登録する最もよく使用<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>です。  
  
 2 つ目の最も一般的な[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]使用率が<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。 このメソッドを使用するには、クラスにルーティングされたイベントまたは添付イベントのクラス処理を有効にします。 詳細については、「 [Handled、クラス処理とルーティング イベントをマーク](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)です。  
  
   
  
## Examples  
 次の例がクラス メンバーは、追加をオーバーライドするルーティング イベントの「ラッパー」手法と共に新しいルーティング イベントを登録するこのクラスを使用して実装を削除する方法を示して、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベント。  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベント システムに登録されたルーティング イベントの識別子を返します。</summary>
        <returns>登録されたオブジェクトを格納している <see cref="T:System.Windows.RoutedEvent" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細<xref:System.Windows.RoutedEvent>オブジェクトを後で登録することができます。 このメソッドは、スナップショットを取得し、ルーティングされたイベントのコレクションは、アプリケーションの有効期間全体で書き込み可能です。 返されるコレクションは、非常に大きくなる可能性があります。 一部となるイベントをカウントのみでも、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]コレクションのカウントが高い百にもはします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">検索を開始する型。 基本クラスは検索に含まれます。</param>
        <summary>指定された所有者型で登録されているイベントのルーティング イベント識別子をすべて検索します。</summary>
        <returns>一致が見つかった場合は、一致するルーティング イベント識別子の配列。それ以外の場合は <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定のルーティング イベントのクラス ハンドラーを登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">クラスの処理を宣言するクラスの型。</param>
        <param name="routedEvent">処理するイベントのルーティング イベント識別子。</param>
        <param name="handler">クラス ハンドラー実装への参照。</param>
        <summary>特定のルーティング イベントのクラス ハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスの処理は、バックアップするルーティング イベントに実装されている添付イベントを含む、ルーティング イベントに使用される機能です。 クラスのハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。 ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、`sender`パラメーターまたはイベント データ。  
  
 インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。 イベントを処理済みとしてマークの動作がクラス ハンドラーを実装することができます。 そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのハンドラーをインスタンスは呼び出されません。  
  
 多くは、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基本要素のイベントが仮想メソッドを処理するクラスを提供します。 クラス処理を呼び出さずを実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドして<xref:System.Windows.EventManager.RegisterClassHandler%2A>静的コンス トラクターでします。 通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"で始まるクラス処理されているイベントの名前で終了します。  
  
 クラスの処理の詳細については、次を参照してください。 [Handled、クラス処理とルーティング イベントをマーク](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)です。  
  
 この署名を使用して、クラス ハンドラーは、未処理のイベントへの応答でのみ呼び出す登録されます。 呼び出すイベント引数を使用してが処理される、付いている場合でも、クラス ハンドラーを登録することも、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>署名と`handledEventsToo`に設定`true`です。  
  
   
  
## Examples  
 次の例では、ハンドラーを<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>、呼び出し元<xref:System.Windows.EventManager.RegisterClassHandler%2A>です。  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">クラスの処理を宣言するクラスの型。</param>
        <param name="routedEvent">処理するイベントのルーティング イベント識別子。</param>
        <param name="handler">クラス ハンドラー実装への参照。</param>
        <param name="handledEventsToo">
          ルーティング イベントの引数が既に処理済みとしてマークされていても、このクラス ハンドラーを呼び出す場合は <see langword="true" />。処理済みとしてマークされているイベントのハンドラーを呼び出さない、既定の動作を維持する場合は <see langword="false" />。</param>
        <summary>イベント データが既に処理済みとしてマークされているイベントを処理するオプションを使用して、特定のルーティング イベントのクラス ハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスの処理は、バックアップするルーティング イベントに実装されている添付イベントを含む、ルーティング イベントに使用される機能です。 クラスのハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。 ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、`sender`パラメーターまたはイベント データ。  
  
 インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。 イベントを処理済みとしてマークの動作がクラス ハンドラーを実装することができます。 そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのハンドラーをインスタンスは呼び出されません。  
  
 多くは、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基本要素のイベントが仮想メソッドを処理するクラスを提供します。 クラス処理を呼び出さずを実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドして<xref:System.Windows.EventManager.RegisterClassHandler%2A>静的コンス トラクターでします。 通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"で始まるクラス処理されているイベントの名前で終了します。  
  
 クラスの処理の詳細については、次を参照してください。 [Handled、クラス処理とルーティング イベントをマーク](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)です。  
  
 この署名を使用して、クラス ハンドラーに登録できるを設定して、イベントの処理時に呼び出す`handledEventsToo`'éý'`true`です。 一般に、行う必要がありますこれを回避する、マウスやキーボード イベントから処理入力システムなどして既知の処理に関する問題がある場合にのみです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">ルーティング イベントの名前。 この名前は、所有者型内で一意である必要があり、<see langword="null" /> または空の文字列にすることはできません。</param>
        <param name="routingStrategy">列挙体の値としてのイベントのルーティング方法。</param>
        <param name="handlerType">イベント ハンドラーの型。 これはデリゲートの型である必要があり、<see langword="null" /> を指定することはできません。</param>
        <param name="ownerType">ルーティング イベントの所有者のクラス型。 これには、<see langword="null" /> を指定することはできません。</param>
        <summary>新しいルーティング イベントを [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] イベント システムに登録します。</summary>
        <returns>新しく登録されたルーティング イベントの識別子。 この識別子のオブジェクトは、クラスに静的フィールドとして格納してイベントにハンドラーをアタッチするメソッドのパラメーターとして使用できるようになりました。 ルーティング イベント識別子は、他のイベント システム [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] にも使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの戻り値を使用して、一意の静的な宣言を作成する<xref:System.Windows.RoutedEvent>識別子フィールドです。 このフィールドは、所有者型内に格納する必要があります。  
  
 数多くの規則があるとベスト プラクティスがどのようにルーティング イベントに関連付けられている必要がありますしてという名前を登録されると、クラスで公開されています。 詳細については、次を参照してください。[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>