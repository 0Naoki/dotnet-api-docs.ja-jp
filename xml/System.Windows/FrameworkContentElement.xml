<Type Name="FrameworkContentElement" FullName="System.Windows.FrameworkContentElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a09a0bef3176e453d808d58d6e18c6b6bf05f74f" /><Meta Name="ms.sourcegitcommit" Value="bfce49b3a0c0685f994313d2e44a7c70def1694a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/05/2019" /><Meta Name="ms.locfileid" Value="66690857" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkContentElement : System.Windows.ContentElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkContentElement extends System.Windows.ContentElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkContentElement&#xA;Inherits ContentElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkContentElement : System::Windows::ContentElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkContentElement = class&#xA;    inherit ContentElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.ContentElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ad80f-101"><see cref="T:System.Windows.FrameworkContentElement" /> は、<see cref="T:System.Windows.ContentElement" /> 基底クラスの WPF フレームワーク レベルの実装および拡張です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-101"><see cref="T:System.Windows.FrameworkContentElement" /> is the WPF framework-level implementation and expansion of the <see cref="T:System.Windows.ContentElement" /> base class.</span></span> <span data-ttu-id="ad80f-102"><see cref="T:System.Windows.FrameworkContentElement" /> は、補足の入力 API (ツールヒントやコンテキスト メニューなど)、ストーリーボード、データ バインディング用のデータ コンテキスト、スタイルのサポート、および論理ツリーのヘルパー API に関するサポートを追加します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-102"><see cref="T:System.Windows.FrameworkContentElement" /> adds support for additional input APIs (including tooltips and context menus), storyboards, data context for data binding, styles support, and logical tree helper APIs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-103"><xref:System.Windows.FrameworkContentElement> 独自のレンダリング動作は定義されていません実際のインスタンス化<xref:System.Windows.FrameworkContentElement>コードまたはマークアップ内のクラス インスタンスは可能ですが、表示では nothing を[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]アプリケーション[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="ad80f-103"><xref:System.Windows.FrameworkContentElement> does not yet define its own rendering behavior; instantiating an actual <xref:System.Windows.FrameworkContentElement> class instance in code or markup is possible but displays nothing in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="ad80f-104">レンダリング ロジックを取るクラスによって提供される必要があります<xref:System.Windows.FrameworkContentElement>子要素で、コンテンツ モデルの一部として<xref:System.Windows.FrameworkContentElement>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-104">Rendering logic must be provided by classes that take <xref:System.Windows.FrameworkContentElement> child elements as part of their content model, or in <xref:System.Windows.FrameworkContentElement> derived classes.</span></span>  
  
 <span data-ttu-id="ad80f-105"><xref:System.Windows.FrameworkContentElement> 意図的に対応する多くの同じ[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]として<xref:System.Windows.FrameworkElement>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-105"><xref:System.Windows.FrameworkContentElement> deliberately parallels many of the same [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] as <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="ad80f-106">特定のメモ[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]で見つかった<xref:System.Windows.FrameworkElement>必要はありません、<xref:System.Windows.FrameworkContentElement>と同じです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-106">Note that certain [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] found on <xref:System.Windows.FrameworkElement> will not have a <xref:System.Windows.FrameworkContentElement> equivalent.</span></span> <span data-ttu-id="ad80f-107">いくつかの<xref:System.Windows.FrameworkElement>[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]関連のない geometry 表現やレイアウトなどの機能は、<xref:System.Windows.FrameworkContentElement>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-107">Several of the <xref:System.Windows.FrameworkElement> [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] are for functionality such as geometry representation or layout, which are not relevant for a <xref:System.Windows.FrameworkContentElement>.</span></span>  
  
 <span data-ttu-id="ad80f-108">既存のマジョリティ<xref:System.Windows.FrameworkContentElement>派生クラスにある、<xref:System.Windows.Documents>名前空間。</span><span class="sxs-lookup"><span data-stu-id="ad80f-108">The majority of existing <xref:System.Windows.FrameworkContentElement> derived classes will be found in the <xref:System.Windows.Documents> namespace.</span></span> <span data-ttu-id="ad80f-109">これらの派生クラスの多くは、フロー ドキュメント モデルの要素を実装します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-109">Many of these derived classes implement elements for the flow document model.</span></span> <span data-ttu-id="ad80f-110">などの特定の派生クラス<xref:System.Windows.Documents.Hyperlink>いくつかのコントロールのような機能しますが、から派生<xref:System.Windows.FrameworkContentElement>コントロールのような要素は、フロー ドキュメント モデルでも参加できるようにします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-110">Certain derived classes such as <xref:System.Windows.Documents.Hyperlink> have some control-like functionality, but are derived from <xref:System.Windows.FrameworkContentElement> such that the control-like elements can still participate in the flow document model.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.FrameworkElement" />
    <altmember cref="T:System.Windows.ContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-111"><see cref="T:System.Windows.FrameworkContentElement" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-111">Initializes a new instance of the <see cref="T:System.Windows.FrameworkContentElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkContentElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="ad80f-112">追加される子要素。</span><span class="sxs-lookup"><span data-stu-id="ad80f-112">The child element to be added.</span></span></param>
        <summary><span data-ttu-id="ad80f-113">指定した要素をこの要素の子として追加します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-113">Adds the provided element as a child of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-114">別のプロセスによって、論理ツリーが反復処理されるときに呼び出された場合、このメソッドは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-114">This method can throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
 <span data-ttu-id="ad80f-115">ほとんど<xref:System.Windows.FrameworkContentElement>派生クラスの包含を担当する専用のコレクションを公開する (たとえば、<xref:System.Windows.Documents.Span.Inlines%2A>上、<xref:System.Windows.Documents.Span>クラスです。<xref:System.Windows.Documents.Section.Blocks%2A>上、<xref:System.Windows.Documents.Section>クラス)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-115">Most <xref:System.Windows.FrameworkContentElement> derived classes expose dedicated collections that are responsible for containment (for example, <xref:System.Windows.Documents.Span.Inlines%2A> on the <xref:System.Windows.Documents.Span> class; <xref:System.Windows.Documents.Section.Blocks%2A> on the <xref:System.Windows.Documents.Section> class).</span></span> <span data-ttu-id="ad80f-116">通常、代わりにこれらのクラスから派生する場合、論理ツリーを直接操作する必要を回避できます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-116">You can typically avoid any need to manipulate the logical tree directly if you derive from these classes instead.</span></span> <span data-ttu-id="ad80f-117">コンテンツ要素の論理ツリーの操作は必要がある特殊なパーサーまたは特殊な高度なシナリオ<xref:System.Windows.FrameworkElement>親レンダリング要素 (コンテンツのホスト) として機能します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-117">Working with the logical tree for content elements is an advanced scenario that may require a specialized parser or a specialized <xref:System.Windows.FrameworkElement> that acts as the parent rendering element (content host).</span></span>  
  
 <span data-ttu-id="ad80f-118">使用する方法の詳細についての<xref:System.Windows.FrameworkContentElement.LogicalChildren%2A>と<xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>を参照してください[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-118">For more information about how to use <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkContentElement.LogicalChildren" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkContentElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-119">要素が初期化される前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-119">Called before an element is initialized.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ad80f-120">要素の読み込みプロセス中に、要素が初期化される前に発生する特別な処理を提供するのには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-120">Override this method to provide special handling that should occur before your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="ad80f-121">実装は、ベース (既定値) の実装の初期化を追跡するいくつかの内部フラグが設定されるため、基本の実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-121">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span>  
  
<span data-ttu-id="ad80f-122">場合に基本の実装が例外をスロー<see cref="M:System.Windows.FrameworkContentElement.BeginInit" />に到達する前に同じ要素に対して 1 つ以上の時間と呼びます<see cref="M:System.Windows.FrameworkContentElement.EndInit" />します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-122">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkContentElement.BeginInit" /> is called more than one time on the same element prior to reaching <see cref="M:System.Windows.FrameworkContentElement.EndInit" />.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad80f-123">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-123">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkContentElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="ad80f-124">開始するストーリーボード。</span><span class="sxs-lookup"><span data-stu-id="ad80f-124">The storyboard to begin.</span></span></param>
        <summary><span data-ttu-id="ad80f-125">指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-125">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-126">署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`アニメーションに関連付けられているタイムラインのクロックが"Fill"期間に達するとすぐに削除されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-126">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="ad80f-127">そのため、アニメーションは、1 回実行された後再開できません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-127">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="ad80f-128">アニメーションを制御することも必要であること、ストーリー ボードの名前付きまたはコード内のインスタンスとしてアクセス可能であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-128">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkContentElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="ad80f-129">開始するストーリーボード。</span><span class="sxs-lookup"><span data-stu-id="ad80f-129">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="ad80f-130">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-130">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <summary><span data-ttu-id="ad80f-131">プロパティが既にアニメーション化されていた場合に行う処理を指定するオプションを使用して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-131">Begins the sequence of actions that are contained in the provided storyboard, with options specified for what should occur if the property is already animated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-132">署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`アニメーションに関連付けられているタイムラインのクロックが"Fill"期間に達するとすぐに削除されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-132">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="ad80f-133">そのため、アニメーションは、1 回実行された後再開できません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-133">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="ad80f-134">アニメーションを制御することも必要であること、ストーリー ボードの名前付きまたはコード内のインスタンスとしてアクセス可能であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-134">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="ad80f-135">使用して、Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="ad80f-135">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="ad80f-136">適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>にプロパティを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトは引き続きシステム リソースを消費しますタイミング システムは。時計を自動的に削除されません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-136">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="ad80f-137">使用して多数のクロックを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-137">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="ad80f-138">クロックを削除するいくつかの方法はあります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-138">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="ad80f-139">プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="ad80f-139">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="ad80f-140">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。</span><span class="sxs-lookup"><span data-stu-id="ad80f-140">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="ad80f-141">これにより、すべてのアニメーション クロックがプロパティから削除します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-141">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="ad80f-142">特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-142">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="ad80f-143">これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-143">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="ad80f-144">唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-144">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="ad80f-145">なお、<xref:System.Windows.Media.Animation.Clock.Completed>クロックの有効期間が永久の場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-145">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="ad80f-146">その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-146">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="ad80f-147">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-147">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="ad80f-148">オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。</span><span class="sxs-lookup"><span data-stu-id="ad80f-148">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="ad80f-149">クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-149">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkContentElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="ad80f-150">開始するストーリーボード。</span><span class="sxs-lookup"><span data-stu-id="ad80f-150">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="ad80f-151">ストーリーボードに記述されたプロパティが既にアニメーション化されている場合に使用する、動作を表す列挙型の値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-151">A value of the enumeration that describes behavior to use if a  property described in the storyboard is already animated.</span></span></param>
        <param name="isControllable"><span data-ttu-id="ad80f-152">アニメーションを起動した後に、アニメーションを制御できるかどうか (一時停止できるかどうか) を宣言します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-152">Declares whether the animation is controllable (can be paused) after it is started.</span></span></param>
        <summary><span data-ttu-id="ad80f-153">開始後のアニメーションの制御の状態を指定して、指定したストーリーボードに含まれるアクションのシーケンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-153">Begins the sequence of actions that are contained in the provided storyboard, with specified state for control of the animation after it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-154">署名を使用しない、 `isControllable`、パラメーター、そのパラメーターが指定されている場合または`false`アニメーションに関連付けられているタイムラインのクロックが"Fill"期間に達するとすぐに削除されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-154">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="ad80f-155">そのため、アニメーションは、1 回実行された後再開できません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-155">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="ad80f-156">アニメーションを制御することも必要であること、ストーリー ボードの名前付きまたはコード内のインスタンスとしてアクセス可能であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-156">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="ad80f-157">使用して、Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="ad80f-157">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="ad80f-158">適用すると、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>にプロパティを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトは引き続きシステム リソースを消費しますタイミング システムは。これらのクロックを自動的に削除されません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-158">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="ad80f-159">使用して多数のクロックを適用すると、パフォーマンスの問題を回避するために<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>、完了後に、アニメーション化されたプロパティから構成クロックを削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-159">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="ad80f-160">クロックを削除するいくつかの方法はあります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-160">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="ad80f-161">プロパティからすべてのクロックを削除するには、使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション化されたオブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="ad80f-161">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="ad80f-162">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null` 2 つ目として。</span><span class="sxs-lookup"><span data-stu-id="ad80f-162">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="ad80f-163">これにより、すべてのアニメーション クロックがプロパティから削除します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-163">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="ad80f-164">特定を削除する<xref:System.Windows.Media.Animation.AnimationClock>クロックの一覧は、使用して、<xref:System.Windows.Media.Animation.Clock.Controller%2A>のプロパティ、<xref:System.Windows.Media.Animation.AnimationClock>を取得する、 <xref:System.Windows.Media.Animation.ClockController>、呼び出して、<xref:System.Windows.Media.Animation.ClockController.Remove%2A>のメソッド、<xref:System.Windows.Media.Animation.ClockController>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-164">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="ad80f-165">これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-165">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="ad80f-166">唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-166">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="ad80f-167">なお、<xref:System.Windows.Media.Animation.Clock.Completed>クロックの有効期間が永久の場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-167">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="ad80f-168">その場合は、ユーザーが判断する必要がありますを呼び出すタイミング<xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-168">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="ad80f-169">これは主に、有効期間が長いオブジェクトでのアニメーションの問題です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-169">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="ad80f-170">オブジェクトがガベージ コレクションの場合は、そのクロックも切断し、ガベージ コレクション。</span><span class="sxs-lookup"><span data-stu-id="ad80f-170">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="ad80f-171">クロック オブジェクトの詳細については、次を参照してください。[アニメーションとタイミング システムの概要](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-171">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkContentElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-172">要素に使用される <see cref="T:System.Windows.Data.BindingGroup" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-172">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></summary>
        <value><span data-ttu-id="ad80f-173">要素に使用される <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-173">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-174">A<xref:System.Windows.Data.BindingGroup>オブジェクトの複数のプロパティの値を検証するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-174">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="ad80f-175">たとえば、アプリケーションはアドレスを入力するように求めるし、型のオブジェクトを作成し、 `Address`、プロパティを持つ`Street`、 `City`、`ZipCode`と`Country`値を使用しているユーザー提供されています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-175">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="ad80f-176">アプリケーションが 4 つを格納しているパネル<xref:System.Windows.Controls.TextBox>オブジェクトのプロパティのいずれかにバインドされているは、コントロール。</span><span class="sxs-lookup"><span data-stu-id="ad80f-176">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object's properties.</span></span> <span data-ttu-id="ad80f-177">使用することができます、<xref:System.Windows.Controls.ValidationRule>で、<xref:System.Windows.Data.BindingGroup>を検証する、`Address`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-177">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="ad80f-178">たとえば、<xref:System.Windows.Controls.ValidationRule>郵便番号が、アドレスの国/地域は有効であることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-178">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country/region of the address.</span></span>  
  
 <span data-ttu-id="ad80f-179">子要素の継承、<xref:System.Windows.Data.BindingGroup>だけで、他の継承可能なプロパティと同様に、親要素から。</span><span class="sxs-lookup"><span data-stu-id="ad80f-179">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-180">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-180">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-181">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-181">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.BindingGroupProperty>|  
|<span data-ttu-id="ad80f-182">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-182">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-183"><see cref="P:System.Windows.FrameworkContentElement.BindingGroup" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-183">Identifies the <see cref="P:System.Windows.FrameworkContentElement.BindingGroup" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkContentElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-184">この要素が含まれているスクロール可能な領域内に、この要素を表示することを試みます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-184">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-185">このメソッドを呼び出すことによって効果的に呼び出す<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>要素を含む親スクロール可能な領域を (親がありますも非常に、<xref:System.Windows.FrameworkElement>ではなく、 <xref:System.Windows.FrameworkContentElement>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-185">By calling this method, you effectively will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element (the parent may very well be a <xref:System.Windows.FrameworkElement>, not a <xref:System.Windows.FrameworkContentElement>).</span></span> <span data-ttu-id="ad80f-186">スクロール可能な領域には、この要素が含まれていない、イベントはまだが有効になりますありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-186">If this element is not contained in a scrollable area, the event is still raised, but there will be no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752352(v=vs.90)"><span data-ttu-id="ad80f-187">方法: ScrollViewer を作成します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-187">How to: Create a ScrollViewer</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkContentElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-188">この要素内から[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] によってコンテキスト メニューが要求された場合に常に表示されるコンテキスト メニュー要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-188">Gets or sets the context menu element that should appear whenever the context menu is requested via [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span></span></summary>
        <value><span data-ttu-id="ad80f-189">この要素が使用するコンテキスト メニュー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-189">The context menu that this element uses.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-190">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-190">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-191">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-191">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuProperty>|  
|<span data-ttu-id="ad80f-192">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-192">Metadata properties set to `true`</span></span>|<span data-ttu-id="ad80f-193">None</span><span class="sxs-lookup"><span data-stu-id="ad80f-193">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-194">次の例の場所、<xref:System.Windows.Controls.ContextMenu>上、<xref:System.Windows.Documents.Paragraph>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-194">The following example places a <xref:System.Windows.Controls.ContextMenu> on a <xref:System.Windows.Documents.Paragraph>.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#ContextMenu](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#contextmenu)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-195">要素のコンテキスト メニューが閉じる直前に発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-195">Occurs just before any context menu on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-196">閉じないようにするには、イベントのハンドラーのコンテキスト メニュー、する必要があります、処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-196">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="ad80f-197">としては、このイベントを使用して、<xref:System.Windows.EventTrigger>スタイルでは、基になるサービスのイベント識別子を参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-197">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service event identifier:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="ad80f-198">(この使用法が必要なのでイベントの実装<xref:System.Windows.FrameworkContentElement>こと公開基になるサービスのイベントが正しくマップされない、<xref:System.Windows.FrameworkContentElement.ContextMenuClosing>トリガーで使用するための識別子)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-198">(This usage is required because the event implementation on <xref:System.Windows.FrameworkContentElement> that exposes the underlying service event does not correctly map the <xref:System.Windows.FrameworkContentElement.ContextMenuClosing> identifier for use in triggers).</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ad80f-199">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-199">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-200">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-200">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="ad80f-201">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-201">Routing strategy</span></span>|<span data-ttu-id="ad80f-202">バブル</span><span class="sxs-lookup"><span data-stu-id="ad80f-202">Bubbling</span></span>|  
|<span data-ttu-id="ad80f-203">Delegate</span><span class="sxs-lookup"><span data-stu-id="ad80f-203">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-204">次の例では、名前付き領域の上にカーソルを変更するハンドラーを実装する`DisplayArea`(示されていません)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-204">The following example implements a handler that changes the cursor over a named region `DisplayArea` (not shown).</span></span> <span data-ttu-id="ad80f-205">コメントのヒントに、<xref:System.Windows.UIElement>使用状況、実際にこのサンプルは同じですが、場合`DisplayArea`された、<xref:System.Windows.FrameworkContentElement>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-205">The comment hints at a <xref:System.Windows.UIElement> usage, but in fact this sample would be identical if `DisplayArea` were a <xref:System.Windows.FrameworkContentElement>.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-206"><see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> ([Routed Events Overview (ルーティング イベントの概要)](~/docs/framework/wpf/advanced/routed-events-overview.md)) を識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-206">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-207">ルーティング イベントが登録されているときに、イベント識別子のオブジェクトは作成されます (を参照してください<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) クラス ハンドラーを追加するために使用して (を参照してください<xref:System.Windows.EventManager.RegisterClassHandler%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-207">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="ad80f-208">識別子のオブジェクトには、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-208">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-209">要素のコンテキスト メニューが開くときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-209">Occurs when any context menu on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-210">コンテキスト メニューを手動で開く、処理済みとして、イベントのハンドラーは、関連するイベントをマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-210">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="ad80f-211">それ以外の場合、既存の値、<xref:System.Windows.FrameworkContentElement.ContextMenu%2A>プロパティが自動的にコンテキスト メニューを開き、使用されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-211">Otherwise, the existing value of the <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="ad80f-212">既定のアクションを効果的に取り消しし、の値にリセットすることにより、イベントを処理済みのマークを付ける、<xref:System.Windows.FrameworkContentElement.ContextMenu%2A>プロパティを開き、新しい<xref:System.Windows.Controls.ContextMenu>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-212">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="ad80f-213">ただし、認識する必要があるタイミングの問題があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-213">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="ad80f-214">によりコンテキスト メニューを完全に置換するには、<xref:System.Windows.FrameworkContentElement.ContextMenuOpening>ハンドラー、初期のコンテキスト メニューがあります null/空です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-214">In order to completely replace the context menu through a <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="ad80f-215">また、イベントを処理し、新しいコンテキスト メニューを手動で開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-215">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="ad80f-216">詳細については、「[方法: ContextMenuOpening イベントを処理](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-216">For details, see [How to: Handle the ContextMenuOpening Event](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).</span></span>  
  
 <span data-ttu-id="ad80f-217">としては、このイベントを使用して、<xref:System.Windows.EventTrigger>スタイルでは、基になるサービスのイベント識別子を参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-217">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service event identifier:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="ad80f-218">(この使用法が必要なのでイベントの実装<xref:System.Windows.FrameworkContentElement>こと公開基になるサービスのイベントが正しくマップされない、<xref:System.Windows.FrameworkContentElement.ContextMenuOpening>トリガーで使用するための識別子)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-218">(This usage is required because the event implementation on <xref:System.Windows.FrameworkContentElement> that exposes the underlying service event does not correctly map the <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> identifier for use in triggers).</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ad80f-219">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-219">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-220">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-220">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="ad80f-221">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-221">Routing strategy</span></span>|<span data-ttu-id="ad80f-222">バブル</span><span class="sxs-lookup"><span data-stu-id="ad80f-222">Bubbling</span></span>|  
|<span data-ttu-id="ad80f-223">Delegate</span><span class="sxs-lookup"><span data-stu-id="ad80f-223">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-224"><see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> ([Routed Events Overview (ルーティング イベントの概要)](~/docs/framework/wpf/advanced/routed-events-overview.md)) を識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-224">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-225">ルーティング イベントが登録されているときに、イベント識別子のオブジェクトは作成されます (を参照してください<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) クラス ハンドラーを追加するために使用して (を参照してください<xref:System.Windows.EventManager.RegisterClassHandler%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-225">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="ad80f-226">識別子のオブジェクトには、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-226">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-227"><see cref="P:System.Windows.FrameworkContentElement.ContextMenu" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-227">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ContextMenu" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkContentElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-228">この要素上にマウス ポインターが置かれたときに表示されるカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-228">Gets or sets the cursor that displays when the mouse pointer is over this element.</span></span></summary>
        <value><span data-ttu-id="ad80f-229">表示対象のカーソル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-229">The cursor to display.</span></span> <span data-ttu-id="ad80f-230">既定値はこの依存関係プロパティごとに <see langword="null" /> として定義されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-230">The default value is defined as <see langword="null" /> per this dependency property.</span></span> <span data-ttu-id="ad80f-231">ただし、実行時における実用的な既定値は、さまざまな要因から取得されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-231">However, the practical default at run time will come from a variety of factors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-232">このプロパティを設定すると[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロセッサに依存の型変換を<xref:System.Windows.Input.Cursor>クラス文字列を評価します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-232">When setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="ad80f-233">指定された文字列に評価、<xref:System.Windows.Input.CursorType>値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-233">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="ad80f-234">詳細については、「<xref:System.Windows.Input.Cursor>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-234">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="ad80f-235">このプロパティによって確立されると、カーソルは、マウス ポインターがこの要素は表示されないかどうかの値に依存しても、<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-235">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="ad80f-236">また、イベント関連の考慮事項など、アクティブなドラッグ、マウスのキャプチャ、テキスト編集コントロール、および、内のモードでは、このプロパティで指定した値よりも優先順位の高いカーソルは影響はも。</span><span class="sxs-lookup"><span data-stu-id="ad80f-236">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="ad80f-237">最終的な既定値にこのプロパティの設定の動作を元に戻すに設定`null`もう一度です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-237">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="ad80f-238">`null`実際的なカーソルの値の決定はここでは遅延し、別の場所から取得する必要が本当に既定値を意味します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-238">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="ad80f-239">プログラムによる既定のカーソルの任意のソースから値を持たない経由で表示される場合、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]アプリケーションは矢印になります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-239">If presented with no programmatic values from any source, the default cursor over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span>  
  
 <span data-ttu-id="ad80f-240">上にマウスが移動するたび、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]が発生する<xref:System.Windows.ContentElement.QueryCursor>イベント。</span><span class="sxs-lookup"><span data-stu-id="ad80f-240">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.ContentElement.QueryCursor> event.</span></span> <span data-ttu-id="ad80f-241">イベント バブルにおよび、経路上の任意の要素は、イベントを処理し、このイベントの引数を使用してカーソルの値を設定する機会を持ちます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-241">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor via the arguments of this event.</span></span> <span data-ttu-id="ad80f-242">その場合は、イベントが処理されますと、引数には、変更された値よりも優先の値、<xref:System.Windows.FrameworkContentElement.Cursor%2A>任意のレベルでは、プロパティしない限り、<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>設定されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-242">If that happens, the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkContentElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="ad80f-243">カスタム カーソルを作成しない場合は、通常このプロパティ設定するの静的プロパティの値を<xref:System.Windows.Input.Cursors>クラス。</span><span class="sxs-lookup"><span data-stu-id="ad80f-243">If not creating a custom cursor, typically you set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span>  
  
 <span data-ttu-id="ad80f-244">設定、<xref:System.Windows.Input.Cursor>にカスタム値が有効でない部分信頼でします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-244">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="ad80f-245">カスタムのカーソルの詳細については、次を参照してください。[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-245">For more information on custom cursors, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-246">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-246">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-247">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-247">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.CursorProperty>|  
|<span data-ttu-id="ad80f-248">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-248">Metadata properties set to `true`</span></span>|<span data-ttu-id="ad80f-249">None</span><span class="sxs-lookup"><span data-stu-id="ad80f-249">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-250">次の例では、カーソルをカスタム値に設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-250">The following example sets the cursor to a custom value.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkContentElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-251"><see cref="P:System.Windows.FrameworkContentElement.Cursor" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-251">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkContentElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-252">要素がデータ バインディングに含まれている場合に、その要素のデータ コンテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-252">Gets or sets the data context for an element when it participates in data binding.</span></span></summary>
        <value><span data-ttu-id="ad80f-253">データ コンテキストとして使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-253">The object to use as data context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-254">*データ コンテキスト*は情報をバインディングとバインド パスなどの他の特性のために使用されるバインド ソースについて、親要素から継承できるようにする概念です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-254">*Data context* is a concept that allows elements to inherit information from their parent elements about the binding source that is used for binding, as well as other characteristics of the binding such as the path.</span></span>  
  
 <span data-ttu-id="ad80f-255">直接データ コンテキストを設定することができます、[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]そのオブジェクトのプロパティに評価されるバインドでのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-255">Data context can be set directly to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="ad80f-256">または、データ コンテキストを設定、<xref:System.Windows.Data.DataSourceProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-256">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="ad80f-257">この依存関係プロパティは、プロパティの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-257">This dependency property inherits property values.</span></span> <span data-ttu-id="ad80f-258">その他の値のない子要素があるかどうかは<xref:System.Windows.FrameworkContentElement.DataContext%2A>ローカル値またはスタイルを通じて確立されると、プロパティ システムはある値を設定は、<xref:System.Windows.FrameworkContentElement.DataContext%2A>最も近い親要素の値をこの値が割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-258">If there are child elements with no other value for <xref:System.Windows.FrameworkContentElement.DataContext%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkContentElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="ad80f-259">次のプロパティのいずれかを使用する代わりに、<xref:System.Windows.Data.Binding>バインディング ソースを明示的に指定するクラス。 <xref:System.Windows.Data.Binding.ElementName%2A>、 <xref:System.Windows.Data.Binding.Source%2A>、または<xref:System.Windows.Data.Binding.RelativeSource%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-259">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> <span data-ttu-id="ad80f-260">詳細については、「[方法 :バインディング ソースを指定](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-260">For more information, see [How to: Specify the Binding Source](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).</span></span>  
  
 <span data-ttu-id="ad80f-261">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、<xref:System.Windows.FrameworkContentElement.DataContext%2A>として最も一般的に設定されて、<xref:System.Windows.Data.Binding>宣言します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-261">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkContentElement.DataContext%2A> is most commonly set to as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="ad80f-262">プロパティ要素構文または属性の構文を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-262">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="ad80f-263">属性構文は、このページの例に示します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-263">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="ad80f-264">設定することも<xref:System.Windows.FrameworkContentElement.DataContext%2A>コード。</span><span class="sxs-lookup"><span data-stu-id="ad80f-264">You can also set <xref:System.Windows.FrameworkContentElement.DataContext%2A> in code.</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ad80f-265">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="ad80f-265">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ad80f-266">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-266">XAML Attribute Usage</span></span>  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ad80f-267">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ad80f-267">XAML Values</span></span>  
 <span data-ttu-id="ad80f-268">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="ad80f-268">*dataContextObject*</span></span>  
 <span data-ttu-id="ad80f-269">親要素内のすべてのバインディングのデータ コンテキストとして機能する直接埋め込まれたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-269">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="ad80f-270">通常、このオブジェクトは、<xref:System.Windows.Data.Binding>別または<xref:System.Windows.Data.BindingBase>サブクラスです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-270">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> subclass.</span></span> <span data-ttu-id="ad80f-271">または、いずれかの生データ[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]オブジェクトの種類を後で定義されている実際のバインディングとバインドはここでは、配置できます対象としています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-271">Alternatively, raw data of any [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="ad80f-272">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="ad80f-272">*bindingUsage*</span></span>  
 <span data-ttu-id="ad80f-273">バインディングの使用方法、適切なデータ コンテキストに評価されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-273">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="ad80f-274">詳細については、「[バインディングのマークアップ拡張機能](~/docs/framework/wpf/advanced/binding-markup-extension.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-274">For details, see [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md).</span></span>  
  
 <span data-ttu-id="ad80f-275">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="ad80f-275">*resourceExtension*</span></span>  
 <span data-ttu-id="ad80f-276">次のいずれか: `StaticResource`、または`DynamicResource`します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-276">One of the following: `StaticResource`, or `DynamicResource`.</span></span> <span data-ttu-id="ad80f-277">この使用法は、リソース内のオブジェクトとして定義されている生データを参照するときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-277">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="ad80f-278">参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-278">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="ad80f-279">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="ad80f-279">*contextResourceKey*</span></span>  
 <span data-ttu-id="ad80f-280">内から要求されているオブジェクトのキー識別子、<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-280">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-281">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-281">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-282">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-282">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.DataContextProperty>|  
|<span data-ttu-id="ad80f-283">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-283">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-284">次の例でバインディングを設定する、<xref:System.Windows.Documents.Paragraph>としては、そのオブジェクトを確立する、新しいカスタム データ オブジェクトを作成して、要素<xref:System.Windows.FrameworkContentElement.DataContext%2A>、内のプロパティにバインド パスを設定するとします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-284">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new custom data object, establishing that object as <xref:System.Windows.FrameworkContentElement.DataContext%2A>, and setting the binding path to a property within it.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#DataContext](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#datacontext)]
 [!code-vb[ContentElementsSmorgasbord#DataContext](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#datacontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-285">この要素のデータ コンテキストが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-285">Occurs when this element's data context changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-286">データ コンテキストとデータ バインディングの詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-286">For an explanation of data contexts and data binding, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ad80f-287">要素のときに<xref:System.Windows.FrameworkContentElement.DataContext%2A>この要素のすべてのデータ バインド プロパティの変更が影響を受ける可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-287">When an element's <xref:System.Windows.FrameworkContentElement.DataContext%2A> changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="ad80f-288">これは、データ コンテキストを継承するには、現在の要素の子孫の要素である任意の要素とも、現在の要素自体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-288">This applies to any elements that are descendant elements of the current element, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="ad80f-289">このようなすべてのバインドを再解釈新しい<xref:System.Windows.FrameworkContentElement.DataContext%2A>バインドで新しい値を反映するようにします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-289">All such bindings re-interpret the new <xref:System.Windows.FrameworkContentElement.DataContext%2A> to reflect the new value in bindings.</span></span> <span data-ttu-id="ad80f-290">これらの生成に関連する変更の順序に関する保証はありません、<xref:System.Windows.FrameworkContentElement.DataContextChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="ad80f-290">There is no guarantee made about the order of these changes relative to the raising of the <xref:System.Windows.FrameworkContentElement.DataContextChanged> event.</span></span>  <span data-ttu-id="ad80f-291">イベントの後、または任意の組み合わせで、変更は、イベントの前に発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-291">The changes can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-292"><see cref="P:System.Windows.FrameworkContentElement.DataContext" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-292">Identifies the <see cref="P:System.Windows.FrameworkContentElement.DataContext" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkContentElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-293">このコントロールのスタイル テンプレートをテーマ内で検索するために使用するキーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-293">Gets or sets the key to use to find the style template for this control in themes.</span></span></summary>
        <value><span data-ttu-id="ad80f-294">スタイルのキー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-294">The style key.</span></span> <span data-ttu-id="ad80f-295">スタイルを設定する要素の <see cref="T:System.Type" /> になっていないと、テーマ スタイルの参照の一部として正しく機能しません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-295">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the element being styled.</span></span> <span data-ttu-id="ad80f-296"><see langword="null" /> 場合によっては許容される値です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-296"><see langword="null" /> is an accepted value for a certain case.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-297">このプロパティは、通常は直接の set アクセス操作子のいずれかを設定されません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-297">This property is typically not set through any of its direct setters.</span></span> <span data-ttu-id="ad80f-298">代わりに、新しいサブクラスを作成するたびに、この依存関係プロパティの型固有のメタデータをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-298">Instead, you override the type-specific metadata of this dependency property every time you create a new subclass.</span></span> <span data-ttu-id="ad80f-299">ときにサブクラス化する、呼び出し、<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>メソッドに対して、<xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty>コントロールのサブクラスの静的コンス トラクター内の識別子。</span><span class="sxs-lookup"><span data-stu-id="ad80f-299">When you subclass, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control subclass.</span></span>  
  
 <span data-ttu-id="ad80f-300">など、インライン クラス、<xref:System.Windows.Documents.Bold>実際には、ほとんどの実装をオーバーライドする以外、<xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A>その静的コンス トラクターといくつかのインスタンス コンス トラクターを公開するメタデータ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-300">For instance, an inline class such as <xref:System.Windows.Documents.Bold> actually has very little implementation beyond overriding the <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> metadata in its static constructor, and exposing several instance constructors.</span></span> <span data-ttu-id="ad80f-301">要素で囲まれているという事実、<xref:System.Windows.Documents.Bold>ゲインをタグ付け、<xref:System.Windows.Documents.TextElement.FontWeight%2A>プロパティの<xref:System.Windows.FontWeights.Bold%2A>の既定値の設定によって参照されているテーマ スタイル内で実装されます<xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A>に`typeof(Bold)`。</span><span class="sxs-lookup"><span data-stu-id="ad80f-301">The fact that elements surrounded by the <xref:System.Windows.Documents.Bold> tag gain a <xref:System.Windows.Documents.TextElement.FontWeight%2A> property of <xref:System.Windows.FontWeights.Bold%2A> is implemented within the theme style that was referenced by setting the default value of <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> to `typeof(Bold)`.</span></span>  
  
 <span data-ttu-id="ad80f-302">要素または意図的にないテーマ スタイルを使用するコントロールをする場合、設定、<xref:System.Windows.FrameworkContentElement.OverridesDefaultStyle%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-302">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkContentElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-303">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-303">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-304">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-304">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="ad80f-305">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-305">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-306"><see cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-306">Identifies the <see cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkContentElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-307">要素が初期化された直後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-307">Called immediately after an element is initialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-308">要素の読み込みプロセス中に、要素が初期化されるときに発生する特別な処理を提供するのには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-308">Implement this method to provide special handling that should occur when your element is initialized during the element loading process.</span></span>  
  
 <span data-ttu-id="ad80f-309">実装は、ベース (既定値) の実装の初期化を追跡するいくつかの内部フラグが設定されるため、基本の実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-309">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span>  
  
 <span data-ttu-id="ad80f-310">場合<xref:System.Windows.FrameworkContentElement.BeginInit%2A>以前、呼び出された基本実装を発生させる、<xref:System.Windows.FrameworkContentElement.Initialized>イベント。</span><span class="sxs-lookup"><span data-stu-id="ad80f-310">If <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkContentElement.Initialized> event.</span></span> <span data-ttu-id="ad80f-311">の場合<xref:System.Windows.FrameworkContentElement.BeginInit%2A>が呼び出されていないかできなかったかどうかを確認<xref:System.Windows.FrameworkContentElement.BeginInit%2A>が呼び出されると、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-311">Otherwise, if <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was called, the event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkContentElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad80f-312">検索対象の要素の名前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-312">Name of the element to search for.</span></span></param>
        <summary><span data-ttu-id="ad80f-313">指定した識別名を持つ要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-313">Finds an element that has the provided identifier name.</span></span></summary>
        <returns><span data-ttu-id="ad80f-314">要求された要素。</span><span class="sxs-lookup"><span data-stu-id="ad80f-314">The requested element.</span></span> <span data-ttu-id="ad80f-315">一致する要素が見つからなかった場合は <see langword="null" /> になります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-315">May be <see langword="null" /> if no matching element was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-316">この要素に子要素がある場合は、要求された要素をという名前の再帰的には、すべて検索が、これらの子要素。</span><span class="sxs-lookup"><span data-stu-id="ad80f-316">If this element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-317">次の例では、内で参照先の名前によって検出された要素のプロパティを設定<xref:System.Windows.Documents.FlowDocument>ページ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-317">The following example sets a property on an element found by name within a referenced <xref:System.Windows.Documents.FlowDocument> on a page.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#FindName](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#findname)]
 [!code-vb[ContentElementsSmorgasbord#FindName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#findname)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkContentElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="ad80f-318">検索するリソースのキー識別子。</span><span class="sxs-lookup"><span data-stu-id="ad80f-318">Key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="ad80f-319">指定されたキーを使用してリソースを検索し、要求されたリソースが見つからない場合は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-319">Searches for a resource with the specified key, and will throw an exception if the requested resource is not found.</span></span></summary>
        <returns><span data-ttu-id="ad80f-320">見つかったリソース。または一致するリソースが見つからなかった場合は <see langword="null" /> (<see langword="null" /> の場合は例外もスローします)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-320">The found resource, or <see langword="null" /> if no matching resource was found (but will also throw an exception if <see langword="null" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="ad80f-321">見つからないキーのこのメソッドを呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-321">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="ad80f-322">代わりに呼び出す必要がある場合、この場合の例外を処理しない<xref:System.Windows.FrameworkContentElement.TryFindResource%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-322">If you do not want to handle exceptions for this case, you should instead call <xref:System.Windows.FrameworkContentElement.TryFindResource%2A>.</span></span> <span data-ttu-id="ad80f-323"><xref:System.Windows.FrameworkContentElement.TryFindResource%2A> 返します`null`リソースが検出され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-323"><xref:System.Windows.FrameworkContentElement.TryFindResource%2A> returns `null` when no resource is found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="ad80f-324">呼び出し元の要素で、リソースが見つからない場合は、親のツリーが論理ツリーを使用して検索ツリーになるのと同じ方法で検索すると、リソースは、実行時にキーによって要求されました。</span><span class="sxs-lookup"><span data-stu-id="ad80f-324">If the resource is not found on the calling element, the parent tree is searched using the logical tree, in the same way that the tree would be searched if a resource were requested by key at run-time.</span></span>  
  
 <span data-ttu-id="ad80f-325">通常返されるリソース値に設定しようとしているプロパティの型を戻り値をキャストするとすぐに。</span><span class="sxs-lookup"><span data-stu-id="ad80f-325">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-326">次の例では、マークアップで定義されているリソースを検索し、ルーティング イベントへの応答内の要素の特定のプロパティに適用されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-326">The following example finds a resource as defined in markup and applies it to a certain property of an element in response to a routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#FindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#findresource)]
 [!code-vb[ContentElementsSmorgasbord#FindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#findresource)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="ad80f-327">要求されたリソース キーは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="ad80f-327">The requested resource key was not found.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad80f-328"><paramref name="resourceKey" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-328"><paramref name="resourceKey" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkContentElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-329">この要素がキーボード フォーカスを受け取ったときに適用される外観、効果、またはその他のスタイル特性のカスタマイズを可能にするオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-329">Gets or sets an object that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span></span></summary>
        <value><span data-ttu-id="ad80f-330">フォーカスに適用する目的のスタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-330">The desired style to apply on focus.</span></span> <span data-ttu-id="ad80f-331">依存関係プロパティで宣言されている既定値は、空の静的 <see cref="T:System.Windows.Style" /> です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-331">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span></span> <span data-ttu-id="ad80f-332">ただし、実行時の有効値は、多くの場合、コントロールのテーマ サポートによって提供されたスタイルです (ただし、常にそうであるとは限りません)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-332">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-333">このプロパティを設定すると[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]として参照されているリソースが通常は、スタイルはほぼ常に、要素としてのインラインではなく、リソースとして定義されます、<xref:System.Windows.StaticResourceExtension>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-333">When setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], styles are almost always defined as a resource, rather than inline as an element, and that resource is usually referenced as a <xref:System.Windows.StaticResourceExtension>.</span></span>  
  
 <span data-ttu-id="ad80f-334">このプロパティが視覚的な外観に影響を与えますが、ようにメタデータで報告されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-334">Note that this property affects visual appearance but does not report so in metadata.</span></span> <span data-ttu-id="ad80f-335">視覚的な外観の変更はイベント ドリブンし、常に適用され、したがっては限らないメタデータ内の任意のビジュアルやレイアウト情報があるためにです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-335">This is because the visual appearance change is event-driven and may not apply at all times, and thus should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="ad80f-336">概念的には、コントロールに適用されたフォーカスの視覚的な動作は、要素間で一貫している必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-336">Conceptually, the visual behavior of focus applied to a control should be coherent from element to element.</span></span> <span data-ttu-id="ad80f-337">一貫性を実現する最も実用的な方法は、全体のテーマを作成する場合にのみフォーカス表示スタイルを変更します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-337">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="ad80f-338">個々 のスタイルとテーマの一部ではなく、このプロパティを設定キーボード フォーカスに関するユーザー エクスペリエンスに混乱には、このプロパティの使用目的はありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-338">Setting this property on individual styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="ad80f-339">入力状態の個々 のプロパティのスタイルでトリガーをなど、使用するはるかに優れた方法は、要素固有の動作は意図的に一貫性のあるテーマである場合、<xref:System.Windows.UIElement.IsFocused%2A>または<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>とにはない方法で実行するには視覚的に既存のフォーカス ビジュアル スタイルに干渉します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-339">If you are intending element-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="ad80f-340">目的で設計の詳細については<xref:System.Windows.FrameworkContentElement.FocusVisualStyle%2A>と代替プロパティの焦点は、「[コントロール、および FocusVisualStyle フォーカスのスタイル](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-340">For more information on the design intention of <xref:System.Windows.FrameworkContentElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ad80f-341">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-341">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ad80f-342">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="ad80f-342">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ad80f-343">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ad80f-343">XAML Values</span></span>  
 <span data-ttu-id="ad80f-344">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="ad80f-344">*resourceExtension*</span></span>  
 <span data-ttu-id="ad80f-345">次のいずれか: または。</span><span class="sxs-lookup"><span data-stu-id="ad80f-345">One of the following: , or .</span></span> <span data-ttu-id="ad80f-346">参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-346">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="ad80f-347">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="ad80f-347">*styleResourceKey*</span></span>  
 <span data-ttu-id="ad80f-348">要求されているスタイルを識別するキー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-348">The key that identifies the style being requested.</span></span> <span data-ttu-id="ad80f-349">このキーは、既存のリソースで、<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-349">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad80f-350">プロパティ要素構文は技術的に可能であれば、推奨されません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-350">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="ad80f-351">参照してください[インライン スタイルおよびテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-351">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span>  <span data-ttu-id="ad80f-352">使用してバインディング参照[TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md)または<xref:System.Windows.Data.Binding>も可能ですが、一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-352">A binding reference using [TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-353">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-353">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-354">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-354">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="ad80f-355">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-355">Metadata properties set to `true`</span></span>|<span data-ttu-id="ad80f-356">None</span><span class="sxs-lookup"><span data-stu-id="ad80f-356">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-357"><see cref="P:System.Windows.FrameworkContentElement.FocusVisualStyle" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-357">Identifies the <see cref="P:System.Windows.FrameworkContentElement.FocusVisualStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkContentElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-358">このインスタンスの <see cref="T:System.Windows.FrameworkContentElement" /> プロパティの宣言に従って[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] がカーソルを描画するように、この <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> で強制するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-358">Gets or sets a value indicating whether this <see cref="T:System.Windows.FrameworkContentElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by this instance's <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> property.</span></span></summary>
        <value><span data-ttu-id="ad80f-359">この要素の上にあるときのカーソルの表示に、このインスタンスのカーソル設定を強制的に使用する場合は <see langword="true" /> (すべての子要素も対象となります)。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-359"><see langword="true" /> to force cursor presentation while over this element to use this instance's setting for the cursor (including on all child elements); otherwise <see langword="false" />.</span></span> <span data-ttu-id="ad80f-360">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-360">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-361">このプロパティを設定`true`子要素で設定されているカーソルの設定が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-361">Setting this property to `true` will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="ad80f-362">これは一般にアプリケーション[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]カーソルを指定しようとしている子要素の場合に特に、ユーザーの混乱する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-362">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="ad80f-363">設定<xref:System.Windows.FrameworkElement.ForceCursor%2A>がコントロールのサブクラス化や合成のシナリオでより適しています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-363">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-364">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-364">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-365">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-365">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ForceCursorProperty>|  
|<span data-ttu-id="ad80f-366">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-366">Metadata properties set to `true`</span></span>|<span data-ttu-id="ad80f-367">None</span><span class="sxs-lookup"><span data-stu-id="ad80f-367">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-368">次の例では、要素上でカーソルを強制します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-368">The following example forces the cursor while over the element.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-369"><see cref="P:System.Windows.FrameworkContentElement.ForceCursor" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-369">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ForceCursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkContentElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="ad80f-370">バインディングの取得元のターゲット <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-370">The target <see cref="T:System.Windows.DependencyProperty" /> from which to get the binding.</span></span></param>
        <summary><span data-ttu-id="ad80f-371">指定したプロパティのバインディングに関する <see cref="T:System.Windows.Data.BindingExpression" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-371">Gets the <see cref="T:System.Windows.Data.BindingExpression" /> for the specified property's binding.</span></span></summary>
        <returns><span data-ttu-id="ad80f-372">ターゲットがデータ バインドされている場合は <see cref="T:System.Windows.Data.BindingExpression" /> を返します。それ以外の場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-372">Returns a <see cref="T:System.Windows.Data.BindingExpression" /> if the target is data bound; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ad80f-373">次の例では、プロパティを照会して、バインディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-373">The following example retrieves a binding by querying a property.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#GetBindingExpression](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#getbindingexpression)]
 [!code-vb[ContentElementsSmorgasbord#GetBindingExpression](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#getbindingexpression)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkContentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-374">ビジュアル親が存在しない場合に、この要素に対する代替の論理上の親を返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-374">Returns an alternative logical parent for this element if there is no visual parent.</span></span> <span data-ttu-id="ad80f-375">この場合、<see cref="T:System.Windows.FrameworkContentElement" /> の親の値は常に <see cref="P:System.Windows.FrameworkContentElement.Parent" /> プロパティの値と同じになります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-375">In this case, a <see cref="T:System.Windows.FrameworkContentElement" /> parent is always the same value as the <see cref="P:System.Windows.FrameworkContentElement.Parent" /> property.</span></span></summary>
        <returns><span data-ttu-id="ad80f-376">このメソッドの WPF フレームワーク レベルの実装が非ビジュアルの親接続を持つ場合は <see langword="null" /> 以外の値を返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-376">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-377">既定の実装では、予想される 1 つのビジュアル親を返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-377">The default implementation returns the expected single visual parent.</span></span> <span data-ttu-id="ad80f-378">カスタム実装には、代替の親リレーションシップを返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-378">Custom implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-379">この <see cref="T:System.Windows.FrameworkContentElement" /> が初期化されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-379">Occurs when this <see cref="T:System.Windows.FrameworkContentElement" /> is initialized.</span></span> <span data-ttu-id="ad80f-380">これと同時に、<see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> プロパティの値が <see langword="false" /> (未定義) から <see langword="true" /> に変更されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-380">This coincides with cases where the value of the <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-381">このイベントがあるときに発生します、<xref:System.Windows.FrameworkContentElement.EndInit%2A>または<xref:System.Windows.FrameworkContentElement.OnInitialized%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-381">This event will be raised whenever the <xref:System.Windows.FrameworkContentElement.EndInit%2A> or <xref:System.Windows.FrameworkContentElement.OnInitialized%2A> methods are called.</span></span> <span data-ttu-id="ad80f-382">これらのメソッドの呼び出しが行われた意図的なコード、または、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]読み込みプロセス。</span><span class="sxs-lookup"><span data-stu-id="ad80f-382">Calls to these methods could have been made by deliberate code, or by the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] loading process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkContentElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-383">この <see cref="T:System.Windows.FrameworkContentElement" /> で使用される入力のコンテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-383">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></summary>
        <value><span data-ttu-id="ad80f-384">代替の入力メソッドからの入力を解釈する方法を変更する入力スコープ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-384">The input scope, which modifies how input from alternative input methods is interpreted.</span></span> <span data-ttu-id="ad80f-385">既定値は <see langword="null" /> です (コマンドの既定の処理が行われます)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-385">The default value is <see langword="null" /> (which results in a default handling of commands).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-386">この依存関係プロパティは、プロパティの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-386">This dependency property inherits property values.</span></span> <span data-ttu-id="ad80f-387">その他の値のない子要素があるかどうかは<xref:System.Windows.FrameworkElement.InputScope%2A>ローカル値またはスタイルを通じて確立されると、プロパティ システムはある値を設定は、<xref:System.Windows.FrameworkElement.InputScope%2A>最も近い親要素の値をこの値が割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-387">If there are child elements with no other value for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="ad80f-388">ただし、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文の使用方法が表示されており、このプロパティの設定は許可されて構文的に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-388">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-389">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-389">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-390">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-390">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.InputScopeProperty>|  
|<span data-ttu-id="ad80f-391">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-391">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-392"><see cref="P:System.Windows.FrameworkContentElement.InputScope" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-392">Identifies the <see cref="P:System.Windows.FrameworkContentElement.InputScope" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkContentElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-393">この要素が初期化されているかどうかを示す値を取得します。要素の初期化は、[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] として読み込むことによって行われる場合と、<see cref="M:System.Windows.FrameworkContentElement.EndInit" /> メソッドを明示的に呼び出すことによって行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-393">Gets a value indicating whether this element has been initialized, either by being loaded as [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], or by explicitly having its <see cref="M:System.Windows.FrameworkContentElement.EndInit" /> method called.</span></span></summary>
        <value><span data-ttu-id="ad80f-394">上で挙げた読み込みまたはメソッド呼び出しを通じて要素が初期化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-394"><see langword="true" /> if the element is initialized per the aforementioned loading or method calls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-395">このプロパティがありますも`true`新しい親要素を持つし、そのために再読み込みされたことになるように、この要素が要素ツリー内で移動されたかどうか。</span><span class="sxs-lookup"><span data-stu-id="ad80f-395">This property may also be `true` if this element has been moved within the element tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkContentElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-396">この要素が表示のために読み込まれているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-396">Gets a value indicating whether this element has been loaded for presentation.</span></span></summary>
        <value><span data-ttu-id="ad80f-397">現在の要素が要素ツリーにアタッチされ、描画されている場合は <see langword="true" />。読み込まれた要素ツリーに要素がアタッチされていない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-397"><see langword="true" /> if the current element is attached to an element tree and has been rendered; <see langword="false" /> if the element has never been attached to a loaded element tree.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-398">新しく構築されたインスタンスからこのプロパティは、まず`false`、開いたまま`true`に設定されていると`true`コードによって、その後削除された場合でも、します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-398">From a newly constructed instance, this property starts off `false`, and remains `true` once it is set to `true`, even if subsequently removed by  code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-399">次のコード例を使用して<xref:System.Windows.FrameworkContentElement.IsLoaded%2A>関数を確認するために、条件の確認として`displayData`(非表示) が有効な要素上で起動、オンデマンドでハンドラーの一部として扱うためにページ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-399">The following example code uses <xref:System.Windows.FrameworkContentElement.IsLoaded%2A> as a conditional check to assure that a function `displayData` (not shown) will have valid elements loaded on the page to work against, as part of an on-demand handler.</span></span> <span data-ttu-id="ad80f-400">イベント ハンドラーとして同じロジックが実行される<xref:System.Windows.FrameworkContentElement.Loaded>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-400">That same logic is run as an event handler for <xref:System.Windows.FrameworkContentElement.Loaded>.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#isloaded)]
 [!code-vb[ContentElementsSmorgasbord#IsLoaded](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#isloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkContentElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkContentElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-401">個々の要素に適用されるローカリゼーション/グローバリゼーション言語情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-401">Gets or sets localization/globalization language information that applies to an individual element.</span></span></summary>
        <value><span data-ttu-id="ad80f-402">この要素のカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="ad80f-402">The culture information for this element.</span></span> <span data-ttu-id="ad80f-403">既定値は、<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> の値が文字列 "en-US" に設定された <see cref="T:System.Windows.Markup.XmlLanguage" /> インスタンスです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-403">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> instance with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-404">文字列の形式では、RFC 3066 標準に従います。</span><span class="sxs-lookup"><span data-stu-id="ad80f-404">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="ad80f-405">たとえば、米国"EN-US"は英語です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-405">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="ad80f-406">参照してください<xref:System.Windows.Markup.XmlLanguage>値と形式の詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-406">See <xref:System.Windows.Markup.XmlLanguage> for more information on the values and format.</span></span>  
  
 <span data-ttu-id="ad80f-407">この依存関係プロパティは、プロパティの値を継承します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-407">This dependency property inherits property values.</span></span> <span data-ttu-id="ad80f-408">その他の値のない子要素があるかどうかは<xref:System.Windows.FrameworkElement.Language%2A>ローカル値またはスタイルを通じて確立されると、プロパティ システムはある値を設定は、<xref:System.Windows.FrameworkElement.Language%2A>最も近い親要素の値をこの値が割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-408">If there are child elements with no other value for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest parent element with this value assigned.</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-409">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-409">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-410">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-410">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.LanguageProperty>|  
|<span data-ttu-id="ad80f-411">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-411">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-412"><see cref="P:System.Windows.FrameworkContentElement.Language" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-412">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Language" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-413">要素のレイアウトやレンダリングが完了し、操作を受け入れる準備が整ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-413">Occurs when the element is laid out, rendered, and ready for interaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-414">直接ルーティング イベントがルートに従っていない、発生しますが、同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-414">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="ad80f-415">直接ルーティング イベントは、その他のルーティング イベントの動作をサポートして: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-415">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ad80f-416">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-417">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-417">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.LoadedEvent>|  
|<span data-ttu-id="ad80f-418">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-418">Routing strategy</span></span>|<span data-ttu-id="ad80f-419">直接</span><span class="sxs-lookup"><span data-stu-id="ad80f-419">Direct</span></span>|  
|<span data-ttu-id="ad80f-420">Delegate</span><span class="sxs-lookup"><span data-stu-id="ad80f-420">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-421"><see cref="E:System.Windows.FrameworkContentElement.Loaded" /> ([Routed Events Overview (ルーティング イベントの概要)](~/docs/framework/wpf/advanced/routed-events-overview.md)) を識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-421">Identifies the <see cref="E:System.Windows.FrameworkContentElement.Loaded" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-422">ルーティング イベントが登録されているときに、イベント識別子のオブジェクトは作成されます (を参照してください<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) クラス ハンドラーを追加するために使用して (を参照してください<xref:System.Windows.EventManager.RegisterClassHandler%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-422">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="ad80f-423">識別子のオブジェクトには、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-423">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkContentElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-424">この要素の論理上の子要素に対する列挙子を取得します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-424">Gets an enumerator for the logical child elements of this element.</span></span></summary>
        <value><span data-ttu-id="ad80f-425">この要素の論理上の子要素に対する列挙子。</span><span class="sxs-lookup"><span data-stu-id="ad80f-425">An enumerator for logical child elements of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-426">使用する方法の詳細についての<xref:System.Windows.FrameworkContentElement.LogicalChildren%2A>と<xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>を参照してください[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-426">For more information on how to use <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkContentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="ad80f-427">フォーカスの移動方向を表す列挙値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-427">The direction that focus is to be moved, as a value of the enumeration.</span></span></param>
        <summary><span data-ttu-id="ad80f-428">この要素から別の要素にキーボード フォーカスを移動します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-428">Moves the keyboard focus from this element to another element.</span></span></summary>
        <returns><span data-ttu-id="ad80f-429">フォーカスの移動が成功した場合は <see langword="true" /> が返されます。指定した方向にターゲット要素が存在しない場合は <see langword="false" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-429">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkContentElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-430">要素の識別名を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-430">Gets or sets the identifying name of the element.</span></span> <span data-ttu-id="ad80f-431">この名前はインスタンス参照を提供するため、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] の解析中に参照が構築されると、プログラムの分離コード (イベント ハンドラー コードなど) は要素を参照できるようになります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-431">The name provides an instance reference so that programmatic code-behind, such as event handler code, can refer to an element once it is constructed during parsing of [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span></summary>
        <value><span data-ttu-id="ad80f-432">要素の名前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-432">The name of the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-433">このプロパティの最も一般的な使用方法は、指定するときに、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]マークアップ内の要素名。</span><span class="sxs-lookup"><span data-stu-id="ad80f-433">The most common usage of this property is when specifying a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name in markup.</span></span>  
  
 <span data-ttu-id="ad80f-434">このプロパティでは、WPF フレームワーク レベルの便利なプロパティを設定する基本的にでは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name ディレクティブ](~/docs/framework/xaml-services/x-name-directive.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-434">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md).</span></span>  
  
 <span data-ttu-id="ad80f-435">取得、<xref:System.Windows.FrameworkContentElement.Name%2A>コードからです。 一般的な、既に適切な参照をコードである場合のメソッドを呼び出すだけで済みます、要素のプロパティを参照し、一般的に必要ではありません、<xref:System.Windows.FrameworkContentElement.Name%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-435">Getting a <xref:System.Windows.FrameworkContentElement.Name%2A> from code is not common, because if you have the appropriate reference in code already, you can just call methods and properties on the element reference and do not generally need the <xref:System.Windows.FrameworkContentElement.Name%2A>.</span></span> <span data-ttu-id="ad80f-436">例外は、文字列がオーバー ロードされたに意味では、その名前を表示すると便利な場合[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-436">An exception is if the string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="ad80f-437">設定、<xref:System.Windows.FrameworkContentElement.Name%2A>コードから場合元<xref:System.Windows.FrameworkContentElement.Name%2A>がマークアップから設定はしないでも、およびプロパティを変更しても、オブジェクト参照は変更されません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-437">Setting a <xref:System.Windows.FrameworkContentElement.Name%2A> from code if the original <xref:System.Windows.FrameworkContentElement.Name%2A> was set from markup is also not recommended, and changing the property will not change the object reference.</span></span> <span data-ttu-id="ad80f-438">基になる名前スコープが中に明示的に作成された場合にのみ、このようなオブジェクト参照が作成された[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]読み込み。</span><span class="sxs-lookup"><span data-stu-id="ad80f-438">Such object references are created only when the underlying namescopes are explicitly created during [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] loading.</span></span>  
  
 <span data-ttu-id="ad80f-439">具体的には呼び出す必要がある<xref:System.Windows.FrameworkContentElement.RegisterName%2A>、効果的な変更で、<xref:System.Windows.FrameworkContentElement.Name%2A>既に読み込まれた要素のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-439">You must specifically call <xref:System.Windows.FrameworkContentElement.RegisterName%2A> to make an effective change on the <xref:System.Windows.FrameworkContentElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="ad80f-440">1 つの重要な設定がの場合<xref:System.Windows.FrameworkContentElement.Name%2A>コードからは重要なはに対してはストーリー ボードの名前付けの要素を実行します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-440">One notable case where setting <xref:System.Windows.FrameworkContentElement.Name%2A> from  code is important is for naming elements that storyboards will run against.</span></span> <span data-ttu-id="ad80f-441">名前を登録する前にインスタンス化を割り当てる必要がありますも、<xref:System.Windows.NameScope>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="ad80f-441">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="ad80f-442">例のセクションを参照または[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-442">See the Example section, or [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="ad80f-443">設定<xref:System.Windows.FrameworkContentElement.Name%2A>からコードには、アプリケーションが制限されていますが、特に、アプリケーションにページが再読み込みして、必ずしもその分離コードが実行時のコードではありません場所は、ナビゲーション モデルを採用している場合より一般的には名前で要素を検索それぞれのページ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-443">Setting <xref:System.Windows.FrameworkContentElement.Name%2A> from code has limited applications, but looking up an element by name is more common, particularly if you are employing a navigation model where pages reload into the application and the run-time code is not necessarily the code-behind of that respective page.</span></span> <span data-ttu-id="ad80f-444">ユーティリティ メソッド<xref:System.Windows.FrameworkContentElement.FindName%2A>、いずれかから利用できる<xref:System.Windows.FrameworkContentElement>で要素を検索できます<xref:System.Windows.FrameworkContentElement.Name%2A>その要素の論理ツリーを再帰的にします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-444">The utility method <xref:System.Windows.FrameworkContentElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkContentElement>, can find any element by <xref:System.Windows.FrameworkContentElement.Name%2A> in that element's logical tree recursively.</span></span> <span data-ttu-id="ad80f-445">使用することができます、<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>の静的メソッド<xref:System.Windows.LogicalTreeHelper>、により、<xref:System.Windows.FrameworkContentElement.Name%2A>を引数として文字列。</span><span class="sxs-lookup"><span data-stu-id="ad80f-445">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes the <xref:System.Windows.FrameworkContentElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="ad80f-446">よく使用されるルート要素 (<xref:System.Windows.Window>、<xref:System.Windows.Controls.Page>など)、インターフェイスを実装して<xref:System.Windows.Markup.INameScope>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-446">Commonly used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="ad80f-447">このインターフェイスの実装は、名は、スコープ内で明確であることを強制する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-447">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-448">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-448">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-449">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-449">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.NameProperty>|  
|<span data-ttu-id="ad80f-450">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-450">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-451"><see cref="P:System.Windows.FrameworkContentElement.Name" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-451">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Name" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkContentElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-452">イベントに関するデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-452">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="ad80f-453"><see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-453">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="ad80f-454">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-454">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-455">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-455">This method has no default implementation.</span></span> <span data-ttu-id="ad80f-456">継承の中間クラスがこのメソッドを実装している場合は、基本実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-456">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="ad80f-457">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: 一致する、インスタンス ハンドラーではなく、クラス ハンドラーで、派生クラスからイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-457">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="ad80f-458">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-458">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ad80f-459">On のメソッドの実装パターンは、ルーティング イベントを必ずしもハンドラーで起動される要素の子要素で発生する可能性がありますので、ルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-459">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ad80f-460">そのため、実装、イベント引数のソースのプロパティを考慮する必要があります (および再ほとんどの場合、イベントを発生しないでください)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-460">Therefore, your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="ad80f-461">サブクラス<xref:System.Windows.FrameworkContentElement>にイベントが経路上に受信したときに、プライベート クラス ハンドラー メソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-461">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="ad80f-462">イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-462">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkContentElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-463">イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-463">Event data for the event.</span></span></param>
        <summary><span data-ttu-id="ad80f-464"><see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-464">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="ad80f-465">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-465">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-466">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-466">This method has no default implementation.</span></span> <span data-ttu-id="ad80f-467">継承の中間クラスがこのメソッドを実装している場合にも、base() を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-467">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="ad80f-468">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: 一致する、インスタンス ハンドラーではなく、クラス ハンドラーで、派生クラスからイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-468">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="ad80f-469">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-469">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ad80f-470">On のメソッドの実装パターンはルーティング イベントのさまざまなルーティング イベントをイベント引数のソースの取得、実装があるハンドラーを呼び出すは必ずしもの要素の子要素で発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生しないでください)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-470">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="ad80f-471">サブクラス<xref:System.Windows.FrameworkContentElement>にイベントが経路上に受信したときに、プライベート クラス ハンドラー メソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-471">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="ad80f-472">イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-472">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkContentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-473">イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-473">Event data for the event.</span></span></param>
        <summary><span data-ttu-id="ad80f-474"><see cref="E:System.Windows.ContentElement.GotFocus" /> イベントのクラス ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-474">Class handler for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-475">このクラス ハンドラーは、この要素から、イベントが発生した場合、この要素の適切なフォーカスの動作を設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-475">This class handler sets appropriate focus behavior on this element if the event originated from this element.</span></span> <span data-ttu-id="ad80f-476">イベントのソース ツリー内の別の要素だった場合、ハンドラーは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-476">If the event's source was another element in the tree, the handler does nothing.</span></span>  
  
 <span data-ttu-id="ad80f-477">これらの既定の動作を要素にフォーカスを変更するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-477">Override this method in order to change these default focusing behavior on your element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkContentElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-478">イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-478">Event data for the event.</span></span></param>
        <summary><span data-ttu-id="ad80f-479"><see cref="E:System.Windows.FrameworkContentElement.Initialized" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-479">Raises the <see cref="E:System.Windows.FrameworkContentElement.Initialized" /> event.</span></span> <span data-ttu-id="ad80f-480">このメソッドは、<see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> が <see langword="true" /> に設定されるたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-480">This method is invoked whenever <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> is set to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-481">この仮想メソッドの既定の実装は、このトピックで前述したようにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-481">The default implementation of this virtual method raises the event as described earlier in this topic.</span></span> <span data-ttu-id="ad80f-482">上書きは、この動作を保持する base() を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-482">Overrides should call base() to preserve this behavior.</span></span>  
  
 <span data-ttu-id="ad80f-483">なお、<xref:System.Windows.FrameworkContentElement.IsInitialized%2A>プロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-483">Note that the <xref:System.Windows.FrameworkContentElement.IsInitialized%2A> property is read-only.</span></span> <span data-ttu-id="ad80f-484">そのため、その動作を強制的に初期化する方法を設定できません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-484">Therefore, you cannot set it to force initialization behavior that way.</span></span> <span data-ttu-id="ad80f-485">初期化 設定でのみ実行するものでは、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]フレームワーク。</span><span class="sxs-lookup"><span data-stu-id="ad80f-485">Initialization setting is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkContentElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-486">変更されたプロパティ (古い値と新しい値を含む) を示すイベント データ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-486">The event data that describes the property that changed, including the old and new values.</span></span></param>
        <summary><span data-ttu-id="ad80f-487">この <see cref="T:System.Windows.FrameworkContentElement" /> の依存関係プロパティの有効値が更新された場合に必ず呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-487">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkContentElement" /> has been updated.</span></span> <span data-ttu-id="ad80f-488">変更が発生した特定の依存関係プロパティが引数パラメーターで報告されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-488">The specific dependency property that changed is reported in the arguments parameter.</span></span> <span data-ttu-id="ad80f-489"><see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-489">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-490">このメソッドは、一般的にプロパティの変更または無効化を検出するものではありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-490">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="ad80f-491">代わりにものでは、無効化の一般的なパターンを変更するためのプロパティの広範な分類について特定の情報がわかっている場合。</span><span class="sxs-lookup"><span data-stu-id="ad80f-491">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="ad80f-492">このメソッドでは、オブジェクトの有効期間中に何度もを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-492">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="ad80f-493">固有のプロパティのメタデータをオーバーライドし、適用する場合、パフォーマンスが向上を実現するそのため、<xref:System.Windows.CoerceValueCallback>または<xref:System.Windows.PropertyChangedCallback>個々 のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-493">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="ad80f-494">場合にこのメソッドを使用すると、<xref:System.Windows.FrameworkContentElement>多数値と相互に依存関係プロパティにはが含まれています動作をレンダリングする必要がありますを再実行するいくつかの関連プロパティの無効化のケースのようにロジックが含まれている場合またはします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-494">However, you would use this method if a <xref:System.Windows.FrameworkContentElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="ad80f-495">同じ名前に注意してください。`OnPropertyChanged`異なるシグネチャを持つメソッド (パラメーターの型が<xref:System.ComponentModel.PropertyChangedEventArgs>) クラスの数で表示されることができます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-495">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="ad80f-496">ある`OnPropertyChanged`のコントラクトの一部であり、データ オブジェクトの通知に使用<xref:System.ComponentModel.INotifyPropertyChanged>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-496">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ad80f-497">常に、実装の最初の操作として基本の実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-497">Always call the base implementation, as the first operation in your implementation.</span></span> <span data-ttu-id="ad80f-498">これに失敗には、全体が無効になりますが大幅に[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プロパティ システムは、不適切な値を報告するために発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-498">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkContentElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle"><span data-ttu-id="ad80f-499">元のスタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-499">The old style.</span></span></param>
        <param name="newStyle"><span data-ttu-id="ad80f-500">新しいスタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-500">The new style.</span></span></param>
        <summary><span data-ttu-id="ad80f-501">この要素で使用されているスタイルが変更された場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-501">Invoked when the style that is in use on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-502">このメソッドには、スタイルが変更された条件を示す内部フラグを設定する既定の実装があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-502">This method has a default implementation that sets an internal flag noting the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ad80f-503">常に、基本実装を呼び出し、それ以外の場合、スタイルを適用することはできません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-503">Always call the base implementation, otherwise styles cannot be applied.</span></span> <span data-ttu-id="ad80f-504">このメソッドをオーバーライドするためのシナリオは、派生クラスが、専用のスタイル セレクターまたはスタイルの値をキャッシュする場合などがあります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-504">Scenarios for overriding this method might include if your derived class has a specialized style selector, or caches style values.</span></span> <span data-ttu-id="ad80f-505">テーマの変更はこのメソッドを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-505">Theme changes will potentially invoke this method.</span></span></para></block>
        <altmember cref="P:System.Windows.FrameworkContentElement.Style" />
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkContentElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-506">イベントに関するデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-506">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="ad80f-507"><see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-507">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="ad80f-508">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-508">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-509">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-509">This method has no default implementation.</span></span> <span data-ttu-id="ad80f-510">継承の中間クラスがこのメソッドを実装している場合にも、base() を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-510">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="ad80f-511">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: 一致する、インスタンス ハンドラーではなく、クラス ハンドラーで、派生クラスからイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-511">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="ad80f-512">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-512">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ad80f-513">On のメソッドの実装パターンはルーティング イベントのさまざまなルーティング イベントをイベント引数のソースの取得、実装があるハンドラーを呼び出すは必ずしもの要素の子要素で発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生しないでください)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-513">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="ad80f-514">サブクラス<xref:System.Windows.FrameworkContentElement>にイベントが経路上に受信したときに、プライベート クラス ハンドラー メソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-514">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="ad80f-515">イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-515">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkContentElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad80f-516">イベントに関するデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-516">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="ad80f-517"><see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> ルーティング イベントが、その経路上でこのクラスに到達するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-517">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="ad80f-518">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-518">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-519">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-519">This method has no default implementation.</span></span> <span data-ttu-id="ad80f-520">継承の中間クラスがこのメソッドを実装している場合にも、base() を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-520">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="ad80f-521">このメソッドの目的は、類似した[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: 一致する、インスタンス ハンドラーではなく、クラス ハンドラーで、派生クラスからイベントを処理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-521">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="ad80f-522">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-522">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ad80f-523">On のメソッドの実装パターンはルーティング イベントのさまざまなルーティング イベントをハンドラー イベント引数のソースを実行する必要があります、実装を呼び出すは必ずしもの要素の子要素で発生する可能性があります。アカウントにプロパティ (および再ほとんどの場合、イベントを発生しないでください)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-523">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="ad80f-524">サブクラス<xref:System.Windows.FrameworkContentElement>にイベントが経路上に受信したときに、プライベート クラス ハンドラー メソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-524">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="ad80f-525">イベントの引数を受け取り、経路を短縮する処理済みとして意図的にイベントをマークする 1 つの潜在的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-525">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkContentElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-526">この要素にテーマ スタイルのスタイル プロパティを組み込むかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-526">Gets or sets a value indicating whether this element incorporates style properties from theme styles.</span></span></summary>
        <value><span data-ttu-id="ad80f-527">この要素がテーマ スタイル プロパティを使用しない場合は <see langword="true" /> (スタイルが生成するすべてのプロパティは、ローカルのアプリケーション スタイルに起因するため、テーマ スタイル プロパティは適用されません)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-527"><see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span></span> <span data-ttu-id="ad80f-528">まずアプリケーション スタイルを適用してから、アプリケーション スタイルで明確に設定されなかったプロパティに対してテーマ スタイルを適用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-528"><see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-529">このプロパティの最も一般的な使用方法は、間接のテーマが適用されたスタイル値を提供するスタイルの setter 内で使用します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-529">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-530">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-530">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-531">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-531">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="ad80f-532">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-532">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-533"><see cref="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-533">Identifies the <see cref="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkContentElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-534">この要素の論理ツリー内での親を取得します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-534">Gets the parent in the logical tree for this element.</span></span></summary>
        <value><span data-ttu-id="ad80f-535">この要素の論理上の親。</span><span class="sxs-lookup"><span data-stu-id="ad80f-535">The logical parent for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-536">要素の論理上の親が、アプリケーションの機能に応じて変更できます可能性があると、このプロパティの値を保持してもその変更は反映されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-536">Note that the logical parent of an element can potentially change depending on your application functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="ad80f-537">通常は値を取得する必要がある直前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-537">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="ad80f-538">参照してください[WPF のツリー](~/docs/framework/wpf/advanced/trees-in-wpf.md)要素を検索には、このアプローチは適切な論理ツリーは、およびシナリオの走査の詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-538">See [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) for more information about traversing logical trees, and the scenarios where taking this approach towards element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="ad80f-539">プロパティ システムは可能性があると再計算要素のすべてのプロパティ値が親を再指定、いくつかのプロパティは、論理ツリー内の値を継承するため。</span><span class="sxs-lookup"><span data-stu-id="ad80f-539">The property system will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="ad80f-540"><xref:System.Windows.FrameworkContentElement.DataContext%2A>適用の場合に、バインドは変更もできます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-540">The <xref:System.Windows.FrameworkContentElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="ad80f-541">要素の親の変更は通常のみ実行コレクションの操作によって、dedicated を使用して追加または削除メソッド、または、要素のコンテンツのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-541">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="ad80f-542">使用するための最も一般的なシナリオ、<xref:System.Windows.FrameworkContentElement.Parent%2A>プロパティの参照を取得し、取得し、さまざまな<xref:System.Windows.FrameworkContentElement>親からプロパティ値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-542">The most typical scenario for using the <xref:System.Windows.FrameworkContentElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkContentElement> property values from the parent.</span></span> <span data-ttu-id="ad80f-543">テンプレートの場合、<xref:System.Windows.FrameworkContentElement.Parent%2A>テンプレートの最終的になる`null`します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-543">For templates, the <xref:System.Windows.FrameworkContentElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="ad80f-544">この時点以降に取得し、テンプレートが実際に適用されている論理ツリーに拡張を使用<xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-544">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-545">表示する次の例を確認するかどうか、<xref:System.Windows.FrameworkContentElement.Parent%2A>の<xref:System.Windows.Documents.TextPointer>は特定の型。</span><span class="sxs-lookup"><span data-stu-id="ad80f-545">The following example checks to see whether the <xref:System.Windows.FrameworkContentElement.Parent%2A> of a <xref:System.Windows.Documents.TextPointer> is of a particular type.</span></span>  
  
 [!code-csharp[TextPointer_snippets#FCEParent](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#fceparent)]
 [!code-vb[TextPointer_snippets#FCEParent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#fceparent)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.TemplatedParent" />
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkContentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="ad80f-546">予想されるフォーカスの変更を決定する方向。</span><span class="sxs-lookup"><span data-stu-id="ad80f-546">The direction for which a prospective focus change should be determined.</span></span></param>
        <summary><span data-ttu-id="ad80f-547">この要素を基準に、指定したフォーカスの移動方向で次にフォーカスを受け取る要素を特定します。ただし、実際のフォーカスの移動は行われません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-547">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span></span> <span data-ttu-id="ad80f-548">このメソッドはシールされているため、オーバーライドできません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-548">This method is sealed and cannot be overridden.</span></span></summary>
        <returns><span data-ttu-id="ad80f-549">フォーカスが実際にスキャンされた場合にフォーカスの移動先となる、次の要素。</span><span class="sxs-lookup"><span data-stu-id="ad80f-549">The next element that focus would move to if focus were actually traversed.</span></span> <span data-ttu-id="ad80f-550">この要素を基準に、指定した方向へフォーカスを移動できない場合は、<see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-550">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-551"><xref:System.Windows.FrameworkContentElement.MoveFocus%2A> 実際には、フォーカスを移動するが関連するメソッドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-551"><xref:System.Windows.FrameworkContentElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="ad80f-552"><see cref="T:System.Windows.Input.TraversalRequest" /> に、<see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.First" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /> のいずれかの方向が指定されました。</span><span class="sxs-lookup"><span data-stu-id="ad80f-552">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span></span> <span data-ttu-id="ad80f-553">これらの方向は、<see cref="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> に対しては有効ではありません (<see cref="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> に対しては有効です)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-553">These directions are not legal for <see cref="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkContentElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad80f-554">指定した名前オブジェクトの割り当てに使用する名前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-554">Name to use for the specified name-object mapping.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="ad80f-555">割り当て対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-555">Object for the mapping.</span></span></param>
        <summary><span data-ttu-id="ad80f-556"><see cref="T:System.Windows.NameScope" /> の登録メソッドへのアクセスを簡略化するアクセサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-556">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-557">このメソッドを呼び出す便利なメソッドは、<xref:System.Windows.NameScope.RegisterName%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-557">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="ad80f-558">実装は、適切なが見つかるまで、連続する親要素は確認<xref:System.Windows.NameScope>実装で、実装する要素の検索によって見つかった<xref:System.Windows.Markup.INameScope>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-558">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="ad80f-559">名前スコープの詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-559">For more information about namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="ad80f-560">呼び出す<xref:System.Windows.FrameworkContentElement.RegisterName%2A>正しくコードで作成されたときに、アプリケーションのアニメーションのストーリー ボードをフックするために必要です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-560">Calling <xref:System.Windows.FrameworkContentElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="ad80f-561">これは、キーのいずれかのストーリー ボードのプロパティ、ため<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>、ターゲット要素への参照を実行することではなく実行時の名の参照を使用します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-561">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="ad80f-562">これは、その要素が、コードから参照でアクセス可能な場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-562">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="ad80f-563">ストーリー ボード ターゲットの名前を登録する必要がある理由の詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-563">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span> <span data-ttu-id="ad80f-564">コンテンツ要素のアニメーションは、コントロールのアニメーションよりもまれ、[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)制御シナリオに重点を置いて説明します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-564">Animations for content elements are less common than animations on controls, the [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md) concentrates on control scenarios.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.UnregisterName(System.String)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkContentElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="ad80f-565">削除する要素。</span><span class="sxs-lookup"><span data-stu-id="ad80f-565">The element to remove.</span></span></param>
        <summary><span data-ttu-id="ad80f-566">この要素の論理ツリーから、指定した要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-566">Removes the specified element from the logical tree for this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-567">これは、[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]は主に子コレクション サポートを追加するときに、シナリオを派生するクラスに関連します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-567">This [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is mainly relevant for class deriving scenarios, when adding support for child collections.</span></span>  
  
 <span data-ttu-id="ad80f-568">ほとんど<xref:System.Windows.FrameworkContentElement>派生クラスの包含を担当する専用のコレクションを公開する (たとえば、<xref:System.Windows.Documents.Span.Inlines%2A>上、<xref:System.Windows.Documents.Span>クラスです。<xref:System.Windows.Documents.Section.Blocks%2A>上、<xref:System.Windows.Documents.Section>クラス)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-568">Most <xref:System.Windows.FrameworkContentElement> derived classes expose dedicated collections that are responsible for containment (for example, <xref:System.Windows.Documents.Span.Inlines%2A> on the <xref:System.Windows.Documents.Span> class; <xref:System.Windows.Documents.Section.Blocks%2A> on the <xref:System.Windows.Documents.Section> class).</span></span> <span data-ttu-id="ad80f-569">通常、このようなクラスから派生すると、論理ツリーを直接操作する必要を回避できます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-569">Deriving from such classes typically can avoid any need to manipulate the logical tree directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkContentElement.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-570">ローカルで定義された現在のリソース ディクショナリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-570">Gets or sets the current locally-defined resource dictionary.</span></span></summary>
        <value><span data-ttu-id="ad80f-571">ローカルで定義された現在のリソース。</span><span class="sxs-lookup"><span data-stu-id="ad80f-571">The current locally-defined resources.</span></span> <span data-ttu-id="ad80f-572">これはリソース ディクショナリです。ディクショナリ内のリソースにはキーでアクセスします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-572">This is a dictionary of resources, where resources within the dictionary are accessed by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-573">リソース ディクショナリで完全にまたは部分的に定義できる[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]は、通常、プロパティ要素として作成し、個々 のページまたはアプリケーションのルート要素では、通常します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-573">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="ad80f-574">このレベルでリソース ディクショナリを配置すると、ページ内の個々 の子要素 (またはアプリケーションの場合は、任意のページ) を検索しやすきます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-574">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="ad80f-575">ほとんどのアプリケーション シナリオでお勧めのスタイルをリソース ディクショナリ内のオブジェクト要素として定義するか、スタイル リソース全体を自己完結できるように、外部のリソースとして定義する (このアプローチにより、別のデザイナー責任を編集する必要がある物理ファイルを分離することで、開発者の役割から)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-575">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="ad80f-576">このプロパティがその要素内で直接宣言されているリソース ディクショナリのみを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-576">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="ad80f-577">これは、実際のリソース ルックアップ プロセスが子要素がアクセスできる検索方向を再帰的に、各親要素で定義されているリソースのいずれかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-577">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="ad80f-578">リソースは、コレクション内からコードで参照することもできますでリソースが作成されたことに注意してください[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]は間違いなくできません後までアクセス<xref:System.Windows.FrameworkContentElement.Loaded>はディクショナリを宣言した要素から発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-578">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkContentElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="ad80f-579">実際には、リソースは、非同期的に解析され、であっても、<xref:System.Windows.FrameworkContentElement.Loaded>イベントが参照できるように保証、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]リソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-579">In fact, resources are parsed asynchronously, and not even the <xref:System.Windows.FrameworkContentElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="ad80f-580">この理由でアクセスすることは一般的にのみ[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]またはその他の実行時のコードの一部として定義リソース[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]スタイルや属性の値をリソース拡張機能の参照などの手法です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-580">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="ad80f-581">基本的と同じになりますコードによって、リソースにアクセスするときに、 [DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)から行われる参照[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-581">When you access resources through code, it is essentially equivalent to a [DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="ad80f-582">基になる<xref:System.Windows.ResourceDictionary>を追加、削除、またはコードを使用して、コレクション内からリソースをクエリに必要なメソッドをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-582">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove, or query resources from within the collection by using code.</span></span> <span data-ttu-id="ad80f-583"><xref:System.Windows.FrameworkContentElement.Resources%2A>プロパティは、要素を新しいまたは別のリソースのコレクションを完全に置き換えるのシナリオをサポートする設定<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-583">The <xref:System.Windows.FrameworkContentElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="ad80f-584">なお、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]に示す構文の要素を含まない、 <xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="ad80f-584">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="ad80f-585">これは、暗黙の型のコレクション構文の例コレクションの要素を表すタグを省略できます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-585">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="ad80f-586">代わりに、コレクションに項目として追加される要素を指定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-586">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="ad80f-587">暗黙の型のコレクションの詳細については、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]を参照してください[XAML 構文の詳細](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-587">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span> <span data-ttu-id="ad80f-588">1 つのケースで、<xref:System.Windows.ResourceDictionary>要素は、マージされたディクショナリを導入する場合に要素がない通常子を明示的に指定がまだ<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-588">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="ad80f-589">詳細については、次を参照してください。 [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-589">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ad80f-590">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="ad80f-590">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ad80f-591">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ad80f-591">XAML Values</span></span>  
 <span data-ttu-id="ad80f-592">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="ad80f-592">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="ad80f-593">1 つまたは複数のオブジェクト要素のリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-593">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="ad80f-594">各リソースのプロパティ要素内で各<xref:System.Windows.ResourceDictionary>の値が一意である必要があります、 [X:key ディレクティブ](~/docs/framework/xaml-services/x-key-directive.md)から値を取得するときに、一意のキーとして使用される、<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-594">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/docs/framework/xaml-services/x-key-directive.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-595">次の例では確立、<xref:System.Windows.FrameworkContentElement.Resources%2A>でコレクションを<xref:System.Windows.Documents.FlowDocument>ルート要素。</span><span class="sxs-lookup"><span data-stu-id="ad80f-595">The following example establishes a <xref:System.Windows.FrameworkContentElement.Resources%2A> collection on a <xref:System.Windows.Documents.FlowDocument> root element.</span></span> <span data-ttu-id="ad80f-596"><xref:System.Windows.Documents.FlowDocument> 一般的な選択肢は、いくつかのいずれかであるため<xref:System.Windows.FrameworkContentElement>ページのルートにあるか、アプリケーションのようにこのようなさらに高いレベルでは、ルート要素、およびリソースとして意味のあるクラスが一般的に格納します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-596"><xref:System.Windows.Documents.FlowDocument> is a typical choice because it is one of the few <xref:System.Windows.FrameworkContentElement> classes that make sense as a root element, and resources are generally stored at the page root or at even higher levels such as in the application.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#FCEResources](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page2.xaml#fceresources)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad80f-597">指定した依存関係プロパティのためのバインディングをこの要素に添付します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-597">Attaches a binding to this element for the specified dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkContentElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="ad80f-598">バインドされているプロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-598">Identifies the bound property.</span></span></param>
        <param name="path"><span data-ttu-id="ad80f-599">ソース プロパティ名、またはバインドに使用されているプロパティへのパス。</span><span class="sxs-lookup"><span data-stu-id="ad80f-599">The source property name or the path to the property used for the binding.</span></span></param>
        <summary><span data-ttu-id="ad80f-600">指定したソース プロパティ名をデータ ソースへのパスの修飾として使用して、この要素にバインディングを添付します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-600">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span></span></summary>
        <returns><span data-ttu-id="ad80f-601">バインドの条件を記録します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-601">Records the conditions of the binding.</span></span> <span data-ttu-id="ad80f-602">この戻り値は、エラーをチェックするために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-602">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-603">このメソッドを呼び出す便利なメソッドは、 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>、現在のインスタンスを渡す、 <xref:System.Windows.DependencyObject>、新たに作成および<xref:System.Windows.Data.Binding>に基づいて、指定された`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="ad80f-603">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="ad80f-604">この署名は、単純な既定のバインディングを確立している場合より便利です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-604">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="ad80f-605">既定以外の条件へのバインディング プロパティを使用する必要がある場合、<xref:System.Windows.Data.MultiBinding>または<xref:System.Windows.Data.PriorityBinding>、使用する必要があります、<xref:System.Windows.FrameworkContentElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29>署名します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-605">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkContentElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-606">次の例でバインディングを設定する、<xref:System.Windows.Documents.Paragraph>としては、そのオブジェクトを確立する、新しいカスタム データ オブジェクトを作成して、要素<xref:System.Windows.FrameworkContentElement.DataContext%2A>、内のプロパティにバインド パスを設定するとします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-606">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new custom data object, establishing that object as <xref:System.Windows.FrameworkContentElement.DataContext%2A>, and setting the binding path to a property within it.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#DataContext](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#datacontext)]
 [!code-vb[ContentElementsSmorgasbord#DataContext](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#datacontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkContentElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="ad80f-607">バインドされているプロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-607">Identifies the bound property.</span></span></param>
        <param name="binding"><span data-ttu-id="ad80f-608">データ バインディングを表します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-608">Represents a data binding.</span></span></param>
        <summary><span data-ttu-id="ad80f-609">指定したバインディング オブジェクトに基づいて、この要素にバインドをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-609">Attaches a binding to this element, based on the provided binding object.</span></span></summary>
        <returns><span data-ttu-id="ad80f-610">バインドの条件を記録します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-610">Records the conditions of the binding.</span></span> <span data-ttu-id="ad80f-611">この戻り値は、エラーをチェックするために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-611">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-612">このメソッドは、便利なメソッドを呼び出す<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>、現在のインスタンスを渡す、<xref:System.Windows.DependencyObject>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-612">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-613">次の例では、バインディングを設定で、<xref:System.Windows.Documents.Paragraph>要素を新しいを作成する<xref:System.Windows.Data.Binding>新しくビルドするソースを設定して`DateTime`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-613">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new <xref:System.Windows.Data.Binding> and setting the source to a newly built `DateTime` object.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#SetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#setbinding)]
 [!code-vb[ContentElementsSmorgasbord#SetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#setbinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkContentElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="ad80f-614">リソースのバインド先のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-614">The property to which the resource is bound.</span></span></param>
        <param name="name"><span data-ttu-id="ad80f-615">リソースの名前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-615">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="ad80f-616">指定した名前のリソースを検索し、指定したプロパティにそのリソースへのリソース参照を設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-616">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-617">リソースの参照の使用と似ています、 [DynamicResource マークアップ拡張機能](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)マークアップ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-617">A resource reference is similar to the use of a [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) in markup.</span></span> <span data-ttu-id="ad80f-618">リソース参照では、実行時の遅延単位で指定したプロパティの値を提供する内部式を作成します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-618">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="ad80f-619">式は、リソース ディクショナリの内部イベントを通じて変更された値を示しますたびに、または、現在の要素が親を再指定されるたびに再評価されます (親の変更は、ディクショナリの検索パスを変更が)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-619">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkContentElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-620">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.FrameworkContentElement.Resources" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-620">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkContentElement.Resources" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="ad80f-621"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkContentElement.Resources" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-621"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkContentElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-622">これにより返されます`true`、ローカルの少なくとも 1 つのキーを持つリソースがある限り、<xref:System.Windows.FrameworkContentElement.Resources%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-622">This will return `true` so long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkContentElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkContentElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-623">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.FrameworkContentElement.Style" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-623">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkContentElement.Style" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="ad80f-624"><see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.FrameworkContentElement.Style" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-624"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkContentElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-625">返されます`true`場合、<xref:System.Windows.Style>がローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-625">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-626">この要素のバインディングに参加しているデータ ソースが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-626">Occurs when any associated data source participating in a binding on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-627">このイベント サーフェス、<xref:System.Windows.Data.Binding.SourceUpdated>いずれかで発生するイベントを<xref:System.Windows.Data.Binding>この要素に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-627">This event surfaces the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ad80f-628">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-628">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="EventHandler"/>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkContentElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-629">この要素が使用するスタイルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-629">Gets or sets the style to be used by this element.</span></span></summary>
        <value><span data-ttu-id="ad80f-630">要素に適用される既定以外のスタイル (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-630">The applied, nondefault style for the element, if present.</span></span> <span data-ttu-id="ad80f-631">それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-631">Otherwise, <see langword="null" />.</span></span> <span data-ttu-id="ad80f-632">既定で構築された <see cref="T:System.Windows.FrameworkContentElement" /> の既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-632">The default for a default-constructed <see cref="T:System.Windows.FrameworkContentElement" /> is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-633">現在のスタイルは、テーマ、または (暗黙的なスタイル) のページまたはアプリケーション レベルのリソースによって、その型のオブジェクトに適用される通常のスタイルを既定のスタイルによって提供される多くの場合。</span><span class="sxs-lookup"><span data-stu-id="ad80f-633">The current style is often provided by a default style from theming, or from styles generally applied to objects of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="ad80f-634">このプロパティが設定されていないか、戻り値の既定 (テーマ) のスタイルが、暗黙的なスタイルまたは明示的なスタイルを返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-634">This property does not set or return default (theme) styles, but it does return the implicit style or an explicit style.</span></span> <span data-ttu-id="ad80f-635">暗黙的または明示的なスタイルの場合、スタイルのリソースとしてアクセスまたはローカルで定義されているかどうかは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-635">In the case of implicit or explicit styles, it does not matter whether the style is accessed as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="ad80f-636">スタイルの設定の制限があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-636">Setting the styles has some restrictions.</span></span> <span data-ttu-id="ad80f-637">全体をリセットする<xref:System.Windows.FrameworkContentElement.Style%2A>プロパティを新しい<xref:System.Windows.Style>、いつでもレイアウトの再合成を強制します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-637">You can reset the entire <xref:System.Windows.FrameworkContentElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="ad80f-638">ただし、としてすぐにそのスタイルによって読み込まれた要素では、使用中に配置されるため、<xref:System.Windows.Style>見なす必要がありますシールします。</span><span class="sxs-lookup"><span data-stu-id="ad80f-638">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="ad80f-639">使用中のスタイルの個々 のプロパティを変更しようとしています (などのコレクション内のすべて<xref:System.Windows.Style.Setters%2A>) がスローされる例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-639">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="ad80f-640">マークアップで定義されているスタイルは、(リソース) のリソース ディクショナリから読み込まれるまたはインライン スタイル) (に含まれるページが読み込まれるとすぐに使用されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-640">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="ad80f-641"><xref:System.Windows.FrameworkContentElement.Style%2A> 特殊な優先順位を持つ依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-641"><xref:System.Windows.FrameworkContentElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="ad80f-642">ローカルに設定されたスタイルが一般に、プロパティ システムで最高の優先順位で動作します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-642">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="ad80f-643">場合、<xref:System.Windows.FrameworkContentElement.Style%2A>プロパティ システムでは、その型を指定する定義済みのリソースとしての暗黙的なスタイルを確認します。 読み込み中にこの時点では、null をです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-643">If the <xref:System.Windows.FrameworkContentElement.Style%2A> is null at this point, during loading the property system checks for implicit styles as defined resources that specify that type.</span></span> <span data-ttu-id="ad80f-644">この手順の後に、スタイルはまだ null し、スタイルは、既定 (テーマ) のスタイルがでは、既定のスタイルは返されません、<xref:System.Windows.FrameworkContentElement.Style%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-644">If the style is still null after this step, then the style comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkContentElement.Style%2A> property value.</span></span> <span data-ttu-id="ad80f-645">参照してください[依存関係プロパティの値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-645">See [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ad80f-646">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-646">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension StyleResourceKey}"/>  
```  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ad80f-647">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ad80f-647">XAML Values</span></span>  
 <span data-ttu-id="ad80f-648">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="ad80f-648">*resourceExtension*</span></span>  
 <span data-ttu-id="ad80f-649">次のいずれか: または。</span><span class="sxs-lookup"><span data-stu-id="ad80f-649">One of the following: , or .</span></span> <span data-ttu-id="ad80f-650">参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-650">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="ad80f-651">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="ad80f-651">*styleResourceKey*</span></span>  
 <span data-ttu-id="ad80f-652">要求されているスタイルを識別するキー。</span><span class="sxs-lookup"><span data-stu-id="ad80f-652">The key that identifies the style being requested.</span></span> <span data-ttu-id="ad80f-653">このキーは、既存のリソースで、<xref:System.Windows.ResourceDictionary>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-653">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad80f-654">プロパティ要素構文は技術的に可能であれば、推奨されません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-654">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="ad80f-655">参照してください[インライン スタイルおよびテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-655">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span>  <span data-ttu-id="ad80f-656">使用してバインディング参照[TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md)または<xref:System.Windows.Data.Binding>も可能ですが、一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-656">A binding reference using [TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-657">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-657">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-658">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-658">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.StyleProperty>|  
|<span data-ttu-id="ad80f-659">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-659">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-660">次の例では確立、<xref:System.Windows.FrameworkContentElement.Resources%2A>コレクションに、<xref:System.Windows.Documents.FlowDocument>ルート要素と、特定のスタイルのリソースとして参照します、<xref:System.Windows.Documents.Paragraph>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-660">The following example establishes a <xref:System.Windows.FrameworkContentElement.Resources%2A> collection on a <xref:System.Windows.Documents.FlowDocument> root element and then references it as a resource as a specific style for a <xref:System.Windows.Documents.Paragraph>.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#FCEResources](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page2.xaml#fceresources)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-661"><see cref="P:System.Windows.FrameworkContentElement.Style" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-661">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Style" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ad80f-662">要求されたアンビエント プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-662">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="ad80f-663">このメンバーの説明については、<see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> メソッドのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-663">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="ad80f-664"><paramref name="propertyName" /> を使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80f-664"><see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-665">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-665">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ad80f-666">これは、<xref:System.Windows.FrameworkContentElement> のインスタンスが <xref:System.Windows.Markup.IQueryAmbient> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-666">It can be used only when the <xref:System.Windows.FrameworkContentElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkContentElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-667">この要素に関するユーザー定義情報の格納に使用できる任意のオブジェクト値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-667">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span></span></summary>
        <value><span data-ttu-id="ad80f-668">任意の値。</span><span class="sxs-lookup"><span data-stu-id="ad80f-668">The intended value.</span></span> <span data-ttu-id="ad80f-669">このプロパティには既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="ad80f-669">This property has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-670">このプロパティは、その他のマイクロソフトのプログラミング モデルで、アプリケーションまたは Windows フォームの Visual Basic などのタグ プロパティに似ています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-670">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="ad80f-671">アプリケーション開発者にサブクラス化を強制することがなく任意の要素に関する基本的なカスタム情報を格納する既存の場所を提供するものでは。</span><span class="sxs-lookup"><span data-stu-id="ad80f-671">It is intended to provide a pre-existing place to store some basic custom information about any element without forcing application developers to subclass.</span></span>  
  
<a name="xamlValues_Tag"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ad80f-672">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ad80f-672">XAML Values</span></span>  
 <span data-ttu-id="ad80f-673">設定するには、プロパティ要素の使用方法を使用する必要がありますので、このプロパティは、オブジェクトを受け取り、<xref:System.Windows.FrameworkContentElement.Tag%2A>文字列などの既知と組み込みの型コンバーターを使用してオブジェクト以外に XAML のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-673">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkContentElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="ad80f-674">この方法で使用されるオブジェクトは通常されませんが、標準の WPF 名前空間内でしたがって可能性がありますやを必要し、外部名前空間への名前空間マッピング XAML 要素として導入します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-674">Objects used in this way are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-675">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-675">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-676">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-676">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.TagProperty>|  
|<span data-ttu-id="ad80f-677">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-677">Metadata properties set to `true`</span></span>|<span data-ttu-id="ad80f-678">None</span><span class="sxs-lookup"><span data-stu-id="ad80f-678">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-679"><see cref="P:System.Windows.FrameworkContentElement.Tag" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-679">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Tag" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-680">この要素のバインドに関連する対象プロパティが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-680">Occurs when any associated target property participating in a binding on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-681">このイベント サーフェス、<xref:System.Windows.Data.Binding.TargetUpdated>いずれかで発生するイベントを<xref:System.Windows.Data.Binding>この要素に関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-681">This event surfaces the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="ad80f-682">これは通常、対象のバインドが双方向のバインドであること、およびバインドされた依存関係プロパティに前のプロパティ値の検証またはプロパティをサポートするキャッシュ スキームごとの無効が確認されたことに意味します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-682">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms an invalidation of the previous property value per any validation or caching scheme that the property supports.</span></span>  
  
 <span data-ttu-id="ad80f-683">このイベントのイベント引数にバインドされたプロパティが変更された通知されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-683">The event arguments of this event will inform you which bound property was changed.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ad80f-684">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-684">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="EventHandler"/>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkContentElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-685">この要素の親テンプレートへの参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-685">Gets a reference to the template parent of this element.</span></span> <span data-ttu-id="ad80f-686">このプロパティは、要素がテンプレートによって作成されていない場合は無効です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-686">This property is not relevant if the element was not created through a template.</span></span></summary>
        <value><span data-ttu-id="ad80f-687">要素が<see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" />この要素を作成します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-687">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span></span> <span data-ttu-id="ad80f-688">この値は、頻繁に<see langword="null" />します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-688">This value is frequently <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-689">テンプレートは、実際には共有オブジェクト、テンプレートの内容が 1 回だけ作成される場所です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-689">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="ad80f-690">そのため、テンプレートから付属している要素へのオブジェクト参照を取得する場合、見かけ上の論理ツリーは、ページのルートに到達していないことを見つけることがあります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-690">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="ad80f-691">このようなテンプレートへの参照をページの論理ツリーを接続するために取得する必要があります、<xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>値し、必要に応じて、その要素のツリーを移動します。 続行します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-691">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 <span data-ttu-id="ad80f-692"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 多くの場合は`null`、共通オブジェクト用の一般的な手段を使用してアプリケーションのページからのオブジェクト参照を取得している場合その要素可能性がありますが作成されていないため、テンプレートから。</span><span class="sxs-lookup"><span data-stu-id="ad80f-692"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> will frequently be `null` for common objects, because if you have obtained an object reference from out of a page in your application through typical means, that element probably was not created from a template.</span></span> <span data-ttu-id="ad80f-693">あるケース<xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>できない可能性があります`null`ヒット テスト、イベント、特定の低レベル入力イベントの処理または列挙子は、テンプレートの送信元の要素から返された操作などの操作が含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-693">Cases where <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> might not be `null` would include operations such as hit-testing, event handling for certain low-level input events, or working with enumerators, which may have returned elements that came from templates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkContentElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-694">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] でこの要素に対して表示されるツールヒント オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-694">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="ad80f-695">ツールヒント オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ad80f-695">The tooltip object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-696">このプロパティの値が型の場合<xref:System.Windows.Controls.ToolTip>、ツール ヒントで使用されるわけですが、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-696">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="ad80f-697">値は、その他の種類のかどうかは、その値として使用されます、*コンテンツ*の<xref:System.Windows.Controls.ToolTip>提供システムによっては、(作成) します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-697">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="ad80f-698">詳細については、「<xref:System.Windows.Controls.ToolTipService>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ad80f-698">For more information see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="ad80f-699">サービス クラスは、ツール ヒントをさらにカスタマイズするために使用する添付プロパティを提供します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-699">The service class provides attached properties that can be used to further customize a tool-tip.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ad80f-700">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-700">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ad80f-701">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="ad80f-701">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ad80f-702">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ad80f-702">XAML Values</span></span>  
 <span data-ttu-id="ad80f-703">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="ad80f-703">*toolTipContent*</span></span>  
 <span data-ttu-id="ad80f-704">表示テキストとなる文字列、<xref:System.Windows.FrameworkContentElement.ToolTip%2A>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-704">A string that becomes the display text for the <xref:System.Windows.FrameworkContentElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="ad80f-705">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="ad80f-705">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="ad80f-706">コンテンツとして使用するオブジェクト要素の形式で提供される一部のオブジェクト、<xref:System.Windows.FrameworkContentElement>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-706">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkContentElement> .</span></span> <span data-ttu-id="ad80f-707">通常、<xref:System.Windows.FrameworkElement>またはその他の要素のレイアウトの複合を作成する、 <xref:System.Windows.FrameworkContentElement.ToolTip%2A>、最終的に、合成内のテキスト コンテンツを格納しています。</span><span class="sxs-lookup"><span data-stu-id="ad80f-707">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkContentElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="ad80f-708">この使用法 で、<xref:System.Windows.Controls.ToolTip>要素を作成、解析されたから暗黙的に[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]と*方法*としてコンテンツが設定されてその<xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="ad80f-708">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="ad80f-709"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="ad80f-709"><`ToolTip` .../></span></span>  
 <span data-ttu-id="ad80f-710">以下を参照してください。<xref:System.Windows.Controls.ToolTip></span><span class="sxs-lookup"><span data-stu-id="ad80f-710">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ad80f-711">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-711">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-712">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-712">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipProperty>|  
|<span data-ttu-id="ad80f-713">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="ad80f-713">Metadata properties set to `true`</span></span>|<span data-ttu-id="ad80f-714">None</span><span class="sxs-lookup"><span data-stu-id="ad80f-714">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-715">次の例の値の設定、<xref:System.Windows.FrameworkElement.ToolTip%2A>プロパティ文字列を直接します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-715">The following example sets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property directly to a string.</span></span>  
  
 [!code-csharp[TableSnippets2#_Table_RowGroups_ManipRows](~/samples/snippets/csharp/VS_Snippets_Wpf/TableSnippets2/CSharp/Window1.xaml.cs#_table_rowgroups_maniprows)]
 [!code-vb[TableSnippets2#_Table_RowGroups_ManipRows](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TableSnippets2/visualbasic/window1.xaml.vb#_table_rowgroups_maniprows)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-716">要素のツールヒントが閉じる直前に発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-716">Occurs just before any tooltip on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-717">ツールヒントを閉じるを非表示にイベントのハンドラーは、処理済みとしてマーク。</span><span class="sxs-lookup"><span data-stu-id="ad80f-717">To suppress closing the tooltip, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="ad80f-718">このイベントにすることはできません、<xref:System.Windows.EventTrigger>スタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-718">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="ad80f-719">このイベントの識別子フィールドがイベントを追加または削除メソッドを公開しないサービスの実装を再使用するためです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-719">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove methods on the event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ad80f-720">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-720">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-721">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-721">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipClosingEvent>|  
|<span data-ttu-id="ad80f-722">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-722">Routing strategy</span></span>|<span data-ttu-id="ad80f-723">直接</span><span class="sxs-lookup"><span data-stu-id="ad80f-723">Direct</span></span>|  
|<span data-ttu-id="ad80f-724">Delegate</span><span class="sxs-lookup"><span data-stu-id="ad80f-724">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-725"><see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> ([Routed Events Overview (ルーティング イベントの概要)](~/docs/framework/wpf/advanced/routed-events-overview.md)) を識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-725">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-726">ルーティング イベントが登録されているときに、イベント識別子のオブジェクトは作成されます (を参照してください<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) クラス ハンドラーを追加するために使用して (を参照してください<xref:System.Windows.EventManager.RegisterClassHandler%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-726">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="ad80f-727">識別子のオブジェクトには、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-727">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-728">要素のツールヒントが開かれたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-728">Occurs when any tooltip on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-729">ツール ヒントを手動で開く、処理済みとして、イベントのハンドラーは、関連するイベントをマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ad80f-729">To manually open tooltips, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="ad80f-730">それ以外の場合の値、<xref:System.Windows.FrameworkContentElement.ToolTip%2A>プロパティが自動的にコンテキスト メニューを開き、使用されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-730">Otherwise, the value of the <xref:System.Windows.FrameworkContentElement.ToolTip%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="ad80f-731">既定のアクションを効果的に取り消しし、の値にリセットすることにより、イベントを処理済みのマークを付ける、<xref:System.Windows.FrameworkContentElement.ToolTip%2A>プロパティを開き、新しい<xref:System.Windows.Controls.ContextMenu>します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-731">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkContentElement.ToolTip%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="ad80f-732">場合はこのイベントを生成しないされますのでご注意<xref:System.Windows.FrameworkContentElement.ToolTip%2A>null 参照またはそれ以外の場合設定を解除します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-732">Note that this event will not be raised if <xref:System.Windows.FrameworkContentElement.ToolTip%2A> is a null reference or otherwise unset.</span></span>  
  
 <span data-ttu-id="ad80f-733">このイベントにすることはできません、<xref:System.Windows.EventTrigger>スタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-733">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="ad80f-734">このイベントの識別子フィールドがイベントを追加または削除メソッドを公開しないサービスの実装を再使用するためです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-734">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove methods on the event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ad80f-735">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-735">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-736">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-736">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="ad80f-737">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-737">Routing strategy</span></span>|<span data-ttu-id="ad80f-738">直接</span><span class="sxs-lookup"><span data-stu-id="ad80f-738">Direct</span></span>|  
|<span data-ttu-id="ad80f-739">Delegate</span><span class="sxs-lookup"><span data-stu-id="ad80f-739">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-740"><see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> ([Routed Events Overview (ルーティング イベントの概要)](~/docs/framework/wpf/advanced/routed-events-overview.md)) を識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-740">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-741">ルーティング イベントが登録されているときに、イベント識別子のオブジェクトは作成されます (を参照してください<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) クラス ハンドラーを追加するために使用して (を参照してください<xref:System.Windows.EventManager.RegisterClassHandler%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-741">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="ad80f-742">識別子のオブジェクトには、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-742">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-743"><see cref="P:System.Windows.FrameworkContentElement.ToolTip" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-743">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ToolTip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkContentElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="ad80f-744">検索するリソースのキー識別子。</span><span class="sxs-lookup"><span data-stu-id="ad80f-744">Key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="ad80f-745">指定されたキーを使用してリソースを検索し、見つかった場合はそのリソースを返します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-745">Searches for a resource with the specified key, and returns that resource if found.</span></span></summary>
        <returns><span data-ttu-id="ad80f-746">見つかったリソース。</span><span class="sxs-lookup"><span data-stu-id="ad80f-746">The found resource.</span></span> <span data-ttu-id="ad80f-747">リソースが見つからなかった場合は、<see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-747">If no resource was found, <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-748">ツリーになるのと同じ方法で、論理ツリーを使用して、親のツリーを検索する呼び出し元の要素で、リソースが見つからない場合、動的リソース参照が実行時にキーによって要求された場合に検索します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-748">If the resource is not found on the calling element, the parent tree is searched using the logical tree, in the same way that the tree would be searched if a dynamic resource reference were requested by key at run-time.</span></span>  
  
 <span data-ttu-id="ad80f-749">通常返されるリソース値に設定しようとしているプロパティの型を戻り値をキャストするとすぐに。</span><span class="sxs-lookup"><span data-stu-id="ad80f-749">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="ad80f-750"><xref:System.Windows.FrameworkContentElement.FindResource%2A>メソッドには同様の動作がある点が異なりますで指定されたキーを持つリソースが見つからない場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-750">The <xref:System.Windows.FrameworkContentElement.FindResource%2A> method has similar behavior, except that it will throw an exception in the case of not finding a resource with the provided key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad80f-751">次の例では、マークアップで定義されているリソースを検索し、ルーティング イベントへの応答内の要素の特定のプロパティに適用されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-751">The following example finds a resource as defined in markup and applies it to a certain property of an element in response to a routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#TryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#tryfindresource)]
 [!code-vb[ContentElementsSmorgasbord#TryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#tryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-752">読み込まれた要素の要素ツリーから要素が削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-752">Occurs when the element is removed from an element tree of loaded elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-753">直接ルーティング イベントがルートに従っていない、発生しますが、同じ要素内でのみ処理されます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-753">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="ad80f-754">直接ルーティング イベントは、その他のルーティング イベントの動作をサポートして: アクセスできるハンドラーのコレクションをサポートし、として使用できる、<xref:System.Windows.EventTrigger>スタイル。</span><span class="sxs-lookup"><span data-stu-id="ad80f-754">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ad80f-755">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="ad80f-755">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ad80f-756">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="ad80f-756">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.UnloadedEvent>|  
|<span data-ttu-id="ad80f-757">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="ad80f-757">Routing strategy</span></span>|<span data-ttu-id="ad80f-758">直接</span><span class="sxs-lookup"><span data-stu-id="ad80f-758">Direct</span></span>|  
|<span data-ttu-id="ad80f-759">Delegate</span><span class="sxs-lookup"><span data-stu-id="ad80f-759">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80f-760"><see cref="E:System.Windows.FrameworkContentElement.Unloaded" /> ([Routed Events Overview (ルーティング イベントの概要)](~/docs/framework/wpf/advanced/routed-events-overview.md)) を識別します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-760">Identifies the <see cref="E:System.Windows.FrameworkContentElement.Unloaded" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-761">ルーティング イベントが登録されているときに、イベント識別子のオブジェクトは作成されます (を参照してください<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) クラス ハンドラーを追加するために使用して (を参照してください<xref:System.Windows.EventManager.RegisterClassHandler%2A>)。</span><span class="sxs-lookup"><span data-stu-id="ad80f-761">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="ad80f-762">識別子のオブジェクトには、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="ad80f-762">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkContentElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ad80f-763">現在のスコープから削除する名前とオブジェクトのペアの名前。</span><span class="sxs-lookup"><span data-stu-id="ad80f-763">Name of the name-object pair to remove from the current scope.</span></span></param>
        <summary><span data-ttu-id="ad80f-764"><see cref="T:System.Windows.NameScope" /> の登録解除メソッドへのアクセスを簡略化します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-764">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80f-765">だけの登録を解除名に同じ名前の別の要素を再登録する場合です。</span><span class="sxs-lookup"><span data-stu-id="ad80f-765">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkContentElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80f-766">現在の <see cref="T:System.Windows.FrameworkContentElement" /> に既定のスタイルを再度適用します。</span><span class="sxs-lookup"><span data-stu-id="ad80f-766">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>