<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyPath.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58557652b4b165aa49213450463eba1ffb0a2f7de.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8557652b4b165aa49213450463eba1ffb0a2f7de</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyPath">
          <source>Implements a data structure for describing a property as a path below another property, or below an owning type.</source>
          <target state="translated">別のプロパティの下、または所有している型の下のパスとして、プロパティを記述するためのデータ構造を実装します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyPath">
          <source>Property paths are used in data binding to objects, and in storyboards and timelines for animations.</source>
          <target state="translated">プロパティ パスは、オブジェクトへのデータ バインディングと、アニメーション用のストーリーボードやタイムラインで使用されます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This class contains a string <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>, and list of dependency properties that are the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph> into the string <ph id="ph3">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>.</source>
          <target state="translated">このクラスには、文字列が含まれています。 <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>、とは、依存関係プロパティの一覧、<ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>文字列に<ph id="ph3">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> supports two modes of behavior:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 2 つの動作モードをサポートしています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><bpt id="p1">**</bpt>Source mode<ept id="p1">**</ept> describes a path to a property that is used as a source for some other operation.</source>
          <target state="translated"><bpt id="p1">**</bpt>ソース モード<ept id="p1">**</ept>他の操作のソースとして使用されるプロパティへのパスをについて説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This mode is used by the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class to support data binding.</source>
          <target state="translated">このモードは使用、<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>データ バインディングをサポートするクラス。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><bpt id="p1">**</bpt>Target mode<ept id="p1">**</ept> describes a path to a property that will be set as a target property.</source>
          <target state="translated"><bpt id="p1">**</bpt>ターゲット モード<ept id="p1">**</ept>対象のプロパティとして設定されるプロパティへのパスをについて説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This mode is used by animation in support of storyboard and timeline setters.</source>
          <target state="translated">このモードは、ストーリー ボードおよびタイムラインの setter をサポートするためのアニメーションで使用されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>For instance, <ph id="ph1">`Background.Opacity`</ph> is a two-step path.</source>
          <target state="translated">たとえば、 <ph id="ph1">`Background.Opacity`</ph> 2 段階のパスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This path implies: first, find the <ph id="ph1">`Background`</ph> property of an object, get the value object that the <ph id="ph2">`Background`</ph> property is set to, and then get the value of the <ph id="ph3">`Opacity`</ph> property on that object.</source>
          <target state="translated">このパスは: 最初に、検索、 <ph id="ph1">`Background`</ph> 、オブジェクトのプロパティ オブジェクトを取得する値を<ph id="ph2">`Background`</ph>プロパティに設定されているしの値を取得、<ph id="ph3">`Opacity`</ph>そのオブジェクトのプロパティです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 属性の使用方法</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>XAML Values</source>
          <target state="translated">XAML 値</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><bpt id="p1">*</bpt>propertyPath<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>propertyPath<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>A string that is evaluated to be either a simple or complex property path.</source>
          <target state="translated">単純または複雑なプロパティ パスに評価される文字列。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>The syntax for setting a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is versatile but complex, and is described in the separate topic <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
          <target state="translated">設定の構文、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>で<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>汎用性が複雑では、別のトピックに記載されて<bpt id="p1">[</bpt>PropertyPath 構文は XAML<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyPath">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A property path that either describes a path to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property, or a single dependency property.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> プロパティまたは単一の依存関係プロパティへのパスを記述するプロパティ パス。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</source>
          <target state="translated">このコンス トラクターには、バインディング、またはストーリー ボードのターゲットのターゲット モード 1 ステップのプロパティ パスのソース モード プロパティのパスに対して使用されているかどうかに応じて、2 つのまったく異なる用法があります。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in source mode for a binding, <ph id="ph2">`parameter`</ph> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object model of the object that is being used as the source for a binding.</source>
          <target state="translated">これを使用して場合<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>バインディング用のソース モードで<ph id="ph2">`parameter`</ph>はプロパティ名を表す文字列か、「ステップスルー」へのパス内のプロパティを説明する文字列を指定できます、<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>バインディングのソースとして使用されているオブジェクトのオブジェクト モデルです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>For a binding property path, the character that identifies a "step" is a dot (.).</source>
          <target state="translated">バインディング プロパティのパス"の"ステップを識別する文字は、ドット (.) です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Indexer references (including multiple indexers, and type differentiation) are also supported.</source>
          <target state="translated">インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>For more details on the syntax of the string as specifically used by the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, see <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">具体的に使用する文字列の構文の詳細については、<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>オブジェクトを参照してください<ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A property used as a binding source need not be a dependency property.</source>
          <target state="translated">バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>If the binding updates two-way, the property referenced must be read-write.</source>
          <target state="translated">双方向のバインドを更新する場合、参照されるプロパティは読み取り/書き込みをする必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Also note that the binding target does have to be a dependency property.</source>
          <target state="translated">バインディング ターゲットには、依存関係プロパティにも注意してください。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>For details, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in target mode for a single-step path for a storyboard target, <ph id="ph2">`parameter`</ph> is generally provided as type <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
          <target state="translated">これを使用して場合<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>目的のモードで、ストーリー ボードのターゲットの単一ステップ パスの<ph id="ph2">`parameter`</ph>は、通常は型として指定<ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>You can also specify a string that is the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;</ph>.</source>
          <target state="translated">表す文字列を指定することも、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Either of these evaluate to the same result, because it is stored internally as a string.</source>
          <target state="translated">これらのいずれかにより、文字列として内部的に保存されているので、結果は同じに評価されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A provided <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> is converted to a string through <ph id="ph2">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph>.</source>
          <target state="translated">提供された<ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>を文字列に変換<ph id="ph2">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph> supports a qualified naming format for dependency properties, so you can specify a <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> qualified dependency property name string to the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor in code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph>指定できるように、依存関係プロパティの修飾の名前付け形式をサポートしている、 <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept>修飾する依存関係プロパティ名の文字列、<ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph>コードでコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>The qualified path to the dependency property identifier is a different concept than a complex path.</source>
          <target state="translated">依存関係プロパティの識別子を修飾パスは、複雑なパスとは異なる概念です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A complex-path <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> should instead be created with the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">複合パス<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>で作成する代わりに、<ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>A string that specifies the <ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.Path" /&gt;</ph>, in a tokenized format.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.Path" /&gt;</ph> をトークン化された形式で指定する文字列。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>An array of objects that sets the <ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.PathParameters" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.PathParameters" /&gt;</ph> を設定するオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> class, with the provided pathing token string and parameters.</source>
          <target state="translated">指定したパスのトークン文字列とパラメーターを使用して、<ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>This signature is generally only used for target-mode <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> usages with complex paths.</source>
          <target state="translated">この署名は通常、に対してのみ使用ターゲット モード<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>複合パスを使用します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>This constructor supports <ph id="ph1">`params`</ph> for the <ph id="ph2">`pathParameters`</ph> constructor argument.</source>
          <target state="translated">このコンス トラクターは<ph id="ph1">`params`</ph>の<ph id="ph2">`pathParameters`</ph>コンス トラクターの引数。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>Therefore you can specify the contents of <ph id="ph1">`pathParameters`</ph> as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the <ph id="ph2">`pathParameters`</ph> items.</source>
          <target state="translated">そのための内容を指定できます<ph id="ph1">`pathParameters`</ph>一連のコンマ区切りのコンス トラクター引数を配列の次元し、で設定する必要があるのではなく、配列を設定すると、<ph id="ph2">`pathParameters`</ph>項目。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>Each item you specify must be one of the following types: <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph>.</source>
          <target state="translated">指定する各項目は、次の種類のいずれかを指定する必要があります: <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>、 <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>、<ph id="ph3">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>For more information on the requirements of the parameters, see <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">パラメーターの要件の詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyPath.Path">
          <source>Gets or sets the string that describes the path.</source>
          <target state="translated">パスを記述する文字列を取得または設定します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The string that describes the path.</source>
          <target state="translated">パスを記述する文字列。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The string contained in this property has three completely different meanings depending on whether a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.</source>
          <target state="translated">このプロパティに含まれる文字列がかどうかに応じて、次の 3 つのまったく異なる意味を持つ、 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 、ストーリー ボードのターゲットのターゲット モード 1 ステップのプロパティ パスのバインディング、またはストーリー ボードのターゲットの複雑なパスのソース モード プロパティのパスが使用されています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in source mode for a binding, <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object model of the object that is being used as the source for a binding.</source>
          <target state="translated">これを使用して場合<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>バインディング用のソース モードで<ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>はプロパティ名を表す文字列か、「ステップスルー」へのパス内のプロパティを説明する文字列を指定できます、<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>バインディングのソースとして使用されているオブジェクトのオブジェクト モデルです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For a binding property path, the character that identifies a "step" is a dot (.).</source>
          <target state="translated">バインディング プロパティのパス"の"ステップを識別する文字は、ドット (.) です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Indexer references (including multiple indexers, and type differentiation) are also supported.</source>
          <target state="translated">インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For more details on the syntax of the string as specifically used by the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, see <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">具体的に使用する文字列の構文の詳細については、<ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>オブジェクトを参照してください<ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>A property used as a binding source need not be a dependency property.</source>
          <target state="translated">バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If the binding updates two-way, the property source must be read-write.</source>
          <target state="translated">双方向のバインドを更新する場合、プロパティのソースは読み取り/書き込みをする必要があります。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Also note that the binding target does have to be a dependency property.</source>
          <target state="translated">バインディング ターゲットには、依存関係プロパティにも注意してください。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For details, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in target mode for a single-step path for a storyboard target, <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph> is a string that is a <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> qualified dependency property name string.</source>
          <target state="translated">これを使用する場合<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>目的のモードで、ストーリー ボードのターゲットの単一ステップ パスの<ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph>文字列では、 <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept>依存関係プロパティの名前の文字列を修飾します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> for a complex path for a storyboard target, <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> is a tokenized string format that describes the relationships of the various objects given in the <ph id="ph3">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">これを使用する場合<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>、ストーリー ボードのターゲットの複雑なパスの<ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>、トークン化された文字列の形式で指定された各種オブジェクトのリレーションシップを説明するは、<ph id="ph3">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Each item in the array is specified in this format by the array index for the item enclosed in parentheses.</source>
          <target state="translated">配列内の各項目は、かっこで囲まれた項目の配列インデックスを使用して、この形式で指定されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For example, to specify the first item in the array, the string token is <ph id="ph1">`(0)`</ph>.</source>
          <target state="translated">たとえば、配列内の最初の項目を指定する文字列トークンは<ph id="ph1">`(0)`</ph>します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Relationships between items ("steps" in the path) are specified by a dot (.).</source>
          <target state="translated">項目 (パス内の「手順」) 間の関係は、ドット (.) で指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two).</source>
          <target state="translated">前ドットのプロパティは、まず、パスの後のプロパティが、2 番目の手順に (2 つのステップを指定することができます)。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The last step in the chain always represents the property being animated.</source>
          <target state="translated">チェーンの最後の手順は、常にアニメーション化されているプロパティを表します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]).</source>
          <target state="translated">インデクサー構文、角かっこ内のインデックスでコレクションのプロパティ内のアイテムへのアクセス ([および])。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The indexer is additive to the token representing the property.</source>
          <target state="translated">インデクサーは、プロパティを表すトークンを追加します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: <ph id="ph1">`(0)[1].(1)`</ph> .</source>
          <target state="translated">たとえばからそのプロパティのコレクション内の 2 番目の項目を指定する最初のステップでトークンの組み合わせで、2 段階のパスを次に示します:<ph id="ph1">`(0)[1].(1)`</ph>です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.</source>
          <target state="translated">チェーン内の最後のプロパティでインデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません、そのオブジェクトのプロパティをアニメーション化する必要があります。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The path string for a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> is typically established through the constructors: the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.Object%29&gt;</ph> signature for bindings or single-step storyboard targets, the <ph id="ph3">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> signature for multi-step storyboard targets.</source>
          <target state="translated">パス文字列を<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>は、通常のコンス トラクターを介して確立:<ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.Object%29&gt;</ph>バインドまたはストーリー ボードの単一ステップのターゲットのシグネチャ、<ph id="ph3">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29&gt;</ph>複数ステップのストーリー ボードのターゲットのシグネチャ。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> When you use a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> to describe a property reference in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, as an attribute value, the string that you specify is first handled by a type converter (<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>).</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept>を使用する場合、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>プロパティの参照を記述する<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>属性値を指定する文字列が実行する型コンバーターによって処理される最初、(<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>This type converter then processes the string and based on its syntax will call one of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> constructor signatures.</source>
          <target state="translated">この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>コンス トラクター シグネチャ。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>This indirection through the type converter handling an attribute value is generally how you use <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, rather than declaring a <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> object element and then applying specific values to attributes such as <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">属性値を処理する型コンバーターをこの間接指定が使用する方法は、通常、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>で<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、宣言するのではなく、<ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph>オブジェクトの要素などの属性にその特定の値を適用する<ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For more information, see <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>PropertyPath 構文は XAML<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>XAML Text Usage</source>
          <target state="translated">XAML テキストの使用方法</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Members of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> type are not typically set in a direct <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">メンバー、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>型が、通常、ダイレクトでは設定されていない<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>構文です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>Gets the list of parameters to use when the path refers to indexed parameters.</source>
          <target state="translated">パスがインデックス付きパラメーターを参照するときに使用するパラメーターのリストを取得します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>The parameter list.</source>
          <target state="translated">パラメーターのリスト。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>The properties for a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> are typically established through the constructors.</source>
          <target state="translated">プロパティを<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>通常のコンス トラクターを使用して確立されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For setting <ph id="ph1">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A&gt;</ph> constructor is particularly convenient because the <ph id="ph3">`pathParameters`</ph> constructor argument is designated as <ph id="ph4">`params`</ph>, meaning that you do not need to create or dimension an array for construction.</source>
          <target state="translated">設定の<ph id="ph1">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A&gt;</ph>コンス トラクターは、特に便利なため、<ph id="ph3">`pathParameters`</ph>としてコンス トラクターの引数が指定されている<ph id="ph4">`params`</ph>配列を作成するためのディメンションを作成または必要がないことを意味します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>You simply specify each member of the array as an additional parameter.</source>
          <target state="translated">追加パラメーターとして、配列の各メンバーを指定するだけです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>If the final property that is the target is a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> type, that value will be cloned.</source>
          <target state="translated">最終的なプロパティを対象となっている場合は、<ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph>型、値を複製することです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For details, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</source>
          <target state="translated">プロパティのチェーンの実際の評価は、ストーリー ボードのアニメーション メカニズムによって実行されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>At the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> level, no validation is performed to make sure that the steps of the path connect at all.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>レベル、検証は行われません、パスの手順がすべての接続を確認します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For instance, you can construct a property path that has <ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph> as the first step, and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType&gt;</ph> as the second step.</source>
          <target state="translated">インスタンスを持つプロパティのパスを構築できます<ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph>最初の手順として、 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType&gt;</ph> 2 番目の手順として。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>But such a property path would fail if actually applied as a target, because the Brush type that fills <ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph> does not have a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">このようなプロパティのパスはため、失敗、ターゲットとして実際に適用されている場合、ブラシの種類を送り返す<ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph>はありません、<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>Invalid property paths fail silently.</source>
          <target state="translated">無効なプロパティ パスは、サイレント モードで失敗します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> When you use a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> to describe a property reference in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, as an attribute value, the string that you specify is first handled by a type converter (<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>).</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept>を使用する場合、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>プロパティの参照を記述する<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>属性値を指定する文字列が実行する型コンバーターによって処理される最初、(<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>This type converter then processes the string and based on its syntax will call one of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> constructor signatures.</source>
          <target state="translated">この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>コンス トラクター シグネチャ。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>This indirection through the type converter handling an attribute value is generally how you use <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, rather than declaring a <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> object element and then applying specific values to attributes such as <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">属性値を処理する型コンバーターをこの間接指定が使用する方法は、通常、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>で<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、宣言するのではなく、<ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph>オブジェクトの要素などの属性にその特定の値を適用する<ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For more information, see <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>PropertyPath 構文は XAML<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>XAML Text Usage</source>
          <target state="translated">XAML テキストの使用方法</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>Members of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> type are not typically set in a direct <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">メンバー、<ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>型が、通常、ダイレクトでは設定されていない<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>構文です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>