<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ec21f-101">別のプロパティの下、または所有している型の下のパスとして、プロパティを記述するためのデータ構造を実装します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-101">Implements a data structure for describing a property as a path below another property, or below an owning type.</span></span> <span data-ttu-id="ec21f-102">プロパティ パスは、オブジェクトへのデータ バインディングと、アニメーション用のストーリーボードやタイムラインで使用されます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-102">Property paths are used in data binding to objects, and in storyboards and timelines for animations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec21f-103">このクラスには、文字列が含まれています。 <xref:System.Windows.PropertyPath.Path%2A>、とは、依存関係プロパティの一覧、<xref:System.Windows.PropertyPath.PathParameters%2A>文字列に<xref:System.Windows.PropertyPath.Path%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-103">This class contains a string <xref:System.Windows.PropertyPath.Path%2A>, and list of dependency properties that are the <xref:System.Windows.PropertyPath.PathParameters%2A> into the string <xref:System.Windows.PropertyPath.Path%2A>.</span></span>  
  
 <span data-ttu-id="ec21f-104"><xref:System.Windows.PropertyPath> 2 つの動作モードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="ec21f-104"><xref:System.Windows.PropertyPath> supports two modes of behavior:</span></span>  
  
 <span data-ttu-id="ec21f-105">**ソース モード**他の操作のソースとして使用されるプロパティへのパスをについて説明します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-105">**Source mode** describes a path to a property that is used as a source for some other operation.</span></span> <span data-ttu-id="ec21f-106">このモードは使用、<xref:System.Windows.Data.Binding>データ バインディングをサポートするクラス。</span><span class="sxs-lookup"><span data-stu-id="ec21f-106">This mode is used by the <xref:System.Windows.Data.Binding> class to support data binding.</span></span>  
  
 <span data-ttu-id="ec21f-107">**ターゲット モード**対象のプロパティとして設定されるプロパティへのパスをについて説明します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-107">**Target mode** describes a path to a property that will be set as a target property.</span></span> <span data-ttu-id="ec21f-108">このモードは、ストーリー ボードおよびタイムラインの setter をサポートするためのアニメーションで使用されます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-108">This mode is used by animation in support of storyboard and timeline setters.</span></span>  
  
 <span data-ttu-id="ec21f-109">たとえば、 `Background.Opacity` 2 段階のパスです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-109">For instance, `Background.Opacity` is a two-step path.</span></span> <span data-ttu-id="ec21f-110">このパスは: 最初に、検索、 `Background` 、オブジェクトのプロパティ オブジェクトを取得する値を`Background`プロパティに設定されているしの値を取得、`Opacity`そのオブジェクトのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-110">This path implies: first, find the `Background` property of an object, get the value object that the `Background` property is set to, and then get the value of the `Opacity` property on that object.</span></span>  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ec21f-111">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="ec21f-111">XAML Attribute Usage</span></span>  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ec21f-112">XAML 値</span><span class="sxs-lookup"><span data-stu-id="ec21f-112">XAML Values</span></span>  
 <span data-ttu-id="ec21f-113">*propertyPath*</span><span class="sxs-lookup"><span data-stu-id="ec21f-113">*propertyPath*</span></span>  
 <span data-ttu-id="ec21f-114">単純または複雑なプロパティ パスに評価される文字列。</span><span class="sxs-lookup"><span data-stu-id="ec21f-114">A string that is evaluated to be either a simple or complex property path.</span></span> <span data-ttu-id="ec21f-115">設定の構文、<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]汎用性が複雑では、別のトピックに記載されて[PropertyPath 構文は XAML](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-115">The syntax for setting a <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is versatile but complex, and is described in the separate topic [PropertyPath XAML Syntax](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ec21f-116"><see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-116">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ec21f-117">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] プロパティまたは単一の依存関係プロパティへのパスを記述するプロパティ パス。</span><span class="sxs-lookup"><span data-stu-id="ec21f-117">A property path that either describes a path to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property, or a single dependency property.</span></span></param>
        <summary><span data-ttu-id="ec21f-118"><see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-118">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec21f-119">このコンス トラクターには、バインディング、またはストーリー ボードのターゲットのターゲット モード 1 ステップのプロパティ パスのソース モード プロパティのパスに対して使用されているかどうかに応じて、2 つのまったく異なる用法があります。</span><span class="sxs-lookup"><span data-stu-id="ec21f-119">This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</span></span>  
  
 <span data-ttu-id="ec21f-120">これを使用して場合<xref:System.Windows.PropertyPath>バインディング用のソース モードで`parameter`はプロパティ名を表す文字列か、「ステップスルー」へのパス内のプロパティを説明する文字列を指定できます、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]バインディングのソースとして使用されているオブジェクトのオブジェクト モデルです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-120">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, `parameter` is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="ec21f-121">バインディング プロパティのパス"の"ステップを識別する文字は、ドット (.) です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-121">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="ec21f-122">インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-122">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="ec21f-123">具体的に使用する文字列の構文の詳細については、<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-123">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ec21f-124">バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="ec21f-124">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="ec21f-125">双方向のバインドを更新する場合、参照されるプロパティは読み取り/書き込みをする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ec21f-125">If the binding updates two-way, the property referenced must be read-write.</span></span> <span data-ttu-id="ec21f-126">バインディング ターゲットには、依存関係プロパティにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="ec21f-126">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="ec21f-127">詳細については、「[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-127">For details, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="ec21f-128">これを使用して場合<xref:System.Windows.PropertyPath>目的のモードで、ストーリー ボードのターゲットの単一ステップ パスの`parameter`は、通常は型として指定<xref:System.Windows.DependencyProperty>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-128">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, `parameter` is generally provided as type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="ec21f-129">表す文字列を指定することも、<xref:System.Windows.DependencyProperty.Name%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-129">You can also specify a string that is the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span> <span data-ttu-id="ec21f-130">これらのいずれかにより、文字列として内部的に保存されているので、結果は同じに評価されます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-130">Either of these evaluate to the same result, because it is stored internally as a string.</span></span> <span data-ttu-id="ec21f-131">提供された<xref:System.Windows.DependencyProperty>を文字列に変換<xref:System.Windows.Markup.DependencyPropertyConverter>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-131">A provided <xref:System.Windows.DependencyProperty> is converted to a string through <xref:System.Windows.Markup.DependencyPropertyConverter>.</span></span> <span data-ttu-id="ec21f-132"><xref:System.Windows.Markup.DependencyPropertyConverter>指定できるように、依存関係プロパティの修飾の名前付け形式をサポートしている、 *typeName*.*propertyName*修飾する依存関係プロパティ名の文字列、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コードでコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-132">The <xref:System.Windows.Markup.DependencyPropertyConverter> supports a qualified naming format for dependency properties, so you can specify a *typeName*.*propertyName* qualified dependency property name string to the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor in code.</span></span> <span data-ttu-id="ec21f-133">依存関係プロパティの識別子を修飾パスは、複雑なパスとは異なる概念です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-133">The qualified path to the dependency property identifier is a different concept than a complex path.</span></span> <span data-ttu-id="ec21f-134">複合パス<xref:System.Windows.PropertyPath>で作成する代わりに、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-134">A complex-path <xref:System.Windows.PropertyPath> should instead be created with the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="ec21f-135"><see cref="P:System.Windows.PropertyPath.Path" /> をトークン化された形式で指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="ec21f-135">A string that specifies the <see cref="P:System.Windows.PropertyPath.Path" />, in a tokenized format.</span></span></param>
        <param name="pathParameters"><span data-ttu-id="ec21f-136"><see cref="P:System.Windows.PropertyPath.PathParameters" /> を設定するオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="ec21f-136">An array of objects that sets the <see cref="P:System.Windows.PropertyPath.PathParameters" />.</span></span></param>
        <summary><span data-ttu-id="ec21f-137">指定したパスのトークン文字列とパラメーターを使用して、<see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-137">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class, with the provided pathing token string and parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec21f-138">この署名は通常、に対してのみ使用ターゲット モード<xref:System.Windows.PropertyPath>複合パスを使用します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-138">This signature is generally only used for target-mode <xref:System.Windows.PropertyPath> usages with complex paths.</span></span>  
  
 <span data-ttu-id="ec21f-139">このコンス トラクターは`params`の`pathParameters`コンス トラクターの引数。</span><span class="sxs-lookup"><span data-stu-id="ec21f-139">This constructor supports `params` for the `pathParameters` constructor argument.</span></span> <span data-ttu-id="ec21f-140">そのための内容を指定できます`pathParameters`一連のコンマ区切りのコンス トラクター引数を配列の次元し、で設定する必要があるのではなく、配列を設定すると、`pathParameters`項目。</span><span class="sxs-lookup"><span data-stu-id="ec21f-140">Therefore you can specify the contents of `pathParameters` as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the `pathParameters` items.</span></span> <span data-ttu-id="ec21f-141">指定する各項目は、次の種類のいずれかを指定する必要があります: <xref:System.Windows.DependencyProperty>、 <xref:System.Reflection.PropertyInfo>、<xref:System.ComponentModel.PropertyDescriptor>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-141">Each item you specify must be one of the following types: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo>, <xref:System.ComponentModel.PropertyDescriptor>.</span></span>  
  
 <span data-ttu-id="ec21f-142">パラメーターの要件の詳細については、次を参照してください。<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-142">For more information on the requirements of the parameters, see <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec21f-143">パスを記述する文字列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-143">Gets or sets the string that describes the path.</span></span></summary>
        <value><span data-ttu-id="ec21f-144">パスを記述する文字列。</span><span class="sxs-lookup"><span data-stu-id="ec21f-144">The string that describes the path.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec21f-145">このプロパティに含まれる文字列がかどうかに応じて、次の 3 つのまったく異なる意味を持つ、 <xref:System.Windows.PropertyPath> 、ストーリー ボードのターゲットのターゲット モード 1 ステップのプロパティ パスのバインディング、またはストーリー ボードのターゲットの複雑なパスのソース モード プロパティのパスが使用されています。</span><span class="sxs-lookup"><span data-stu-id="ec21f-145">The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.</span></span>  
  
 <span data-ttu-id="ec21f-146">これを使用して場合<xref:System.Windows.PropertyPath>バインディング用のソース モードで<xref:System.Windows.PropertyPath.Path%2A>はプロパティ名を表す文字列か、「ステップスルー」へのパス内のプロパティを説明する文字列を指定できます、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]バインディングのソースとして使用されているオブジェクトのオブジェクト モデルです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-146">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, <xref:System.Windows.PropertyPath.Path%2A> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="ec21f-147">バインディング プロパティのパス"の"ステップを識別する文字は、ドット (.) です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-147">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="ec21f-148">インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-148">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="ec21f-149">具体的に使用する文字列の構文の詳細については、<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-149">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ec21f-150">バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="ec21f-150">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="ec21f-151">双方向のバインドを更新する場合、プロパティのソースは読み取り/書き込みをする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ec21f-151">If the binding updates two-way, the property source must be read-write.</span></span> <span data-ttu-id="ec21f-152">バインディング ターゲットには、依存関係プロパティにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="ec21f-152">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="ec21f-153">詳細については、「[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-153">For details, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="ec21f-154">これを使用する場合<xref:System.Windows.PropertyPath>目的のモードで、ストーリー ボードのターゲットの単一ステップ パスの<xref:System.Windows.PropertyPath>文字列では、 *typeName*.*propertyName*依存関係プロパティの名前の文字列を修飾します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-154">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.</span></span>  
  
 <span data-ttu-id="ec21f-155">これを使用する場合<xref:System.Windows.PropertyPath>、ストーリー ボードのターゲットの複雑なパスの<xref:System.Windows.PropertyPath.Path%2A>、トークン化された文字列の形式で指定された各種オブジェクトのリレーションシップを説明するは、<xref:System.Windows.PropertyPath.PathParameters%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-155">If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, <xref:System.Windows.PropertyPath.Path%2A> is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
-   <span data-ttu-id="ec21f-156">配列内の各項目は、かっこで囲まれた項目の配列インデックスを使用して、この形式で指定されます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-156">Each item in the array is specified in this format by the array index for the item enclosed in parentheses.</span></span> <span data-ttu-id="ec21f-157">たとえば、配列内の最初の項目を指定する文字列トークンは`(0)`します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-157">For example, to specify the first item in the array, the string token is `(0)`.</span></span>  
  
-   <span data-ttu-id="ec21f-158">項目 (パス内の「手順」) 間の関係は、ドット (.) で指定します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-158">Relationships between items ("steps" in the path) are specified by a dot (.).</span></span> <span data-ttu-id="ec21f-159">前ドットのプロパティは、まず、パスの後のプロパティが、2 番目の手順に (2 つのステップを指定することができます)。</span><span class="sxs-lookup"><span data-stu-id="ec21f-159">The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two).</span></span> <span data-ttu-id="ec21f-160">チェーンの最後の手順は、常にアニメーション化されているプロパティを表します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-160">The last step in the chain always represents the property being animated.</span></span>  
  
-   <span data-ttu-id="ec21f-161">インデクサー構文、角かっこ内のインデックスでコレクションのプロパティ内のアイテムへのアクセス ([および])。</span><span class="sxs-lookup"><span data-stu-id="ec21f-161">Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]).</span></span> <span data-ttu-id="ec21f-162">インデクサーは、プロパティを表すトークンを追加します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-162">The indexer is additive to the token representing the property.</span></span> <span data-ttu-id="ec21f-163">たとえばからそのプロパティのコレクション内の 2 番目の項目を指定する最初のステップでトークンの組み合わせで、2 段階のパスを次に示します:`(0)[1].(1)`です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-163">For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` .</span></span> <span data-ttu-id="ec21f-164">チェーン内の最後のプロパティでインデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません、そのオブジェクトのプロパティをアニメーション化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ec21f-164">You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.</span></span>  
  
 <span data-ttu-id="ec21f-165">パス文字列を<xref:System.Windows.PropertyPath>は、通常のコンス トラクターを介して確立:<xref:System.Windows.PropertyPath.%23ctor%28System.Object%29>バインドまたはストーリー ボードの単一ステップのターゲットのシグネチャ、<xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29>複数ステップのストーリー ボードのターゲットのシグネチャ。</span><span class="sxs-lookup"><span data-stu-id="ec21f-165">The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> signature for multi-step storyboard targets.</span></span>  
  
 <span data-ttu-id="ec21f-166">**XAML:** を使用する場合、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が実行する型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>)。</span><span class="sxs-lookup"><span data-stu-id="ec21f-166">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="ec21f-167">この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ。</span><span class="sxs-lookup"><span data-stu-id="ec21f-167">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="ec21f-168">属性値を処理する型コンバーターをこの間接指定が使用する方法は、通常、<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素などの属性にその特定の値を適用する<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-168">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="ec21f-169">詳細については、次を参照してください。 [PropertyPath 構文は XAML](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-169">For more information, see [PropertyPath XAML Syntax](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).</span></span>  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="ec21f-170">XAML テキストの使用方法</span><span class="sxs-lookup"><span data-stu-id="ec21f-170">XAML Text Usage</span></span>  
 <span data-ttu-id="ec21f-171">メンバー、<xref:System.Windows.PropertyPath>型が、通常、ダイレクトでは設定されていない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-171">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="ec21f-172">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ec21f-172">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec21f-173">パスがインデックス付きパラメーターを参照するときに使用するパラメーターのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-173">Gets the list of parameters to use when the path refers to indexed parameters.</span></span></summary>
        <value><span data-ttu-id="ec21f-174">パラメーターのリスト。</span><span class="sxs-lookup"><span data-stu-id="ec21f-174">The parameter list.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec21f-175">プロパティを<xref:System.Windows.PropertyPath>通常のコンス トラクターを使用して確立されます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-175">The properties for a <xref:System.Windows.PropertyPath> are typically established through the constructors.</span></span> <span data-ttu-id="ec21f-176">設定の<xref:System.Windows.PropertyPath.PathParameters%2A>、<xref:System.Windows.PropertyPath.%23ctor%2A>コンス トラクターは、特に便利なため、`pathParameters`としてコンス トラクターの引数が指定されている`params`配列を作成するためのディメンションを作成または必要がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-176">For setting <xref:System.Windows.PropertyPath.PathParameters%2A>, the <xref:System.Windows.PropertyPath.%23ctor%2A> constructor is particularly convenient because the `pathParameters` constructor argument is designated as `params`, meaning that you do not need to create or dimension an array for construction.</span></span> <span data-ttu-id="ec21f-177">追加パラメーターとして、配列の各メンバーを指定するだけです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-177">You simply specify each member of the array as an additional parameter.</span></span>  
  
 <span data-ttu-id="ec21f-178">最終的なプロパティを対象となっている場合は、<xref:System.Windows.Freezable>型、値を複製することです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-178">If the final property that is the target is a <xref:System.Windows.Freezable> type, that value will be cloned.</span></span> <span data-ttu-id="ec21f-179">詳細については、「[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-179">For details, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="ec21f-180">プロパティのチェーンの実際の評価は、ストーリー ボードのアニメーション メカニズムによって実行されます。</span><span class="sxs-lookup"><span data-stu-id="ec21f-180">The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</span></span> <span data-ttu-id="ec21f-181"><xref:System.Windows.PropertyPath>レベル、検証は行われません、パスの手順がすべての接続を確認します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-181">At the <xref:System.Windows.PropertyPath> level, no validation is performed to make sure that the steps of the path connect at all.</span></span> <span data-ttu-id="ec21f-182">インスタンスを持つプロパティのパスを構築できます<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>最初の手順として、 <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> 2 番目の手順として。</span><span class="sxs-lookup"><span data-stu-id="ec21f-182">For instance, you can construct a property path that has <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> as the first step, and <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> as the second step.</span></span> <span data-ttu-id="ec21f-183">このようなプロパティのパスはため、失敗、ターゲットとして実際に適用されている場合、ブラシの種類を送り返す<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>はありません、<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="ec21f-183">But such a property path would fail if actually applied as a target, because the Brush type that fills <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> does not have a <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="ec21f-184">無効なプロパティ パスは、サイレント モードで失敗します。</span><span class="sxs-lookup"><span data-stu-id="ec21f-184">Invalid property paths fail silently.</span></span> <span data-ttu-id="ec21f-185">詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-185">For more information, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="ec21f-186">**XAML:** を使用する場合、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が実行する型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>)。</span><span class="sxs-lookup"><span data-stu-id="ec21f-186">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="ec21f-187">この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ。</span><span class="sxs-lookup"><span data-stu-id="ec21f-187">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="ec21f-188">属性値を処理する型コンバーターをこの間接指定が使用する方法は、通常、<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素などの属性にその特定の値を適用する<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-188">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="ec21f-189">詳細については、次を参照してください。 [PropertyPath 構文は XAML](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-189">For more information, see [PropertyPath XAML Syntax](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).</span></span>  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="ec21f-190">XAML テキストの使用方法</span><span class="sxs-lookup"><span data-stu-id="ec21f-190">XAML Text Usage</span></span>  
 <span data-ttu-id="ec21f-191">メンバー、<xref:System.Windows.PropertyPath>型が、通常、ダイレクトでは設定されていない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文です。</span><span class="sxs-lookup"><span data-stu-id="ec21f-191">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="ec21f-192">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ec21f-192">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>