<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17e9bf401b9c5bfe4e7875bd032548d71865619b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39808630" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>別のプロパティの下、または所有している型の下のパスとして、プロパティを記述するためのデータ構造を実装します。 プロパティ パスは、オブジェクトへのデータ バインディングと、アニメーション用のストーリーボードやタイムラインで使用されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスには、文字列が含まれています。 <xref:System.Windows.PropertyPath.Path%2A>、は依存関係プロパティの一覧と、<xref:System.Windows.PropertyPath.PathParameters%2A>文字列に<xref:System.Windows.PropertyPath.Path%2A>します。  
  
 <xref:System.Windows.PropertyPath> 動作の 2 つのモードをサポートしています。  
  
 **ソース モード**他のいくつかの操作のソースとして使用されるプロパティへのパスについて説明します。 このモードを使って、<xref:System.Windows.Data.Binding>データ バインディングをサポートするクラス。  
  
 **ターゲット モード**ターゲット プロパティとして設定されるプロパティへのパスについて説明します。 このモードは、ストーリー ボードおよびタイムラインの setter をサポートするためのアニメーションで使用されます。  
  
 たとえば、`Background.Opacity`は 2 段階のパスです。 このパスは: 最初に、検索、 `Background` 、オブジェクトのプロパティの get 値オブジェクト、`Background`プロパティに設定されておりの値を取得し、`Opacity`そのオブジェクトのプロパティ。  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>XAML 値  
 *propertyPath*  
 単純または複雑なプロパティ パスを指定するために評価される文字列。 設定の構文を<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]は汎用性の高いが、複雑なため、別のトピックに記載されて[PropertyPath の XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] プロパティまたは単一の依存関係プロパティへのパスを記述するプロパティ パス。</param>
        <summary>
          <see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターには、バインディング、またはストーリー ボード ターゲットのターゲット モード シングル ステップのプロパティ パスをソース モード プロパティのパスの使用されているかどうかに応じてまったく異なる 2 つの用法があります。  
  
 これを使用して場合<xref:System.Windows.PropertyPath>、バインディングの元のモードで`parameter`は、プロパティ名を表す文字列、またはプロパティに「ステップ実行」のパスを記述する文字列、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ソースとして使用されているオブジェクトのオブジェクト モデルバインディング。 バインド プロパティのパスを「ステップ」を識別する文字は、ドット (.) です。 インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。 具体的に使用する文字列の構文の詳細については、<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>します。 バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。 双方向のバインドを更新する場合、参照されるプロパティは読み取り/書き込みである必要があります。 バインディング ターゲットには、依存関係プロパティにも注意してください。 詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)します。  
  
 これを使用して場合<xref:System.Windows.PropertyPath>、ストーリー ボード ターゲット パスをシングル ステップのターゲット モードで`parameter`は、通常、型として指定<xref:System.Windows.DependencyProperty>します。 表す文字列を指定することも、<xref:System.Windows.DependencyProperty.Name%2A>します。 文字列として内部的に格納するため、これらのいずれかは、同じ結果に評価されます。 指定した<xref:System.Windows.DependencyProperty>を介して文字列に変換されます<xref:System.Windows.Markup.DependencyPropertyConverter>します。 <xref:System.Windows.Markup.DependencyPropertyConverter>指定できるように、依存関係プロパティの場合は、修飾の名前付け形式をサポートしている、 *typeName*.*propertyName*修飾を依存関係プロパティ名の文字列、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コードでコンス トラクター。 依存関係プロパティの識別子を修飾パスより複雑なパスも異なる概念です。 複合パス<xref:System.Windows.PropertyPath>で作成する代わりに、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コンス トラクター。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="P:System.Windows.PropertyPath.Path" /> をトークン化された形式で指定する文字列。</param>
        <param name="pathParameters">
          <see cref="P:System.Windows.PropertyPath.PathParameters" /> を設定するオブジェクトの配列。</param>
        <summary>指定したパスのトークン文字列とパラメーターを使用して、<see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この署名はターゲット モードの使用のみ通常<xref:System.Windows.PropertyPath>複雑なパスを使用します。  
  
 このコンス トラクターは`params`の`pathParameters`コンス トラクターの引数。 そのための内容を指定できます`pathParameters`一連の配列の次元し、それを設定する必要があるのではなく、配列を設定するコンス トラクターのコンマ区切りの引数として、`pathParameters`項目。 指定した各項目は、次の種類のいずれかを指定する必要があります: <xref:System.Windows.DependencyProperty>、 <xref:System.Reflection.PropertyInfo>、<xref:System.ComponentModel.PropertyDescriptor>します。  
  
 パラメーターの要件の詳細については、次を参照してください。<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスを記述する文字列を取得または設定します。</summary>
        <value>パスを記述する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに含まれる文字列がかどうかに応じて、3 つのまったく異なる意味を<xref:System.Windows.PropertyPath>のストーリー ボード ターゲット、ターゲット モード シングル ステップのプロパティ パスのバインディング、または、複雑なソース モード プロパティのパスが使用されています。ストーリー ボード ターゲットのパス。  
  
 これを使用して場合<xref:System.Windows.PropertyPath>、バインディングの元のモードで<xref:System.Windows.PropertyPath.Path%2A>は、プロパティ名を表す文字列、またはプロパティに「ステップ実行」のパスを記述する文字列、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ソースとして使用されているオブジェクトのオブジェクト モデルバインディング。 バインド プロパティのパスを「ステップ」を識別する文字は、ドット (.) です。 インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。 具体的に使用する文字列の構文の詳細については、<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>します。 バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。 双方向のバインドを更新する場合、プロパティのソースは読み取り/書き込みである必要があります。 バインディング ターゲットには、依存関係プロパティにも注意してください。 詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)します。  
  
 これを使用して場合<xref:System.Windows.PropertyPath>、ストーリー ボード ターゲット パスをシングル ステップのターゲット モードで<xref:System.Windows.PropertyPath>文字列では、 *typeName*.*propertyName*修飾依存関係プロパティの名前文字列です。  
  
 これを使用して場合<xref:System.Windows.PropertyPath>、ストーリー ボード ターゲットの複雑なパスを<xref:System.Windows.PropertyPath.Path%2A>トークン化された文字列形式で指定された各種オブジェクトのリレーションシップを記述するは、 <xref:System.Windows.PropertyPath.PathParameters%2A>。  
  
-   配列内の各項目は、かっこで囲まれた項目の配列インデックスを使用して、この形式で指定されます。 たとえば、配列内の最初の項目を指定する文字列トークンは`(0)`します。  
  
-   項目 (パス内の「ステップ」) 間の関係は、ドット (.) によって指定されます。 ピリオドのプロパティを転送は、まずパスが後のプロパティには、2 番目の手順では、(2 つのステップを指定することができます)。 チェーンの最後の手順は、常にアニメーション化されているプロパティを表します。  
  
-   角かっこ内のインデックス、インデクサー構文を使用してコレクションのプロパティ内のアイテムへのアクセス ([と])。 インデクサーは、プロパティを表すトークンを追加します。 たとえば、次からそのプロパティのコレクション内の 2 番目の項目を指定する最初の手順では、トークンの組み合わせで、2 段階のパスを:`(0)[1].(1)`します。 チェーン内の最後のプロパティで、インデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません、そのオブジェクトのプロパティをアニメーション化する必要があります。  
  
 パス文字列を<xref:System.Windows.PropertyPath>コンス トラクターを介して確立するには通常、:<xref:System.Windows.PropertyPath.%23ctor%28System.Object%29>バインドまたはシングル ステップのストーリー ボードのターゲットのシグネチャ、<xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29>複数ステップのストーリー ボード ターゲットの署名。  
  
 **XAML:** を使用すると、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>)。 この型コンバーターが、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ。 属性値を処理する型コンバーターをこの間接参照が使用する方法は通常<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素となどの属性に特定の値を適用<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>. 詳細については、次を参照してください。 [PropertyPath の XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)します。  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用状況  
 メンバー、<xref:System.Windows.PropertyPath>型が、通常、direct では設定されていない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。 「解説」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスがインデックス付きパラメーターを参照するときに使用するパラメーターのリストを取得します。</summary>
        <value>パラメーターのリスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティを<xref:System.Windows.PropertyPath>通常コンス トラクターを使用して確立されます。 設定の<xref:System.Windows.PropertyPath.PathParameters%2A>、<xref:System.Windows.PropertyPath.%23ctor%2A>コンス トラクターは特に便利なため、`pathParameters`としてコンス トラクターの引数が指定されて`params`配列を生成するためのディメンションを作成または必要がないことを意味します。 追加のパラメーターとして、配列の各メンバーを指定するだけです。  
  
 最終的なプロパティを対象となっている場合は、<xref:System.Windows.Freezable>型、値を複製することです。 詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)します。  
  
 プロパティのチェーンの実際の評価は、ストーリー ボード アニメーションのメカニズムによって実行されます。 <xref:System.Windows.PropertyPath>レベル、検証は実行されません、パスの手順がすべての接続を確認します。 持つプロパティのパスを構築する、<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>最初の手順として、 <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> 2 番目の手順として。 ブラシの種類を送り返すために、このようなプロパティのパスをターゲットとして実際に適用されている場合は失敗<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>はありません、<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>プロパティ。 無効なプロパティのパスは、サイレント モードで失敗します。 詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)します。  
  
 **XAML:** を使用すると、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>)。 この型コンバーターが、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ。 属性値を処理する型コンバーターをこの間接参照が使用する方法は通常<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素となどの属性に特定の値を適用<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>. 詳細については、次を参照してください。 [PropertyPath の XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)します。  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用状況  
 メンバー、<xref:System.Windows.PropertyPath>型が、通常、direct では設定されていない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。 「解説」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>