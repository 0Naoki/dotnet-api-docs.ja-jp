<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df1b6107ba35b490207ab814ae9ccde139ed07d2" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37491627" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="161f4-101">Implements a data structure for describing a property as a path below another property, or below an owning type.</span>
      <span class="sxs-lookup">
        <span data-stu-id="161f4-101">Implements a data structure for describing a property as a path below another property, or below an owning type.</span>
      </span>
      <span data-ttu-id="161f4-102">Property paths are used in data binding to objects, and in storyboards and timelines for animations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="161f4-102">Property paths are used in data binding to objects, and in storyboards and timelines for animations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161f4-103">このクラスには、文字列が含まれています。 <xref:System.Windows.PropertyPath.Path%2A>、は依存関係プロパティの一覧と、<xref:System.Windows.PropertyPath.PathParameters%2A>文字列に<xref:System.Windows.PropertyPath.Path%2A>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-103">This class contains a string <xref:System.Windows.PropertyPath.Path%2A>, and list of dependency properties that are the <xref:System.Windows.PropertyPath.PathParameters%2A> into the string <xref:System.Windows.PropertyPath.Path%2A>.</span></span>  
  
 <span data-ttu-id="161f4-104"><xref:System.Windows.PropertyPath> 動作の 2 つのモードをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="161f4-104"><xref:System.Windows.PropertyPath> supports two modes of behavior:</span></span>  
  
 <span data-ttu-id="161f4-105">**ソース モード**他のいくつかの操作のソースとして使用されるプロパティへのパスについて説明します。</span><span class="sxs-lookup"><span data-stu-id="161f4-105">**Source mode** describes a path to a property that is used as a source for some other operation.</span></span> <span data-ttu-id="161f4-106">このモードを使って、<xref:System.Windows.Data.Binding>データ バインディングをサポートするクラス。</span><span class="sxs-lookup"><span data-stu-id="161f4-106">This mode is used by the <xref:System.Windows.Data.Binding> class to support data binding.</span></span>  
  
 <span data-ttu-id="161f4-107">**ターゲット モード**ターゲット プロパティとして設定されるプロパティへのパスについて説明します。</span><span class="sxs-lookup"><span data-stu-id="161f4-107">**Target mode** describes a path to a property that will be set as a target property.</span></span> <span data-ttu-id="161f4-108">このモードは、ストーリー ボードおよびタイムラインの setter をサポートするためのアニメーションで使用されます。</span><span class="sxs-lookup"><span data-stu-id="161f4-108">This mode is used by animation in support of storyboard and timeline setters.</span></span>  
  
 <span data-ttu-id="161f4-109">たとえば、`Background.Opacity`は 2 段階のパスです。</span><span class="sxs-lookup"><span data-stu-id="161f4-109">For instance, `Background.Opacity` is a two-step path.</span></span> <span data-ttu-id="161f4-110">このパスは: 最初に、検索、 `Background` 、オブジェクトのプロパティの get 値オブジェクト、`Background`プロパティに設定されておりの値を取得し、`Opacity`そのオブジェクトのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="161f4-110">This path implies: first, find the `Background` property of an object, get the value object that the `Background` property is set to, and then get the value of the `Opacity` property on that object.</span></span>  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="161f4-111">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="161f4-111">XAML Attribute Usage</span></span>  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a><span data-ttu-id="161f4-112">XAML 値</span><span class="sxs-lookup"><span data-stu-id="161f4-112">XAML Values</span></span>  
 <span data-ttu-id="161f4-113">*propertyPath*</span><span class="sxs-lookup"><span data-stu-id="161f4-113">*propertyPath*</span></span>  
 <span data-ttu-id="161f4-114">単純または複雑なプロパティ パスを指定するために評価される文字列。</span><span class="sxs-lookup"><span data-stu-id="161f4-114">A string that is evaluated to be either a simple or complex property path.</span></span> <span data-ttu-id="161f4-115">設定の構文を<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]は汎用性の高いが、複雑なため、別のトピックに記載されて[PropertyPath の XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-115">The syntax for setting a <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is versatile but complex, and is described in the separate topic [PropertyPath XAML Syntax](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="161f4-116">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-116">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="161f4-117">A property path that either describes a path to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property, or a single dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-117">A property path that either describes a path to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property, or a single dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="161f4-118">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-118">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161f4-119">このコンス トラクターには、バインディング、またはストーリー ボード ターゲットのターゲット モード シングル ステップのプロパティ パスをソース モード プロパティのパスの使用されているかどうかに応じてまったく異なる 2 つの用法があります。</span><span class="sxs-lookup"><span data-stu-id="161f4-119">This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</span></span>  
  
 <span data-ttu-id="161f4-120">これを使用して場合<xref:System.Windows.PropertyPath>、バインディングの元のモードで`parameter`は、プロパティ名を表す文字列、またはプロパティに「ステップ実行」のパスを記述する文字列、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ソースとして使用されているオブジェクトのオブジェクト モデルバインディング。</span><span class="sxs-lookup"><span data-stu-id="161f4-120">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, `parameter` is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="161f4-121">バインド プロパティのパスを「ステップ」を識別する文字は、ドット (.) です。</span><span class="sxs-lookup"><span data-stu-id="161f4-121">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="161f4-122">インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。</span><span class="sxs-lookup"><span data-stu-id="161f4-122">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="161f4-123">具体的に使用する文字列の構文の詳細については、<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-123">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="161f4-124">バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="161f4-124">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="161f4-125">双方向のバインドを更新する場合、参照されるプロパティは読み取り/書き込みである必要があります。</span><span class="sxs-lookup"><span data-stu-id="161f4-125">If the binding updates two-way, the property referenced must be read-write.</span></span> <span data-ttu-id="161f4-126">バインディング ターゲットには、依存関係プロパティにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="161f4-126">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="161f4-127">詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-127">For details, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="161f4-128">これを使用して場合<xref:System.Windows.PropertyPath>、ストーリー ボード ターゲット パスをシングル ステップのターゲット モードで`parameter`は、通常、型として指定<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-128">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, `parameter` is generally provided as type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="161f4-129">表す文字列を指定することも、<xref:System.Windows.DependencyProperty.Name%2A>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-129">You can also specify a string that is the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span> <span data-ttu-id="161f4-130">文字列として内部的に格納するため、これらのいずれかは、同じ結果に評価されます。</span><span class="sxs-lookup"><span data-stu-id="161f4-130">Either of these evaluate to the same result, because it is stored internally as a string.</span></span> <span data-ttu-id="161f4-131">指定した<xref:System.Windows.DependencyProperty>を介して文字列に変換されます<xref:System.Windows.Markup.DependencyPropertyConverter>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-131">A provided <xref:System.Windows.DependencyProperty> is converted to a string through <xref:System.Windows.Markup.DependencyPropertyConverter>.</span></span> <span data-ttu-id="161f4-132"><xref:System.Windows.Markup.DependencyPropertyConverter>指定できるように、依存関係プロパティの場合は、修飾の名前付け形式をサポートしている、 *typeName*.*propertyName*修飾を依存関係プロパティ名の文字列、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コードでコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="161f4-132">The <xref:System.Windows.Markup.DependencyPropertyConverter> supports a qualified naming format for dependency properties, so you can specify a *typeName*.*propertyName* qualified dependency property name string to the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor in code.</span></span> <span data-ttu-id="161f4-133">依存関係プロパティの識別子を修飾パスより複雑なパスも異なる概念です。</span><span class="sxs-lookup"><span data-stu-id="161f4-133">The qualified path to the dependency property identifier is a different concept than a complex path.</span></span> <span data-ttu-id="161f4-134">複合パス<xref:System.Windows.PropertyPath>で作成する代わりに、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="161f4-134">A complex-path <xref:System.Windows.PropertyPath> should instead be created with the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="161f4-135">A string that specifies the <see cref="P:System.Windows.PropertyPath.Path" />, in a tokenized format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-135">A string that specifies the <see cref="P:System.Windows.PropertyPath.Path" />, in a tokenized format.</span>
          </span>
        </param>
        <param name="pathParameters">
          <span data-ttu-id="161f4-136">An array of objects that sets the <see cref="P:System.Windows.PropertyPath.PathParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-136">An array of objects that sets the <see cref="P:System.Windows.PropertyPath.PathParameters" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="161f4-137">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class, with the provided pathing token string and parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-137">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class, with the provided pathing token string and parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161f4-138">この署名はターゲット モードの使用のみ通常<xref:System.Windows.PropertyPath>複雑なパスを使用します。</span><span class="sxs-lookup"><span data-stu-id="161f4-138">This signature is generally only used for target-mode <xref:System.Windows.PropertyPath> usages with complex paths.</span></span>  
  
 <span data-ttu-id="161f4-139">このコンス トラクターは`params`の`pathParameters`コンス トラクターの引数。</span><span class="sxs-lookup"><span data-stu-id="161f4-139">This constructor supports `params` for the `pathParameters` constructor argument.</span></span> <span data-ttu-id="161f4-140">そのための内容を指定できます`pathParameters`一連の配列の次元し、それを設定する必要があるのではなく、配列を設定するコンス トラクターのコンマ区切りの引数として、`pathParameters`項目。</span><span class="sxs-lookup"><span data-stu-id="161f4-140">Therefore you can specify the contents of `pathParameters` as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the `pathParameters` items.</span></span> <span data-ttu-id="161f4-141">指定した各項目は、次の種類のいずれかを指定する必要があります: <xref:System.Windows.DependencyProperty>、 <xref:System.Reflection.PropertyInfo>、<xref:System.ComponentModel.PropertyDescriptor>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-141">Each item you specify must be one of the following types: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo>, <xref:System.ComponentModel.PropertyDescriptor>.</span></span>  
  
 <span data-ttu-id="161f4-142">パラメーターの要件の詳細については、次を参照してください。<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-142">For more information on the requirements of the parameters, see <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="161f4-143">Gets or sets the string that describes the path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-143">Gets or sets the string that describes the path.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="161f4-144">パスを説明する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-144">The string that describes the path.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161f4-145">このプロパティに含まれる文字列がかどうかに応じて、3 つのまったく異なる意味を<xref:System.Windows.PropertyPath>のストーリー ボード ターゲット、ターゲット モード シングル ステップのプロパティ パスのバインディング、または、複雑なソース モード プロパティのパスが使用されています。ストーリー ボード ターゲットのパス。</span><span class="sxs-lookup"><span data-stu-id="161f4-145">The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.</span></span>  
  
 <span data-ttu-id="161f4-146">これを使用して場合<xref:System.Windows.PropertyPath>、バインディングの元のモードで<xref:System.Windows.PropertyPath.Path%2A>は、プロパティ名を表す文字列、またはプロパティに「ステップ実行」のパスを記述する文字列、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ソースとして使用されているオブジェクトのオブジェクト モデルバインディング。</span><span class="sxs-lookup"><span data-stu-id="161f4-146">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, <xref:System.Windows.PropertyPath.Path%2A> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="161f4-147">バインド プロパティのパスを「ステップ」を識別する文字は、ドット (.) です。</span><span class="sxs-lookup"><span data-stu-id="161f4-147">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="161f4-148">インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。</span><span class="sxs-lookup"><span data-stu-id="161f4-148">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="161f4-149">具体的に使用する文字列の構文の詳細については、<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="161f4-149">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="161f4-150">バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="161f4-150">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="161f4-151">双方向のバインドを更新する場合、プロパティのソースは読み取り/書き込みである必要があります。</span><span class="sxs-lookup"><span data-stu-id="161f4-151">If the binding updates two-way, the property source must be read-write.</span></span> <span data-ttu-id="161f4-152">バインディング ターゲットには、依存関係プロパティにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="161f4-152">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="161f4-153">詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-153">For details, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="161f4-154">これを使用して場合<xref:System.Windows.PropertyPath>、ストーリー ボード ターゲット パスをシングル ステップのターゲット モードで<xref:System.Windows.PropertyPath>文字列では、 *typeName*.*propertyName*修飾依存関係プロパティの名前文字列です。</span><span class="sxs-lookup"><span data-stu-id="161f4-154">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.</span></span>  
  
 <span data-ttu-id="161f4-155">これを使用して場合<xref:System.Windows.PropertyPath>、ストーリー ボード ターゲットの複雑なパスを<xref:System.Windows.PropertyPath.Path%2A>トークン化された文字列形式で指定された各種オブジェクトのリレーションシップを記述するは、 <xref:System.Windows.PropertyPath.PathParameters%2A>。</span><span class="sxs-lookup"><span data-stu-id="161f4-155">If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, <xref:System.Windows.PropertyPath.Path%2A> is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
-   <span data-ttu-id="161f4-156">配列内の各項目は、かっこで囲まれた項目の配列インデックスを使用して、この形式で指定されます。</span><span class="sxs-lookup"><span data-stu-id="161f4-156">Each item in the array is specified in this format by the array index for the item enclosed in parentheses.</span></span> <span data-ttu-id="161f4-157">たとえば、配列内の最初の項目を指定する文字列トークンは`(0)`します。</span><span class="sxs-lookup"><span data-stu-id="161f4-157">For example, to specify the first item in the array, the string token is `(0)`.</span></span>  
  
-   <span data-ttu-id="161f4-158">項目 (パス内の「ステップ」) 間の関係は、ドット (.) によって指定されます。</span><span class="sxs-lookup"><span data-stu-id="161f4-158">Relationships between items ("steps" in the path) are specified by a dot (.).</span></span> <span data-ttu-id="161f4-159">ピリオドのプロパティを転送は、まずパスが後のプロパティには、2 番目の手順では、(2 つのステップを指定することができます)。</span><span class="sxs-lookup"><span data-stu-id="161f4-159">The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two).</span></span> <span data-ttu-id="161f4-160">チェーンの最後の手順は、常にアニメーション化されているプロパティを表します。</span><span class="sxs-lookup"><span data-stu-id="161f4-160">The last step in the chain always represents the property being animated.</span></span>  
  
-   <span data-ttu-id="161f4-161">角かっこ内のインデックス、インデクサー構文を使用してコレクションのプロパティ内のアイテムへのアクセス ([と])。</span><span class="sxs-lookup"><span data-stu-id="161f4-161">Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]).</span></span> <span data-ttu-id="161f4-162">インデクサーは、プロパティを表すトークンを追加します。</span><span class="sxs-lookup"><span data-stu-id="161f4-162">The indexer is additive to the token representing the property.</span></span> <span data-ttu-id="161f4-163">たとえば、次からそのプロパティのコレクション内の 2 番目の項目を指定する最初の手順では、トークンの組み合わせで、2 段階のパスを:`(0)[1].(1)`します。</span><span class="sxs-lookup"><span data-stu-id="161f4-163">For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` .</span></span> <span data-ttu-id="161f4-164">チェーン内の最後のプロパティで、インデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません、そのオブジェクトのプロパティをアニメーション化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="161f4-164">You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.</span></span>  
  
 <span data-ttu-id="161f4-165">パス文字列を<xref:System.Windows.PropertyPath>コンス トラクターを介して確立するには通常、:<xref:System.Windows.PropertyPath.%23ctor%28System.Object%29>バインドまたはシングル ステップのストーリー ボードのターゲットのシグネチャ、<xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29>複数ステップのストーリー ボード ターゲットの署名。</span><span class="sxs-lookup"><span data-stu-id="161f4-165">The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> signature for multi-step storyboard targets.</span></span>  
  
 <span data-ttu-id="161f4-166">**XAML:** を使用すると、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>)。</span><span class="sxs-lookup"><span data-stu-id="161f4-166">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="161f4-167">この型コンバーターが、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ。</span><span class="sxs-lookup"><span data-stu-id="161f4-167">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="161f4-168">属性値を処理する型コンバーターをこの間接参照が使用する方法は通常<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素となどの属性に特定の値を適用<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>.</span><span class="sxs-lookup"><span data-stu-id="161f4-168">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="161f4-169">詳細については、次を参照してください。 [PropertyPath の XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-169">For more information, see [PropertyPath XAML Syntax](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).</span></span>  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="161f4-170">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="161f4-170">XAML Text Usage</span></span>  
 <span data-ttu-id="161f4-171">メンバー、<xref:System.Windows.PropertyPath>型が、通常、direct では設定されていない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。</span><span class="sxs-lookup"><span data-stu-id="161f4-171">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="161f4-172">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="161f4-172">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="161f4-173">Gets the list of parameters to use when the path refers to indexed parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-173">Gets the list of parameters to use when the path refers to indexed parameters.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="161f4-174">パラメーターのリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="161f4-174">The parameter list.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161f4-175">プロパティを<xref:System.Windows.PropertyPath>通常コンス トラクターを使用して確立されます。</span><span class="sxs-lookup"><span data-stu-id="161f4-175">The properties for a <xref:System.Windows.PropertyPath> are typically established through the constructors.</span></span> <span data-ttu-id="161f4-176">設定の<xref:System.Windows.PropertyPath.PathParameters%2A>、<xref:System.Windows.PropertyPath.%23ctor%2A>コンス トラクターは特に便利なため、`pathParameters`としてコンス トラクターの引数が指定されて`params`配列を生成するためのディメンションを作成または必要がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="161f4-176">For setting <xref:System.Windows.PropertyPath.PathParameters%2A>, the <xref:System.Windows.PropertyPath.%23ctor%2A> constructor is particularly convenient because the `pathParameters` constructor argument is designated as `params`, meaning that you do not need to create or dimension an array for construction.</span></span> <span data-ttu-id="161f4-177">追加のパラメーターとして、配列の各メンバーを指定するだけです。</span><span class="sxs-lookup"><span data-stu-id="161f4-177">You simply specify each member of the array as an additional parameter.</span></span>  
  
 <span data-ttu-id="161f4-178">最終的なプロパティを対象となっている場合は、<xref:System.Windows.Freezable>型、値を複製することです。</span><span class="sxs-lookup"><span data-stu-id="161f4-178">If the final property that is the target is a <xref:System.Windows.Freezable> type, that value will be cloned.</span></span> <span data-ttu-id="161f4-179">詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-179">For details, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="161f4-180">プロパティのチェーンの実際の評価は、ストーリー ボード アニメーションのメカニズムによって実行されます。</span><span class="sxs-lookup"><span data-stu-id="161f4-180">The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</span></span> <span data-ttu-id="161f4-181"><xref:System.Windows.PropertyPath>レベル、検証は実行されません、パスの手順がすべての接続を確認します。</span><span class="sxs-lookup"><span data-stu-id="161f4-181">At the <xref:System.Windows.PropertyPath> level, no validation is performed to make sure that the steps of the path connect at all.</span></span> <span data-ttu-id="161f4-182">持つプロパティのパスを構築する、<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>最初の手順として、 <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> 2 番目の手順として。</span><span class="sxs-lookup"><span data-stu-id="161f4-182">For instance, you can construct a property path that has <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> as the first step, and <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> as the second step.</span></span> <span data-ttu-id="161f4-183">ブラシの種類を送り返すために、このようなプロパティのパスをターゲットとして実際に適用されている場合は失敗<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>はありません、<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="161f4-183">But such a property path would fail if actually applied as a target, because the Brush type that fills <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> does not have a <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="161f4-184">無効なプロパティのパスは、サイレント モードで失敗します。</span><span class="sxs-lookup"><span data-stu-id="161f4-184">Invalid property paths fail silently.</span></span> <span data-ttu-id="161f4-185">詳細については、次を参照してください。[ストーリー ボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-185">For more information, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="161f4-186">**XAML:** を使用すると、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>)。</span><span class="sxs-lookup"><span data-stu-id="161f4-186">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="161f4-187">この型コンバーターが、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ。</span><span class="sxs-lookup"><span data-stu-id="161f4-187">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="161f4-188">属性値を処理する型コンバーターをこの間接参照が使用する方法は通常<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素となどの属性に特定の値を適用<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>.</span><span class="sxs-lookup"><span data-stu-id="161f4-188">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="161f4-189">詳細については、次を参照してください。 [PropertyPath の XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)します。</span><span class="sxs-lookup"><span data-stu-id="161f4-189">For more information, see [PropertyPath XAML Syntax](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).</span></span>  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="161f4-190">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="161f4-190">XAML Text Usage</span></span>  
 <span data-ttu-id="161f4-191">メンバー、<xref:System.Windows.PropertyPath>型が、通常、direct では設定されていない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。</span><span class="sxs-lookup"><span data-stu-id="161f4-191">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="161f4-192">「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="161f4-192">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>