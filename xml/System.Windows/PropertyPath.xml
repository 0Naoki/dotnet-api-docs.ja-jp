<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4329e496700e4e34a463e39da3ce24baafeb38d2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444294" /></Metadata><TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プロパティを、別のプロパティまたは所有する型の下位のパスとして記述するためのデータ構造を実装します。 プロパティ パスは、オブジェクトへのデータ バインディングと、アニメーションのストーリーボードおよびタイムラインに使用されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスには、 <xref:System.Windows.PropertyPath.Path%2A>文字列と、 <xref:System.Windows.PropertyPath.PathParameters%2A>文字列<xref:System.Windows.PropertyPath.Path%2A>に含まれる依存関係プロパティの一覧が含まれています。  
  
 <xref:System.Windows.PropertyPath>では、2つの動作モードがサポートされています。  
  
 **ソースモード**は、他の操作のソースとして使用されるプロパティへのパスを表します。 このモードは、 <xref:System.Windows.Data.Binding>データバインディングをサポートするためにクラスによって使用されます。  
  
 **ターゲットモード**ターゲットプロパティとして設定されるプロパティへのパスを記述します。 このモードは、ストーリーボードとタイムラインセッターのサポートでアニメーションによって使用されます。  
  
 たとえば、 `Background.Opacity`は2段階のパスです。 このパスは、最初にオブジェクトの`Background`プロパティを検索し、 `Background`プロパティが設定されている値オブジェクトを取得して、そのオブジェクトの`Opacity`プロパティの値を取得することを意味します。  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>XAML 値  
 *propertyPath*  
 単純または複雑なプロパティパスとして評価される文字列。 <xref:System.Windows.PropertyPath> で[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]を設定するための構文は、汎用性がありますが複雑です。個別のトピック「 [PropertyPath XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)」で説明されています。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/056aee79-7cdd-434f-8174-dfc856cad343">x:Static のマークアップ拡張機能</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] プロパティまたは単一の依存関係プロパティへのパスを記述するプロパティ パス。</param>
        <summary><see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、バインディングのソースモードプロパティパスとして使用されているか、またはストーリーボードターゲットのターゲットモードのシングルステッププロパティパスで使用されているかによって、まったく異なる2つの使用方法を持ちます。  
  
 バインディングのソース<xref:System.Windows.PropertyPath>モードでこのを使用する場合`parameter` 、はプロパティ名を表す文字列であるか、またはソースとして使用されているオブジェクトの[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]オブジェクトモデルのプロパティへの "ステップスルー" パスを記述する文字列にすることができます。バインディングの場合。 バインドプロパティのパスの場合、"step" を識別する文字はドット (.) です。 インデクサー参照 (複数のインデクサーと型の区別も含む) もサポートされています。 <xref:System.Windows.Data.Binding>オブジェクトによって明示的に使用される文字列の構文の詳細につい<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>ては、「」を参照してください。 バインディングソースとして使用されるプロパティは、依存関係プロパティである必要はありません。 バインディングが双方向に更新される場合、参照されるプロパティは読み取り/書き込み可能である必要があります。 また、バインディングターゲットは依存関係プロパティである必要があることにも注意してください。 詳細については、「[データバインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)」を参照してください。  
  
 ストーリーボードターゲット<xref:System.Windows.PropertyPath>のシングルステップパスに対してターゲットモードでこれを使用する`parameter`場合、は通常、 <xref:System.Windows.DependencyProperty>型として提供されます。 また、 <xref:System.Windows.DependencyProperty.Name%2A>である文字列を指定することもできます。 これらはいずれも、内部的に文字列として格納されるため、同じ結果に評価されます。 指定さ<xref:System.Windows.DependencyProperty>れたは、を使用<xref:System.Windows.Markup.DependencyPropertyConverter>して文字列に変換されます。 は<xref:System.Windows.Markup.DependencyPropertyConverter>依存関係プロパティの修飾された名前付け形式をサポートしているため、 *typeName*を指定できます。*propertyName*修飾依存関係プロパティ名文字列を<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コード内のコンストラクターに指定します。 依存関係プロパティの識別子への修飾パスは、複雑なパスとは異なる概念です。 代わりに、 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>コンストラクターを<xref:System.Windows.PropertyPath>使用して複雑なパスを作成する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path"><see cref="P:System.Windows.PropertyPath.Path" /> をトークン化された形式で指定する文字列。</param>
        <param name="pathParameters"><see cref="P:System.Windows.PropertyPath.PathParameters" /> を設定するオブジェクトの配列。</param>
        <summary>指定したパスのトークン文字列とパラメーターを使用して、<see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この署名は、通常、複雑なパスを<xref:System.Windows.PropertyPath>持つターゲットモードの使用にのみ使用されます。  
  
 このコンストラクターは`params` 、 `pathParameters`コンストラクター引数に対してをサポートします。 そのため、配列の次元を`pathParameters`設定してから`pathParameters`項目を設定するのではなく、配列を設定する一連のコンマ区切りのコンストラクター引数としての内容を指定できます。 指定する各項目は<xref:System.Windows.DependencyProperty>、、 <xref:System.Reflection.PropertyInfo>、 <xref:System.ComponentModel.PropertyDescriptor>のいずれかの型である必要があります。  
  
 パラメーターの要件の詳細については、「 <xref:System.Windows.PropertyPath.Path%2A> 」 <xref:System.Windows.PropertyPath.PathParameters%2A>および「」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスを記述する文字列を取得または設定します。</summary>
        <value>パスを記述する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに含まれる文字列には、 <xref:System.Windows.PropertyPath>がバインディングのソースモードプロパティパスで使用されているか、ストーリーボードターゲットのターゲットモードのシングルステッププロパティパスで使用されているか、または複雑であるかによって、3つの完全に異なる意味があります。ストーリーボードターゲットのパス。  
  
 バインディングのソース<xref:System.Windows.PropertyPath>モードでこのを使用する場合<xref:System.Windows.PropertyPath.Path%2A> 、はプロパティ名を表す文字列であるか、またはソースとして使用されているオブジェクトの[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]オブジェクトモデルのプロパティへの "ステップスルー" パスを記述する文字列にすることができます。バインディングの場合。 バインドプロパティのパスの場合、"step" を識別する文字はドット (.) です。 インデクサー参照 (複数のインデクサーと型の区別も含む) もサポートされています。 <xref:System.Windows.Data.Binding>オブジェクトによって明示的に使用される文字列の構文の詳細につい<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>ては、「」を参照してください。 バインディングソースとして使用されるプロパティは、依存関係プロパティである必要はありません。 バインディングが双方向に更新される場合、プロパティソースは読み取り/書き込み可能である必要があります。 また、バインディングターゲットは依存関係プロパティである必要があることにも注意してください。 詳細については、「[データバインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)」を参照してください。  
  
 ストーリーボードターゲット<xref:System.Windows.PropertyPath>のシングルステップパスに対してターゲットモードでこれを使用する<xref:System.Windows.PropertyPath>場合、は、 *typeName*である文字列です。*propertyName*修飾依存関係プロパティ名の文字列。  
  
 ストーリーボードターゲット<xref:System.Windows.PropertyPath>の複雑なパスにこのを使用する<xref:System.Windows.PropertyPath.Path%2A>場合、は、 <xref:System.Windows.PropertyPath.PathParameters%2A>で指定されたさまざまなオブジェクトの関係を表すトークン化された文字列形式です。  
  
-   配列内の各項目は、かっこで囲まれた項目の配列インデックスによって、この形式で指定されます。 たとえば、配列内の最初の項目を指定する場合、文字列トークンは`(0)`です。  
  
-   項目間のリレーションシップ (パス内の "ステップ") は、ドット (.) によって指定されます。 ドットの前のプロパティは、パスの最初のステップであり、の後のプロパティは2番目のステップになります (2 つ以上のステップを指定できます)。 チェーンの最後のステップは、アニメーション化されているプロパティを常に表します。  
  
-   コレクションプロパティ内の項目は、インデクサー構文を使用してアクセスされます。インデックスは角かっこ ([および]) で囲みます。 インデクサーは、プロパティを表すトークンに加算されます。 たとえば、次に示すのは、2段階のパスです`(0)[1].(1)` 。最初の手順では、このプロパティのコレクション内から2番目の項目を指定します。 チェーンの最後のプロパティでインデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません。そのオブジェクトのプロパティをアニメーション化する必要があります。  
  
 の<xref:System.Windows.PropertyPath>パス文字列は、通常、コンストラクターを使用して確立<xref:System.Windows.PropertyPath.%23ctor%28System.Object%29>されます。バインディングの署名またはシングル<xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29>ステップのストーリーボードターゲットとは、複数ステップのストーリーボードターゲットの署名です。  
  
 **XAML**を使用<xref:System.Windows.PropertyPath>して、の[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロパティ参照を属性値として記述する場合は、指定した文字列が最初に型コンバーター (<xref:System.Windows.PropertyPathConverter>) によって処理されます。 その後、この型コンバーターは文字列を処理し、その構文に基づいて<xref:System.Windows.PropertyPath>コンストラクターシグネチャの1つを呼び出します。 属性値を処理する型コンバーターを使用したこの間接参照は<xref:System.Windows.PropertyPath> 、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]オブジェクト要素を宣言し<xref:System.Windows.PropertyPath>た後、やなど<xref:System.Windows.PropertyPath.Path%2A>の属性に特定の値を適用するのではなく、一般的にでを使用する方法です。<xref:System.Windows.PropertyPath.PathParameters%2A>. 詳細については、「 [PROPERTYPATH XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)」を参照してください。  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用  
 <xref:System.Windows.PropertyPath>型のメンバーは、通常、直接[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]の構文では設定されません。 「解説」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスがインデックス付きパラメーターを参照するときに使用するパラメーターのリストを取得します。</summary>
        <value>パラメーターのリスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 のプロパティは、 <xref:System.Windows.PropertyPath>通常、コンストラクターを使用して確立されます。 を設定<xref:System.Windows.PropertyPath.PathParameters%2A>する場合、コンストラクターは特に便利`pathParameters`です。これは、 `params`コンストラクターの<xref:System.Windows.PropertyPath.%23ctor%2A>引数がとして指定されているためです。つまり、構築用の配列を作成したり、次元にしたりする必要はありません。 配列の各メンバーを追加のパラメーターとして指定するだけです。  
  
 ターゲットである最終的なプロパティが<xref:System.Windows.Freezable>型である場合、その値は複製されます。 詳細については、「[ストーリーボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)」を参照してください。  
  
 プロパティチェーンの実際の評価は、ストーリーボードアニメーション機構によって実行されます。 <xref:System.Windows.PropertyPath>レベルでは、パスのステップが確実に接続されるように検証は行われません。 たとえば、最初の手順<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType>として、2番目の手順としてを持つプロパティパスを構築できます。 ただし、このようなプロパティパスは、実際にターゲットとして適用された場合<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>に失敗します<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> 。これは、塗りつぶされるブラシの種類にプロパティがないためです。 無効なプロパティパスは、警告なしで失敗します。 詳細については、「[ストーリーボードの概要](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)」を参照してください。  
  
 **XAML**を使用<xref:System.Windows.PropertyPath>して、の[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]プロパティ参照を属性値として記述する場合は、指定した文字列が最初に型コンバーター (<xref:System.Windows.PropertyPathConverter>) によって処理されます。 その後、この型コンバーターは文字列を処理し、その構文に基づいて<xref:System.Windows.PropertyPath>コンストラクターシグネチャの1つを呼び出します。 属性値を処理する型コンバーターを使用したこの間接参照は<xref:System.Windows.PropertyPath> 、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]オブジェクト要素を宣言し<xref:System.Windows.PropertyPath>た後、やなど<xref:System.Windows.PropertyPath.Path%2A>の属性に特定の値を適用するのではなく、一般的にでを使用する方法です。<xref:System.Windows.PropertyPath.PathParameters%2A>. 詳細については、「 [PROPERTYPATH XAML 構文](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)」を参照してください。  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用  
 <xref:System.Windows.PropertyPath>型のメンバーは、通常、直接[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]の構文では設定されません。 「解説」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
