<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d91ad-101">WeakEvent パターンと <see cref="T:System.Windows.WeakEventManager" /> を通じてイベントを受信するクラスにイベント リスニング サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d91ad-102"><xref:System.Windows.WeakEventManager> (ディスパッチャ) を呼び出してイベントを転送する、<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>このインターフェイスを実装して、呼び出すことによってリスナーとして追加されたクラスのメソッド<xref:System.Windows.WeakEventManager>事前メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d91ad-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="d91ad-103">WeakEvent パターンの主な理由は、イベント ソースがあるオブジェクトの有効期間、イベント リスナーの可能性がありますから独立している場合です。</span><span class="sxs-lookup"><span data-stu-id="d91ad-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="d91ad-104">サーバーの全体のイベントのディスパッチを使用して、<xref:System.Windows.WeakEventManager>により収集 (や手動で削除) がガベージ リスナーにハンドラーは、ソース オブジェクトの有効期間が、リスナーを超える場合でもです。</span><span class="sxs-lookup"><span data-stu-id="d91ad-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="d91ad-105">これに対し、通常のイベント フックアップを使用して、`+=`や構文のと同じ言語に固有のイベント ハンドラーへの強い参照を保持するために、可能性のある接続中のソースが発生します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="d91ad-106">これは、適切なタイミングでガベージ コレクトされないリスナーの参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="d91ad-107">リスナーとソース間のリレーションシップがこのパターンの使用を提案する 1 つの一般的な状況は、データ バインディング用のソースから更新プログラムのイベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="d91ad-108">WeakEvent パターンを使用すると、外部アプリケーションにあるイベントをリッスンします。</span><span class="sxs-lookup"><span data-stu-id="d91ad-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="d91ad-109">のみを定義する必要があります、<xref:System.Windows.WeakEventManager>でリッスンしている動作を指定し、 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>、使用して、<xref:System.Windows.WeakEventManager>参照、ハンドラーをアタッチするのにはなく`+=`です。</span><span class="sxs-lookup"><span data-stu-id="d91ad-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="d91ad-110">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</span><span class="sxs-lookup"><span data-stu-id="d91ad-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="d91ad-111">イベントを発生させたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d91ad-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="d91ad-112">イベント データ。</span><span class="sxs-lookup"><span data-stu-id="d91ad-112">Event data.</span></span></param>
        <summary><span data-ttu-id="d91ad-113">中央のイベント マネージャーからイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-113">Receives events from the centralized event manager.</span></span></summary>
        <returns>
          <span data-ttu-id="d91ad-114">リスナーがイベントを処理した場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="d91ad-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="d91ad-115">リスナーが処理しないイベントに対してそのリスナーを登録した場合、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の <see cref="T:System.Windows.WeakEventManager" /> 処理ではエラーと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d91ad-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="d91ad-116">ただし、リスナーが認識または処理しないイベントを受信した場合は、このメソッドは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d91ad-117">次の例では実装<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>2 つの仮想的なイベントの WeakEvent パターンをサポートする`ClockwiseSpin`と`CounterclockwiseSpin`専用ある<xref:System.Windows.WeakEventManager>(非表示)。</span><span class="sxs-lookup"><span data-stu-id="d91ad-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="d91ad-118">イベント データをキャスト、サポートされている各イベントのクラスのハンドラーのスタブを実装 (ここでは 2 つのイベントがイベントのデータ型を共有`SpinEventArgs`)。</span><span class="sxs-lookup"><span data-stu-id="d91ad-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="d91ad-119">実装を返します`false`受信したイベントが予想される 1 つでない場合。</span><span class="sxs-lookup"><span data-stu-id="d91ad-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="d91ad-120">このメソッドは、受信側がリスナー リスト内にあるすべての可能なイベントを受信するものです。</span><span class="sxs-lookup"><span data-stu-id="d91ad-120">This method is intended to receive all possible events where the receiver is in a listener list.</span></span> <span data-ttu-id="d91ad-121">受信の種類を確認する必要があります複数のイベントをリッスンしているクラスを実装する場合に特に<paramref name="managerType" />呼び出しイベントを知るためにパラメーターに対応します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span></span> <span data-ttu-id="d91ad-122">これが、各イベント、パターンの一部である必要があります専用理由<see cref="T:System.Windows.WeakEventManager" />です。</span><span class="sxs-lookup"><span data-stu-id="d91ad-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span></span> <span data-ttu-id="d91ad-123">また、<paramref name="e" />パラメーターが、一般的なとして型指定された<see cref="T:System.EventArgs" />です。</span><span class="sxs-lookup"><span data-stu-id="d91ad-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span></span> <span data-ttu-id="d91ad-124">そのため、順序でイベント データを使用して特定のプロパティを取得、実装が特定のイベントのデータ型にキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d91ad-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span></span>  
  
 <span data-ttu-id="d91ad-125">基づいたイベントの id を確認した後は、通常、<see cref="T:System.Windows.WeakEventManager" />型、実装には、プライベート クラス ハンドラーを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d91ad-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span></span> <span data-ttu-id="d91ad-126">クラス ハンドラーで、まったく同じクラス ハンドラーを使用して追加の従来のイベント パターンを通じて追加のリスナーのイベントを処理するために使用可能性がありますあるいは<see langword="+=" />イベント送信者にします。</span><span class="sxs-lookup"><span data-stu-id="d91ad-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span></span> <span data-ttu-id="d91ad-127">次の例では、大まかな実装のテンプレートを説明します。</span><span class="sxs-lookup"><span data-stu-id="d91ad-127">The following example section provides a rough implementation template.</span></span></para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>