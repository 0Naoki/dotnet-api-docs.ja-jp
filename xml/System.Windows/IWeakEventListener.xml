<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc2e6a04492a7e98297c411356edd79396b478a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444515" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>WeakEvent パターンと <see cref="T:System.Windows.WeakEventManager" /> を通じてイベントを受信するクラスにイベント リスニング サポートを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ( <xref:System.Windows.WeakEventManager>ディスパッチャー) は、このインターフェイスを実装するクラス<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>に対してメソッドを呼び出し、事前にメソッドを呼び出す<xref:System.Windows.WeakEventManager>ことによってリスナーとして追加されたイベントを転送します。  
  
 WeakEvent パターンに従う主な理由は、イベントソースのオブジェクトの有効期間がイベントリスナーに依存しない可能性がある場合です。 の中心的な<xref:System.Windows.WeakEventManager>イベントディスパッチを使用すると、リスナーのハンドラーをガベージコレクション (または手動で削除) することができます。ソースオブジェクトの有効期間がリスナーを超える場合でも同様です。 これに対して、または同等`+=`の言語固有のイベント構文を使用する通常のイベントフックでは、まだ接続されている可能性のあるソースがハンドラーへの強い参照を保持します。 これにより、リスナー参照がガベージコレクションの対象になります。  
  
 ソースとリスナー間のリレーションシップによってこのパターンの使用が提案される1つの一般的な状況は、データバインディングのソースからの更新イベントの処理です。  
  
 WeakEvent パターンを使用すると、アプリケーションの外部にあるイベントをリッスンできます。 を定義<xref:System.Windows.WeakEventManager>し、でリッスン動作を指定し、を使用<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> <xref:System.Windows.WeakEventManager>してではなく`+=`ハンドラー参照をアタッチするだけです。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
        <param name="sender">イベントを発生させたオブジェクト。</param>
        <param name="e">イベント データ。</param>
        <summary>中央のイベント マネージャーからイベントを受信します。</summary>
        <returns>リスナーがイベントを処理した場合は <see langword="true" />。 リスナーが処理しないイベントに対してそのリスナーを登録した場合、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の <see cref="T:System.Windows.WeakEventManager" /> 処理ではエラーと見なされます。 ただし、リスナーが認識または処理しないイベントを受信した場合は、このメソッドは <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>は、を実装して、2つ`ClockwiseSpin`の`CounterclockwiseSpin`仮定のイベントに対し<xref:System.Windows.WeakEventManager>て WeakEvent パターンのサポートを提供し、それぞれに専用のを持たせます (非表示)。 この実装は、サポートされている各イベントに対してクラスハンドラースタブを呼び出し、イベントデータをキャストします ( `SpinEventArgs`この場合、2つのイベントはイベントデータ型を共有します)。 受信した`false`イベントが予期されるものではない場合、実装はを返します。  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このメソッドは、受信側がリスナーの一覧にある可能性のあるすべてのイベントを受け取ることを目的としています。 特に、複数のイベントをリッスンしているクラスに対してを実装する場合は、呼び出しが<paramref name="managerType" />対応しているイベントを確認するために、受信パラメーターの型をチェックする必要があります。 このため、パターンに含まれる各イベントには専用<see cref="T:System.Windows.WeakEventManager" />のが必要です。 また、 <see cref="T:System.EventArgs" />パラメーターは一般として型指定されます。 <paramref name="e" /> したがって、イベントデータから特定のプロパティを取得するには、実装が特定のイベントデータ型にキャストされる必要があります。  
  
通常、 <see cref="T:System.Windows.WeakEventManager" />型に基づいてイベントの id を確認した後、実装はプライベートクラスハンドラーを呼び出す必要があります。 クラスハンドラーは、送信側のイベントに via <see langword="+=" />を追加する従来のイベントパターンを通じて追加されるリスナーに対して、そのイベントを処理するために使用されるクラスハンドラーと同じであると考えられます。 次の例では、大まかな実装テンプレートについて説明します。</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
