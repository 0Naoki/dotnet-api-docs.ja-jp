<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc2e6a04492a7e98297c411356edd79396b478a7" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70493608" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0cf52-101">WeakEvent パターンと <see cref="T:System.Windows.WeakEventManager" /> を通じてイベントを受信するクラスにイベント リスニング サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0cf52-102">( <xref:System.Windows.WeakEventManager>ディスパッチャー) は、このインターフェイスを実装するクラス<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>に対してメソッドを呼び出し、事前にメソッドを呼び出す<xref:System.Windows.WeakEventManager>ことによってリスナーとして追加されたイベントを転送します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="0cf52-103">WeakEvent パターンに従う主な理由は、イベントソースのオブジェクトの有効期間がイベントリスナーに依存しない可能性がある場合です。</span><span class="sxs-lookup"><span data-stu-id="0cf52-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="0cf52-104">の中心的な<xref:System.Windows.WeakEventManager>イベントディスパッチを使用すると、リスナーのハンドラーをガベージコレクション (または手動で削除) することができます。ソースオブジェクトの有効期間がリスナーを超える場合でも同様です。</span><span class="sxs-lookup"><span data-stu-id="0cf52-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="0cf52-105">これに対して、または同等`+=`の言語固有のイベント構文を使用する通常のイベントフックでは、まだ接続されている可能性のあるソースがハンドラーへの強い参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="0cf52-106">これにより、リスナー参照がガベージコレクションの対象になります。</span><span class="sxs-lookup"><span data-stu-id="0cf52-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="0cf52-107">ソースとリスナー間のリレーションシップによってこのパターンの使用が提案される1つの一般的な状況は、データバインディングのソースからの更新イベントの処理です。</span><span class="sxs-lookup"><span data-stu-id="0cf52-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="0cf52-108">WeakEvent パターンを使用すると、アプリケーションの外部にあるイベントをリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="0cf52-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="0cf52-109">を定義<xref:System.Windows.WeakEventManager>し、でリッスン動作を指定し、を使用<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> <xref:System.Windows.WeakEventManager>してではなく`+=`ハンドラー参照をアタッチするだけです。</span><span class="sxs-lookup"><span data-stu-id="0cf52-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="0cf52-110">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</span><span class="sxs-lookup"><span data-stu-id="0cf52-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="0cf52-111">イベントを発生させたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0cf52-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="0cf52-112">イベント データ。</span><span class="sxs-lookup"><span data-stu-id="0cf52-112">Event data.</span></span></param>
        <summary><span data-ttu-id="0cf52-113">中央のイベント マネージャーからイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-113">Receives events from the centralized event manager.</span></span></summary>
        <returns><span data-ttu-id="0cf52-114">リスナーがイベントを処理した場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="0cf52-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="0cf52-115">リスナーが処理しないイベントに対してそのリスナーを登録した場合、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] の <see cref="T:System.Windows.WeakEventManager" /> 処理ではエラーと見なされます。</span><span class="sxs-lookup"><span data-stu-id="0cf52-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="0cf52-116">ただし、リスナーが認識または処理しないイベントを受信した場合は、このメソッドは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0cf52-117">次の例で<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>は、を実装して、2つ`ClockwiseSpin`の`CounterclockwiseSpin`仮定のイベントに対し<xref:System.Windows.WeakEventManager>て WeakEvent パターンのサポートを提供し、それぞれに専用のを持たせます (非表示)。</span><span class="sxs-lookup"><span data-stu-id="0cf52-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="0cf52-118">この実装は、サポートされている各イベントに対してクラスハンドラースタブを呼び出し、イベントデータをキャストします ( `SpinEventArgs`この場合、2つのイベントはイベントデータ型を共有します)。</span><span class="sxs-lookup"><span data-stu-id="0cf52-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="0cf52-119">受信した`false`イベントが予期されるものではない場合、実装はを返します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0cf52-120">このメソッドは、受信側がリスナーの一覧にある可能性のあるすべてのイベントを受け取ることを目的としています。</span><span class="sxs-lookup"><span data-stu-id="0cf52-120">This method is intended to receive all possible events where the receiver is in a listener list.</span></span> <span data-ttu-id="0cf52-121">特に、複数のイベントをリッスンしているクラスに対してを実装する場合は、呼び出しが<paramref name="managerType" />対応しているイベントを確認するために、受信パラメーターの型をチェックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0cf52-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span></span> <span data-ttu-id="0cf52-122">このため、パターンに含まれる各イベントには専用<see cref="T:System.Windows.WeakEventManager" />のが必要です。</span><span class="sxs-lookup"><span data-stu-id="0cf52-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span></span> <span data-ttu-id="0cf52-123">また、 <see cref="T:System.EventArgs" />パラメーターは一般として型指定されます。 <paramref name="e" /></span><span class="sxs-lookup"><span data-stu-id="0cf52-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span></span> <span data-ttu-id="0cf52-124">したがって、イベントデータから特定のプロパティを取得するには、実装が特定のイベントデータ型にキャストされる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0cf52-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span></span>  
  
<span data-ttu-id="0cf52-125">通常、 <see cref="T:System.Windows.WeakEventManager" />型に基づいてイベントの id を確認した後、実装はプライベートクラスハンドラーを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0cf52-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span></span> <span data-ttu-id="0cf52-126">クラスハンドラーは、送信側のイベントに via <see langword="+=" />を追加する従来のイベントパターンを通じて追加されるリスナーに対して、そのイベントを処理するために使用されるクラスハンドラーと同じであると考えられます。</span><span class="sxs-lookup"><span data-stu-id="0cf52-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span></span> <span data-ttu-id="0cf52-127">次の例では、大まかな実装テンプレートについて説明します。</span><span class="sxs-lookup"><span data-stu-id="0cf52-127">The following example section provides a rough implementation template.</span></span></para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
